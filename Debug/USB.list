
USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fdd0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bd0  0800ff60  0800ff60  0001ff60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010b30  08010b30  00030090  2**0
                  CONTENTS
  4 .ARM          00000008  08010b30  08010b30  00020b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010b38  08010b38  00030090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010b38  08010b38  00020b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010b3c  08010b3c  00020b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08010b40  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030090  2**0
                  CONTENTS
 10 .bss          00004674  20000090  20000090  00030090  2**3
                  ALLOC
 11 ._user_heap_stack 00004004  20004704  20004704  00030090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002a54c  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000504d  00000000  00000000  0005a60c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001188  00000000  00000000  0005f660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001020  00000000  00000000  000607e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026db7  00000000  00000000  00061808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cfbd  00000000  00000000  000885bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cabd8  00000000  00000000  000a557c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00170154  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005514  00000000  00000000  001701a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ff48 	.word	0x0800ff48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	0800ff48 	.word	0x0800ff48

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_dmul>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ae:	bf1d      	ittte	ne
 80002b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002b4:	ea94 0f0c 	teqne	r4, ip
 80002b8:	ea95 0f0c 	teqne	r5, ip
 80002bc:	f000 f8de 	bleq	800047c <__aeabi_dmul+0x1dc>
 80002c0:	442c      	add	r4, r5
 80002c2:	ea81 0603 	eor.w	r6, r1, r3
 80002c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002d2:	bf18      	it	ne
 80002d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002e0:	d038      	beq.n	8000354 <__aeabi_dmul+0xb4>
 80002e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002e6:	f04f 0500 	mov.w	r5, #0
 80002ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002f6:	f04f 0600 	mov.w	r6, #0
 80002fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002fe:	f09c 0f00 	teq	ip, #0
 8000302:	bf18      	it	ne
 8000304:	f04e 0e01 	orrne.w	lr, lr, #1
 8000308:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800030c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000310:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000314:	d204      	bcs.n	8000320 <__aeabi_dmul+0x80>
 8000316:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800031a:	416d      	adcs	r5, r5
 800031c:	eb46 0606 	adc.w	r6, r6, r6
 8000320:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000324:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000328:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800032c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000330:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000334:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000338:	bf88      	it	hi
 800033a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800033e:	d81e      	bhi.n	800037e <__aeabi_dmul+0xde>
 8000340:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000358:	ea46 0101 	orr.w	r1, r6, r1
 800035c:	ea40 0002 	orr.w	r0, r0, r2
 8000360:	ea81 0103 	eor.w	r1, r1, r3
 8000364:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000368:	bfc2      	ittt	gt
 800036a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800036e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000372:	bd70      	popgt	{r4, r5, r6, pc}
 8000374:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000378:	f04f 0e00 	mov.w	lr, #0
 800037c:	3c01      	subs	r4, #1
 800037e:	f300 80ab 	bgt.w	80004d8 <__aeabi_dmul+0x238>
 8000382:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000386:	bfde      	ittt	le
 8000388:	2000      	movle	r0, #0
 800038a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800038e:	bd70      	pople	{r4, r5, r6, pc}
 8000390:	f1c4 0400 	rsb	r4, r4, #0
 8000394:	3c20      	subs	r4, #32
 8000396:	da35      	bge.n	8000404 <__aeabi_dmul+0x164>
 8000398:	340c      	adds	r4, #12
 800039a:	dc1b      	bgt.n	80003d4 <__aeabi_dmul+0x134>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0520 	rsb	r5, r4, #32
 80003a4:	fa00 f305 	lsl.w	r3, r0, r5
 80003a8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea40 0002 	orr.w	r0, r0, r2
 80003b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c0:	fa21 f604 	lsr.w	r6, r1, r4
 80003c4:	eb42 0106 	adc.w	r1, r2, r6
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 040c 	rsb	r4, r4, #12
 80003d8:	f1c4 0520 	rsb	r5, r4, #32
 80003dc:	fa00 f304 	lsl.w	r3, r0, r4
 80003e0:	fa20 f005 	lsr.w	r0, r0, r5
 80003e4:	fa01 f204 	lsl.w	r2, r1, r4
 80003e8:	ea40 0002 	orr.w	r0, r0, r2
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f4:	f141 0100 	adc.w	r1, r1, #0
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 0520 	rsb	r5, r4, #32
 8000408:	fa00 f205 	lsl.w	r2, r0, r5
 800040c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000410:	fa20 f304 	lsr.w	r3, r0, r4
 8000414:	fa01 f205 	lsl.w	r2, r1, r5
 8000418:	ea43 0302 	orr.w	r3, r3, r2
 800041c:	fa21 f004 	lsr.w	r0, r1, r4
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	fa21 f204 	lsr.w	r2, r1, r4
 8000428:	ea20 0002 	bic.w	r0, r0, r2
 800042c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000434:	bf08      	it	eq
 8000436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f094 0f00 	teq	r4, #0
 8000440:	d10f      	bne.n	8000462 <__aeabi_dmul+0x1c2>
 8000442:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000446:	0040      	lsls	r0, r0, #1
 8000448:	eb41 0101 	adc.w	r1, r1, r1
 800044c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3c01      	subeq	r4, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1a6>
 8000456:	ea41 0106 	orr.w	r1, r1, r6
 800045a:	f095 0f00 	teq	r5, #0
 800045e:	bf18      	it	ne
 8000460:	4770      	bxne	lr
 8000462:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	eb43 0303 	adc.w	r3, r3, r3
 800046c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3d01      	subeq	r5, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1c6>
 8000476:	ea43 0306 	orr.w	r3, r3, r6
 800047a:	4770      	bx	lr
 800047c:	ea94 0f0c 	teq	r4, ip
 8000480:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000484:	bf18      	it	ne
 8000486:	ea95 0f0c 	teqne	r5, ip
 800048a:	d00c      	beq.n	80004a6 <__aeabi_dmul+0x206>
 800048c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000490:	bf18      	it	ne
 8000492:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000496:	d1d1      	bne.n	800043c <__aeabi_dmul+0x19c>
 8000498:	ea81 0103 	eor.w	r1, r1, r3
 800049c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd70      	pop	{r4, r5, r6, pc}
 80004a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004aa:	bf06      	itte	eq
 80004ac:	4610      	moveq	r0, r2
 80004ae:	4619      	moveq	r1, r3
 80004b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b4:	d019      	beq.n	80004ea <__aeabi_dmul+0x24a>
 80004b6:	ea94 0f0c 	teq	r4, ip
 80004ba:	d102      	bne.n	80004c2 <__aeabi_dmul+0x222>
 80004bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004c0:	d113      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004c2:	ea95 0f0c 	teq	r5, ip
 80004c6:	d105      	bne.n	80004d4 <__aeabi_dmul+0x234>
 80004c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004cc:	bf1c      	itt	ne
 80004ce:	4610      	movne	r0, r2
 80004d0:	4619      	movne	r1, r3
 80004d2:	d10a      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004d4:	ea81 0103 	eor.w	r1, r1, r3
 80004d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd70      	pop	{r4, r5, r6, pc}
 80004ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004f2:	bd70      	pop	{r4, r5, r6, pc}

080004f4 <__aeabi_drsub>:
 80004f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e002      	b.n	8000500 <__adddf3>
 80004fa:	bf00      	nop

080004fc <__aeabi_dsub>:
 80004fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000500 <__adddf3>:
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000506:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800050a:	ea94 0f05 	teq	r4, r5
 800050e:	bf08      	it	eq
 8000510:	ea90 0f02 	teqeq	r0, r2
 8000514:	bf1f      	itttt	ne
 8000516:	ea54 0c00 	orrsne.w	ip, r4, r0
 800051a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800051e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000522:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000526:	f000 80e2 	beq.w	80006ee <__adddf3+0x1ee>
 800052a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800052e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000532:	bfb8      	it	lt
 8000534:	426d      	neglt	r5, r5
 8000536:	dd0c      	ble.n	8000552 <__adddf3+0x52>
 8000538:	442c      	add	r4, r5
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	ea82 0000 	eor.w	r0, r2, r0
 8000546:	ea83 0101 	eor.w	r1, r3, r1
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	2d36      	cmp	r5, #54	; 0x36
 8000554:	bf88      	it	hi
 8000556:	bd30      	pophi	{r4, r5, pc}
 8000558:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800055c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000560:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000564:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000568:	d002      	beq.n	8000570 <__adddf3+0x70>
 800056a:	4240      	negs	r0, r0
 800056c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000570:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000574:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000578:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800057c:	d002      	beq.n	8000584 <__adddf3+0x84>
 800057e:	4252      	negs	r2, r2
 8000580:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000584:	ea94 0f05 	teq	r4, r5
 8000588:	f000 80a7 	beq.w	80006da <__adddf3+0x1da>
 800058c:	f1a4 0401 	sub.w	r4, r4, #1
 8000590:	f1d5 0e20 	rsbs	lr, r5, #32
 8000594:	db0d      	blt.n	80005b2 <__adddf3+0xb2>
 8000596:	fa02 fc0e 	lsl.w	ip, r2, lr
 800059a:	fa22 f205 	lsr.w	r2, r2, r5
 800059e:	1880      	adds	r0, r0, r2
 80005a0:	f141 0100 	adc.w	r1, r1, #0
 80005a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005a8:	1880      	adds	r0, r0, r2
 80005aa:	fa43 f305 	asr.w	r3, r3, r5
 80005ae:	4159      	adcs	r1, r3
 80005b0:	e00e      	b.n	80005d0 <__adddf3+0xd0>
 80005b2:	f1a5 0520 	sub.w	r5, r5, #32
 80005b6:	f10e 0e20 	add.w	lr, lr, #32
 80005ba:	2a01      	cmp	r2, #1
 80005bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005c0:	bf28      	it	cs
 80005c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005c6:	fa43 f305 	asr.w	r3, r3, r5
 80005ca:	18c0      	adds	r0, r0, r3
 80005cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	d507      	bpl.n	80005e6 <__adddf3+0xe6>
 80005d6:	f04f 0e00 	mov.w	lr, #0
 80005da:	f1dc 0c00 	rsbs	ip, ip, #0
 80005de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ea:	d31b      	bcc.n	8000624 <__adddf3+0x124>
 80005ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005f0:	d30c      	bcc.n	800060c <__adddf3+0x10c>
 80005f2:	0849      	lsrs	r1, r1, #1
 80005f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005fc:	f104 0401 	add.w	r4, r4, #1
 8000600:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000604:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000608:	f080 809a 	bcs.w	8000740 <__adddf3+0x240>
 800060c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	ea41 0105 	orr.w	r1, r1, r5
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000628:	4140      	adcs	r0, r0
 800062a:	eb41 0101 	adc.w	r1, r1, r1
 800062e:	3c01      	subs	r4, #1
 8000630:	bf28      	it	cs
 8000632:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000636:	d2e9      	bcs.n	800060c <__adddf3+0x10c>
 8000638:	f091 0f00 	teq	r1, #0
 800063c:	bf04      	itt	eq
 800063e:	4601      	moveq	r1, r0
 8000640:	2000      	moveq	r0, #0
 8000642:	fab1 f381 	clz	r3, r1
 8000646:	bf08      	it	eq
 8000648:	3320      	addeq	r3, #32
 800064a:	f1a3 030b 	sub.w	r3, r3, #11
 800064e:	f1b3 0220 	subs.w	r2, r3, #32
 8000652:	da0c      	bge.n	800066e <__adddf3+0x16e>
 8000654:	320c      	adds	r2, #12
 8000656:	dd08      	ble.n	800066a <__adddf3+0x16a>
 8000658:	f102 0c14 	add.w	ip, r2, #20
 800065c:	f1c2 020c 	rsb	r2, r2, #12
 8000660:	fa01 f00c 	lsl.w	r0, r1, ip
 8000664:	fa21 f102 	lsr.w	r1, r1, r2
 8000668:	e00c      	b.n	8000684 <__adddf3+0x184>
 800066a:	f102 0214 	add.w	r2, r2, #20
 800066e:	bfd8      	it	le
 8000670:	f1c2 0c20 	rsble	ip, r2, #32
 8000674:	fa01 f102 	lsl.w	r1, r1, r2
 8000678:	fa20 fc0c 	lsr.w	ip, r0, ip
 800067c:	bfdc      	itt	le
 800067e:	ea41 010c 	orrle.w	r1, r1, ip
 8000682:	4090      	lslle	r0, r2
 8000684:	1ae4      	subs	r4, r4, r3
 8000686:	bfa2      	ittt	ge
 8000688:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800068c:	4329      	orrge	r1, r5
 800068e:	bd30      	popge	{r4, r5, pc}
 8000690:	ea6f 0404 	mvn.w	r4, r4
 8000694:	3c1f      	subs	r4, #31
 8000696:	da1c      	bge.n	80006d2 <__adddf3+0x1d2>
 8000698:	340c      	adds	r4, #12
 800069a:	dc0e      	bgt.n	80006ba <__adddf3+0x1ba>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0220 	rsb	r2, r4, #32
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ac:	ea40 0003 	orr.w	r0, r0, r3
 80006b0:	fa21 f304 	lsr.w	r3, r1, r4
 80006b4:	ea45 0103 	orr.w	r1, r5, r3
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f1c4 040c 	rsb	r4, r4, #12
 80006be:	f1c4 0220 	rsb	r2, r4, #32
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ca:	ea40 0003 	orr.w	r0, r0, r3
 80006ce:	4629      	mov	r1, r5
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	fa21 f004 	lsr.w	r0, r1, r4
 80006d6:	4629      	mov	r1, r5
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f094 0f00 	teq	r4, #0
 80006de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006e2:	bf06      	itte	eq
 80006e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006e8:	3401      	addeq	r4, #1
 80006ea:	3d01      	subne	r5, #1
 80006ec:	e74e      	b.n	800058c <__adddf3+0x8c>
 80006ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006f2:	bf18      	it	ne
 80006f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f8:	d029      	beq.n	800074e <__adddf3+0x24e>
 80006fa:	ea94 0f05 	teq	r4, r5
 80006fe:	bf08      	it	eq
 8000700:	ea90 0f02 	teqeq	r0, r2
 8000704:	d005      	beq.n	8000712 <__adddf3+0x212>
 8000706:	ea54 0c00 	orrs.w	ip, r4, r0
 800070a:	bf04      	itt	eq
 800070c:	4619      	moveq	r1, r3
 800070e:	4610      	moveq	r0, r2
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	ea91 0f03 	teq	r1, r3
 8000716:	bf1e      	ittt	ne
 8000718:	2100      	movne	r1, #0
 800071a:	2000      	movne	r0, #0
 800071c:	bd30      	popne	{r4, r5, pc}
 800071e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000722:	d105      	bne.n	8000730 <__adddf3+0x230>
 8000724:	0040      	lsls	r0, r0, #1
 8000726:	4149      	adcs	r1, r1
 8000728:	bf28      	it	cs
 800072a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd30      	pop	{r4, r5, pc}
 8000730:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000734:	bf3c      	itt	cc
 8000736:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800073a:	bd30      	popcc	{r4, r5, pc}
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000744:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000752:	bf1a      	itte	ne
 8000754:	4619      	movne	r1, r3
 8000756:	4610      	movne	r0, r2
 8000758:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800075c:	bf1c      	itt	ne
 800075e:	460b      	movne	r3, r1
 8000760:	4602      	movne	r2, r0
 8000762:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000766:	bf06      	itte	eq
 8000768:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800076c:	ea91 0f03 	teqeq	r1, r3
 8000770:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	bf00      	nop

08000778 <__aeabi_ui2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f04f 0500 	mov.w	r5, #0
 8000790:	f04f 0100 	mov.w	r1, #0
 8000794:	e750      	b.n	8000638 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_i2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007b0:	bf48      	it	mi
 80007b2:	4240      	negmi	r0, r0
 80007b4:	f04f 0100 	mov.w	r1, #0
 80007b8:	e73e      	b.n	8000638 <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_f2d>:
 80007bc:	0042      	lsls	r2, r0, #1
 80007be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ca:	bf1f      	itttt	ne
 80007cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007d8:	4770      	bxne	lr
 80007da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007de:	bf08      	it	eq
 80007e0:	4770      	bxeq	lr
 80007e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007e6:	bf04      	itt	eq
 80007e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007ec:	4770      	bxeq	lr
 80007ee:	b530      	push	{r4, r5, lr}
 80007f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	e71c      	b.n	8000638 <__adddf3+0x138>
 80007fe:	bf00      	nop

08000800 <__aeabi_ul2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f04f 0500 	mov.w	r5, #0
 800080e:	e00a      	b.n	8000826 <__aeabi_l2d+0x16>

08000810 <__aeabi_l2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800081e:	d502      	bpl.n	8000826 <__aeabi_l2d+0x16>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800082a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800082e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000832:	f43f aed8 	beq.w	80005e6 <__adddf3+0xe6>
 8000836:	f04f 0203 	mov.w	r2, #3
 800083a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083e:	bf18      	it	ne
 8000840:	3203      	addne	r2, #3
 8000842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000846:	bf18      	it	ne
 8000848:	3203      	addne	r2, #3
 800084a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800084e:	f1c2 0320 	rsb	r3, r2, #32
 8000852:	fa00 fc03 	lsl.w	ip, r0, r3
 8000856:	fa20 f002 	lsr.w	r0, r0, r2
 800085a:	fa01 fe03 	lsl.w	lr, r1, r3
 800085e:	ea40 000e 	orr.w	r0, r0, lr
 8000862:	fa21 f102 	lsr.w	r1, r1, r2
 8000866:	4414      	add	r4, r2
 8000868:	e6bd      	b.n	80005e6 <__adddf3+0xe6>
 800086a:	bf00      	nop

0800086c <__aeabi_d2uiz>:
 800086c:	004a      	lsls	r2, r1, #1
 800086e:	d211      	bcs.n	8000894 <__aeabi_d2uiz+0x28>
 8000870:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000874:	d211      	bcs.n	800089a <__aeabi_d2uiz+0x2e>
 8000876:	d50d      	bpl.n	8000894 <__aeabi_d2uiz+0x28>
 8000878:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800087c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000880:	d40e      	bmi.n	80008a0 <__aeabi_d2uiz+0x34>
 8000882:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000886:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800088a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800088e:	fa23 f002 	lsr.w	r0, r3, r2
 8000892:	4770      	bx	lr
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	4770      	bx	lr
 800089a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800089e:	d102      	bne.n	80008a6 <__aeabi_d2uiz+0x3a>
 80008a0:	f04f 30ff 	mov.w	r0, #4294967295
 80008a4:	4770      	bx	lr
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	4770      	bx	lr

080008ac <__aeabi_uldivmod>:
 80008ac:	b953      	cbnz	r3, 80008c4 <__aeabi_uldivmod+0x18>
 80008ae:	b94a      	cbnz	r2, 80008c4 <__aeabi_uldivmod+0x18>
 80008b0:	2900      	cmp	r1, #0
 80008b2:	bf08      	it	eq
 80008b4:	2800      	cmpeq	r0, #0
 80008b6:	bf1c      	itt	ne
 80008b8:	f04f 31ff 	movne.w	r1, #4294967295
 80008bc:	f04f 30ff 	movne.w	r0, #4294967295
 80008c0:	f000 b96e 	b.w	8000ba0 <__aeabi_idiv0>
 80008c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008cc:	f000 f806 	bl	80008dc <__udivmoddi4>
 80008d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008d8:	b004      	add	sp, #16
 80008da:	4770      	bx	lr

080008dc <__udivmoddi4>:
 80008dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008e0:	9d08      	ldr	r5, [sp, #32]
 80008e2:	4604      	mov	r4, r0
 80008e4:	468c      	mov	ip, r1
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	f040 8083 	bne.w	80009f2 <__udivmoddi4+0x116>
 80008ec:	428a      	cmp	r2, r1
 80008ee:	4617      	mov	r7, r2
 80008f0:	d947      	bls.n	8000982 <__udivmoddi4+0xa6>
 80008f2:	fab2 f282 	clz	r2, r2
 80008f6:	b142      	cbz	r2, 800090a <__udivmoddi4+0x2e>
 80008f8:	f1c2 0020 	rsb	r0, r2, #32
 80008fc:	fa24 f000 	lsr.w	r0, r4, r0
 8000900:	4091      	lsls	r1, r2
 8000902:	4097      	lsls	r7, r2
 8000904:	ea40 0c01 	orr.w	ip, r0, r1
 8000908:	4094      	lsls	r4, r2
 800090a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800090e:	0c23      	lsrs	r3, r4, #16
 8000910:	fbbc f6f8 	udiv	r6, ip, r8
 8000914:	fa1f fe87 	uxth.w	lr, r7
 8000918:	fb08 c116 	mls	r1, r8, r6, ip
 800091c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000920:	fb06 f10e 	mul.w	r1, r6, lr
 8000924:	4299      	cmp	r1, r3
 8000926:	d909      	bls.n	800093c <__udivmoddi4+0x60>
 8000928:	18fb      	adds	r3, r7, r3
 800092a:	f106 30ff 	add.w	r0, r6, #4294967295
 800092e:	f080 8119 	bcs.w	8000b64 <__udivmoddi4+0x288>
 8000932:	4299      	cmp	r1, r3
 8000934:	f240 8116 	bls.w	8000b64 <__udivmoddi4+0x288>
 8000938:	3e02      	subs	r6, #2
 800093a:	443b      	add	r3, r7
 800093c:	1a5b      	subs	r3, r3, r1
 800093e:	b2a4      	uxth	r4, r4
 8000940:	fbb3 f0f8 	udiv	r0, r3, r8
 8000944:	fb08 3310 	mls	r3, r8, r0, r3
 8000948:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800094c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000950:	45a6      	cmp	lr, r4
 8000952:	d909      	bls.n	8000968 <__udivmoddi4+0x8c>
 8000954:	193c      	adds	r4, r7, r4
 8000956:	f100 33ff 	add.w	r3, r0, #4294967295
 800095a:	f080 8105 	bcs.w	8000b68 <__udivmoddi4+0x28c>
 800095e:	45a6      	cmp	lr, r4
 8000960:	f240 8102 	bls.w	8000b68 <__udivmoddi4+0x28c>
 8000964:	3802      	subs	r0, #2
 8000966:	443c      	add	r4, r7
 8000968:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800096c:	eba4 040e 	sub.w	r4, r4, lr
 8000970:	2600      	movs	r6, #0
 8000972:	b11d      	cbz	r5, 800097c <__udivmoddi4+0xa0>
 8000974:	40d4      	lsrs	r4, r2
 8000976:	2300      	movs	r3, #0
 8000978:	e9c5 4300 	strd	r4, r3, [r5]
 800097c:	4631      	mov	r1, r6
 800097e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000982:	b902      	cbnz	r2, 8000986 <__udivmoddi4+0xaa>
 8000984:	deff      	udf	#255	; 0xff
 8000986:	fab2 f282 	clz	r2, r2
 800098a:	2a00      	cmp	r2, #0
 800098c:	d150      	bne.n	8000a30 <__udivmoddi4+0x154>
 800098e:	1bcb      	subs	r3, r1, r7
 8000990:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000994:	fa1f f887 	uxth.w	r8, r7
 8000998:	2601      	movs	r6, #1
 800099a:	fbb3 fcfe 	udiv	ip, r3, lr
 800099e:	0c21      	lsrs	r1, r4, #16
 80009a0:	fb0e 331c 	mls	r3, lr, ip, r3
 80009a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009a8:	fb08 f30c 	mul.w	r3, r8, ip
 80009ac:	428b      	cmp	r3, r1
 80009ae:	d907      	bls.n	80009c0 <__udivmoddi4+0xe4>
 80009b0:	1879      	adds	r1, r7, r1
 80009b2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80009b6:	d202      	bcs.n	80009be <__udivmoddi4+0xe2>
 80009b8:	428b      	cmp	r3, r1
 80009ba:	f200 80e9 	bhi.w	8000b90 <__udivmoddi4+0x2b4>
 80009be:	4684      	mov	ip, r0
 80009c0:	1ac9      	subs	r1, r1, r3
 80009c2:	b2a3      	uxth	r3, r4
 80009c4:	fbb1 f0fe 	udiv	r0, r1, lr
 80009c8:	fb0e 1110 	mls	r1, lr, r0, r1
 80009cc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80009d0:	fb08 f800 	mul.w	r8, r8, r0
 80009d4:	45a0      	cmp	r8, r4
 80009d6:	d907      	bls.n	80009e8 <__udivmoddi4+0x10c>
 80009d8:	193c      	adds	r4, r7, r4
 80009da:	f100 33ff 	add.w	r3, r0, #4294967295
 80009de:	d202      	bcs.n	80009e6 <__udivmoddi4+0x10a>
 80009e0:	45a0      	cmp	r8, r4
 80009e2:	f200 80d9 	bhi.w	8000b98 <__udivmoddi4+0x2bc>
 80009e6:	4618      	mov	r0, r3
 80009e8:	eba4 0408 	sub.w	r4, r4, r8
 80009ec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80009f0:	e7bf      	b.n	8000972 <__udivmoddi4+0x96>
 80009f2:	428b      	cmp	r3, r1
 80009f4:	d909      	bls.n	8000a0a <__udivmoddi4+0x12e>
 80009f6:	2d00      	cmp	r5, #0
 80009f8:	f000 80b1 	beq.w	8000b5e <__udivmoddi4+0x282>
 80009fc:	2600      	movs	r6, #0
 80009fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000a02:	4630      	mov	r0, r6
 8000a04:	4631      	mov	r1, r6
 8000a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a0a:	fab3 f683 	clz	r6, r3
 8000a0e:	2e00      	cmp	r6, #0
 8000a10:	d14a      	bne.n	8000aa8 <__udivmoddi4+0x1cc>
 8000a12:	428b      	cmp	r3, r1
 8000a14:	d302      	bcc.n	8000a1c <__udivmoddi4+0x140>
 8000a16:	4282      	cmp	r2, r0
 8000a18:	f200 80b8 	bhi.w	8000b8c <__udivmoddi4+0x2b0>
 8000a1c:	1a84      	subs	r4, r0, r2
 8000a1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000a22:	2001      	movs	r0, #1
 8000a24:	468c      	mov	ip, r1
 8000a26:	2d00      	cmp	r5, #0
 8000a28:	d0a8      	beq.n	800097c <__udivmoddi4+0xa0>
 8000a2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a2e:	e7a5      	b.n	800097c <__udivmoddi4+0xa0>
 8000a30:	f1c2 0320 	rsb	r3, r2, #32
 8000a34:	fa20 f603 	lsr.w	r6, r0, r3
 8000a38:	4097      	lsls	r7, r2
 8000a3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a42:	40d9      	lsrs	r1, r3
 8000a44:	4330      	orrs	r0, r6
 8000a46:	0c03      	lsrs	r3, r0, #16
 8000a48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a4c:	fa1f f887 	uxth.w	r8, r7
 8000a50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a58:	fb06 f108 	mul.w	r1, r6, r8
 8000a5c:	4299      	cmp	r1, r3
 8000a5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a62:	d909      	bls.n	8000a78 <__udivmoddi4+0x19c>
 8000a64:	18fb      	adds	r3, r7, r3
 8000a66:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a6a:	f080 808d 	bcs.w	8000b88 <__udivmoddi4+0x2ac>
 8000a6e:	4299      	cmp	r1, r3
 8000a70:	f240 808a 	bls.w	8000b88 <__udivmoddi4+0x2ac>
 8000a74:	3e02      	subs	r6, #2
 8000a76:	443b      	add	r3, r7
 8000a78:	1a5b      	subs	r3, r3, r1
 8000a7a:	b281      	uxth	r1, r0
 8000a7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a88:	fb00 f308 	mul.w	r3, r0, r8
 8000a8c:	428b      	cmp	r3, r1
 8000a8e:	d907      	bls.n	8000aa0 <__udivmoddi4+0x1c4>
 8000a90:	1879      	adds	r1, r7, r1
 8000a92:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a96:	d273      	bcs.n	8000b80 <__udivmoddi4+0x2a4>
 8000a98:	428b      	cmp	r3, r1
 8000a9a:	d971      	bls.n	8000b80 <__udivmoddi4+0x2a4>
 8000a9c:	3802      	subs	r0, #2
 8000a9e:	4439      	add	r1, r7
 8000aa0:	1acb      	subs	r3, r1, r3
 8000aa2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000aa6:	e778      	b.n	800099a <__udivmoddi4+0xbe>
 8000aa8:	f1c6 0c20 	rsb	ip, r6, #32
 8000aac:	fa03 f406 	lsl.w	r4, r3, r6
 8000ab0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ab4:	431c      	orrs	r4, r3
 8000ab6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000aba:	fa01 f306 	lsl.w	r3, r1, r6
 8000abe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ac2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ac6:	431f      	orrs	r7, r3
 8000ac8:	0c3b      	lsrs	r3, r7, #16
 8000aca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ace:	fa1f f884 	uxth.w	r8, r4
 8000ad2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ad6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ada:	fb09 fa08 	mul.w	sl, r9, r8
 8000ade:	458a      	cmp	sl, r1
 8000ae0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ae4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ae8:	d908      	bls.n	8000afc <__udivmoddi4+0x220>
 8000aea:	1861      	adds	r1, r4, r1
 8000aec:	f109 30ff 	add.w	r0, r9, #4294967295
 8000af0:	d248      	bcs.n	8000b84 <__udivmoddi4+0x2a8>
 8000af2:	458a      	cmp	sl, r1
 8000af4:	d946      	bls.n	8000b84 <__udivmoddi4+0x2a8>
 8000af6:	f1a9 0902 	sub.w	r9, r9, #2
 8000afa:	4421      	add	r1, r4
 8000afc:	eba1 010a 	sub.w	r1, r1, sl
 8000b00:	b2bf      	uxth	r7, r7
 8000b02:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b06:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b0a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000b0e:	fb00 f808 	mul.w	r8, r0, r8
 8000b12:	45b8      	cmp	r8, r7
 8000b14:	d907      	bls.n	8000b26 <__udivmoddi4+0x24a>
 8000b16:	19e7      	adds	r7, r4, r7
 8000b18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b1c:	d22e      	bcs.n	8000b7c <__udivmoddi4+0x2a0>
 8000b1e:	45b8      	cmp	r8, r7
 8000b20:	d92c      	bls.n	8000b7c <__udivmoddi4+0x2a0>
 8000b22:	3802      	subs	r0, #2
 8000b24:	4427      	add	r7, r4
 8000b26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b2a:	eba7 0708 	sub.w	r7, r7, r8
 8000b2e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b32:	454f      	cmp	r7, r9
 8000b34:	46c6      	mov	lr, r8
 8000b36:	4649      	mov	r1, r9
 8000b38:	d31a      	bcc.n	8000b70 <__udivmoddi4+0x294>
 8000b3a:	d017      	beq.n	8000b6c <__udivmoddi4+0x290>
 8000b3c:	b15d      	cbz	r5, 8000b56 <__udivmoddi4+0x27a>
 8000b3e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b42:	eb67 0701 	sbc.w	r7, r7, r1
 8000b46:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b4a:	40f2      	lsrs	r2, r6
 8000b4c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b50:	40f7      	lsrs	r7, r6
 8000b52:	e9c5 2700 	strd	r2, r7, [r5]
 8000b56:	2600      	movs	r6, #0
 8000b58:	4631      	mov	r1, r6
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	462e      	mov	r6, r5
 8000b60:	4628      	mov	r0, r5
 8000b62:	e70b      	b.n	800097c <__udivmoddi4+0xa0>
 8000b64:	4606      	mov	r6, r0
 8000b66:	e6e9      	b.n	800093c <__udivmoddi4+0x60>
 8000b68:	4618      	mov	r0, r3
 8000b6a:	e6fd      	b.n	8000968 <__udivmoddi4+0x8c>
 8000b6c:	4543      	cmp	r3, r8
 8000b6e:	d2e5      	bcs.n	8000b3c <__udivmoddi4+0x260>
 8000b70:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b74:	eb69 0104 	sbc.w	r1, r9, r4
 8000b78:	3801      	subs	r0, #1
 8000b7a:	e7df      	b.n	8000b3c <__udivmoddi4+0x260>
 8000b7c:	4608      	mov	r0, r1
 8000b7e:	e7d2      	b.n	8000b26 <__udivmoddi4+0x24a>
 8000b80:	4660      	mov	r0, ip
 8000b82:	e78d      	b.n	8000aa0 <__udivmoddi4+0x1c4>
 8000b84:	4681      	mov	r9, r0
 8000b86:	e7b9      	b.n	8000afc <__udivmoddi4+0x220>
 8000b88:	4666      	mov	r6, ip
 8000b8a:	e775      	b.n	8000a78 <__udivmoddi4+0x19c>
 8000b8c:	4630      	mov	r0, r6
 8000b8e:	e74a      	b.n	8000a26 <__udivmoddi4+0x14a>
 8000b90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b94:	4439      	add	r1, r7
 8000b96:	e713      	b.n	80009c0 <__udivmoddi4+0xe4>
 8000b98:	3802      	subs	r0, #2
 8000b9a:	443c      	add	r4, r7
 8000b9c:	e724      	b.n	80009e8 <__udivmoddi4+0x10c>
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_idiv0>:
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;

uint8_t rxBuffer[64] = {0};

void Send_Uart (char *string){
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(UART, (uint8_t *)string, strlen(string), HAL_MAX_DELAY);
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f7ff fb19 	bl	80001e4 <strlen>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	b29a      	uxth	r2, r3
 8000bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bba:	6879      	ldr	r1, [r7, #4]
 8000bbc:	4803      	ldr	r0, [pc, #12]	; (8000bcc <Send_Uart+0x28>)
 8000bbe:	f003 fbe0 	bl	8004382 <HAL_UART_Transmit>

}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000a64 	.word	0x20000a64

08000bd0 <Mount_USB>:
	HAL_UART_Receive(UART, rxBuffer, 64, HAL_MAX_DELAY);
	return (char*)rxBuffer;
}


int Mount_USB (void){
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
	if ((fresult = f_mount(&USBHFatFS, USBHPath, 1)) != FR_OK){
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	490b      	ldr	r1, [pc, #44]	; (8000c04 <Mount_USB+0x34>)
 8000bd8:	480b      	ldr	r0, [pc, #44]	; (8000c08 <Mount_USB+0x38>)
 8000bda:	f00b fc17 	bl	800c40c <f_mount>
 8000bde:	4603      	mov	r3, r0
 8000be0:	461a      	mov	r2, r3
 8000be2:	4b0a      	ldr	r3, [pc, #40]	; (8000c0c <Mount_USB+0x3c>)
 8000be4:	701a      	strb	r2, [r3, #0]
 8000be6:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <Mount_USB+0x3c>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d004      	beq.n	8000bf8 <Mount_USB+0x28>
		Send_Uart ("ERROR!!! in mounting USB ...\n\n");
 8000bee:	4808      	ldr	r0, [pc, #32]	; (8000c10 <Mount_USB+0x40>)
 8000bf0:	f7ff ffd8 	bl	8000ba4 <Send_Uart>
		return 1;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	e003      	b.n	8000c00 <Mount_USB+0x30>
	}
	else{
		Send_Uart("USB mounted successfully...\n");
 8000bf8:	4806      	ldr	r0, [pc, #24]	; (8000c14 <Mount_USB+0x44>)
 8000bfa:	f7ff ffd3 	bl	8000ba4 <Send_Uart>
		return 0;
 8000bfe:	2300      	movs	r3, #0
	}
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000ab0 	.word	0x20000ab0
 8000c08:	20001b10 	.word	0x20001b10
 8000c0c:	2000093c 	.word	0x2000093c
 8000c10:	0800ff74 	.word	0x0800ff74
 8000c14:	0800ff94 	.word	0x0800ff94

08000c18 <Unmount_USB>:

int Unmount_USB (void){
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
	if ((fresult = f_mount(NULL, USBHPath, 1)) == FR_OK){
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	490b      	ldr	r1, [pc, #44]	; (8000c4c <Unmount_USB+0x34>)
 8000c20:	2000      	movs	r0, #0
 8000c22:	f00b fbf3 	bl	800c40c <f_mount>
 8000c26:	4603      	mov	r3, r0
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <Unmount_USB+0x38>)
 8000c2c:	701a      	strb	r2, [r3, #0]
 8000c2e:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <Unmount_USB+0x38>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d104      	bne.n	8000c40 <Unmount_USB+0x28>
		Send_Uart ("USB UNMOUNTED successfully...\n\n\n");
 8000c36:	4807      	ldr	r0, [pc, #28]	; (8000c54 <Unmount_USB+0x3c>)
 8000c38:	f7ff ffb4 	bl	8000ba4 <Send_Uart>
		return 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	e003      	b.n	8000c48 <Unmount_USB+0x30>
	}

	else{
		Send_Uart("ERROR!!! in UNMOUNTING USB \n\n\n");
 8000c40:	4805      	ldr	r0, [pc, #20]	; (8000c58 <Unmount_USB+0x40>)
 8000c42:	f7ff ffaf 	bl	8000ba4 <Send_Uart>
		return 1;
 8000c46:	2301      	movs	r3, #1
	}
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000ab0 	.word	0x20000ab0
 8000c50:	2000093c 	.word	0x2000093c
 8000c54:	0800ffb4 	.word	0x0800ffb4
 8000c58:	0800ffd8 	.word	0x0800ffd8

08000c5c <Scan_USB>:

/* Start node to be scanned (***also used as work area***) */
FRESULT Scan_USB (char* pat){
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b09c      	sub	sp, #112	; 0x70
 8000c60:	af02      	add	r7, sp, #8
 8000c62:	6078      	str	r0, [r7, #4]
    DIR dir;
    UINT i;
    char *path = malloc(20*sizeof (char));
 8000c64:	2014      	movs	r0, #20
 8000c66:	f00d f8bb 	bl	800dde0 <malloc>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	667b      	str	r3, [r7, #100]	; 0x64
    sprintf (path, "%s",pat);
 8000c6e:	687a      	ldr	r2, [r7, #4]
 8000c70:	4949      	ldr	r1, [pc, #292]	; (8000d98 <Scan_USB+0x13c>)
 8000c72:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000c74:	f00d fb34 	bl	800e2e0 <siprintf>

                         /* Open the directory */
    if (( fresult = f_opendir(&dir, path)) == FR_OK){
 8000c78:	f107 0308 	add.w	r3, r7, #8
 8000c7c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f00c f98f 	bl	800cfa2 <f_opendir>
 8000c84:	4603      	mov	r3, r0
 8000c86:	461a      	mov	r2, r3
 8000c88:	4b44      	ldr	r3, [pc, #272]	; (8000d9c <Scan_USB+0x140>)
 8000c8a:	701a      	strb	r2, [r3, #0]
 8000c8c:	4b43      	ldr	r3, [pc, #268]	; (8000d9c <Scan_USB+0x140>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d178      	bne.n	8000d86 <Scan_USB+0x12a>

    	for (;;){
                               /* Read a directory item */
            if ((fresult = f_readdir(&dir, &USBHfno)) != FR_OK || USBHfno.fname[0] == 0)
 8000c94:	f107 0308 	add.w	r3, r7, #8
 8000c98:	4941      	ldr	r1, [pc, #260]	; (8000da0 <Scan_USB+0x144>)
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f00c fa50 	bl	800d140 <f_readdir>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	4b3d      	ldr	r3, [pc, #244]	; (8000d9c <Scan_USB+0x140>)
 8000ca6:	701a      	strb	r2, [r3, #0]
 8000ca8:	4b3c      	ldr	r3, [pc, #240]	; (8000d9c <Scan_USB+0x140>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d165      	bne.n	8000d7c <Scan_USB+0x120>
 8000cb0:	4b3b      	ldr	r3, [pc, #236]	; (8000da0 <Scan_USB+0x144>)
 8000cb2:	7e9b      	ldrb	r3, [r3, #26]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d061      	beq.n	8000d7c <Scan_USB+0x120>
            	break;  /* Break on error or end of dir */

            if (USBHfno.fattrib & AM_DIR)     /* It is a directory */
 8000cb8:	4b39      	ldr	r3, [pc, #228]	; (8000da0 <Scan_USB+0x144>)
 8000cba:	7b1b      	ldrb	r3, [r3, #12]
 8000cbc:	f003 0310 	and.w	r3, r3, #16
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d03a      	beq.n	8000d3a <Scan_USB+0xde>
            {
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname)))
 8000cc4:	4937      	ldr	r1, [pc, #220]	; (8000da4 <Scan_USB+0x148>)
 8000cc6:	4838      	ldr	r0, [pc, #224]	; (8000da8 <Scan_USB+0x14c>)
 8000cc8:	f7ff fa82 	bl	80001d0 <strcmp>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d04f      	beq.n	8000d72 <Scan_USB+0x116>
            		continue;
            	if (!(strcmp("System Volume Information", USBHfno.fname)))
 8000cd2:	4934      	ldr	r1, [pc, #208]	; (8000da4 <Scan_USB+0x148>)
 8000cd4:	4835      	ldr	r0, [pc, #212]	; (8000dac <Scan_USB+0x150>)
 8000cd6:	f7ff fa7b 	bl	80001d0 <strcmp>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d04a      	beq.n	8000d76 <Scan_USB+0x11a>
            		continue;

            	char *buf = malloc(30*sizeof(char));
 8000ce0:	201e      	movs	r0, #30
 8000ce2:	f00d f87d 	bl	800dde0 <malloc>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	65fb      	str	r3, [r7, #92]	; 0x5c
            	sprintf (buf, "Dir: %s\r\n", USBHfno.fname);
 8000cea:	4a2e      	ldr	r2, [pc, #184]	; (8000da4 <Scan_USB+0x148>)
 8000cec:	4930      	ldr	r1, [pc, #192]	; (8000db0 <Scan_USB+0x154>)
 8000cee:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000cf0:	f00d faf6 	bl	800e2e0 <siprintf>
            	Send_Uart(buf);
 8000cf4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000cf6:	f7ff ff55 	bl	8000ba4 <Send_Uart>
            	free(buf);
 8000cfa:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000cfc:	f00d f878 	bl	800ddf0 <free>

                i = strlen(path);
 8000d00:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000d02:	f7ff fa6f 	bl	80001e4 <strlen>
 8000d06:	65b8      	str	r0, [r7, #88]	; 0x58
                sprintf(&path[i], "/%s", USBHfno.fname);
 8000d08:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000d0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000d0c:	4413      	add	r3, r2
 8000d0e:	4a25      	ldr	r2, [pc, #148]	; (8000da4 <Scan_USB+0x148>)
 8000d10:	4928      	ldr	r1, [pc, #160]	; (8000db4 <Scan_USB+0x158>)
 8000d12:	4618      	mov	r0, r3
 8000d14:	f00d fae4 	bl	800e2e0 <siprintf>

                /* Enter the directory */
                if ((fresult = Scan_USB(path)) != FR_OK)
 8000d18:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000d1a:	f7ff ff9f 	bl	8000c5c <Scan_USB>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	461a      	mov	r2, r3
 8000d22:	4b1e      	ldr	r3, [pc, #120]	; (8000d9c <Scan_USB+0x140>)
 8000d24:	701a      	strb	r2, [r3, #0]
 8000d26:	4b1d      	ldr	r3, [pc, #116]	; (8000d9c <Scan_USB+0x140>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d125      	bne.n	8000d7a <Scan_USB+0x11e>
                	break;
                path[i] = 0;
 8000d2e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000d30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000d32:	4413      	add	r3, r2
 8000d34:	2200      	movs	r2, #0
 8000d36:	701a      	strb	r2, [r3, #0]
 8000d38:	e7ac      	b.n	8000c94 <Scan_USB+0x38>
            }

            else{   /* It is a file. */
           	   char *buf = malloc(50*sizeof(char));
 8000d3a:	2032      	movs	r0, #50	; 0x32
 8000d3c:	f00d f850 	bl	800dde0 <malloc>
 8000d40:	4603      	mov	r3, r0
 8000d42:	663b      	str	r3, [r7, #96]	; 0x60
               sprintf(buf,"File: %s/%s  %d KB\n", path, USBHfno.fname,(int)USBHfno.fsize/1024);
 8000d44:	4b16      	ldr	r3, [pc, #88]	; (8000da0 <Scan_USB+0x144>)
 8000d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	da01      	bge.n	8000d54 <Scan_USB+0xf8>
 8000d50:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8000d54:	129b      	asrs	r3, r3, #10
 8000d56:	9300      	str	r3, [sp, #0]
 8000d58:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <Scan_USB+0x148>)
 8000d5a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000d5c:	4916      	ldr	r1, [pc, #88]	; (8000db8 <Scan_USB+0x15c>)
 8000d5e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000d60:	f00d fabe 	bl	800e2e0 <siprintf>
               Send_Uart(buf);
 8000d64:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000d66:	f7ff ff1d 	bl	8000ba4 <Send_Uart>
               free(buf);
 8000d6a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000d6c:	f00d f840 	bl	800ddf0 <free>
 8000d70:	e790      	b.n	8000c94 <Scan_USB+0x38>
            		continue;
 8000d72:	bf00      	nop
 8000d74:	e78e      	b.n	8000c94 <Scan_USB+0x38>
            		continue;
 8000d76:	bf00      	nop
            if ((fresult = f_readdir(&dir, &USBHfno)) != FR_OK || USBHfno.fname[0] == 0)
 8000d78:	e78c      	b.n	8000c94 <Scan_USB+0x38>
                	break;
 8000d7a:	bf00      	nop
            }
        }
        f_closedir(&dir);
 8000d7c:	f107 0308 	add.w	r3, r7, #8
 8000d80:	4618      	mov	r0, r3
 8000d82:	f00c f9b7 	bl	800d0f4 <f_closedir>
    }
    free(path);
 8000d86:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000d88:	f00d f832 	bl	800ddf0 <free>
    return fresult;
 8000d8c:	4b03      	ldr	r3, [pc, #12]	; (8000d9c <Scan_USB+0x140>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3768      	adds	r7, #104	; 0x68
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	0800fff8 	.word	0x0800fff8
 8000d9c:	2000093c 	.word	0x2000093c
 8000da0:	20000940 	.word	0x20000940
 8000da4:	2000095a 	.word	0x2000095a
 8000da8:	0800fffc 	.word	0x0800fffc
 8000dac:	08010008 	.word	0x08010008
 8000db0:	08010024 	.word	0x08010024
 8000db4:	08010030 	.word	0x08010030
 8000db8:	08010034 	.word	0x08010034

08000dbc <Read_File>:
	    }
	    return fresult;
	}
}

FRESULT Read_File (char *name){
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 8000dc2:	b08c      	sub	sp, #48	; 0x30
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000dca:	3b2c      	subs	r3, #44	; 0x2c
 8000dcc:	6018      	str	r0, [r3, #0]
	/**** check whether the file exists or not ****/

	if ((fresult = f_stat (name, &USBHfno)) != FR_OK){
 8000dce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000dd2:	3b2c      	subs	r3, #44	; 0x2c
 8000dd4:	49bc      	ldr	r1, [pc, #752]	; (80010c8 <Read_File+0x30c>)
 8000dd6:	6818      	ldr	r0, [r3, #0]
 8000dd8:	f00c f9ef 	bl	800d1ba <f_stat>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	461a      	mov	r2, r3
 8000de0:	4bba      	ldr	r3, [pc, #744]	; (80010cc <Read_File+0x310>)
 8000de2:	701a      	strb	r2, [r3, #0]
 8000de4:	4bb9      	ldr	r3, [pc, #740]	; (80010cc <Read_File+0x310>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d025      	beq.n	8000e38 <Read_File+0x7c>
		char *buf = malloc(100*sizeof(char));
 8000dec:	2064      	movs	r0, #100	; 0x64
 8000dee:	f00c fff7 	bl	800dde0 <malloc>
 8000df2:	4603      	mov	r3, r0
 8000df4:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000df8:	f102 020c 	add.w	r2, r2, #12
 8000dfc:	6013      	str	r3, [r2, #0]
		sprintf (buf, "ERRROR!!! *%s* does not exists\n\n", name);
 8000dfe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e02:	3b2c      	subs	r3, #44	; 0x2c
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	49b2      	ldr	r1, [pc, #712]	; (80010d0 <Read_File+0x314>)
 8000e08:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000e0c:	f103 030c 	add.w	r3, r3, #12
 8000e10:	6818      	ldr	r0, [r3, #0]
 8000e12:	f00d fa65 	bl	800e2e0 <siprintf>
		Send_Uart (buf);
 8000e16:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000e1a:	f103 030c 	add.w	r3, r3, #12
 8000e1e:	6818      	ldr	r0, [r3, #0]
 8000e20:	f7ff fec0 	bl	8000ba4 <Send_Uart>
		free(buf);
 8000e24:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000e28:	f103 030c 	add.w	r3, r3, #12
 8000e2c:	6818      	ldr	r0, [r3, #0]
 8000e2e:	f00c ffdf 	bl	800ddf0 <free>
	    return fresult;
 8000e32:	4ba6      	ldr	r3, [pc, #664]	; (80010cc <Read_File+0x310>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	e184      	b.n	8001142 <Read_File+0x386>
	}

	else{
/********************************************************************************/
/* Open file to read */
		if ((fresult = f_open(&USBHFile, name, FA_READ)) != FR_OK){
 8000e38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e3c:	3b2c      	subs	r3, #44	; 0x2c
 8000e3e:	2201      	movs	r2, #1
 8000e40:	6819      	ldr	r1, [r3, #0]
 8000e42:	48a4      	ldr	r0, [pc, #656]	; (80010d4 <Read_File+0x318>)
 8000e44:	f00b fb28 	bl	800c498 <f_open>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	4b9f      	ldr	r3, [pc, #636]	; (80010cc <Read_File+0x310>)
 8000e4e:	701a      	strb	r2, [r3, #0]
 8000e50:	4b9e      	ldr	r3, [pc, #632]	; (80010cc <Read_File+0x310>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d028      	beq.n	8000eaa <Read_File+0xee>
			char *buf = malloc(100*sizeof(char));
 8000e58:	2064      	movs	r0, #100	; 0x64
 8000e5a:	f00c ffc1 	bl	800dde0 <malloc>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000e64:	f102 0210 	add.w	r2, r2, #16
 8000e68:	6013      	str	r3, [r2, #0]
			sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8000e6a:	4b98      	ldr	r3, [pc, #608]	; (80010cc <Read_File+0x310>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	461a      	mov	r2, r3
 8000e70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e74:	3b2c      	subs	r3, #44	; 0x2c
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4997      	ldr	r1, [pc, #604]	; (80010d8 <Read_File+0x31c>)
 8000e7a:	f507 5000 	add.w	r0, r7, #8192	; 0x2000
 8000e7e:	f100 0010 	add.w	r0, r0, #16
 8000e82:	6800      	ldr	r0, [r0, #0]
 8000e84:	f00d fa2c 	bl	800e2e0 <siprintf>
		    Send_Uart(buf);
 8000e88:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000e8c:	f103 0310 	add.w	r3, r3, #16
 8000e90:	6818      	ldr	r0, [r3, #0]
 8000e92:	f7ff fe87 	bl	8000ba4 <Send_Uart>
		    free(buf);
 8000e96:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000e9a:	f103 0310 	add.w	r3, r3, #16
 8000e9e:	6818      	ldr	r0, [r3, #0]
 8000ea0:	f00c ffa6 	bl	800ddf0 <free>
		    return fresult;
 8000ea4:	4b89      	ldr	r3, [pc, #548]	; (80010cc <Read_File+0x310>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	e14b      	b.n	8001142 <Read_File+0x386>

/* Read data from the file
 *
 ** see the function details for the arguments */

    	char *buf = malloc(100*sizeof(char));
 8000eaa:	2064      	movs	r0, #100	; 0x64
 8000eac:	f00c ff98 	bl	800dde0 <malloc>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000eb6:	f102 0220 	add.w	r2, r2, #32
 8000eba:	6013      	str	r3, [r2, #0]
    	sprintf (buf, "Opening file-->  *%s*  To READ data from it\n", name);
 8000ebc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ec0:	3b2c      	subs	r3, #44	; 0x2c
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	4985      	ldr	r1, [pc, #532]	; (80010dc <Read_File+0x320>)
 8000ec6:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000eca:	f103 0320 	add.w	r3, r3, #32
 8000ece:	6818      	ldr	r0, [r3, #0]
 8000ed0:	f00d fa06 	bl	800e2e0 <siprintf>
    	Send_Uart(buf);
 8000ed4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000ed8:	f103 0320 	add.w	r3, r3, #32
 8000edc:	6818      	ldr	r0, [r3, #0]
 8000ede:	f7ff fe61 	bl	8000ba4 <Send_Uart>
        free(buf);
 8000ee2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000ee6:	f103 0320 	add.w	r3, r3, #32
 8000eea:	6818      	ldr	r0, [r3, #0]
 8000eec:	f00c ff80 	bl	800ddf0 <free>
		int isOn;
		int delay;
	    FRESULT fr;          /* FatFs function common result code */
	    UINT br, bw;         /* File read/write count */

		memset((void*)buffer, 0,sizeof(buffer));
 8000ef0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ef4:	3b28      	subs	r3, #40	; 0x28
 8000ef6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000efa:	2100      	movs	r1, #0
 8000efc:	4618      	mov	r0, r3
 8000efe:	f00c ff8d 	bl	800de1c <memset>
		memset((void*)buffer1, 0,sizeof(buffer));
 8000f02:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000f06:	f103 0310 	add.w	r3, r3, #16
 8000f0a:	3b08      	subs	r3, #8
 8000f0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f10:	2100      	movs	r1, #0
 8000f12:	4618      	mov	r0, r3
 8000f14:	f00c ff82 	bl	800de1c <memset>


//		while(f_gets(buffer,sizeof(buffer), &USBHFile)){
		for(;;){
			fr = f_read(&USBHFile, buffer, sizeof (buffer), &br); /* Read a chunk of data from the source file */
 8000f18:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000f1c:	f103 0308 	add.w	r3, r3, #8
 8000f20:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000f24:	3928      	subs	r1, #40	; 0x28
 8000f26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f2a:	486a      	ldr	r0, [pc, #424]	; (80010d4 <Read_File+0x318>)
 8000f2c:	f00b fd65 	bl	800c9fa <f_read>
 8000f30:	4603      	mov	r3, r0
 8000f32:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000f36:	f102 021f 	add.w	r2, r2, #31
 8000f3a:	7013      	strb	r3, [r2, #0]
		        if (br == 0)
 8000f3c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000f40:	f103 0308 	add.w	r3, r3, #8
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	f000 8087 	beq.w	800105a <Read_File+0x29e>
		        	break; /* error or eof */


			isOn = !isOn;
 8000f4c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000f50:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	bf0c      	ite	eq
 8000f5a:	2301      	moveq	r3, #1
 8000f5c:	2300      	movne	r3, #0
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000f64:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8000f68:	6013      	str	r3, [r2, #0]
			if(isOn == 1)
 8000f6a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000f6e:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d106      	bne.n	8000f86 <Read_File+0x1ca>
			  delay = 100;
 8000f78:	2364      	movs	r3, #100	; 0x64
 8000f7a:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000f7e:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8000f82:	6013      	str	r3, [r2, #0]
 8000f84:	e005      	b.n	8000f92 <Read_File+0x1d6>
			else
			  delay = 100;
 8000f86:	2364      	movs	r3, #100	; 0x64
 8000f88:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000f8c:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8000f90:	6013      	str	r3, [r2, #0]

			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, isOn);
 8000f92:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000f96:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fa4:	484e      	ldr	r0, [pc, #312]	; (80010e0 <Read_File+0x324>)
 8000fa6:	f000 ffa1 	bl	8001eec <HAL_GPIO_WritePin>
			HAL_Delay(delay);
 8000faa:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000fae:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f000 fcc7 	bl	8001948 <HAL_Delay>

			Send_Uart("\n");
 8000fba:	484a      	ldr	r0, [pc, #296]	; (80010e4 <Read_File+0x328>)
 8000fbc:	f7ff fdf2 	bl	8000ba4 <Send_Uart>
			for ( int i = 0; i < sizeof(buffer); i++){
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000fc6:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8000fca:	6013      	str	r3, [r2, #0]
 8000fcc:	e03c      	b.n	8001048 <Read_File+0x28c>
				snprintf(buffer1,sizeof(buffer),"%02X", buffer[i]);
 8000fce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fd2:	3b28      	subs	r3, #40	; 0x28
 8000fd4:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000fd8:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8000fdc:	6812      	ldr	r2, [r2, #0]
 8000fde:	4413      	add	r3, r2
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	f507 5080 	add.w	r0, r7, #4096	; 0x1000
 8000fe6:	f100 0010 	add.w	r0, r0, #16
 8000fea:	3808      	subs	r0, #8
 8000fec:	4a3e      	ldr	r2, [pc, #248]	; (80010e8 <Read_File+0x32c>)
 8000fee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ff2:	f00d f941 	bl	800e278 <sniprintf>

				if(i!=0 && !( i % 1)){
 8000ff6:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000ffa:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d00e      	beq.n	8001022 <Read_File+0x266>
					Send_Uart(" ");
 8001004:	4839      	ldr	r0, [pc, #228]	; (80010ec <Read_File+0x330>)
 8001006:	f7ff fdcd 	bl	8000ba4 <Send_Uart>
					if(!(i % 16)){
 800100a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800100e:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f003 030f 	and.w	r3, r3, #15
 8001018:	2b00      	cmp	r3, #0
 800101a:	d102      	bne.n	8001022 <Read_File+0x266>
						Send_Uart("\n");
 800101c:	4831      	ldr	r0, [pc, #196]	; (80010e4 <Read_File+0x328>)
 800101e:	f7ff fdc1 	bl	8000ba4 <Send_Uart>
					}
				}

				Send_Uart(buffer1);
 8001022:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001026:	f103 0310 	add.w	r3, r3, #16
 800102a:	3b08      	subs	r3, #8
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fdb9 	bl	8000ba4 <Send_Uart>
			for ( int i = 0; i < sizeof(buffer); i++){
 8001032:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001036:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	3301      	adds	r3, #1
 800103e:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001042:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8001046:	6013      	str	r3, [r2, #0]
 8001048:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800104c:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001056:	d3ba      	bcc.n	8000fce <Read_File+0x212>
			fr = f_read(&USBHFile, buffer, sizeof (buffer), &br); /* Read a chunk of data from the source file */
 8001058:	e75e      	b.n	8000f18 <Read_File+0x15c>
		        	break; /* error or eof */
 800105a:	bf00      	nop

			}
		}
		Send_Uart("\n\n");
 800105c:	4824      	ldr	r0, [pc, #144]	; (80010f0 <Read_File+0x334>)
 800105e:	f7ff fda1 	bl	8000ba4 <Send_Uart>

/********************************************************************************/
/* Close file */
		if ((fresult = f_close(&USBHFile)) != FR_OK){
 8001062:	481c      	ldr	r0, [pc, #112]	; (80010d4 <Read_File+0x318>)
 8001064:	f00b ff73 	bl	800cf4e <f_close>
 8001068:	4603      	mov	r3, r0
 800106a:	461a      	mov	r2, r3
 800106c:	4b17      	ldr	r3, [pc, #92]	; (80010cc <Read_File+0x310>)
 800106e:	701a      	strb	r2, [r3, #0]
 8001070:	4b16      	ldr	r3, [pc, #88]	; (80010cc <Read_File+0x310>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d03f      	beq.n	80010f8 <Read_File+0x33c>
			char *buf = malloc(100*sizeof(char));
 8001078:	2064      	movs	r0, #100	; 0x64
 800107a:	f00c feb1 	bl	800dde0 <malloc>
 800107e:	4603      	mov	r3, r0
 8001080:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001084:	f102 0214 	add.w	r2, r2, #20
 8001088:	6013      	str	r3, [r2, #0]
			sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 800108a:	4b10      	ldr	r3, [pc, #64]	; (80010cc <Read_File+0x310>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	461a      	mov	r2, r3
 8001090:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001094:	3b2c      	subs	r3, #44	; 0x2c
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4916      	ldr	r1, [pc, #88]	; (80010f4 <Read_File+0x338>)
 800109a:	f507 5000 	add.w	r0, r7, #8192	; 0x2000
 800109e:	f100 0014 	add.w	r0, r0, #20
 80010a2:	6800      	ldr	r0, [r0, #0]
 80010a4:	f00d f91c 	bl	800e2e0 <siprintf>
			Send_Uart(buf);
 80010a8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80010ac:	f103 0314 	add.w	r3, r3, #20
 80010b0:	6818      	ldr	r0, [r3, #0]
 80010b2:	f7ff fd77 	bl	8000ba4 <Send_Uart>
			free(buf);
 80010b6:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80010ba:	f103 0314 	add.w	r3, r3, #20
 80010be:	6818      	ldr	r0, [r3, #0]
 80010c0:	f00c fe96 	bl	800ddf0 <free>
 80010c4:	e03b      	b.n	800113e <Read_File+0x382>
 80010c6:	bf00      	nop
 80010c8:	20000940 	.word	0x20000940
 80010cc:	2000093c 	.word	0x2000093c
 80010d0:	0801015c 	.word	0x0801015c
 80010d4:	20000ab8 	.word	0x20000ab8
 80010d8:	0801006c 	.word	0x0801006c
 80010dc:	08010180 	.word	0x08010180
 80010e0:	40020c00 	.word	0x40020c00
 80010e4:	080101b0 	.word	0x080101b0
 80010e8:	080101b4 	.word	0x080101b4
 80010ec:	080101bc 	.word	0x080101bc
 80010f0:	080101c0 	.word	0x080101c0
 80010f4:	080101c4 	.word	0x080101c4
		}
		else{
			char *buf = malloc(100*sizeof(char));
 80010f8:	2064      	movs	r0, #100	; 0x64
 80010fa:	f00c fe71 	bl	800dde0 <malloc>
 80010fe:	4603      	mov	r3, r0
 8001100:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001104:	f102 0218 	add.w	r2, r2, #24
 8001108:	6013      	str	r3, [r2, #0]
			sprintf (buf, "File *%s* CLOSED successfully\n\n", name);
 800110a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800110e:	3b2c      	subs	r3, #44	; 0x2c
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	490f      	ldr	r1, [pc, #60]	; (8001150 <Read_File+0x394>)
 8001114:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001118:	f103 0318 	add.w	r3, r3, #24
 800111c:	6818      	ldr	r0, [r3, #0]
 800111e:	f00d f8df 	bl	800e2e0 <siprintf>
			Send_Uart(buf);
 8001122:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001126:	f103 0318 	add.w	r3, r3, #24
 800112a:	6818      	ldr	r0, [r3, #0]
 800112c:	f7ff fd3a 	bl	8000ba4 <Send_Uart>
			free(buf);
 8001130:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001134:	f103 0318 	add.w	r3, r3, #24
 8001138:	6818      	ldr	r0, [r3, #0]
 800113a:	f00c fe59 	bl	800ddf0 <free>
		}

	    return fresult;
 800113e:	4b05      	ldr	r3, [pc, #20]	; (8001154 <Read_File+0x398>)
 8001140:	781b      	ldrb	r3, [r3, #0]
	}
}
 8001142:	4618      	mov	r0, r3
 8001144:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
 8001148:	3730      	adds	r7, #48	; 0x30
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	080101ec 	.word	0x080101ec
 8001154:	2000093c 	.word	0x2000093c

08001158 <Check_USB_Details>:
    	free(buf);
    }
    return fresult;
}

void Check_USB_Details (void){
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
    /* Check free space */
    f_getfree("", &fre_clust, &pUSBHFatFS);
 800115e:	4a31      	ldr	r2, [pc, #196]	; (8001224 <Check_USB_Details+0xcc>)
 8001160:	4931      	ldr	r1, [pc, #196]	; (8001228 <Check_USB_Details+0xd0>)
 8001162:	4832      	ldr	r0, [pc, #200]	; (800122c <Check_USB_Details+0xd4>)
 8001164:	f00c f862 	bl	800d22c <f_getfree>

    total = (uint32_t)((pUSBHFatFS->n_fatent - 2) * pUSBHFatFS->csize * 0.5);
 8001168:	4b2e      	ldr	r3, [pc, #184]	; (8001224 <Check_USB_Details+0xcc>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	6a1b      	ldr	r3, [r3, #32]
 800116e:	3b02      	subs	r3, #2
 8001170:	4a2c      	ldr	r2, [pc, #176]	; (8001224 <Check_USB_Details+0xcc>)
 8001172:	6812      	ldr	r2, [r2, #0]
 8001174:	8952      	ldrh	r2, [r2, #10]
 8001176:	fb02 f303 	mul.w	r3, r2, r3
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff fafc 	bl	8000778 <__aeabi_ui2d>
 8001180:	f04f 0200 	mov.w	r2, #0
 8001184:	4b2a      	ldr	r3, [pc, #168]	; (8001230 <Check_USB_Details+0xd8>)
 8001186:	f7ff f88b 	bl	80002a0 <__aeabi_dmul>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	4610      	mov	r0, r2
 8001190:	4619      	mov	r1, r3
 8001192:	f7ff fb6b 	bl	800086c <__aeabi_d2uiz>
 8001196:	4603      	mov	r3, r0
 8001198:	4a26      	ldr	r2, [pc, #152]	; (8001234 <Check_USB_Details+0xdc>)
 800119a:	6013      	str	r3, [r2, #0]
    char *buf = malloc(30*sizeof(char));
 800119c:	201e      	movs	r0, #30
 800119e:	f00c fe1f 	bl	800dde0 <malloc>
 80011a2:	4603      	mov	r3, r0
 80011a4:	607b      	str	r3, [r7, #4]
    sprintf (buf, "USB  Total Size KB: \t%lu\n",total/1024);
 80011a6:	4b23      	ldr	r3, [pc, #140]	; (8001234 <Check_USB_Details+0xdc>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	0a9b      	lsrs	r3, r3, #10
 80011ac:	461a      	mov	r2, r3
 80011ae:	4922      	ldr	r1, [pc, #136]	; (8001238 <Check_USB_Details+0xe0>)
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f00d f895 	bl	800e2e0 <siprintf>
    Send_Uart(buf);
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff fcf4 	bl	8000ba4 <Send_Uart>
    free(buf);
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f00c fe17 	bl	800ddf0 <free>


    free_space = (uint32_t)(fre_clust * pUSBHFatFS->csize * 0.5);
 80011c2:	4b18      	ldr	r3, [pc, #96]	; (8001224 <Check_USB_Details+0xcc>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	895b      	ldrh	r3, [r3, #10]
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b17      	ldr	r3, [pc, #92]	; (8001228 <Check_USB_Details+0xd0>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	fb03 f302 	mul.w	r3, r3, r2
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff fad0 	bl	8000778 <__aeabi_ui2d>
 80011d8:	f04f 0200 	mov.w	r2, #0
 80011dc:	4b14      	ldr	r3, [pc, #80]	; (8001230 <Check_USB_Details+0xd8>)
 80011de:	f7ff f85f 	bl	80002a0 <__aeabi_dmul>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	4610      	mov	r0, r2
 80011e8:	4619      	mov	r1, r3
 80011ea:	f7ff fb3f 	bl	800086c <__aeabi_d2uiz>
 80011ee:	4603      	mov	r3, r0
 80011f0:	4a12      	ldr	r2, [pc, #72]	; (800123c <Check_USB_Details+0xe4>)
 80011f2:	6013      	str	r3, [r2, #0]
    buf = malloc(30*sizeof(char));
 80011f4:	201e      	movs	r0, #30
 80011f6:	f00c fdf3 	bl	800dde0 <malloc>
 80011fa:	4603      	mov	r3, r0
 80011fc:	607b      	str	r3, [r7, #4]
    sprintf (buf, "USB Free Space KB: \t%lu\n",free_space/1024);
 80011fe:	4b0f      	ldr	r3, [pc, #60]	; (800123c <Check_USB_Details+0xe4>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	0a9b      	lsrs	r3, r3, #10
 8001204:	461a      	mov	r2, r3
 8001206:	490e      	ldr	r1, [pc, #56]	; (8001240 <Check_USB_Details+0xe8>)
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f00d f869 	bl	800e2e0 <siprintf>
    Send_Uart(buf);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f7ff fcc8 	bl	8000ba4 <Send_Uart>
    free(buf);
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f00c fdeb 	bl	800ddf0 <free>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000930 	.word	0x20000930
 8001228:	20000550 	.word	0x20000550
 800122c:	080103e0 	.word	0x080103e0
 8001230:	3fe00000 	.word	0x3fe00000
 8001234:	20000a60 	.word	0x20000a60
 8001238:	080103e4 	.word	0x080103e4
 800123c:	20000934 	.word	0x20000934
 8001240:	08010400 	.word	0x08010400

08001244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001248:	f000 fb0c 	bl	8001864 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800124c:	f000 f810 	bl	8001270 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001250:	f000 f8a2 	bl	8001398 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001254:	f000 f876 	bl	8001344 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8001258:	f004 fbb6 	bl	80059c8 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 800125c:	f00c fa10 	bl	800d680 <MX_USB_HOST_Init>

  /* USER CODE BEGIN 2 */

  RetargetInit(&huart3);
 8001260:	4802      	ldr	r0, [pc, #8]	; (800126c <main+0x28>)
 8001262:	f000 f923 	bl	80014ac <RetargetInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001266:	f00c fa31 	bl	800d6cc <MX_USB_HOST_Process>
 800126a:	e7fc      	b.n	8001266 <main+0x22>
 800126c:	20000a64 	.word	0x20000a64

08001270 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b094      	sub	sp, #80	; 0x50
 8001274:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001276:	f107 0320 	add.w	r3, r7, #32
 800127a:	2230      	movs	r2, #48	; 0x30
 800127c:	2100      	movs	r1, #0
 800127e:	4618      	mov	r0, r3
 8001280:	f00c fdcc 	bl	800de1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001284:	f107 030c 	add.w	r3, r7, #12
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001294:	2300      	movs	r3, #0
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	4b28      	ldr	r3, [pc, #160]	; (800133c <SystemClock_Config+0xcc>)
 800129a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129c:	4a27      	ldr	r2, [pc, #156]	; (800133c <SystemClock_Config+0xcc>)
 800129e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a2:	6413      	str	r3, [r2, #64]	; 0x40
 80012a4:	4b25      	ldr	r3, [pc, #148]	; (800133c <SystemClock_Config+0xcc>)
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012b0:	2300      	movs	r3, #0
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	4b22      	ldr	r3, [pc, #136]	; (8001340 <SystemClock_Config+0xd0>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a21      	ldr	r2, [pc, #132]	; (8001340 <SystemClock_Config+0xd0>)
 80012ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012be:	6013      	str	r3, [r2, #0]
 80012c0:	4b1f      	ldr	r3, [pc, #124]	; (8001340 <SystemClock_Config+0xd0>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012cc:	2301      	movs	r3, #1
 80012ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012d6:	2302      	movs	r3, #2
 80012d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012e0:	2308      	movs	r3, #8
 80012e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80012e4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80012e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012ea:	2302      	movs	r3, #2
 80012ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012ee:	2307      	movs	r3, #7
 80012f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f2:	f107 0320 	add.w	r3, r7, #32
 80012f6:	4618      	mov	r0, r3
 80012f8:	f002 fb82 	bl	8003a00 <HAL_RCC_OscConfig>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001302:	f000 f8cd 	bl	80014a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001306:	230f      	movs	r3, #15
 8001308:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800130a:	2302      	movs	r3, #2
 800130c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001312:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001316:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001318:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800131c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800131e:	f107 030c 	add.w	r3, r7, #12
 8001322:	2105      	movs	r1, #5
 8001324:	4618      	mov	r0, r3
 8001326:	f002 fde3 	bl	8003ef0 <HAL_RCC_ClockConfig>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001330:	f000 f8b6 	bl	80014a0 <Error_Handler>
  }
}
 8001334:	bf00      	nop
 8001336:	3750      	adds	r7, #80	; 0x50
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40023800 	.word	0x40023800
 8001340:	40007000 	.word	0x40007000

08001344 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001348:	4b11      	ldr	r3, [pc, #68]	; (8001390 <MX_USART3_UART_Init+0x4c>)
 800134a:	4a12      	ldr	r2, [pc, #72]	; (8001394 <MX_USART3_UART_Init+0x50>)
 800134c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800134e:	4b10      	ldr	r3, [pc, #64]	; (8001390 <MX_USART3_UART_Init+0x4c>)
 8001350:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001354:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001356:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <MX_USART3_UART_Init+0x4c>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800135c:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <MX_USART3_UART_Init+0x4c>)
 800135e:	2200      	movs	r2, #0
 8001360:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001362:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <MX_USART3_UART_Init+0x4c>)
 8001364:	2200      	movs	r2, #0
 8001366:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001368:	4b09      	ldr	r3, [pc, #36]	; (8001390 <MX_USART3_UART_Init+0x4c>)
 800136a:	220c      	movs	r2, #12
 800136c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800136e:	4b08      	ldr	r3, [pc, #32]	; (8001390 <MX_USART3_UART_Init+0x4c>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <MX_USART3_UART_Init+0x4c>)
 8001376:	2200      	movs	r2, #0
 8001378:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800137a:	4805      	ldr	r0, [pc, #20]	; (8001390 <MX_USART3_UART_Init+0x4c>)
 800137c:	f002 ffb4 	bl	80042e8 <HAL_UART_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001386:	f000 f88b 	bl	80014a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000a64 	.word	0x20000a64
 8001394:	40004800 	.word	0x40004800

08001398 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08a      	sub	sp, #40	; 0x28
 800139c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139e:	f107 0314 	add.w	r3, r7, #20
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]
 80013ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
 80013b2:	4b38      	ldr	r3, [pc, #224]	; (8001494 <MX_GPIO_Init+0xfc>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	4a37      	ldr	r2, [pc, #220]	; (8001494 <MX_GPIO_Init+0xfc>)
 80013b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013bc:	6313      	str	r3, [r2, #48]	; 0x30
 80013be:	4b35      	ldr	r3, [pc, #212]	; (8001494 <MX_GPIO_Init+0xfc>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	4b31      	ldr	r3, [pc, #196]	; (8001494 <MX_GPIO_Init+0xfc>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	4a30      	ldr	r2, [pc, #192]	; (8001494 <MX_GPIO_Init+0xfc>)
 80013d4:	f043 0304 	orr.w	r3, r3, #4
 80013d8:	6313      	str	r3, [r2, #48]	; 0x30
 80013da:	4b2e      	ldr	r3, [pc, #184]	; (8001494 <MX_GPIO_Init+0xfc>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	f003 0304 	and.w	r3, r3, #4
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	4b2a      	ldr	r3, [pc, #168]	; (8001494 <MX_GPIO_Init+0xfc>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a29      	ldr	r2, [pc, #164]	; (8001494 <MX_GPIO_Init+0xfc>)
 80013f0:	f043 0302 	orr.w	r3, r3, #2
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b27      	ldr	r3, [pc, #156]	; (8001494 <MX_GPIO_Init+0xfc>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	4b23      	ldr	r3, [pc, #140]	; (8001494 <MX_GPIO_Init+0xfc>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a22      	ldr	r2, [pc, #136]	; (8001494 <MX_GPIO_Init+0xfc>)
 800140c:	f043 0308 	orr.w	r3, r3, #8
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b20      	ldr	r3, [pc, #128]	; (8001494 <MX_GPIO_Init+0xfc>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0308 	and.w	r3, r3, #8
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	603b      	str	r3, [r7, #0]
 8001422:	4b1c      	ldr	r3, [pc, #112]	; (8001494 <MX_GPIO_Init+0xfc>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a1b      	ldr	r2, [pc, #108]	; (8001494 <MX_GPIO_Init+0xfc>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b19      	ldr	r3, [pc, #100]	; (8001494 <MX_GPIO_Init+0xfc>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	603b      	str	r3, [r7, #0]
 8001438:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800143a:	2200      	movs	r2, #0
 800143c:	2101      	movs	r1, #1
 800143e:	4816      	ldr	r0, [pc, #88]	; (8001498 <MX_GPIO_Init+0x100>)
 8001440:	f000 fd54 	bl	8001eec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001444:	2200      	movs	r2, #0
 8001446:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800144a:	4814      	ldr	r0, [pc, #80]	; (800149c <MX_GPIO_Init+0x104>)
 800144c:	f000 fd4e 	bl	8001eec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001450:	2301      	movs	r3, #1
 8001452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001454:	2301      	movs	r3, #1
 8001456:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	2300      	movs	r3, #0
 800145e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	4619      	mov	r1, r3
 8001466:	480c      	ldr	r0, [pc, #48]	; (8001498 <MX_GPIO_Init+0x100>)
 8001468:	f000 fba4 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800146c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001470:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001472:	2301      	movs	r3, #1
 8001474:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147a:	2300      	movs	r3, #0
 800147c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	4619      	mov	r1, r3
 8001484:	4805      	ldr	r0, [pc, #20]	; (800149c <MX_GPIO_Init+0x104>)
 8001486:	f000 fb95 	bl	8001bb4 <HAL_GPIO_Init>

}
 800148a:	bf00      	nop
 800148c:	3728      	adds	r7, #40	; 0x28
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40023800 	.word	0x40023800
 8001498:	40020800 	.word	0x40020800
 800149c:	40020c00 	.word	0x40020c00

080014a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014a4:	b672      	cpsid	i
}
 80014a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <Error_Handler+0x8>
	...

080014ac <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80014b4:	4a07      	ldr	r2, [pc, #28]	; (80014d4 <RetargetInit+0x28>)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80014ba:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <RetargetInit+0x2c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6898      	ldr	r0, [r3, #8]
 80014c0:	2300      	movs	r3, #0
 80014c2:	2202      	movs	r2, #2
 80014c4:	2100      	movs	r1, #0
 80014c6:	f00c fe11 	bl	800e0ec <setvbuf>
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000aa8 	.word	0x20000aa8
 80014d8:	2000002c 	.word	0x2000002c

080014dc <_isatty>:

int _isatty(int fd) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	db04      	blt.n	80014f4 <_isatty+0x18>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	dc01      	bgt.n	80014f4 <_isatty+0x18>
    return 1;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e005      	b.n	8001500 <_isatty+0x24>

  errno = EBADF;
 80014f4:	f00c fc4a 	bl	800dd8c <__errno>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2209      	movs	r2, #9
 80014fc:	601a      	str	r2, [r3, #0]
  return 0;
 80014fe:	2300      	movs	r3, #0
}
 8001500:	4618      	mov	r0, r3
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <_write>:

int _write(int fd, char* ptr, int len) {
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d002      	beq.n	8001520 <_write+0x18>
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2b02      	cmp	r3, #2
 800151e:	d111      	bne.n	8001544 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001520:	4b0e      	ldr	r3, [pc, #56]	; (800155c <_write+0x54>)
 8001522:	6818      	ldr	r0, [r3, #0]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	b29a      	uxth	r2, r3
 8001528:	f04f 33ff 	mov.w	r3, #4294967295
 800152c:	68b9      	ldr	r1, [r7, #8]
 800152e:	f002 ff28 	bl	8004382 <HAL_UART_Transmit>
 8001532:	4603      	mov	r3, r0
 8001534:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001536:	7dfb      	ldrb	r3, [r7, #23]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d101      	bne.n	8001540 <_write+0x38>
      return len;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	e008      	b.n	8001552 <_write+0x4a>
    else
      return EIO;
 8001540:	2305      	movs	r3, #5
 8001542:	e006      	b.n	8001552 <_write+0x4a>
  }
  errno = EBADF;
 8001544:	f00c fc22 	bl	800dd8c <__errno>
 8001548:	4603      	mov	r3, r0
 800154a:	2209      	movs	r2, #9
 800154c:	601a      	str	r2, [r3, #0]
  return -1;
 800154e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001552:	4618      	mov	r0, r3
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000aa8 	.word	0x20000aa8

08001560 <_close>:

int _close(int fd) {
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	db04      	blt.n	8001578 <_close+0x18>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2b02      	cmp	r3, #2
 8001572:	dc01      	bgt.n	8001578 <_close+0x18>
    return 0;
 8001574:	2300      	movs	r3, #0
 8001576:	e006      	b.n	8001586 <_close+0x26>

  errno = EBADF;
 8001578:	f00c fc08 	bl	800dd8c <__errno>
 800157c:	4603      	mov	r3, r0
 800157e:	2209      	movs	r2, #9
 8001580:	601a      	str	r2, [r3, #0]
  return -1;
 8001582:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001586:	4618      	mov	r0, r3
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800158e:	b580      	push	{r7, lr}
 8001590:	b084      	sub	sp, #16
 8001592:	af00      	add	r7, sp, #0
 8001594:	60f8      	str	r0, [r7, #12]
 8001596:	60b9      	str	r1, [r7, #8]
 8001598:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800159a:	f00c fbf7 	bl	800dd8c <__errno>
 800159e:	4603      	mov	r3, r0
 80015a0:	2209      	movs	r2, #9
 80015a2:	601a      	str	r2, [r3, #0]
  return -1;
 80015a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <_read>:

int _read(int fd, char* ptr, int len) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d110      	bne.n	80015e4 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80015c2:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <_read+0x4c>)
 80015c4:	6818      	ldr	r0, [r3, #0]
 80015c6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ca:	2201      	movs	r2, #1
 80015cc:	68b9      	ldr	r1, [r7, #8]
 80015ce:	f002 ff6a 	bl	80044a6 <HAL_UART_Receive>
 80015d2:	4603      	mov	r3, r0
 80015d4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80015d6:	7dfb      	ldrb	r3, [r7, #23]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d101      	bne.n	80015e0 <_read+0x30>
      return 1;
 80015dc:	2301      	movs	r3, #1
 80015de:	e008      	b.n	80015f2 <_read+0x42>
    else
      return EIO;
 80015e0:	2305      	movs	r3, #5
 80015e2:	e006      	b.n	80015f2 <_read+0x42>
  }
  errno = EBADF;
 80015e4:	f00c fbd2 	bl	800dd8c <__errno>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2209      	movs	r2, #9
 80015ec:	601a      	str	r2, [r3, #0]
  return -1;
 80015ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3718      	adds	r7, #24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000aa8 	.word	0x20000aa8

08001600 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	db08      	blt.n	8001622 <_fstat+0x22>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b02      	cmp	r3, #2
 8001614:	dc05      	bgt.n	8001622 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800161c:	605a      	str	r2, [r3, #4]
    return 0;
 800161e:	2300      	movs	r3, #0
 8001620:	e005      	b.n	800162e <_fstat+0x2e>
  }

  errno = EBADF;
 8001622:	f00c fbb3 	bl	800dd8c <__errno>
 8001626:	4603      	mov	r3, r0
 8001628:	2209      	movs	r2, #9
 800162a:	601a      	str	r2, [r3, #0]
  return 0;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	607b      	str	r3, [r7, #4]
 8001642:	4b10      	ldr	r3, [pc, #64]	; (8001684 <HAL_MspInit+0x4c>)
 8001644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001646:	4a0f      	ldr	r2, [pc, #60]	; (8001684 <HAL_MspInit+0x4c>)
 8001648:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800164c:	6453      	str	r3, [r2, #68]	; 0x44
 800164e:	4b0d      	ldr	r3, [pc, #52]	; (8001684 <HAL_MspInit+0x4c>)
 8001650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001652:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001656:	607b      	str	r3, [r7, #4]
 8001658:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	603b      	str	r3, [r7, #0]
 800165e:	4b09      	ldr	r3, [pc, #36]	; (8001684 <HAL_MspInit+0x4c>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	4a08      	ldr	r2, [pc, #32]	; (8001684 <HAL_MspInit+0x4c>)
 8001664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001668:	6413      	str	r3, [r2, #64]	; 0x40
 800166a:	4b06      	ldr	r3, [pc, #24]	; (8001684 <HAL_MspInit+0x4c>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001672:	603b      	str	r3, [r7, #0]
 8001674:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001676:	2007      	movs	r0, #7
 8001678:	f000 fa5a 	bl	8001b30 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800167c:	bf00      	nop
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40023800 	.word	0x40023800

08001688 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08a      	sub	sp, #40	; 0x28
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a19      	ldr	r2, [pc, #100]	; (800170c <HAL_UART_MspInit+0x84>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d12c      	bne.n	8001704 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	4b18      	ldr	r3, [pc, #96]	; (8001710 <HAL_UART_MspInit+0x88>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	4a17      	ldr	r2, [pc, #92]	; (8001710 <HAL_UART_MspInit+0x88>)
 80016b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016b8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ba:	4b15      	ldr	r3, [pc, #84]	; (8001710 <HAL_UART_MspInit+0x88>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016c2:	613b      	str	r3, [r7, #16]
 80016c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	4b11      	ldr	r3, [pc, #68]	; (8001710 <HAL_UART_MspInit+0x88>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	4a10      	ldr	r2, [pc, #64]	; (8001710 <HAL_UART_MspInit+0x88>)
 80016d0:	f043 0302 	orr.w	r3, r3, #2
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <HAL_UART_MspInit+0x88>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80016e2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e8:	2302      	movs	r3, #2
 80016ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f0:	2303      	movs	r3, #3
 80016f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016f4:	2307      	movs	r3, #7
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	4619      	mov	r1, r3
 80016fe:	4805      	ldr	r0, [pc, #20]	; (8001714 <HAL_UART_MspInit+0x8c>)
 8001700:	f000 fa58 	bl	8001bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001704:	bf00      	nop
 8001706:	3728      	adds	r7, #40	; 0x28
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40004800 	.word	0x40004800
 8001710:	40023800 	.word	0x40023800
 8001714:	40020400 	.word	0x40020400

08001718 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800171c:	e7fe      	b.n	800171c <NMI_Handler+0x4>

0800171e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001722:	e7fe      	b.n	8001722 <HardFault_Handler+0x4>

08001724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001728:	e7fe      	b.n	8001728 <MemManage_Handler+0x4>

0800172a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800172e:	e7fe      	b.n	800172e <BusFault_Handler+0x4>

08001730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001734:	e7fe      	b.n	8001734 <UsageFault_Handler+0x4>

08001736 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001764:	f000 f8d0 	bl	8001908 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}

0800176c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001770:	4802      	ldr	r0, [pc, #8]	; (800177c <OTG_FS_IRQHandler+0x10>)
 8001772:	f000 fe3f 	bl	80023f4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	200043f0 	.word	0x200043f0

08001780 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001788:	4a14      	ldr	r2, [pc, #80]	; (80017dc <_sbrk+0x5c>)
 800178a:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <_sbrk+0x60>)
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001794:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <_sbrk+0x64>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d102      	bne.n	80017a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800179c:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <_sbrk+0x64>)
 800179e:	4a12      	ldr	r2, [pc, #72]	; (80017e8 <_sbrk+0x68>)
 80017a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017a2:	4b10      	ldr	r3, [pc, #64]	; (80017e4 <_sbrk+0x64>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4413      	add	r3, r2
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d207      	bcs.n	80017c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017b0:	f00c faec 	bl	800dd8c <__errno>
 80017b4:	4603      	mov	r3, r0
 80017b6:	220c      	movs	r2, #12
 80017b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ba:	f04f 33ff 	mov.w	r3, #4294967295
 80017be:	e009      	b.n	80017d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017c0:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <_sbrk+0x64>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017c6:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <_sbrk+0x64>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4413      	add	r3, r2
 80017ce:	4a05      	ldr	r2, [pc, #20]	; (80017e4 <_sbrk+0x64>)
 80017d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;}
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	4618      	mov	r0, r3
 80017d6:	3718      	adds	r7, #24
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20020000 	.word	0x20020000
 80017e0:	00002000 	.word	0x00002000
 80017e4:	200000ac 	.word	0x200000ac
 80017e8:	20004708 	.word	0x20004708

080017ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <SystemInit+0x20>)
 80017f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017f6:	4a05      	ldr	r2, [pc, #20]	; (800180c <SystemInit+0x20>)
 80017f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001810:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001848 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001814:	480d      	ldr	r0, [pc, #52]	; (800184c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001816:	490e      	ldr	r1, [pc, #56]	; (8001850 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001818:	4a0e      	ldr	r2, [pc, #56]	; (8001854 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800181a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800181c:	e002      	b.n	8001824 <LoopCopyDataInit>

0800181e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800181e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001822:	3304      	adds	r3, #4

08001824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001828:	d3f9      	bcc.n	800181e <CopyDataInit>
  

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800182a:	4a0b      	ldr	r2, [pc, #44]	; (8001858 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800182c:	4c0b      	ldr	r4, [pc, #44]	; (800185c <LoopFillZerobss+0x26>)
  movs r3, #0
 800182e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001830:	e001      	b.n	8001836 <LoopFillZerobss>

08001832 <FillZerobss>:


FillZerobss:
  str  r3, [r2]
 8001832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001834:	3204      	adds	r2, #4

08001836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001838:	d3fb      	bcc.n	8001832 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800183a:	f7ff ffd7 	bl	80017ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800183e:	f00c faab 	bl	800dd98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001842:	f7ff fcff 	bl	8001244 <main>
  bx  lr    
 8001846:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001848:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800184c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001850:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001854:	08010b40 	.word	0x08010b40
  ldr r2, =_sbss
 8001858:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800185c:	20004704 	.word	0x20004704

08001860 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001860:	e7fe      	b.n	8001860 <ADC_IRQHandler>
	...

08001864 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001868:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <HAL_Init+0x40>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a0d      	ldr	r2, [pc, #52]	; (80018a4 <HAL_Init+0x40>)
 800186e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001872:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001874:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <HAL_Init+0x40>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a0a      	ldr	r2, [pc, #40]	; (80018a4 <HAL_Init+0x40>)
 800187a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800187e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001880:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <HAL_Init+0x40>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a07      	ldr	r2, [pc, #28]	; (80018a4 <HAL_Init+0x40>)
 8001886:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800188a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800188c:	2003      	movs	r0, #3
 800188e:	f000 f94f 	bl	8001b30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001892:	2000      	movs	r0, #0
 8001894:	f000 f808 	bl	80018a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001898:	f7ff fece 	bl	8001638 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40023c00 	.word	0x40023c00

080018a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018b0:	4b12      	ldr	r3, [pc, #72]	; (80018fc <HAL_InitTick+0x54>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	4b12      	ldr	r3, [pc, #72]	; (8001900 <HAL_InitTick+0x58>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	4619      	mov	r1, r3
 80018ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018be:	fbb3 f3f1 	udiv	r3, r3, r1
 80018c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c6:	4618      	mov	r0, r3
 80018c8:	f000 f967 	bl	8001b9a <HAL_SYSTICK_Config>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e00e      	b.n	80018f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b0f      	cmp	r3, #15
 80018da:	d80a      	bhi.n	80018f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018dc:	2200      	movs	r2, #0
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	f04f 30ff 	mov.w	r0, #4294967295
 80018e4:	f000 f92f 	bl	8001b46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018e8:	4a06      	ldr	r2, [pc, #24]	; (8001904 <HAL_InitTick+0x5c>)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
 80018f0:	e000      	b.n	80018f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20000000 	.word	0x20000000
 8001900:	20000008 	.word	0x20000008
 8001904:	20000004 	.word	0x20000004

08001908 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800190c:	4b06      	ldr	r3, [pc, #24]	; (8001928 <HAL_IncTick+0x20>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	461a      	mov	r2, r3
 8001912:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_IncTick+0x24>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4413      	add	r3, r2
 8001918:	4a04      	ldr	r2, [pc, #16]	; (800192c <HAL_IncTick+0x24>)
 800191a:	6013      	str	r3, [r2, #0]
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	20000008 	.word	0x20000008
 800192c:	20000aac 	.word	0x20000aac

08001930 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return uwTick;
 8001934:	4b03      	ldr	r3, [pc, #12]	; (8001944 <HAL_GetTick+0x14>)
 8001936:	681b      	ldr	r3, [r3, #0]
}
 8001938:	4618      	mov	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	20000aac 	.word	0x20000aac

08001948 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001950:	f7ff ffee 	bl	8001930 <HAL_GetTick>
 8001954:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001960:	d005      	beq.n	800196e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001962:	4b0a      	ldr	r3, [pc, #40]	; (800198c <HAL_Delay+0x44>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	461a      	mov	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4413      	add	r3, r2
 800196c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800196e:	bf00      	nop
 8001970:	f7ff ffde 	bl	8001930 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	429a      	cmp	r2, r3
 800197e:	d8f7      	bhi.n	8001970 <HAL_Delay+0x28>
  {
  }
}
 8001980:	bf00      	nop
 8001982:	bf00      	nop
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20000008 	.word	0x20000008

08001990 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <__NVIC_SetPriorityGrouping+0x44>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019a6:	68ba      	ldr	r2, [r7, #8]
 80019a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019ac:	4013      	ands	r3, r2
 80019ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019c2:	4a04      	ldr	r2, [pc, #16]	; (80019d4 <__NVIC_SetPriorityGrouping+0x44>)
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	60d3      	str	r3, [r2, #12]
}
 80019c8:	bf00      	nop
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019dc:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <__NVIC_GetPriorityGrouping+0x18>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	0a1b      	lsrs	r3, r3, #8
 80019e2:	f003 0307 	and.w	r3, r3, #7
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	db0b      	blt.n	8001a1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	f003 021f 	and.w	r2, r3, #31
 8001a0c:	4907      	ldr	r1, [pc, #28]	; (8001a2c <__NVIC_EnableIRQ+0x38>)
 8001a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a12:	095b      	lsrs	r3, r3, #5
 8001a14:	2001      	movs	r0, #1
 8001a16:	fa00 f202 	lsl.w	r2, r0, r2
 8001a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	e000e100 	.word	0xe000e100

08001a30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	6039      	str	r1, [r7, #0]
 8001a3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	db0a      	blt.n	8001a5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	490c      	ldr	r1, [pc, #48]	; (8001a7c <__NVIC_SetPriority+0x4c>)
 8001a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4e:	0112      	lsls	r2, r2, #4
 8001a50:	b2d2      	uxtb	r2, r2
 8001a52:	440b      	add	r3, r1
 8001a54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a58:	e00a      	b.n	8001a70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	b2da      	uxtb	r2, r3
 8001a5e:	4908      	ldr	r1, [pc, #32]	; (8001a80 <__NVIC_SetPriority+0x50>)
 8001a60:	79fb      	ldrb	r3, [r7, #7]
 8001a62:	f003 030f 	and.w	r3, r3, #15
 8001a66:	3b04      	subs	r3, #4
 8001a68:	0112      	lsls	r2, r2, #4
 8001a6a:	b2d2      	uxtb	r2, r2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	761a      	strb	r2, [r3, #24]
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	e000e100 	.word	0xe000e100
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b089      	sub	sp, #36	; 0x24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	f1c3 0307 	rsb	r3, r3, #7
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	bf28      	it	cs
 8001aa2:	2304      	movcs	r3, #4
 8001aa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	2b06      	cmp	r3, #6
 8001aac:	d902      	bls.n	8001ab4 <NVIC_EncodePriority+0x30>
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	3b03      	subs	r3, #3
 8001ab2:	e000      	b.n	8001ab6 <NVIC_EncodePriority+0x32>
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43da      	mvns	r2, r3
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	401a      	ands	r2, r3
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001acc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad6:	43d9      	mvns	r1, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001adc:	4313      	orrs	r3, r2
         );
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3724      	adds	r7, #36	; 0x24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
	...

08001aec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3b01      	subs	r3, #1
 8001af8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001afc:	d301      	bcc.n	8001b02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001afe:	2301      	movs	r3, #1
 8001b00:	e00f      	b.n	8001b22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b02:	4a0a      	ldr	r2, [pc, #40]	; (8001b2c <SysTick_Config+0x40>)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3b01      	subs	r3, #1
 8001b08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b0a:	210f      	movs	r1, #15
 8001b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b10:	f7ff ff8e 	bl	8001a30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b14:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <SysTick_Config+0x40>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b1a:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <SysTick_Config+0x40>)
 8001b1c:	2207      	movs	r2, #7
 8001b1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	e000e010 	.word	0xe000e010

08001b30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f7ff ff29 	bl	8001990 <__NVIC_SetPriorityGrouping>
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b086      	sub	sp, #24
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	60b9      	str	r1, [r7, #8]
 8001b50:	607a      	str	r2, [r7, #4]
 8001b52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b58:	f7ff ff3e 	bl	80019d8 <__NVIC_GetPriorityGrouping>
 8001b5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	68b9      	ldr	r1, [r7, #8]
 8001b62:	6978      	ldr	r0, [r7, #20]
 8001b64:	f7ff ff8e 	bl	8001a84 <NVIC_EncodePriority>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b6e:	4611      	mov	r1, r2
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff ff5d 	bl	8001a30 <__NVIC_SetPriority>
}
 8001b76:	bf00      	nop
 8001b78:	3718      	adds	r7, #24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	4603      	mov	r3, r0
 8001b86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff ff31 	bl	80019f4 <__NVIC_EnableIRQ>
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b082      	sub	sp, #8
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff ffa2 	bl	8001aec <SysTick_Config>
 8001ba8:	4603      	mov	r3, r0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
	...

08001bb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b089      	sub	sp, #36	; 0x24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61fb      	str	r3, [r7, #28]
 8001bce:	e16b      	b.n	8001ea8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	697a      	ldr	r2, [r7, #20]
 8001be0:	4013      	ands	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	f040 815a 	bne.w	8001ea2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f003 0303 	and.w	r3, r3, #3
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d005      	beq.n	8001c06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d130      	bne.n	8001c68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	2203      	movs	r2, #3
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43db      	mvns	r3, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	68da      	ldr	r2, [r3, #12]
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	43db      	mvns	r3, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	091b      	lsrs	r3, r3, #4
 8001c52:	f003 0201 	and.w	r2, r3, #1
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f003 0303 	and.w	r3, r3, #3
 8001c70:	2b03      	cmp	r3, #3
 8001c72:	d017      	beq.n	8001ca4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	2203      	movs	r2, #3
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	43db      	mvns	r3, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f003 0303 	and.w	r3, r3, #3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d123      	bne.n	8001cf8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	08da      	lsrs	r2, r3, #3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3208      	adds	r2, #8
 8001cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	f003 0307 	and.w	r3, r3, #7
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	220f      	movs	r2, #15
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	691a      	ldr	r2, [r3, #16]
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	08da      	lsrs	r2, r3, #3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	3208      	adds	r2, #8
 8001cf2:	69b9      	ldr	r1, [r7, #24]
 8001cf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	2203      	movs	r2, #3
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 0203 	and.w	r2, r3, #3
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	f000 80b4 	beq.w	8001ea2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	4b60      	ldr	r3, [pc, #384]	; (8001ec0 <HAL_GPIO_Init+0x30c>)
 8001d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d42:	4a5f      	ldr	r2, [pc, #380]	; (8001ec0 <HAL_GPIO_Init+0x30c>)
 8001d44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d48:	6453      	str	r3, [r2, #68]	; 0x44
 8001d4a:	4b5d      	ldr	r3, [pc, #372]	; (8001ec0 <HAL_GPIO_Init+0x30c>)
 8001d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d56:	4a5b      	ldr	r2, [pc, #364]	; (8001ec4 <HAL_GPIO_Init+0x310>)
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	089b      	lsrs	r3, r3, #2
 8001d5c:	3302      	adds	r3, #2
 8001d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	220f      	movs	r2, #15
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43db      	mvns	r3, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4013      	ands	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a52      	ldr	r2, [pc, #328]	; (8001ec8 <HAL_GPIO_Init+0x314>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d02b      	beq.n	8001dda <HAL_GPIO_Init+0x226>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a51      	ldr	r2, [pc, #324]	; (8001ecc <HAL_GPIO_Init+0x318>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d025      	beq.n	8001dd6 <HAL_GPIO_Init+0x222>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a50      	ldr	r2, [pc, #320]	; (8001ed0 <HAL_GPIO_Init+0x31c>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d01f      	beq.n	8001dd2 <HAL_GPIO_Init+0x21e>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a4f      	ldr	r2, [pc, #316]	; (8001ed4 <HAL_GPIO_Init+0x320>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d019      	beq.n	8001dce <HAL_GPIO_Init+0x21a>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a4e      	ldr	r2, [pc, #312]	; (8001ed8 <HAL_GPIO_Init+0x324>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d013      	beq.n	8001dca <HAL_GPIO_Init+0x216>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a4d      	ldr	r2, [pc, #308]	; (8001edc <HAL_GPIO_Init+0x328>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d00d      	beq.n	8001dc6 <HAL_GPIO_Init+0x212>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a4c      	ldr	r2, [pc, #304]	; (8001ee0 <HAL_GPIO_Init+0x32c>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d007      	beq.n	8001dc2 <HAL_GPIO_Init+0x20e>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a4b      	ldr	r2, [pc, #300]	; (8001ee4 <HAL_GPIO_Init+0x330>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d101      	bne.n	8001dbe <HAL_GPIO_Init+0x20a>
 8001dba:	2307      	movs	r3, #7
 8001dbc:	e00e      	b.n	8001ddc <HAL_GPIO_Init+0x228>
 8001dbe:	2308      	movs	r3, #8
 8001dc0:	e00c      	b.n	8001ddc <HAL_GPIO_Init+0x228>
 8001dc2:	2306      	movs	r3, #6
 8001dc4:	e00a      	b.n	8001ddc <HAL_GPIO_Init+0x228>
 8001dc6:	2305      	movs	r3, #5
 8001dc8:	e008      	b.n	8001ddc <HAL_GPIO_Init+0x228>
 8001dca:	2304      	movs	r3, #4
 8001dcc:	e006      	b.n	8001ddc <HAL_GPIO_Init+0x228>
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e004      	b.n	8001ddc <HAL_GPIO_Init+0x228>
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	e002      	b.n	8001ddc <HAL_GPIO_Init+0x228>
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e000      	b.n	8001ddc <HAL_GPIO_Init+0x228>
 8001dda:	2300      	movs	r3, #0
 8001ddc:	69fa      	ldr	r2, [r7, #28]
 8001dde:	f002 0203 	and.w	r2, r2, #3
 8001de2:	0092      	lsls	r2, r2, #2
 8001de4:	4093      	lsls	r3, r2
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dec:	4935      	ldr	r1, [pc, #212]	; (8001ec4 <HAL_GPIO_Init+0x310>)
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	089b      	lsrs	r3, r3, #2
 8001df2:	3302      	adds	r3, #2
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dfa:	4b3b      	ldr	r3, [pc, #236]	; (8001ee8 <HAL_GPIO_Init+0x334>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	43db      	mvns	r3, r3
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4013      	ands	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e1e:	4a32      	ldr	r2, [pc, #200]	; (8001ee8 <HAL_GPIO_Init+0x334>)
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e24:	4b30      	ldr	r3, [pc, #192]	; (8001ee8 <HAL_GPIO_Init+0x334>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4013      	ands	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d003      	beq.n	8001e48 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e48:	4a27      	ldr	r2, [pc, #156]	; (8001ee8 <HAL_GPIO_Init+0x334>)
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e4e:	4b26      	ldr	r3, [pc, #152]	; (8001ee8 <HAL_GPIO_Init+0x334>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	43db      	mvns	r3, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e72:	4a1d      	ldr	r2, [pc, #116]	; (8001ee8 <HAL_GPIO_Init+0x334>)
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e78:	4b1b      	ldr	r3, [pc, #108]	; (8001ee8 <HAL_GPIO_Init+0x334>)
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	43db      	mvns	r3, r3
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4013      	ands	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d003      	beq.n	8001e9c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e9c:	4a12      	ldr	r2, [pc, #72]	; (8001ee8 <HAL_GPIO_Init+0x334>)
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	61fb      	str	r3, [r7, #28]
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	2b0f      	cmp	r3, #15
 8001eac:	f67f ae90 	bls.w	8001bd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001eb0:	bf00      	nop
 8001eb2:	bf00      	nop
 8001eb4:	3724      	adds	r7, #36	; 0x24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	40013800 	.word	0x40013800
 8001ec8:	40020000 	.word	0x40020000
 8001ecc:	40020400 	.word	0x40020400
 8001ed0:	40020800 	.word	0x40020800
 8001ed4:	40020c00 	.word	0x40020c00
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	40021400 	.word	0x40021400
 8001ee0:	40021800 	.word	0x40021800
 8001ee4:	40021c00 	.word	0x40021c00
 8001ee8:	40013c00 	.word	0x40013c00

08001eec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	807b      	strh	r3, [r7, #2]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001efc:	787b      	ldrb	r3, [r7, #1]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f02:	887a      	ldrh	r2, [r7, #2]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f08:	e003      	b.n	8001f12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f0a:	887b      	ldrh	r3, [r7, #2]
 8001f0c:	041a      	lsls	r2, r3, #16
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	619a      	str	r2, [r3, #24]
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001f1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f20:	b08f      	sub	sp, #60	; 0x3c
 8001f22:	af0a      	add	r7, sp, #40	; 0x28
 8001f24:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d101      	bne.n	8001f30 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e054      	b.n	8001fda <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d106      	bne.n	8001f50 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f00b fc44 	bl	800d7d8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2203      	movs	r2, #3
 8001f54:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d102      	bne.n	8001f6a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f002 fde4 	bl	8004b3c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	603b      	str	r3, [r7, #0]
 8001f7a:	687e      	ldr	r6, [r7, #4]
 8001f7c:	466d      	mov	r5, sp
 8001f7e:	f106 0410 	add.w	r4, r6, #16
 8001f82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f8a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f8e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f92:	1d33      	adds	r3, r6, #4
 8001f94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f96:	6838      	ldr	r0, [r7, #0]
 8001f98:	f002 fd5e 	bl	8004a58 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f002 fddb 	bl	8004b5e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	603b      	str	r3, [r7, #0]
 8001fae:	687e      	ldr	r6, [r7, #4]
 8001fb0:	466d      	mov	r5, sp
 8001fb2:	f106 0410 	add.w	r4, r6, #16
 8001fb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fbe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fc2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fc6:	1d33      	adds	r3, r6, #4
 8001fc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fca:	6838      	ldr	r0, [r7, #0]
 8001fcc:	f002 ff42 	bl	8004e54 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3714      	adds	r7, #20
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001fe2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001fe2:	b590      	push	{r4, r7, lr}
 8001fe4:	b089      	sub	sp, #36	; 0x24
 8001fe6:	af04      	add	r7, sp, #16
 8001fe8:	6078      	str	r0, [r7, #4]
 8001fea:	4608      	mov	r0, r1
 8001fec:	4611      	mov	r1, r2
 8001fee:	461a      	mov	r2, r3
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	70fb      	strb	r3, [r7, #3]
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	70bb      	strb	r3, [r7, #2]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002002:	2b01      	cmp	r3, #1
 8002004:	d101      	bne.n	800200a <HAL_HCD_HC_Init+0x28>
 8002006:	2302      	movs	r3, #2
 8002008:	e076      	b.n	80020f8 <HAL_HCD_HC_Init+0x116>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2201      	movs	r2, #1
 800200e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002012:	78fb      	ldrb	r3, [r7, #3]
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	212c      	movs	r1, #44	; 0x2c
 8002018:	fb01 f303 	mul.w	r3, r1, r3
 800201c:	4413      	add	r3, r2
 800201e:	333d      	adds	r3, #61	; 0x3d
 8002020:	2200      	movs	r2, #0
 8002022:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002024:	78fb      	ldrb	r3, [r7, #3]
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	212c      	movs	r1, #44	; 0x2c
 800202a:	fb01 f303 	mul.w	r3, r1, r3
 800202e:	4413      	add	r3, r2
 8002030:	3338      	adds	r3, #56	; 0x38
 8002032:	787a      	ldrb	r2, [r7, #1]
 8002034:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002036:	78fb      	ldrb	r3, [r7, #3]
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	212c      	movs	r1, #44	; 0x2c
 800203c:	fb01 f303 	mul.w	r3, r1, r3
 8002040:	4413      	add	r3, r2
 8002042:	3340      	adds	r3, #64	; 0x40
 8002044:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002046:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002048:	78fb      	ldrb	r3, [r7, #3]
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	212c      	movs	r1, #44	; 0x2c
 800204e:	fb01 f303 	mul.w	r3, r1, r3
 8002052:	4413      	add	r3, r2
 8002054:	3339      	adds	r3, #57	; 0x39
 8002056:	78fa      	ldrb	r2, [r7, #3]
 8002058:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800205a:	78fb      	ldrb	r3, [r7, #3]
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	212c      	movs	r1, #44	; 0x2c
 8002060:	fb01 f303 	mul.w	r3, r1, r3
 8002064:	4413      	add	r3, r2
 8002066:	333f      	adds	r3, #63	; 0x3f
 8002068:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800206c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800206e:	78fb      	ldrb	r3, [r7, #3]
 8002070:	78ba      	ldrb	r2, [r7, #2]
 8002072:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002076:	b2d0      	uxtb	r0, r2
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	212c      	movs	r1, #44	; 0x2c
 800207c:	fb01 f303 	mul.w	r3, r1, r3
 8002080:	4413      	add	r3, r2
 8002082:	333a      	adds	r3, #58	; 0x3a
 8002084:	4602      	mov	r2, r0
 8002086:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002088:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800208c:	2b00      	cmp	r3, #0
 800208e:	da09      	bge.n	80020a4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002090:	78fb      	ldrb	r3, [r7, #3]
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	212c      	movs	r1, #44	; 0x2c
 8002096:	fb01 f303 	mul.w	r3, r1, r3
 800209a:	4413      	add	r3, r2
 800209c:	333b      	adds	r3, #59	; 0x3b
 800209e:	2201      	movs	r2, #1
 80020a0:	701a      	strb	r2, [r3, #0]
 80020a2:	e008      	b.n	80020b6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80020a4:	78fb      	ldrb	r3, [r7, #3]
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	212c      	movs	r1, #44	; 0x2c
 80020aa:	fb01 f303 	mul.w	r3, r1, r3
 80020ae:	4413      	add	r3, r2
 80020b0:	333b      	adds	r3, #59	; 0x3b
 80020b2:	2200      	movs	r2, #0
 80020b4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80020b6:	78fb      	ldrb	r3, [r7, #3]
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	212c      	movs	r1, #44	; 0x2c
 80020bc:	fb01 f303 	mul.w	r3, r1, r3
 80020c0:	4413      	add	r3, r2
 80020c2:	333c      	adds	r3, #60	; 0x3c
 80020c4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80020c8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6818      	ldr	r0, [r3, #0]
 80020ce:	787c      	ldrb	r4, [r7, #1]
 80020d0:	78ba      	ldrb	r2, [r7, #2]
 80020d2:	78f9      	ldrb	r1, [r7, #3]
 80020d4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80020d6:	9302      	str	r3, [sp, #8]
 80020d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80020dc:	9301      	str	r3, [sp, #4]
 80020de:	f897 3020 	ldrb.w	r3, [r7, #32]
 80020e2:	9300      	str	r3, [sp, #0]
 80020e4:	4623      	mov	r3, r4
 80020e6:	f003 f82f 	bl	8005148 <USB_HC_Init>
 80020ea:	4603      	mov	r3, r0
 80020ec:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80020f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd90      	pop	{r4, r7, pc}

08002100 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	460b      	mov	r3, r1
 800210a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800210c:	2300      	movs	r3, #0
 800210e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002116:	2b01      	cmp	r3, #1
 8002118:	d101      	bne.n	800211e <HAL_HCD_HC_Halt+0x1e>
 800211a:	2302      	movs	r3, #2
 800211c:	e00f      	b.n	800213e <HAL_HCD_HC_Halt+0x3e>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2201      	movs	r2, #1
 8002122:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	78fa      	ldrb	r2, [r7, #3]
 800212c:	4611      	mov	r1, r2
 800212e:	4618      	mov	r0, r3
 8002130:	f003 fa6b 	bl	800560a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800213c:	7bfb      	ldrb	r3, [r7, #15]
}
 800213e:	4618      	mov	r0, r3
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	4608      	mov	r0, r1
 8002152:	4611      	mov	r1, r2
 8002154:	461a      	mov	r2, r3
 8002156:	4603      	mov	r3, r0
 8002158:	70fb      	strb	r3, [r7, #3]
 800215a:	460b      	mov	r3, r1
 800215c:	70bb      	strb	r3, [r7, #2]
 800215e:	4613      	mov	r3, r2
 8002160:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002162:	78fb      	ldrb	r3, [r7, #3]
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	212c      	movs	r1, #44	; 0x2c
 8002168:	fb01 f303 	mul.w	r3, r1, r3
 800216c:	4413      	add	r3, r2
 800216e:	333b      	adds	r3, #59	; 0x3b
 8002170:	78ba      	ldrb	r2, [r7, #2]
 8002172:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002174:	78fb      	ldrb	r3, [r7, #3]
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	212c      	movs	r1, #44	; 0x2c
 800217a:	fb01 f303 	mul.w	r3, r1, r3
 800217e:	4413      	add	r3, r2
 8002180:	333f      	adds	r3, #63	; 0x3f
 8002182:	787a      	ldrb	r2, [r7, #1]
 8002184:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002186:	7c3b      	ldrb	r3, [r7, #16]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d112      	bne.n	80021b2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800218c:	78fb      	ldrb	r3, [r7, #3]
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	212c      	movs	r1, #44	; 0x2c
 8002192:	fb01 f303 	mul.w	r3, r1, r3
 8002196:	4413      	add	r3, r2
 8002198:	3342      	adds	r3, #66	; 0x42
 800219a:	2203      	movs	r2, #3
 800219c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800219e:	78fb      	ldrb	r3, [r7, #3]
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	212c      	movs	r1, #44	; 0x2c
 80021a4:	fb01 f303 	mul.w	r3, r1, r3
 80021a8:	4413      	add	r3, r2
 80021aa:	333d      	adds	r3, #61	; 0x3d
 80021ac:	7f3a      	ldrb	r2, [r7, #28]
 80021ae:	701a      	strb	r2, [r3, #0]
 80021b0:	e008      	b.n	80021c4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021b2:	78fb      	ldrb	r3, [r7, #3]
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	212c      	movs	r1, #44	; 0x2c
 80021b8:	fb01 f303 	mul.w	r3, r1, r3
 80021bc:	4413      	add	r3, r2
 80021be:	3342      	adds	r3, #66	; 0x42
 80021c0:	2202      	movs	r2, #2
 80021c2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80021c4:	787b      	ldrb	r3, [r7, #1]
 80021c6:	2b03      	cmp	r3, #3
 80021c8:	f200 80c6 	bhi.w	8002358 <HAL_HCD_HC_SubmitRequest+0x210>
 80021cc:	a201      	add	r2, pc, #4	; (adr r2, 80021d4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80021ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d2:	bf00      	nop
 80021d4:	080021e5 	.word	0x080021e5
 80021d8:	08002345 	.word	0x08002345
 80021dc:	08002249 	.word	0x08002249
 80021e0:	080022c7 	.word	0x080022c7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80021e4:	7c3b      	ldrb	r3, [r7, #16]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	f040 80b8 	bne.w	800235c <HAL_HCD_HC_SubmitRequest+0x214>
 80021ec:	78bb      	ldrb	r3, [r7, #2]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f040 80b4 	bne.w	800235c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80021f4:	8b3b      	ldrh	r3, [r7, #24]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d108      	bne.n	800220c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80021fa:	78fb      	ldrb	r3, [r7, #3]
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	212c      	movs	r1, #44	; 0x2c
 8002200:	fb01 f303 	mul.w	r3, r1, r3
 8002204:	4413      	add	r3, r2
 8002206:	3355      	adds	r3, #85	; 0x55
 8002208:	2201      	movs	r2, #1
 800220a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800220c:	78fb      	ldrb	r3, [r7, #3]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	212c      	movs	r1, #44	; 0x2c
 8002212:	fb01 f303 	mul.w	r3, r1, r3
 8002216:	4413      	add	r3, r2
 8002218:	3355      	adds	r3, #85	; 0x55
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d109      	bne.n	8002234 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002220:	78fb      	ldrb	r3, [r7, #3]
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	212c      	movs	r1, #44	; 0x2c
 8002226:	fb01 f303 	mul.w	r3, r1, r3
 800222a:	4413      	add	r3, r2
 800222c:	3342      	adds	r3, #66	; 0x42
 800222e:	2200      	movs	r2, #0
 8002230:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002232:	e093      	b.n	800235c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002234:	78fb      	ldrb	r3, [r7, #3]
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	212c      	movs	r1, #44	; 0x2c
 800223a:	fb01 f303 	mul.w	r3, r1, r3
 800223e:	4413      	add	r3, r2
 8002240:	3342      	adds	r3, #66	; 0x42
 8002242:	2202      	movs	r2, #2
 8002244:	701a      	strb	r2, [r3, #0]
      break;
 8002246:	e089      	b.n	800235c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002248:	78bb      	ldrb	r3, [r7, #2]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d11d      	bne.n	800228a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800224e:	78fb      	ldrb	r3, [r7, #3]
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	212c      	movs	r1, #44	; 0x2c
 8002254:	fb01 f303 	mul.w	r3, r1, r3
 8002258:	4413      	add	r3, r2
 800225a:	3355      	adds	r3, #85	; 0x55
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d109      	bne.n	8002276 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002262:	78fb      	ldrb	r3, [r7, #3]
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	212c      	movs	r1, #44	; 0x2c
 8002268:	fb01 f303 	mul.w	r3, r1, r3
 800226c:	4413      	add	r3, r2
 800226e:	3342      	adds	r3, #66	; 0x42
 8002270:	2200      	movs	r2, #0
 8002272:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002274:	e073      	b.n	800235e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002276:	78fb      	ldrb	r3, [r7, #3]
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	212c      	movs	r1, #44	; 0x2c
 800227c:	fb01 f303 	mul.w	r3, r1, r3
 8002280:	4413      	add	r3, r2
 8002282:	3342      	adds	r3, #66	; 0x42
 8002284:	2202      	movs	r2, #2
 8002286:	701a      	strb	r2, [r3, #0]
      break;
 8002288:	e069      	b.n	800235e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800228a:	78fb      	ldrb	r3, [r7, #3]
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	212c      	movs	r1, #44	; 0x2c
 8002290:	fb01 f303 	mul.w	r3, r1, r3
 8002294:	4413      	add	r3, r2
 8002296:	3354      	adds	r3, #84	; 0x54
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d109      	bne.n	80022b2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800229e:	78fb      	ldrb	r3, [r7, #3]
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	212c      	movs	r1, #44	; 0x2c
 80022a4:	fb01 f303 	mul.w	r3, r1, r3
 80022a8:	4413      	add	r3, r2
 80022aa:	3342      	adds	r3, #66	; 0x42
 80022ac:	2200      	movs	r2, #0
 80022ae:	701a      	strb	r2, [r3, #0]
      break;
 80022b0:	e055      	b.n	800235e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022b2:	78fb      	ldrb	r3, [r7, #3]
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	212c      	movs	r1, #44	; 0x2c
 80022b8:	fb01 f303 	mul.w	r3, r1, r3
 80022bc:	4413      	add	r3, r2
 80022be:	3342      	adds	r3, #66	; 0x42
 80022c0:	2202      	movs	r2, #2
 80022c2:	701a      	strb	r2, [r3, #0]
      break;
 80022c4:	e04b      	b.n	800235e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80022c6:	78bb      	ldrb	r3, [r7, #2]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d11d      	bne.n	8002308 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80022cc:	78fb      	ldrb	r3, [r7, #3]
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	212c      	movs	r1, #44	; 0x2c
 80022d2:	fb01 f303 	mul.w	r3, r1, r3
 80022d6:	4413      	add	r3, r2
 80022d8:	3355      	adds	r3, #85	; 0x55
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d109      	bne.n	80022f4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022e0:	78fb      	ldrb	r3, [r7, #3]
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	212c      	movs	r1, #44	; 0x2c
 80022e6:	fb01 f303 	mul.w	r3, r1, r3
 80022ea:	4413      	add	r3, r2
 80022ec:	3342      	adds	r3, #66	; 0x42
 80022ee:	2200      	movs	r2, #0
 80022f0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80022f2:	e034      	b.n	800235e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022f4:	78fb      	ldrb	r3, [r7, #3]
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	212c      	movs	r1, #44	; 0x2c
 80022fa:	fb01 f303 	mul.w	r3, r1, r3
 80022fe:	4413      	add	r3, r2
 8002300:	3342      	adds	r3, #66	; 0x42
 8002302:	2202      	movs	r2, #2
 8002304:	701a      	strb	r2, [r3, #0]
      break;
 8002306:	e02a      	b.n	800235e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002308:	78fb      	ldrb	r3, [r7, #3]
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	212c      	movs	r1, #44	; 0x2c
 800230e:	fb01 f303 	mul.w	r3, r1, r3
 8002312:	4413      	add	r3, r2
 8002314:	3354      	adds	r3, #84	; 0x54
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d109      	bne.n	8002330 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800231c:	78fb      	ldrb	r3, [r7, #3]
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	212c      	movs	r1, #44	; 0x2c
 8002322:	fb01 f303 	mul.w	r3, r1, r3
 8002326:	4413      	add	r3, r2
 8002328:	3342      	adds	r3, #66	; 0x42
 800232a:	2200      	movs	r2, #0
 800232c:	701a      	strb	r2, [r3, #0]
      break;
 800232e:	e016      	b.n	800235e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002330:	78fb      	ldrb	r3, [r7, #3]
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	212c      	movs	r1, #44	; 0x2c
 8002336:	fb01 f303 	mul.w	r3, r1, r3
 800233a:	4413      	add	r3, r2
 800233c:	3342      	adds	r3, #66	; 0x42
 800233e:	2202      	movs	r2, #2
 8002340:	701a      	strb	r2, [r3, #0]
      break;
 8002342:	e00c      	b.n	800235e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002344:	78fb      	ldrb	r3, [r7, #3]
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	212c      	movs	r1, #44	; 0x2c
 800234a:	fb01 f303 	mul.w	r3, r1, r3
 800234e:	4413      	add	r3, r2
 8002350:	3342      	adds	r3, #66	; 0x42
 8002352:	2200      	movs	r2, #0
 8002354:	701a      	strb	r2, [r3, #0]
      break;
 8002356:	e002      	b.n	800235e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002358:	bf00      	nop
 800235a:	e000      	b.n	800235e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800235c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800235e:	78fb      	ldrb	r3, [r7, #3]
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	212c      	movs	r1, #44	; 0x2c
 8002364:	fb01 f303 	mul.w	r3, r1, r3
 8002368:	4413      	add	r3, r2
 800236a:	3344      	adds	r3, #68	; 0x44
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002370:	78fb      	ldrb	r3, [r7, #3]
 8002372:	8b3a      	ldrh	r2, [r7, #24]
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	202c      	movs	r0, #44	; 0x2c
 8002378:	fb00 f303 	mul.w	r3, r0, r3
 800237c:	440b      	add	r3, r1
 800237e:	334c      	adds	r3, #76	; 0x4c
 8002380:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002382:	78fb      	ldrb	r3, [r7, #3]
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	212c      	movs	r1, #44	; 0x2c
 8002388:	fb01 f303 	mul.w	r3, r1, r3
 800238c:	4413      	add	r3, r2
 800238e:	3360      	adds	r3, #96	; 0x60
 8002390:	2200      	movs	r2, #0
 8002392:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002394:	78fb      	ldrb	r3, [r7, #3]
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	212c      	movs	r1, #44	; 0x2c
 800239a:	fb01 f303 	mul.w	r3, r1, r3
 800239e:	4413      	add	r3, r2
 80023a0:	3350      	adds	r3, #80	; 0x50
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80023a6:	78fb      	ldrb	r3, [r7, #3]
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	212c      	movs	r1, #44	; 0x2c
 80023ac:	fb01 f303 	mul.w	r3, r1, r3
 80023b0:	4413      	add	r3, r2
 80023b2:	3339      	adds	r3, #57	; 0x39
 80023b4:	78fa      	ldrb	r2, [r7, #3]
 80023b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80023b8:	78fb      	ldrb	r3, [r7, #3]
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	212c      	movs	r1, #44	; 0x2c
 80023be:	fb01 f303 	mul.w	r3, r1, r3
 80023c2:	4413      	add	r3, r2
 80023c4:	3361      	adds	r3, #97	; 0x61
 80023c6:	2200      	movs	r2, #0
 80023c8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6818      	ldr	r0, [r3, #0]
 80023ce:	78fb      	ldrb	r3, [r7, #3]
 80023d0:	222c      	movs	r2, #44	; 0x2c
 80023d2:	fb02 f303 	mul.w	r3, r2, r3
 80023d6:	3338      	adds	r3, #56	; 0x38
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	18d1      	adds	r1, r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	461a      	mov	r2, r3
 80023e4:	f002 ffbe 	bl	8005364 <USB_HC_StartXfer>
 80023e8:	4603      	mov	r3, r0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop

080023f4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f002 fce1 	bl	8004dd2 <USB_GetMode>
 8002410:	4603      	mov	r3, r0
 8002412:	2b01      	cmp	r3, #1
 8002414:	f040 80f6 	bne.w	8002604 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f002 fcc5 	bl	8004dac <USB_ReadInterrupts>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	f000 80ec 	beq.w	8002602 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f002 fcbc 	bl	8004dac <USB_ReadInterrupts>
 8002434:	4603      	mov	r3, r0
 8002436:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800243a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800243e:	d104      	bne.n	800244a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002448:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f002 fcac 	bl	8004dac <USB_ReadInterrupts>
 8002454:	4603      	mov	r3, r0
 8002456:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800245a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800245e:	d104      	bne.n	800246a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002468:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f002 fc9c 	bl	8004dac <USB_ReadInterrupts>
 8002474:	4603      	mov	r3, r0
 8002476:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800247a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800247e:	d104      	bne.n	800248a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002488:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f002 fc8c 	bl	8004dac <USB_ReadInterrupts>
 8002494:	4603      	mov	r3, r0
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b02      	cmp	r3, #2
 800249c:	d103      	bne.n	80024a6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2202      	movs	r2, #2
 80024a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f002 fc7e 	bl	8004dac <USB_ReadInterrupts>
 80024b0:	4603      	mov	r3, r0
 80024b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024ba:	d11c      	bne.n	80024f6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80024c4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10f      	bne.n	80024f6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80024d6:	2110      	movs	r1, #16
 80024d8:	6938      	ldr	r0, [r7, #16]
 80024da:	f002 fb8d 	bl	8004bf8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80024de:	6938      	ldr	r0, [r7, #16]
 80024e0:	f002 fbae 	bl	8004c40 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2101      	movs	r1, #1
 80024ea:	4618      	mov	r0, r3
 80024ec:	f002 fd66 	bl	8004fbc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f00b f9ef 	bl	800d8d4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f002 fc56 	bl	8004dac <USB_ReadInterrupts>
 8002500:	4603      	mov	r3, r0
 8002502:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002506:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800250a:	d102      	bne.n	8002512 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f001 fa03 	bl	8003918 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f002 fc48 	bl	8004dac <USB_ReadInterrupts>
 800251c:	4603      	mov	r3, r0
 800251e:	f003 0308 	and.w	r3, r3, #8
 8002522:	2b08      	cmp	r3, #8
 8002524:	d106      	bne.n	8002534 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f00b f9b8 	bl	800d89c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2208      	movs	r2, #8
 8002532:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4618      	mov	r0, r3
 800253a:	f002 fc37 	bl	8004dac <USB_ReadInterrupts>
 800253e:	4603      	mov	r3, r0
 8002540:	f003 0310 	and.w	r3, r3, #16
 8002544:	2b10      	cmp	r3, #16
 8002546:	d101      	bne.n	800254c <HAL_HCD_IRQHandler+0x158>
 8002548:	2301      	movs	r3, #1
 800254a:	e000      	b.n	800254e <HAL_HCD_IRQHandler+0x15a>
 800254c:	2300      	movs	r3, #0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d012      	beq.n	8002578 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	699a      	ldr	r2, [r3, #24]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f022 0210 	bic.w	r2, r2, #16
 8002560:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f001 f906 	bl	8003774 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	699a      	ldr	r2, [r3, #24]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f042 0210 	orr.w	r2, r2, #16
 8002576:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4618      	mov	r0, r3
 800257e:	f002 fc15 	bl	8004dac <USB_ReadInterrupts>
 8002582:	4603      	mov	r3, r0
 8002584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002588:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800258c:	d13a      	bne.n	8002604 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f003 f828 	bl	80055e8 <USB_HC_ReadInterrupt>
 8002598:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800259a:	2300      	movs	r3, #0
 800259c:	617b      	str	r3, [r7, #20]
 800259e:	e025      	b.n	80025ec <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	f003 030f 	and.w	r3, r3, #15
 80025a6:	68ba      	ldr	r2, [r7, #8]
 80025a8:	fa22 f303 	lsr.w	r3, r2, r3
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d018      	beq.n	80025e6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	015a      	lsls	r2, r3, #5
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	4413      	add	r3, r2
 80025bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025ca:	d106      	bne.n	80025da <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	4619      	mov	r1, r3
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f8ab 	bl	800272e <HCD_HC_IN_IRQHandler>
 80025d8:	e005      	b.n	80025e6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	4619      	mov	r1, r3
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 fcc6 	bl	8002f72 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	3301      	adds	r3, #1
 80025ea:	617b      	str	r3, [r7, #20]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d3d4      	bcc.n	80025a0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025fe:	615a      	str	r2, [r3, #20]
 8002600:	e000      	b.n	8002604 <HAL_HCD_IRQHandler+0x210>
      return;
 8002602:	bf00      	nop
    }
  }
}
 8002604:	3718      	adds	r7, #24
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b082      	sub	sp, #8
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002618:	2b01      	cmp	r3, #1
 800261a:	d101      	bne.n	8002620 <HAL_HCD_Start+0x16>
 800261c:	2302      	movs	r3, #2
 800261e:	e013      	b.n	8002648 <HAL_HCD_Start+0x3e>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2101      	movs	r1, #1
 800262e:	4618      	mov	r0, r3
 8002630:	f002 fd28 	bl	8005084 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f002 fa6e 	bl	8004b1a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800265e:	2b01      	cmp	r3, #1
 8002660:	d101      	bne.n	8002666 <HAL_HCD_Stop+0x16>
 8002662:	2302      	movs	r3, #2
 8002664:	e00d      	b.n	8002682 <HAL_HCD_Stop+0x32>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4618      	mov	r0, r3
 8002674:	f003 f922 	bl	80058bc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b082      	sub	sp, #8
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f002 fcca 	bl	8005030 <USB_ResetPort>
 800269c:	4603      	mov	r3, r0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
 80026ae:	460b      	mov	r3, r1
 80026b0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80026b2:	78fb      	ldrb	r3, [r7, #3]
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	212c      	movs	r1, #44	; 0x2c
 80026b8:	fb01 f303 	mul.w	r3, r1, r3
 80026bc:	4413      	add	r3, r2
 80026be:	3360      	adds	r3, #96	; 0x60
 80026c0:	781b      	ldrb	r3, [r3, #0]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80026ce:	b480      	push	{r7}
 80026d0:	b083      	sub	sp, #12
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
 80026d6:	460b      	mov	r3, r1
 80026d8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80026da:	78fb      	ldrb	r3, [r7, #3]
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	212c      	movs	r1, #44	; 0x2c
 80026e0:	fb01 f303 	mul.w	r3, r1, r3
 80026e4:	4413      	add	r3, r2
 80026e6:	3350      	adds	r3, #80	; 0x50
 80026e8:	681b      	ldr	r3, [r3, #0]
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b082      	sub	sp, #8
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f002 fd0e 	bl	8005124 <USB_GetCurrentFrame>
 8002708:	4603      	mov	r3, r0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b082      	sub	sp, #8
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4618      	mov	r0, r3
 8002720:	f002 fce9 	bl	80050f6 <USB_GetHostSpeed>
 8002724:	4603      	mov	r3, r0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b086      	sub	sp, #24
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
 8002736:	460b      	mov	r3, r1
 8002738:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002744:	78fb      	ldrb	r3, [r7, #3]
 8002746:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	015a      	lsls	r2, r3, #5
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	4413      	add	r3, r2
 8002750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 0304 	and.w	r3, r3, #4
 800275a:	2b04      	cmp	r3, #4
 800275c:	d119      	bne.n	8002792 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	015a      	lsls	r2, r3, #5
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	4413      	add	r3, r2
 8002766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276a:	461a      	mov	r2, r3
 800276c:	2304      	movs	r3, #4
 800276e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	015a      	lsls	r2, r3, #5
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	4413      	add	r3, r2
 8002778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	0151      	lsls	r1, r2, #5
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	440a      	add	r2, r1
 8002786:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800278a:	f043 0302 	orr.w	r3, r3, #2
 800278e:	60d3      	str	r3, [r2, #12]
 8002790:	e101      	b.n	8002996 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	015a      	lsls	r2, r3, #5
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	4413      	add	r3, r2
 800279a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027a8:	d12b      	bne.n	8002802 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	015a      	lsls	r2, r3, #5
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	4413      	add	r3, r2
 80027b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b6:	461a      	mov	r2, r3
 80027b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027bc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	212c      	movs	r1, #44	; 0x2c
 80027c4:	fb01 f303 	mul.w	r3, r1, r3
 80027c8:	4413      	add	r3, r2
 80027ca:	3361      	adds	r3, #97	; 0x61
 80027cc:	2207      	movs	r2, #7
 80027ce:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	015a      	lsls	r2, r3, #5
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	4413      	add	r3, r2
 80027d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	0151      	lsls	r1, r2, #5
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	440a      	add	r2, r1
 80027e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027ea:	f043 0302 	orr.w	r3, r3, #2
 80027ee:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	4611      	mov	r1, r2
 80027fa:	4618      	mov	r0, r3
 80027fc:	f002 ff05 	bl	800560a <USB_HC_Halt>
 8002800:	e0c9      	b.n	8002996 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	015a      	lsls	r2, r3, #5
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	4413      	add	r3, r2
 800280a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f003 0320 	and.w	r3, r3, #32
 8002814:	2b20      	cmp	r3, #32
 8002816:	d109      	bne.n	800282c <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	015a      	lsls	r2, r3, #5
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	4413      	add	r3, r2
 8002820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002824:	461a      	mov	r2, r3
 8002826:	2320      	movs	r3, #32
 8002828:	6093      	str	r3, [r2, #8]
 800282a:	e0b4      	b.n	8002996 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	015a      	lsls	r2, r3, #5
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	4413      	add	r3, r2
 8002834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 0308 	and.w	r3, r3, #8
 800283e:	2b08      	cmp	r3, #8
 8002840:	d133      	bne.n	80028aa <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	015a      	lsls	r2, r3, #5
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	4413      	add	r3, r2
 800284a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	0151      	lsls	r1, r2, #5
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	440a      	add	r2, r1
 8002858:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800285c:	f043 0302 	orr.w	r3, r3, #2
 8002860:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	212c      	movs	r1, #44	; 0x2c
 8002868:	fb01 f303 	mul.w	r3, r1, r3
 800286c:	4413      	add	r3, r2
 800286e:	3361      	adds	r3, #97	; 0x61
 8002870:	2205      	movs	r2, #5
 8002872:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	015a      	lsls	r2, r3, #5
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	4413      	add	r3, r2
 800287c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002880:	461a      	mov	r2, r3
 8002882:	2310      	movs	r3, #16
 8002884:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	015a      	lsls	r2, r3, #5
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	4413      	add	r3, r2
 800288e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002892:	461a      	mov	r2, r3
 8002894:	2308      	movs	r3, #8
 8002896:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	4611      	mov	r1, r2
 80028a2:	4618      	mov	r0, r3
 80028a4:	f002 feb1 	bl	800560a <USB_HC_Halt>
 80028a8:	e075      	b.n	8002996 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	015a      	lsls	r2, r3, #5
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	4413      	add	r3, r2
 80028b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028c0:	d134      	bne.n	800292c <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	015a      	lsls	r2, r3, #5
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	4413      	add	r3, r2
 80028ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	0151      	lsls	r1, r2, #5
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	440a      	add	r2, r1
 80028d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028dc:	f043 0302 	orr.w	r3, r3, #2
 80028e0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	212c      	movs	r1, #44	; 0x2c
 80028e8:	fb01 f303 	mul.w	r3, r1, r3
 80028ec:	4413      	add	r3, r2
 80028ee:	3361      	adds	r3, #97	; 0x61
 80028f0:	2208      	movs	r2, #8
 80028f2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	015a      	lsls	r2, r3, #5
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	4413      	add	r3, r2
 80028fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002900:	461a      	mov	r2, r3
 8002902:	2310      	movs	r3, #16
 8002904:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	015a      	lsls	r2, r3, #5
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	4413      	add	r3, r2
 800290e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002912:	461a      	mov	r2, r3
 8002914:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002918:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	b2d2      	uxtb	r2, r2
 8002922:	4611      	mov	r1, r2
 8002924:	4618      	mov	r0, r3
 8002926:	f002 fe70 	bl	800560a <USB_HC_Halt>
 800292a:	e034      	b.n	8002996 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	015a      	lsls	r2, r3, #5
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	4413      	add	r3, r2
 8002934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800293e:	2b80      	cmp	r3, #128	; 0x80
 8002940:	d129      	bne.n	8002996 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	015a      	lsls	r2, r3, #5
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	4413      	add	r3, r2
 800294a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	0151      	lsls	r1, r2, #5
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	440a      	add	r2, r1
 8002958:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800295c:	f043 0302 	orr.w	r3, r3, #2
 8002960:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	212c      	movs	r1, #44	; 0x2c
 8002968:	fb01 f303 	mul.w	r3, r1, r3
 800296c:	4413      	add	r3, r2
 800296e:	3361      	adds	r3, #97	; 0x61
 8002970:	2206      	movs	r2, #6
 8002972:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	b2d2      	uxtb	r2, r2
 800297c:	4611      	mov	r1, r2
 800297e:	4618      	mov	r0, r3
 8002980:	f002 fe43 	bl	800560a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	015a      	lsls	r2, r3, #5
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	4413      	add	r3, r2
 800298c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002990:	461a      	mov	r2, r3
 8002992:	2380      	movs	r3, #128	; 0x80
 8002994:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	015a      	lsls	r2, r3, #5
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	4413      	add	r3, r2
 800299e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029ac:	d122      	bne.n	80029f4 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	015a      	lsls	r2, r3, #5
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	4413      	add	r3, r2
 80029b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	0151      	lsls	r1, r2, #5
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	440a      	add	r2, r1
 80029c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029c8:	f043 0302 	orr.w	r3, r3, #2
 80029cc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	b2d2      	uxtb	r2, r2
 80029d6:	4611      	mov	r1, r2
 80029d8:	4618      	mov	r0, r3
 80029da:	f002 fe16 	bl	800560a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	015a      	lsls	r2, r3, #5
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	4413      	add	r3, r2
 80029e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ea:	461a      	mov	r2, r3
 80029ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029f0:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80029f2:	e2ba      	b.n	8002f6a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	015a      	lsls	r2, r3, #5
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	4413      	add	r3, r2
 80029fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	f040 811b 	bne.w	8002c42 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d019      	beq.n	8002a48 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	212c      	movs	r1, #44	; 0x2c
 8002a1a:	fb01 f303 	mul.w	r3, r1, r3
 8002a1e:	4413      	add	r3, r2
 8002a20:	3348      	adds	r3, #72	; 0x48
 8002a22:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	0159      	lsls	r1, r3, #5
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	440b      	add	r3, r1
 8002a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002a36:	1ad2      	subs	r2, r2, r3
 8002a38:	6879      	ldr	r1, [r7, #4]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	202c      	movs	r0, #44	; 0x2c
 8002a3e:	fb00 f303 	mul.w	r3, r0, r3
 8002a42:	440b      	add	r3, r1
 8002a44:	3350      	adds	r3, #80	; 0x50
 8002a46:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	212c      	movs	r1, #44	; 0x2c
 8002a4e:	fb01 f303 	mul.w	r3, r1, r3
 8002a52:	4413      	add	r3, r2
 8002a54:	3361      	adds	r3, #97	; 0x61
 8002a56:	2201      	movs	r2, #1
 8002a58:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	212c      	movs	r1, #44	; 0x2c
 8002a60:	fb01 f303 	mul.w	r3, r1, r3
 8002a64:	4413      	add	r3, r2
 8002a66:	335c      	adds	r3, #92	; 0x5c
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	015a      	lsls	r2, r3, #5
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	4413      	add	r3, r2
 8002a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a78:	461a      	mov	r2, r3
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	212c      	movs	r1, #44	; 0x2c
 8002a84:	fb01 f303 	mul.w	r3, r1, r3
 8002a88:	4413      	add	r3, r2
 8002a8a:	333f      	adds	r3, #63	; 0x3f
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d009      	beq.n	8002aa6 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	212c      	movs	r1, #44	; 0x2c
 8002a98:	fb01 f303 	mul.w	r3, r1, r3
 8002a9c:	4413      	add	r3, r2
 8002a9e:	333f      	adds	r3, #63	; 0x3f
 8002aa0:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d121      	bne.n	8002aea <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	015a      	lsls	r2, r3, #5
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	4413      	add	r3, r2
 8002aae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	0151      	lsls	r1, r2, #5
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	440a      	add	r2, r1
 8002abc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ac0:	f043 0302 	orr.w	r3, r3, #2
 8002ac4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	b2d2      	uxtb	r2, r2
 8002ace:	4611      	mov	r1, r2
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f002 fd9a 	bl	800560a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	015a      	lsls	r2, r3, #5
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	4413      	add	r3, r2
 8002ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	2310      	movs	r3, #16
 8002ae6:	6093      	str	r3, [r2, #8]
 8002ae8:	e066      	b.n	8002bb8 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	212c      	movs	r1, #44	; 0x2c
 8002af0:	fb01 f303 	mul.w	r3, r1, r3
 8002af4:	4413      	add	r3, r2
 8002af6:	333f      	adds	r3, #63	; 0x3f
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	2b03      	cmp	r3, #3
 8002afc:	d127      	bne.n	8002b4e <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	015a      	lsls	r2, r3, #5
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	4413      	add	r3, r2
 8002b06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	0151      	lsls	r1, r2, #5
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	440a      	add	r2, r1
 8002b14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002b1c:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	212c      	movs	r1, #44	; 0x2c
 8002b24:	fb01 f303 	mul.w	r3, r1, r3
 8002b28:	4413      	add	r3, r2
 8002b2a:	3360      	adds	r3, #96	; 0x60
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	b2d9      	uxtb	r1, r3
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	202c      	movs	r0, #44	; 0x2c
 8002b3a:	fb00 f303 	mul.w	r3, r0, r3
 8002b3e:	4413      	add	r3, r2
 8002b40:	3360      	adds	r3, #96	; 0x60
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	461a      	mov	r2, r3
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f00a fed2 	bl	800d8f0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002b4c:	e034      	b.n	8002bb8 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	212c      	movs	r1, #44	; 0x2c
 8002b54:	fb01 f303 	mul.w	r3, r1, r3
 8002b58:	4413      	add	r3, r2
 8002b5a:	333f      	adds	r3, #63	; 0x3f
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d12a      	bne.n	8002bb8 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	212c      	movs	r1, #44	; 0x2c
 8002b68:	fb01 f303 	mul.w	r3, r1, r3
 8002b6c:	4413      	add	r3, r2
 8002b6e:	3360      	adds	r3, #96	; 0x60
 8002b70:	2201      	movs	r2, #1
 8002b72:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	212c      	movs	r1, #44	; 0x2c
 8002b7a:	fb01 f303 	mul.w	r3, r1, r3
 8002b7e:	4413      	add	r3, r2
 8002b80:	3354      	adds	r3, #84	; 0x54
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	f083 0301 	eor.w	r3, r3, #1
 8002b88:	b2d8      	uxtb	r0, r3
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	212c      	movs	r1, #44	; 0x2c
 8002b90:	fb01 f303 	mul.w	r3, r1, r3
 8002b94:	4413      	add	r3, r2
 8002b96:	3354      	adds	r3, #84	; 0x54
 8002b98:	4602      	mov	r2, r0
 8002b9a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	b2d9      	uxtb	r1, r3
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	202c      	movs	r0, #44	; 0x2c
 8002ba6:	fb00 f303 	mul.w	r3, r0, r3
 8002baa:	4413      	add	r3, r2
 8002bac:	3360      	adds	r3, #96	; 0x60
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f00a fe9c 	bl	800d8f0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d12b      	bne.n	8002c18 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	212c      	movs	r1, #44	; 0x2c
 8002bc6:	fb01 f303 	mul.w	r3, r1, r3
 8002bca:	4413      	add	r3, r2
 8002bcc:	3348      	adds	r3, #72	; 0x48
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6879      	ldr	r1, [r7, #4]
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	202c      	movs	r0, #44	; 0x2c
 8002bd6:	fb00 f202 	mul.w	r2, r0, r2
 8002bda:	440a      	add	r2, r1
 8002bdc:	3240      	adds	r2, #64	; 0x40
 8002bde:	8812      	ldrh	r2, [r2, #0]
 8002be0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f000 81be 	beq.w	8002f6a <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	212c      	movs	r1, #44	; 0x2c
 8002bf4:	fb01 f303 	mul.w	r3, r1, r3
 8002bf8:	4413      	add	r3, r2
 8002bfa:	3354      	adds	r3, #84	; 0x54
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	f083 0301 	eor.w	r3, r3, #1
 8002c02:	b2d8      	uxtb	r0, r3
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	212c      	movs	r1, #44	; 0x2c
 8002c0a:	fb01 f303 	mul.w	r3, r1, r3
 8002c0e:	4413      	add	r3, r2
 8002c10:	3354      	adds	r3, #84	; 0x54
 8002c12:	4602      	mov	r2, r0
 8002c14:	701a      	strb	r2, [r3, #0]
}
 8002c16:	e1a8      	b.n	8002f6a <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	212c      	movs	r1, #44	; 0x2c
 8002c1e:	fb01 f303 	mul.w	r3, r1, r3
 8002c22:	4413      	add	r3, r2
 8002c24:	3354      	adds	r3, #84	; 0x54
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	f083 0301 	eor.w	r3, r3, #1
 8002c2c:	b2d8      	uxtb	r0, r3
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	212c      	movs	r1, #44	; 0x2c
 8002c34:	fb01 f303 	mul.w	r3, r1, r3
 8002c38:	4413      	add	r3, r2
 8002c3a:	3354      	adds	r3, #84	; 0x54
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	701a      	strb	r2, [r3, #0]
}
 8002c40:	e193      	b.n	8002f6a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	015a      	lsls	r2, r3, #5
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	4413      	add	r3, r2
 8002c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	f040 8106 	bne.w	8002e66 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	015a      	lsls	r2, r3, #5
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	4413      	add	r3, r2
 8002c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	0151      	lsls	r1, r2, #5
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	440a      	add	r2, r1
 8002c70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c74:	f023 0302 	bic.w	r3, r3, #2
 8002c78:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	212c      	movs	r1, #44	; 0x2c
 8002c80:	fb01 f303 	mul.w	r3, r1, r3
 8002c84:	4413      	add	r3, r2
 8002c86:	3361      	adds	r3, #97	; 0x61
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d109      	bne.n	8002ca2 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	212c      	movs	r1, #44	; 0x2c
 8002c94:	fb01 f303 	mul.w	r3, r1, r3
 8002c98:	4413      	add	r3, r2
 8002c9a:	3360      	adds	r3, #96	; 0x60
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	701a      	strb	r2, [r3, #0]
 8002ca0:	e0c9      	b.n	8002e36 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	212c      	movs	r1, #44	; 0x2c
 8002ca8:	fb01 f303 	mul.w	r3, r1, r3
 8002cac:	4413      	add	r3, r2
 8002cae:	3361      	adds	r3, #97	; 0x61
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	2b05      	cmp	r3, #5
 8002cb4:	d109      	bne.n	8002cca <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	212c      	movs	r1, #44	; 0x2c
 8002cbc:	fb01 f303 	mul.w	r3, r1, r3
 8002cc0:	4413      	add	r3, r2
 8002cc2:	3360      	adds	r3, #96	; 0x60
 8002cc4:	2205      	movs	r2, #5
 8002cc6:	701a      	strb	r2, [r3, #0]
 8002cc8:	e0b5      	b.n	8002e36 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	212c      	movs	r1, #44	; 0x2c
 8002cd0:	fb01 f303 	mul.w	r3, r1, r3
 8002cd4:	4413      	add	r3, r2
 8002cd6:	3361      	adds	r3, #97	; 0x61
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	2b06      	cmp	r3, #6
 8002cdc:	d009      	beq.n	8002cf2 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	212c      	movs	r1, #44	; 0x2c
 8002ce4:	fb01 f303 	mul.w	r3, r1, r3
 8002ce8:	4413      	add	r3, r2
 8002cea:	3361      	adds	r3, #97	; 0x61
 8002cec:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002cee:	2b08      	cmp	r3, #8
 8002cf0:	d150      	bne.n	8002d94 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	212c      	movs	r1, #44	; 0x2c
 8002cf8:	fb01 f303 	mul.w	r3, r1, r3
 8002cfc:	4413      	add	r3, r2
 8002cfe:	335c      	adds	r3, #92	; 0x5c
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	1c5a      	adds	r2, r3, #1
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	202c      	movs	r0, #44	; 0x2c
 8002d0a:	fb00 f303 	mul.w	r3, r0, r3
 8002d0e:	440b      	add	r3, r1
 8002d10:	335c      	adds	r3, #92	; 0x5c
 8002d12:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	212c      	movs	r1, #44	; 0x2c
 8002d1a:	fb01 f303 	mul.w	r3, r1, r3
 8002d1e:	4413      	add	r3, r2
 8002d20:	335c      	adds	r3, #92	; 0x5c
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d912      	bls.n	8002d4e <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	212c      	movs	r1, #44	; 0x2c
 8002d2e:	fb01 f303 	mul.w	r3, r1, r3
 8002d32:	4413      	add	r3, r2
 8002d34:	335c      	adds	r3, #92	; 0x5c
 8002d36:	2200      	movs	r2, #0
 8002d38:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	212c      	movs	r1, #44	; 0x2c
 8002d40:	fb01 f303 	mul.w	r3, r1, r3
 8002d44:	4413      	add	r3, r2
 8002d46:	3360      	adds	r3, #96	; 0x60
 8002d48:	2204      	movs	r2, #4
 8002d4a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d4c:	e073      	b.n	8002e36 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	212c      	movs	r1, #44	; 0x2c
 8002d54:	fb01 f303 	mul.w	r3, r1, r3
 8002d58:	4413      	add	r3, r2
 8002d5a:	3360      	adds	r3, #96	; 0x60
 8002d5c:	2202      	movs	r2, #2
 8002d5e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	015a      	lsls	r2, r3, #5
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	4413      	add	r3, r2
 8002d68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d76:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d7e:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	015a      	lsls	r2, r3, #5
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	4413      	add	r3, r2
 8002d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d92:	e050      	b.n	8002e36 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	212c      	movs	r1, #44	; 0x2c
 8002d9a:	fb01 f303 	mul.w	r3, r1, r3
 8002d9e:	4413      	add	r3, r2
 8002da0:	3361      	adds	r3, #97	; 0x61
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	2b03      	cmp	r3, #3
 8002da6:	d122      	bne.n	8002dee <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	212c      	movs	r1, #44	; 0x2c
 8002dae:	fb01 f303 	mul.w	r3, r1, r3
 8002db2:	4413      	add	r3, r2
 8002db4:	3360      	adds	r3, #96	; 0x60
 8002db6:	2202      	movs	r2, #2
 8002db8:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	015a      	lsls	r2, r3, #5
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002dd0:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002dd8:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	015a      	lsls	r2, r3, #5
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	4413      	add	r3, r2
 8002de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de6:	461a      	mov	r2, r3
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	6013      	str	r3, [r2, #0]
 8002dec:	e023      	b.n	8002e36 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	212c      	movs	r1, #44	; 0x2c
 8002df4:	fb01 f303 	mul.w	r3, r1, r3
 8002df8:	4413      	add	r3, r2
 8002dfa:	3361      	adds	r3, #97	; 0x61
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	2b07      	cmp	r3, #7
 8002e00:	d119      	bne.n	8002e36 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	212c      	movs	r1, #44	; 0x2c
 8002e08:	fb01 f303 	mul.w	r3, r1, r3
 8002e0c:	4413      	add	r3, r2
 8002e0e:	335c      	adds	r3, #92	; 0x5c
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	1c5a      	adds	r2, r3, #1
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	202c      	movs	r0, #44	; 0x2c
 8002e1a:	fb00 f303 	mul.w	r3, r0, r3
 8002e1e:	440b      	add	r3, r1
 8002e20:	335c      	adds	r3, #92	; 0x5c
 8002e22:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	212c      	movs	r1, #44	; 0x2c
 8002e2a:	fb01 f303 	mul.w	r3, r1, r3
 8002e2e:	4413      	add	r3, r2
 8002e30:	3360      	adds	r3, #96	; 0x60
 8002e32:	2204      	movs	r2, #4
 8002e34:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	015a      	lsls	r2, r3, #5
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e42:	461a      	mov	r2, r3
 8002e44:	2302      	movs	r3, #2
 8002e46:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	b2d9      	uxtb	r1, r3
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	202c      	movs	r0, #44	; 0x2c
 8002e52:	fb00 f303 	mul.w	r3, r0, r3
 8002e56:	4413      	add	r3, r2
 8002e58:	3360      	adds	r3, #96	; 0x60
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f00a fd46 	bl	800d8f0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002e64:	e081      	b.n	8002f6a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	015a      	lsls	r2, r3, #5
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f003 0310 	and.w	r3, r3, #16
 8002e78:	2b10      	cmp	r3, #16
 8002e7a:	d176      	bne.n	8002f6a <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	212c      	movs	r1, #44	; 0x2c
 8002e82:	fb01 f303 	mul.w	r3, r1, r3
 8002e86:	4413      	add	r3, r2
 8002e88:	333f      	adds	r3, #63	; 0x3f
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	2b03      	cmp	r3, #3
 8002e8e:	d121      	bne.n	8002ed4 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	212c      	movs	r1, #44	; 0x2c
 8002e96:	fb01 f303 	mul.w	r3, r1, r3
 8002e9a:	4413      	add	r3, r2
 8002e9c:	335c      	adds	r3, #92	; 0x5c
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	015a      	lsls	r2, r3, #5
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	0151      	lsls	r1, r2, #5
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	440a      	add	r2, r1
 8002eb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ebc:	f043 0302 	orr.w	r3, r3, #2
 8002ec0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	b2d2      	uxtb	r2, r2
 8002eca:	4611      	mov	r1, r2
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f002 fb9c 	bl	800560a <USB_HC_Halt>
 8002ed2:	e041      	b.n	8002f58 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	212c      	movs	r1, #44	; 0x2c
 8002eda:	fb01 f303 	mul.w	r3, r1, r3
 8002ede:	4413      	add	r3, r2
 8002ee0:	333f      	adds	r3, #63	; 0x3f
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d009      	beq.n	8002efc <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	212c      	movs	r1, #44	; 0x2c
 8002eee:	fb01 f303 	mul.w	r3, r1, r3
 8002ef2:	4413      	add	r3, r2
 8002ef4:	333f      	adds	r3, #63	; 0x3f
 8002ef6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d12d      	bne.n	8002f58 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	212c      	movs	r1, #44	; 0x2c
 8002f02:	fb01 f303 	mul.w	r3, r1, r3
 8002f06:	4413      	add	r3, r2
 8002f08:	335c      	adds	r3, #92	; 0x5c
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d120      	bne.n	8002f58 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	212c      	movs	r1, #44	; 0x2c
 8002f1c:	fb01 f303 	mul.w	r3, r1, r3
 8002f20:	4413      	add	r3, r2
 8002f22:	3361      	adds	r3, #97	; 0x61
 8002f24:	2203      	movs	r2, #3
 8002f26:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	015a      	lsls	r2, r3, #5
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	4413      	add	r3, r2
 8002f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	0151      	lsls	r1, r2, #5
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	440a      	add	r2, r1
 8002f3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f42:	f043 0302 	orr.w	r3, r3, #2
 8002f46:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	b2d2      	uxtb	r2, r2
 8002f50:	4611      	mov	r1, r2
 8002f52:	4618      	mov	r0, r3
 8002f54:	f002 fb59 	bl	800560a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	015a      	lsls	r2, r3, #5
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	4413      	add	r3, r2
 8002f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f64:	461a      	mov	r2, r3
 8002f66:	2310      	movs	r3, #16
 8002f68:	6093      	str	r3, [r2, #8]
}
 8002f6a:	bf00      	nop
 8002f6c:	3718      	adds	r7, #24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b088      	sub	sp, #32
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002f88:	78fb      	ldrb	r3, [r7, #3]
 8002f8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	015a      	lsls	r2, r3, #5
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	4413      	add	r3, r2
 8002f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f003 0304 	and.w	r3, r3, #4
 8002f9e:	2b04      	cmp	r3, #4
 8002fa0:	d119      	bne.n	8002fd6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	015a      	lsls	r2, r3, #5
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	4413      	add	r3, r2
 8002faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fae:	461a      	mov	r2, r3
 8002fb0:	2304      	movs	r3, #4
 8002fb2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	015a      	lsls	r2, r3, #5
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	4413      	add	r3, r2
 8002fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	0151      	lsls	r1, r2, #5
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	440a      	add	r2, r1
 8002fca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fce:	f043 0302 	orr.w	r3, r3, #2
 8002fd2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002fd4:	e3ca      	b.n	800376c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	015a      	lsls	r2, r3, #5
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	4413      	add	r3, r2
 8002fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 0320 	and.w	r3, r3, #32
 8002fe8:	2b20      	cmp	r3, #32
 8002fea:	d13e      	bne.n	800306a <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	015a      	lsls	r2, r3, #5
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	2320      	movs	r3, #32
 8002ffc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	212c      	movs	r1, #44	; 0x2c
 8003004:	fb01 f303 	mul.w	r3, r1, r3
 8003008:	4413      	add	r3, r2
 800300a:	333d      	adds	r3, #61	; 0x3d
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	2b01      	cmp	r3, #1
 8003010:	f040 83ac 	bne.w	800376c <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	212c      	movs	r1, #44	; 0x2c
 800301a:	fb01 f303 	mul.w	r3, r1, r3
 800301e:	4413      	add	r3, r2
 8003020:	333d      	adds	r3, #61	; 0x3d
 8003022:	2200      	movs	r2, #0
 8003024:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	212c      	movs	r1, #44	; 0x2c
 800302c:	fb01 f303 	mul.w	r3, r1, r3
 8003030:	4413      	add	r3, r2
 8003032:	3360      	adds	r3, #96	; 0x60
 8003034:	2202      	movs	r2, #2
 8003036:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	015a      	lsls	r2, r3, #5
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	4413      	add	r3, r2
 8003040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	0151      	lsls	r1, r2, #5
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	440a      	add	r2, r1
 800304e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003052:	f043 0302 	orr.w	r3, r3, #2
 8003056:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	697a      	ldr	r2, [r7, #20]
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	4611      	mov	r1, r2
 8003062:	4618      	mov	r0, r3
 8003064:	f002 fad1 	bl	800560a <USB_HC_Halt>
}
 8003068:	e380      	b.n	800376c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	015a      	lsls	r2, r3, #5
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	4413      	add	r3, r2
 8003072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800307c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003080:	d122      	bne.n	80030c8 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	015a      	lsls	r2, r3, #5
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	4413      	add	r3, r2
 800308a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	0151      	lsls	r1, r2, #5
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	440a      	add	r2, r1
 8003098:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800309c:	f043 0302 	orr.w	r3, r3, #2
 80030a0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	4611      	mov	r1, r2
 80030ac:	4618      	mov	r0, r3
 80030ae:	f002 faac 	bl	800560a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	015a      	lsls	r2, r3, #5
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	4413      	add	r3, r2
 80030ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030be:	461a      	mov	r2, r3
 80030c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030c4:	6093      	str	r3, [r2, #8]
}
 80030c6:	e351      	b.n	800376c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	015a      	lsls	r2, r3, #5
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	4413      	add	r3, r2
 80030d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d150      	bne.n	8003180 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	212c      	movs	r1, #44	; 0x2c
 80030e4:	fb01 f303 	mul.w	r3, r1, r3
 80030e8:	4413      	add	r3, r2
 80030ea:	335c      	adds	r3, #92	; 0x5c
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	015a      	lsls	r2, r3, #5
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	4413      	add	r3, r2
 80030f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003102:	2b40      	cmp	r3, #64	; 0x40
 8003104:	d111      	bne.n	800312a <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	212c      	movs	r1, #44	; 0x2c
 800310c:	fb01 f303 	mul.w	r3, r1, r3
 8003110:	4413      	add	r3, r2
 8003112:	333d      	adds	r3, #61	; 0x3d
 8003114:	2201      	movs	r2, #1
 8003116:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	015a      	lsls	r2, r3, #5
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	4413      	add	r3, r2
 8003120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003124:	461a      	mov	r2, r3
 8003126:	2340      	movs	r3, #64	; 0x40
 8003128:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	015a      	lsls	r2, r3, #5
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	4413      	add	r3, r2
 8003132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	0151      	lsls	r1, r2, #5
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	440a      	add	r2, r1
 8003140:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003144:	f043 0302 	orr.w	r3, r3, #2
 8003148:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	b2d2      	uxtb	r2, r2
 8003152:	4611      	mov	r1, r2
 8003154:	4618      	mov	r0, r3
 8003156:	f002 fa58 	bl	800560a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	015a      	lsls	r2, r3, #5
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	4413      	add	r3, r2
 8003162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003166:	461a      	mov	r2, r3
 8003168:	2301      	movs	r3, #1
 800316a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	212c      	movs	r1, #44	; 0x2c
 8003172:	fb01 f303 	mul.w	r3, r1, r3
 8003176:	4413      	add	r3, r2
 8003178:	3361      	adds	r3, #97	; 0x61
 800317a:	2201      	movs	r2, #1
 800317c:	701a      	strb	r2, [r3, #0]
}
 800317e:	e2f5      	b.n	800376c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	015a      	lsls	r2, r3, #5
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	4413      	add	r3, r2
 8003188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003192:	2b40      	cmp	r3, #64	; 0x40
 8003194:	d13c      	bne.n	8003210 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	212c      	movs	r1, #44	; 0x2c
 800319c:	fb01 f303 	mul.w	r3, r1, r3
 80031a0:	4413      	add	r3, r2
 80031a2:	3361      	adds	r3, #97	; 0x61
 80031a4:	2204      	movs	r2, #4
 80031a6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	212c      	movs	r1, #44	; 0x2c
 80031ae:	fb01 f303 	mul.w	r3, r1, r3
 80031b2:	4413      	add	r3, r2
 80031b4:	333d      	adds	r3, #61	; 0x3d
 80031b6:	2201      	movs	r2, #1
 80031b8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	212c      	movs	r1, #44	; 0x2c
 80031c0:	fb01 f303 	mul.w	r3, r1, r3
 80031c4:	4413      	add	r3, r2
 80031c6:	335c      	adds	r3, #92	; 0x5c
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	015a      	lsls	r2, r3, #5
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	4413      	add	r3, r2
 80031d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	0151      	lsls	r1, r2, #5
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	440a      	add	r2, r1
 80031e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031e6:	f043 0302 	orr.w	r3, r3, #2
 80031ea:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	b2d2      	uxtb	r2, r2
 80031f4:	4611      	mov	r1, r2
 80031f6:	4618      	mov	r0, r3
 80031f8:	f002 fa07 	bl	800560a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	015a      	lsls	r2, r3, #5
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	4413      	add	r3, r2
 8003204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003208:	461a      	mov	r2, r3
 800320a:	2340      	movs	r3, #64	; 0x40
 800320c:	6093      	str	r3, [r2, #8]
}
 800320e:	e2ad      	b.n	800376c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	015a      	lsls	r2, r3, #5
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	4413      	add	r3, r2
 8003218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 0308 	and.w	r3, r3, #8
 8003222:	2b08      	cmp	r3, #8
 8003224:	d12a      	bne.n	800327c <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	015a      	lsls	r2, r3, #5
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	4413      	add	r3, r2
 800322e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003232:	461a      	mov	r2, r3
 8003234:	2308      	movs	r3, #8
 8003236:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	015a      	lsls	r2, r3, #5
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	4413      	add	r3, r2
 8003240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	0151      	lsls	r1, r2, #5
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	440a      	add	r2, r1
 800324e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003252:	f043 0302 	orr.w	r3, r3, #2
 8003256:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	b2d2      	uxtb	r2, r2
 8003260:	4611      	mov	r1, r2
 8003262:	4618      	mov	r0, r3
 8003264:	f002 f9d1 	bl	800560a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	212c      	movs	r1, #44	; 0x2c
 800326e:	fb01 f303 	mul.w	r3, r1, r3
 8003272:	4413      	add	r3, r2
 8003274:	3361      	adds	r3, #97	; 0x61
 8003276:	2205      	movs	r2, #5
 8003278:	701a      	strb	r2, [r3, #0]
}
 800327a:	e277      	b.n	800376c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	015a      	lsls	r2, r3, #5
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	4413      	add	r3, r2
 8003284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 0310 	and.w	r3, r3, #16
 800328e:	2b10      	cmp	r3, #16
 8003290:	d150      	bne.n	8003334 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	212c      	movs	r1, #44	; 0x2c
 8003298:	fb01 f303 	mul.w	r3, r1, r3
 800329c:	4413      	add	r3, r2
 800329e:	335c      	adds	r3, #92	; 0x5c
 80032a0:	2200      	movs	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	212c      	movs	r1, #44	; 0x2c
 80032aa:	fb01 f303 	mul.w	r3, r1, r3
 80032ae:	4413      	add	r3, r2
 80032b0:	3361      	adds	r3, #97	; 0x61
 80032b2:	2203      	movs	r2, #3
 80032b4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	212c      	movs	r1, #44	; 0x2c
 80032bc:	fb01 f303 	mul.w	r3, r1, r3
 80032c0:	4413      	add	r3, r2
 80032c2:	333d      	adds	r3, #61	; 0x3d
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d112      	bne.n	80032f0 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	212c      	movs	r1, #44	; 0x2c
 80032d0:	fb01 f303 	mul.w	r3, r1, r3
 80032d4:	4413      	add	r3, r2
 80032d6:	333c      	adds	r3, #60	; 0x3c
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d108      	bne.n	80032f0 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	212c      	movs	r1, #44	; 0x2c
 80032e4:	fb01 f303 	mul.w	r3, r1, r3
 80032e8:	4413      	add	r3, r2
 80032ea:	333d      	adds	r3, #61	; 0x3d
 80032ec:	2201      	movs	r2, #1
 80032ee:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	015a      	lsls	r2, r3, #5
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	4413      	add	r3, r2
 80032f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	0151      	lsls	r1, r2, #5
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	440a      	add	r2, r1
 8003306:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800330a:	f043 0302 	orr.w	r3, r3, #2
 800330e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	b2d2      	uxtb	r2, r2
 8003318:	4611      	mov	r1, r2
 800331a:	4618      	mov	r0, r3
 800331c:	f002 f975 	bl	800560a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	015a      	lsls	r2, r3, #5
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	4413      	add	r3, r2
 8003328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800332c:	461a      	mov	r2, r3
 800332e:	2310      	movs	r3, #16
 8003330:	6093      	str	r3, [r2, #8]
}
 8003332:	e21b      	b.n	800376c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	015a      	lsls	r2, r3, #5
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	4413      	add	r3, r2
 800333c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003346:	2b80      	cmp	r3, #128	; 0x80
 8003348:	d174      	bne.n	8003434 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d121      	bne.n	8003396 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	212c      	movs	r1, #44	; 0x2c
 8003358:	fb01 f303 	mul.w	r3, r1, r3
 800335c:	4413      	add	r3, r2
 800335e:	3361      	adds	r3, #97	; 0x61
 8003360:	2206      	movs	r2, #6
 8003362:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	015a      	lsls	r2, r3, #5
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	4413      	add	r3, r2
 800336c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	0151      	lsls	r1, r2, #5
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	440a      	add	r2, r1
 800337a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800337e:	f043 0302 	orr.w	r3, r3, #2
 8003382:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	697a      	ldr	r2, [r7, #20]
 800338a:	b2d2      	uxtb	r2, r2
 800338c:	4611      	mov	r1, r2
 800338e:	4618      	mov	r0, r3
 8003390:	f002 f93b 	bl	800560a <USB_HC_Halt>
 8003394:	e044      	b.n	8003420 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	212c      	movs	r1, #44	; 0x2c
 800339c:	fb01 f303 	mul.w	r3, r1, r3
 80033a0:	4413      	add	r3, r2
 80033a2:	335c      	adds	r3, #92	; 0x5c
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	1c5a      	adds	r2, r3, #1
 80033a8:	6879      	ldr	r1, [r7, #4]
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	202c      	movs	r0, #44	; 0x2c
 80033ae:	fb00 f303 	mul.w	r3, r0, r3
 80033b2:	440b      	add	r3, r1
 80033b4:	335c      	adds	r3, #92	; 0x5c
 80033b6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	212c      	movs	r1, #44	; 0x2c
 80033be:	fb01 f303 	mul.w	r3, r1, r3
 80033c2:	4413      	add	r3, r2
 80033c4:	335c      	adds	r3, #92	; 0x5c
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d920      	bls.n	800340e <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	212c      	movs	r1, #44	; 0x2c
 80033d2:	fb01 f303 	mul.w	r3, r1, r3
 80033d6:	4413      	add	r3, r2
 80033d8:	335c      	adds	r3, #92	; 0x5c
 80033da:	2200      	movs	r2, #0
 80033dc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	212c      	movs	r1, #44	; 0x2c
 80033e4:	fb01 f303 	mul.w	r3, r1, r3
 80033e8:	4413      	add	r3, r2
 80033ea:	3360      	adds	r3, #96	; 0x60
 80033ec:	2204      	movs	r2, #4
 80033ee:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	b2d9      	uxtb	r1, r3
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	202c      	movs	r0, #44	; 0x2c
 80033fa:	fb00 f303 	mul.w	r3, r0, r3
 80033fe:	4413      	add	r3, r2
 8003400:	3360      	adds	r3, #96	; 0x60
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	461a      	mov	r2, r3
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f00a fa72 	bl	800d8f0 <HAL_HCD_HC_NotifyURBChange_Callback>
 800340c:	e008      	b.n	8003420 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	212c      	movs	r1, #44	; 0x2c
 8003414:	fb01 f303 	mul.w	r3, r1, r3
 8003418:	4413      	add	r3, r2
 800341a:	3360      	adds	r3, #96	; 0x60
 800341c:	2202      	movs	r2, #2
 800341e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	015a      	lsls	r2, r3, #5
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	4413      	add	r3, r2
 8003428:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800342c:	461a      	mov	r2, r3
 800342e:	2380      	movs	r3, #128	; 0x80
 8003430:	6093      	str	r3, [r2, #8]
}
 8003432:	e19b      	b.n	800376c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	015a      	lsls	r2, r3, #5
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	4413      	add	r3, r2
 800343c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003446:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800344a:	d134      	bne.n	80034b6 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	015a      	lsls	r2, r3, #5
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	4413      	add	r3, r2
 8003454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	0151      	lsls	r1, r2, #5
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	440a      	add	r2, r1
 8003462:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003466:	f043 0302 	orr.w	r3, r3, #2
 800346a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	697a      	ldr	r2, [r7, #20]
 8003472:	b2d2      	uxtb	r2, r2
 8003474:	4611      	mov	r1, r2
 8003476:	4618      	mov	r0, r3
 8003478:	f002 f8c7 	bl	800560a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	015a      	lsls	r2, r3, #5
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	4413      	add	r3, r2
 8003484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003488:	461a      	mov	r2, r3
 800348a:	2310      	movs	r3, #16
 800348c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	015a      	lsls	r2, r3, #5
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	4413      	add	r3, r2
 8003496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800349a:	461a      	mov	r2, r3
 800349c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034a0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	212c      	movs	r1, #44	; 0x2c
 80034a8:	fb01 f303 	mul.w	r3, r1, r3
 80034ac:	4413      	add	r3, r2
 80034ae:	3361      	adds	r3, #97	; 0x61
 80034b0:	2208      	movs	r2, #8
 80034b2:	701a      	strb	r2, [r3, #0]
}
 80034b4:	e15a      	b.n	800376c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	015a      	lsls	r2, r3, #5
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	4413      	add	r3, r2
 80034be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	f040 814f 	bne.w	800376c <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	015a      	lsls	r2, r3, #5
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	4413      	add	r3, r2
 80034d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	0151      	lsls	r1, r2, #5
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	440a      	add	r2, r1
 80034e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034e8:	f023 0302 	bic.w	r3, r3, #2
 80034ec:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	212c      	movs	r1, #44	; 0x2c
 80034f4:	fb01 f303 	mul.w	r3, r1, r3
 80034f8:	4413      	add	r3, r2
 80034fa:	3361      	adds	r3, #97	; 0x61
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d17d      	bne.n	80035fe <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	212c      	movs	r1, #44	; 0x2c
 8003508:	fb01 f303 	mul.w	r3, r1, r3
 800350c:	4413      	add	r3, r2
 800350e:	3360      	adds	r3, #96	; 0x60
 8003510:	2201      	movs	r2, #1
 8003512:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	212c      	movs	r1, #44	; 0x2c
 800351a:	fb01 f303 	mul.w	r3, r1, r3
 800351e:	4413      	add	r3, r2
 8003520:	333f      	adds	r3, #63	; 0x3f
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	2b02      	cmp	r3, #2
 8003526:	d00a      	beq.n	800353e <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	212c      	movs	r1, #44	; 0x2c
 800352e:	fb01 f303 	mul.w	r3, r1, r3
 8003532:	4413      	add	r3, r2
 8003534:	333f      	adds	r3, #63	; 0x3f
 8003536:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003538:	2b03      	cmp	r3, #3
 800353a:	f040 8100 	bne.w	800373e <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d113      	bne.n	800356e <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	212c      	movs	r1, #44	; 0x2c
 800354c:	fb01 f303 	mul.w	r3, r1, r3
 8003550:	4413      	add	r3, r2
 8003552:	3355      	adds	r3, #85	; 0x55
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	f083 0301 	eor.w	r3, r3, #1
 800355a:	b2d8      	uxtb	r0, r3
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	212c      	movs	r1, #44	; 0x2c
 8003562:	fb01 f303 	mul.w	r3, r1, r3
 8003566:	4413      	add	r3, r2
 8003568:	3355      	adds	r3, #85	; 0x55
 800356a:	4602      	mov	r2, r0
 800356c:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	2b01      	cmp	r3, #1
 8003574:	f040 80e3 	bne.w	800373e <HCD_HC_OUT_IRQHandler+0x7cc>
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	212c      	movs	r1, #44	; 0x2c
 800357e:	fb01 f303 	mul.w	r3, r1, r3
 8003582:	4413      	add	r3, r2
 8003584:	334c      	adds	r3, #76	; 0x4c
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 80d8 	beq.w	800373e <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	212c      	movs	r1, #44	; 0x2c
 8003594:	fb01 f303 	mul.w	r3, r1, r3
 8003598:	4413      	add	r3, r2
 800359a:	334c      	adds	r3, #76	; 0x4c
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	697a      	ldr	r2, [r7, #20]
 80035a2:	202c      	movs	r0, #44	; 0x2c
 80035a4:	fb00 f202 	mul.w	r2, r0, r2
 80035a8:	440a      	add	r2, r1
 80035aa:	3240      	adds	r2, #64	; 0x40
 80035ac:	8812      	ldrh	r2, [r2, #0]
 80035ae:	4413      	add	r3, r2
 80035b0:	3b01      	subs	r3, #1
 80035b2:	6879      	ldr	r1, [r7, #4]
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	202c      	movs	r0, #44	; 0x2c
 80035b8:	fb00 f202 	mul.w	r2, r0, r2
 80035bc:	440a      	add	r2, r1
 80035be:	3240      	adds	r2, #64	; 0x40
 80035c0:	8812      	ldrh	r2, [r2, #0]
 80035c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80035c6:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f000 80b5 	beq.w	800373e <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	212c      	movs	r1, #44	; 0x2c
 80035da:	fb01 f303 	mul.w	r3, r1, r3
 80035de:	4413      	add	r3, r2
 80035e0:	3355      	adds	r3, #85	; 0x55
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	f083 0301 	eor.w	r3, r3, #1
 80035e8:	b2d8      	uxtb	r0, r3
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	212c      	movs	r1, #44	; 0x2c
 80035f0:	fb01 f303 	mul.w	r3, r1, r3
 80035f4:	4413      	add	r3, r2
 80035f6:	3355      	adds	r3, #85	; 0x55
 80035f8:	4602      	mov	r2, r0
 80035fa:	701a      	strb	r2, [r3, #0]
 80035fc:	e09f      	b.n	800373e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	212c      	movs	r1, #44	; 0x2c
 8003604:	fb01 f303 	mul.w	r3, r1, r3
 8003608:	4413      	add	r3, r2
 800360a:	3361      	adds	r3, #97	; 0x61
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	2b03      	cmp	r3, #3
 8003610:	d109      	bne.n	8003626 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	212c      	movs	r1, #44	; 0x2c
 8003618:	fb01 f303 	mul.w	r3, r1, r3
 800361c:	4413      	add	r3, r2
 800361e:	3360      	adds	r3, #96	; 0x60
 8003620:	2202      	movs	r2, #2
 8003622:	701a      	strb	r2, [r3, #0]
 8003624:	e08b      	b.n	800373e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	212c      	movs	r1, #44	; 0x2c
 800362c:	fb01 f303 	mul.w	r3, r1, r3
 8003630:	4413      	add	r3, r2
 8003632:	3361      	adds	r3, #97	; 0x61
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	2b04      	cmp	r3, #4
 8003638:	d109      	bne.n	800364e <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	212c      	movs	r1, #44	; 0x2c
 8003640:	fb01 f303 	mul.w	r3, r1, r3
 8003644:	4413      	add	r3, r2
 8003646:	3360      	adds	r3, #96	; 0x60
 8003648:	2202      	movs	r2, #2
 800364a:	701a      	strb	r2, [r3, #0]
 800364c:	e077      	b.n	800373e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	212c      	movs	r1, #44	; 0x2c
 8003654:	fb01 f303 	mul.w	r3, r1, r3
 8003658:	4413      	add	r3, r2
 800365a:	3361      	adds	r3, #97	; 0x61
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	2b05      	cmp	r3, #5
 8003660:	d109      	bne.n	8003676 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	212c      	movs	r1, #44	; 0x2c
 8003668:	fb01 f303 	mul.w	r3, r1, r3
 800366c:	4413      	add	r3, r2
 800366e:	3360      	adds	r3, #96	; 0x60
 8003670:	2205      	movs	r2, #5
 8003672:	701a      	strb	r2, [r3, #0]
 8003674:	e063      	b.n	800373e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	212c      	movs	r1, #44	; 0x2c
 800367c:	fb01 f303 	mul.w	r3, r1, r3
 8003680:	4413      	add	r3, r2
 8003682:	3361      	adds	r3, #97	; 0x61
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	2b06      	cmp	r3, #6
 8003688:	d009      	beq.n	800369e <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	212c      	movs	r1, #44	; 0x2c
 8003690:	fb01 f303 	mul.w	r3, r1, r3
 8003694:	4413      	add	r3, r2
 8003696:	3361      	adds	r3, #97	; 0x61
 8003698:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800369a:	2b08      	cmp	r3, #8
 800369c:	d14f      	bne.n	800373e <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	212c      	movs	r1, #44	; 0x2c
 80036a4:	fb01 f303 	mul.w	r3, r1, r3
 80036a8:	4413      	add	r3, r2
 80036aa:	335c      	adds	r3, #92	; 0x5c
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	1c5a      	adds	r2, r3, #1
 80036b0:	6879      	ldr	r1, [r7, #4]
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	202c      	movs	r0, #44	; 0x2c
 80036b6:	fb00 f303 	mul.w	r3, r0, r3
 80036ba:	440b      	add	r3, r1
 80036bc:	335c      	adds	r3, #92	; 0x5c
 80036be:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	212c      	movs	r1, #44	; 0x2c
 80036c6:	fb01 f303 	mul.w	r3, r1, r3
 80036ca:	4413      	add	r3, r2
 80036cc:	335c      	adds	r3, #92	; 0x5c
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d912      	bls.n	80036fa <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	212c      	movs	r1, #44	; 0x2c
 80036da:	fb01 f303 	mul.w	r3, r1, r3
 80036de:	4413      	add	r3, r2
 80036e0:	335c      	adds	r3, #92	; 0x5c
 80036e2:	2200      	movs	r2, #0
 80036e4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	212c      	movs	r1, #44	; 0x2c
 80036ec:	fb01 f303 	mul.w	r3, r1, r3
 80036f0:	4413      	add	r3, r2
 80036f2:	3360      	adds	r3, #96	; 0x60
 80036f4:	2204      	movs	r2, #4
 80036f6:	701a      	strb	r2, [r3, #0]
 80036f8:	e021      	b.n	800373e <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	212c      	movs	r1, #44	; 0x2c
 8003700:	fb01 f303 	mul.w	r3, r1, r3
 8003704:	4413      	add	r3, r2
 8003706:	3360      	adds	r3, #96	; 0x60
 8003708:	2202      	movs	r2, #2
 800370a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	015a      	lsls	r2, r3, #5
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	4413      	add	r3, r2
 8003714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003722:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800372a:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	015a      	lsls	r2, r3, #5
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	4413      	add	r3, r2
 8003734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003738:	461a      	mov	r2, r3
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	015a      	lsls	r2, r3, #5
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	4413      	add	r3, r2
 8003746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800374a:	461a      	mov	r2, r3
 800374c:	2302      	movs	r3, #2
 800374e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	b2d9      	uxtb	r1, r3
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	202c      	movs	r0, #44	; 0x2c
 800375a:	fb00 f303 	mul.w	r3, r0, r3
 800375e:	4413      	add	r3, r2
 8003760:	3360      	adds	r3, #96	; 0x60
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	461a      	mov	r2, r3
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f00a f8c2 	bl	800d8f0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800376c:	bf00      	nop
 800376e:	3720      	adds	r7, #32
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b08a      	sub	sp, #40	; 0x28
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6a1b      	ldr	r3, [r3, #32]
 800378c:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	f003 030f 	and.w	r3, r3, #15
 8003794:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	0c5b      	lsrs	r3, r3, #17
 800379a:	f003 030f 	and.w	r3, r3, #15
 800379e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	091b      	lsrs	r3, r3, #4
 80037a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037a8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d004      	beq.n	80037ba <HCD_RXQLVL_IRQHandler+0x46>
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	2b05      	cmp	r3, #5
 80037b4:	f000 80a9 	beq.w	800390a <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80037b8:	e0aa      	b.n	8003910 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 80a6 	beq.w	800390e <HCD_RXQLVL_IRQHandler+0x19a>
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	212c      	movs	r1, #44	; 0x2c
 80037c8:	fb01 f303 	mul.w	r3, r1, r3
 80037cc:	4413      	add	r3, r2
 80037ce:	3344      	adds	r3, #68	; 0x44
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f000 809b 	beq.w	800390e <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	212c      	movs	r1, #44	; 0x2c
 80037de:	fb01 f303 	mul.w	r3, r1, r3
 80037e2:	4413      	add	r3, r2
 80037e4:	3350      	adds	r3, #80	; 0x50
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	441a      	add	r2, r3
 80037ec:	6879      	ldr	r1, [r7, #4]
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	202c      	movs	r0, #44	; 0x2c
 80037f2:	fb00 f303 	mul.w	r3, r0, r3
 80037f6:	440b      	add	r3, r1
 80037f8:	334c      	adds	r3, #76	; 0x4c
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d87a      	bhi.n	80038f6 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6818      	ldr	r0, [r3, #0]
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	212c      	movs	r1, #44	; 0x2c
 800380a:	fb01 f303 	mul.w	r3, r1, r3
 800380e:	4413      	add	r3, r2
 8003810:	3344      	adds	r3, #68	; 0x44
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	b292      	uxth	r2, r2
 8003818:	4619      	mov	r1, r3
 800381a:	f001 fa6f 	bl	8004cfc <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	212c      	movs	r1, #44	; 0x2c
 8003824:	fb01 f303 	mul.w	r3, r1, r3
 8003828:	4413      	add	r3, r2
 800382a:	3344      	adds	r3, #68	; 0x44
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	441a      	add	r2, r3
 8003832:	6879      	ldr	r1, [r7, #4]
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	202c      	movs	r0, #44	; 0x2c
 8003838:	fb00 f303 	mul.w	r3, r0, r3
 800383c:	440b      	add	r3, r1
 800383e:	3344      	adds	r3, #68	; 0x44
 8003840:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	212c      	movs	r1, #44	; 0x2c
 8003848:	fb01 f303 	mul.w	r3, r1, r3
 800384c:	4413      	add	r3, r2
 800384e:	3350      	adds	r3, #80	; 0x50
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	441a      	add	r2, r3
 8003856:	6879      	ldr	r1, [r7, #4]
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	202c      	movs	r0, #44	; 0x2c
 800385c:	fb00 f303 	mul.w	r3, r0, r3
 8003860:	440b      	add	r3, r1
 8003862:	3350      	adds	r3, #80	; 0x50
 8003864:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	015a      	lsls	r2, r3, #5
 800386a:	6a3b      	ldr	r3, [r7, #32]
 800386c:	4413      	add	r3, r2
 800386e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	0cdb      	lsrs	r3, r3, #19
 8003876:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800387a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	212c      	movs	r1, #44	; 0x2c
 8003882:	fb01 f303 	mul.w	r3, r1, r3
 8003886:	4413      	add	r3, r2
 8003888:	3340      	adds	r3, #64	; 0x40
 800388a:	881b      	ldrh	r3, [r3, #0]
 800388c:	461a      	mov	r2, r3
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	4293      	cmp	r3, r2
 8003892:	d13c      	bne.n	800390e <HCD_RXQLVL_IRQHandler+0x19a>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d039      	beq.n	800390e <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	015a      	lsls	r2, r3, #5
 800389e:	6a3b      	ldr	r3, [r7, #32]
 80038a0:	4413      	add	r3, r2
 80038a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80038b0:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80038b8:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	015a      	lsls	r2, r3, #5
 80038be:	6a3b      	ldr	r3, [r7, #32]
 80038c0:	4413      	add	r3, r2
 80038c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c6:	461a      	mov	r2, r3
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	212c      	movs	r1, #44	; 0x2c
 80038d2:	fb01 f303 	mul.w	r3, r1, r3
 80038d6:	4413      	add	r3, r2
 80038d8:	3354      	adds	r3, #84	; 0x54
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	f083 0301 	eor.w	r3, r3, #1
 80038e0:	b2d8      	uxtb	r0, r3
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	212c      	movs	r1, #44	; 0x2c
 80038e8:	fb01 f303 	mul.w	r3, r1, r3
 80038ec:	4413      	add	r3, r2
 80038ee:	3354      	adds	r3, #84	; 0x54
 80038f0:	4602      	mov	r2, r0
 80038f2:	701a      	strb	r2, [r3, #0]
      break;
 80038f4:	e00b      	b.n	800390e <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	212c      	movs	r1, #44	; 0x2c
 80038fc:	fb01 f303 	mul.w	r3, r1, r3
 8003900:	4413      	add	r3, r2
 8003902:	3360      	adds	r3, #96	; 0x60
 8003904:	2204      	movs	r2, #4
 8003906:	701a      	strb	r2, [r3, #0]
      break;
 8003908:	e001      	b.n	800390e <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800390a:	bf00      	nop
 800390c:	e000      	b.n	8003910 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800390e:	bf00      	nop
  }
}
 8003910:	bf00      	nop
 8003912:	3728      	adds	r7, #40	; 0x28
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003944:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b02      	cmp	r3, #2
 800394e:	d10b      	bne.n	8003968 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b01      	cmp	r3, #1
 8003958:	d102      	bne.n	8003960 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f009 ffac 	bl	800d8b8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	f043 0302 	orr.w	r3, r3, #2
 8003966:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f003 0308 	and.w	r3, r3, #8
 800396e:	2b08      	cmp	r3, #8
 8003970:	d132      	bne.n	80039d8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	f043 0308 	orr.w	r3, r3, #8
 8003978:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f003 0304 	and.w	r3, r3, #4
 8003980:	2b04      	cmp	r3, #4
 8003982:	d126      	bne.n	80039d2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	2b02      	cmp	r3, #2
 800398a:	d113      	bne.n	80039b4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003992:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003996:	d106      	bne.n	80039a6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2102      	movs	r1, #2
 800399e:	4618      	mov	r0, r3
 80039a0:	f001 fb0c 	bl	8004fbc <USB_InitFSLSPClkSel>
 80039a4:	e011      	b.n	80039ca <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2101      	movs	r1, #1
 80039ac:	4618      	mov	r0, r3
 80039ae:	f001 fb05 	bl	8004fbc <USB_InitFSLSPClkSel>
 80039b2:	e00a      	b.n	80039ca <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d106      	bne.n	80039ca <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039c2:	461a      	mov	r2, r3
 80039c4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80039c8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f009 ff9e 	bl	800d90c <HAL_HCD_PortEnabled_Callback>
 80039d0:	e002      	b.n	80039d8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f009 ffa8 	bl	800d928 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f003 0320 	and.w	r3, r3, #32
 80039de:	2b20      	cmp	r3, #32
 80039e0:	d103      	bne.n	80039ea <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	f043 0320 	orr.w	r3, r3, #32
 80039e8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80039f0:	461a      	mov	r2, r3
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	6013      	str	r3, [r2, #0]
}
 80039f6:	bf00      	nop
 80039f8:	3718      	adds	r7, #24
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
	...

08003a00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e264      	b.n	8003edc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d075      	beq.n	8003b0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a1e:	4ba3      	ldr	r3, [pc, #652]	; (8003cac <HAL_RCC_OscConfig+0x2ac>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f003 030c 	and.w	r3, r3, #12
 8003a26:	2b04      	cmp	r3, #4
 8003a28:	d00c      	beq.n	8003a44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a2a:	4ba0      	ldr	r3, [pc, #640]	; (8003cac <HAL_RCC_OscConfig+0x2ac>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a32:	2b08      	cmp	r3, #8
 8003a34:	d112      	bne.n	8003a5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a36:	4b9d      	ldr	r3, [pc, #628]	; (8003cac <HAL_RCC_OscConfig+0x2ac>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a42:	d10b      	bne.n	8003a5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a44:	4b99      	ldr	r3, [pc, #612]	; (8003cac <HAL_RCC_OscConfig+0x2ac>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d05b      	beq.n	8003b08 <HAL_RCC_OscConfig+0x108>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d157      	bne.n	8003b08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e23f      	b.n	8003edc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a64:	d106      	bne.n	8003a74 <HAL_RCC_OscConfig+0x74>
 8003a66:	4b91      	ldr	r3, [pc, #580]	; (8003cac <HAL_RCC_OscConfig+0x2ac>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a90      	ldr	r2, [pc, #576]	; (8003cac <HAL_RCC_OscConfig+0x2ac>)
 8003a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a70:	6013      	str	r3, [r2, #0]
 8003a72:	e01d      	b.n	8003ab0 <HAL_RCC_OscConfig+0xb0>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a7c:	d10c      	bne.n	8003a98 <HAL_RCC_OscConfig+0x98>
 8003a7e:	4b8b      	ldr	r3, [pc, #556]	; (8003cac <HAL_RCC_OscConfig+0x2ac>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a8a      	ldr	r2, [pc, #552]	; (8003cac <HAL_RCC_OscConfig+0x2ac>)
 8003a84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a88:	6013      	str	r3, [r2, #0]
 8003a8a:	4b88      	ldr	r3, [pc, #544]	; (8003cac <HAL_RCC_OscConfig+0x2ac>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a87      	ldr	r2, [pc, #540]	; (8003cac <HAL_RCC_OscConfig+0x2ac>)
 8003a90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a94:	6013      	str	r3, [r2, #0]
 8003a96:	e00b      	b.n	8003ab0 <HAL_RCC_OscConfig+0xb0>
 8003a98:	4b84      	ldr	r3, [pc, #528]	; (8003cac <HAL_RCC_OscConfig+0x2ac>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a83      	ldr	r2, [pc, #524]	; (8003cac <HAL_RCC_OscConfig+0x2ac>)
 8003a9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aa2:	6013      	str	r3, [r2, #0]
 8003aa4:	4b81      	ldr	r3, [pc, #516]	; (8003cac <HAL_RCC_OscConfig+0x2ac>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a80      	ldr	r2, [pc, #512]	; (8003cac <HAL_RCC_OscConfig+0x2ac>)
 8003aaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d013      	beq.n	8003ae0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab8:	f7fd ff3a 	bl	8001930 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ac0:	f7fd ff36 	bl	8001930 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b64      	cmp	r3, #100	; 0x64
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e204      	b.n	8003edc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ad2:	4b76      	ldr	r3, [pc, #472]	; (8003cac <HAL_RCC_OscConfig+0x2ac>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0f0      	beq.n	8003ac0 <HAL_RCC_OscConfig+0xc0>
 8003ade:	e014      	b.n	8003b0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae0:	f7fd ff26 	bl	8001930 <HAL_GetTick>
 8003ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ae8:	f7fd ff22 	bl	8001930 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b64      	cmp	r3, #100	; 0x64
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e1f0      	b.n	8003edc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003afa:	4b6c      	ldr	r3, [pc, #432]	; (8003cac <HAL_RCC_OscConfig+0x2ac>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1f0      	bne.n	8003ae8 <HAL_RCC_OscConfig+0xe8>
 8003b06:	e000      	b.n	8003b0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d063      	beq.n	8003bde <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b16:	4b65      	ldr	r3, [pc, #404]	; (8003cac <HAL_RCC_OscConfig+0x2ac>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f003 030c 	and.w	r3, r3, #12
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00b      	beq.n	8003b3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b22:	4b62      	ldr	r3, [pc, #392]	; (8003cac <HAL_RCC_OscConfig+0x2ac>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b2a:	2b08      	cmp	r3, #8
 8003b2c:	d11c      	bne.n	8003b68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b2e:	4b5f      	ldr	r3, [pc, #380]	; (8003cac <HAL_RCC_OscConfig+0x2ac>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d116      	bne.n	8003b68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b3a:	4b5c      	ldr	r3, [pc, #368]	; (8003cac <HAL_RCC_OscConfig+0x2ac>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d005      	beq.n	8003b52 <HAL_RCC_OscConfig+0x152>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d001      	beq.n	8003b52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e1c4      	b.n	8003edc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b52:	4b56      	ldr	r3, [pc, #344]	; (8003cac <HAL_RCC_OscConfig+0x2ac>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	4952      	ldr	r1, [pc, #328]	; (8003cac <HAL_RCC_OscConfig+0x2ac>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b66:	e03a      	b.n	8003bde <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d020      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b70:	4b4f      	ldr	r3, [pc, #316]	; (8003cb0 <HAL_RCC_OscConfig+0x2b0>)
 8003b72:	2201      	movs	r2, #1
 8003b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b76:	f7fd fedb 	bl	8001930 <HAL_GetTick>
 8003b7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b7c:	e008      	b.n	8003b90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b7e:	f7fd fed7 	bl	8001930 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e1a5      	b.n	8003edc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b90:	4b46      	ldr	r3, [pc, #280]	; (8003cac <HAL_RCC_OscConfig+0x2ac>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d0f0      	beq.n	8003b7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b9c:	4b43      	ldr	r3, [pc, #268]	; (8003cac <HAL_RCC_OscConfig+0x2ac>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	00db      	lsls	r3, r3, #3
 8003baa:	4940      	ldr	r1, [pc, #256]	; (8003cac <HAL_RCC_OscConfig+0x2ac>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	600b      	str	r3, [r1, #0]
 8003bb0:	e015      	b.n	8003bde <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bb2:	4b3f      	ldr	r3, [pc, #252]	; (8003cb0 <HAL_RCC_OscConfig+0x2b0>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb8:	f7fd feba 	bl	8001930 <HAL_GetTick>
 8003bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bbe:	e008      	b.n	8003bd2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bc0:	f7fd feb6 	bl	8001930 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e184      	b.n	8003edc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bd2:	4b36      	ldr	r3, [pc, #216]	; (8003cac <HAL_RCC_OscConfig+0x2ac>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1f0      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0308 	and.w	r3, r3, #8
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d030      	beq.n	8003c4c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d016      	beq.n	8003c20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bf2:	4b30      	ldr	r3, [pc, #192]	; (8003cb4 <HAL_RCC_OscConfig+0x2b4>)
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf8:	f7fd fe9a 	bl	8001930 <HAL_GetTick>
 8003bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c00:	f7fd fe96 	bl	8001930 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e164      	b.n	8003edc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c12:	4b26      	ldr	r3, [pc, #152]	; (8003cac <HAL_RCC_OscConfig+0x2ac>)
 8003c14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c16:	f003 0302 	and.w	r3, r3, #2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d0f0      	beq.n	8003c00 <HAL_RCC_OscConfig+0x200>
 8003c1e:	e015      	b.n	8003c4c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c20:	4b24      	ldr	r3, [pc, #144]	; (8003cb4 <HAL_RCC_OscConfig+0x2b4>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c26:	f7fd fe83 	bl	8001930 <HAL_GetTick>
 8003c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c2c:	e008      	b.n	8003c40 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c2e:	f7fd fe7f 	bl	8001930 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d901      	bls.n	8003c40 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e14d      	b.n	8003edc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c40:	4b1a      	ldr	r3, [pc, #104]	; (8003cac <HAL_RCC_OscConfig+0x2ac>)
 8003c42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1f0      	bne.n	8003c2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0304 	and.w	r3, r3, #4
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f000 80a0 	beq.w	8003d9a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c5e:	4b13      	ldr	r3, [pc, #76]	; (8003cac <HAL_RCC_OscConfig+0x2ac>)
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10f      	bne.n	8003c8a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	60bb      	str	r3, [r7, #8]
 8003c6e:	4b0f      	ldr	r3, [pc, #60]	; (8003cac <HAL_RCC_OscConfig+0x2ac>)
 8003c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c72:	4a0e      	ldr	r2, [pc, #56]	; (8003cac <HAL_RCC_OscConfig+0x2ac>)
 8003c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c78:	6413      	str	r3, [r2, #64]	; 0x40
 8003c7a:	4b0c      	ldr	r3, [pc, #48]	; (8003cac <HAL_RCC_OscConfig+0x2ac>)
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c82:	60bb      	str	r3, [r7, #8]
 8003c84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c86:	2301      	movs	r3, #1
 8003c88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c8a:	4b0b      	ldr	r3, [pc, #44]	; (8003cb8 <HAL_RCC_OscConfig+0x2b8>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d121      	bne.n	8003cda <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c96:	4b08      	ldr	r3, [pc, #32]	; (8003cb8 <HAL_RCC_OscConfig+0x2b8>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a07      	ldr	r2, [pc, #28]	; (8003cb8 <HAL_RCC_OscConfig+0x2b8>)
 8003c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ca0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ca2:	f7fd fe45 	bl	8001930 <HAL_GetTick>
 8003ca6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca8:	e011      	b.n	8003cce <HAL_RCC_OscConfig+0x2ce>
 8003caa:	bf00      	nop
 8003cac:	40023800 	.word	0x40023800
 8003cb0:	42470000 	.word	0x42470000
 8003cb4:	42470e80 	.word	0x42470e80
 8003cb8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cbc:	f7fd fe38 	bl	8001930 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e106      	b.n	8003edc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cce:	4b85      	ldr	r3, [pc, #532]	; (8003ee4 <HAL_RCC_OscConfig+0x4e4>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d0f0      	beq.n	8003cbc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d106      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x2f0>
 8003ce2:	4b81      	ldr	r3, [pc, #516]	; (8003ee8 <HAL_RCC_OscConfig+0x4e8>)
 8003ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce6:	4a80      	ldr	r2, [pc, #512]	; (8003ee8 <HAL_RCC_OscConfig+0x4e8>)
 8003ce8:	f043 0301 	orr.w	r3, r3, #1
 8003cec:	6713      	str	r3, [r2, #112]	; 0x70
 8003cee:	e01c      	b.n	8003d2a <HAL_RCC_OscConfig+0x32a>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	2b05      	cmp	r3, #5
 8003cf6:	d10c      	bne.n	8003d12 <HAL_RCC_OscConfig+0x312>
 8003cf8:	4b7b      	ldr	r3, [pc, #492]	; (8003ee8 <HAL_RCC_OscConfig+0x4e8>)
 8003cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfc:	4a7a      	ldr	r2, [pc, #488]	; (8003ee8 <HAL_RCC_OscConfig+0x4e8>)
 8003cfe:	f043 0304 	orr.w	r3, r3, #4
 8003d02:	6713      	str	r3, [r2, #112]	; 0x70
 8003d04:	4b78      	ldr	r3, [pc, #480]	; (8003ee8 <HAL_RCC_OscConfig+0x4e8>)
 8003d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d08:	4a77      	ldr	r2, [pc, #476]	; (8003ee8 <HAL_RCC_OscConfig+0x4e8>)
 8003d0a:	f043 0301 	orr.w	r3, r3, #1
 8003d0e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d10:	e00b      	b.n	8003d2a <HAL_RCC_OscConfig+0x32a>
 8003d12:	4b75      	ldr	r3, [pc, #468]	; (8003ee8 <HAL_RCC_OscConfig+0x4e8>)
 8003d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d16:	4a74      	ldr	r2, [pc, #464]	; (8003ee8 <HAL_RCC_OscConfig+0x4e8>)
 8003d18:	f023 0301 	bic.w	r3, r3, #1
 8003d1c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d1e:	4b72      	ldr	r3, [pc, #456]	; (8003ee8 <HAL_RCC_OscConfig+0x4e8>)
 8003d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d22:	4a71      	ldr	r2, [pc, #452]	; (8003ee8 <HAL_RCC_OscConfig+0x4e8>)
 8003d24:	f023 0304 	bic.w	r3, r3, #4
 8003d28:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d015      	beq.n	8003d5e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d32:	f7fd fdfd 	bl	8001930 <HAL_GetTick>
 8003d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d38:	e00a      	b.n	8003d50 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d3a:	f7fd fdf9 	bl	8001930 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e0c5      	b.n	8003edc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d50:	4b65      	ldr	r3, [pc, #404]	; (8003ee8 <HAL_RCC_OscConfig+0x4e8>)
 8003d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d0ee      	beq.n	8003d3a <HAL_RCC_OscConfig+0x33a>
 8003d5c:	e014      	b.n	8003d88 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d5e:	f7fd fde7 	bl	8001930 <HAL_GetTick>
 8003d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d64:	e00a      	b.n	8003d7c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d66:	f7fd fde3 	bl	8001930 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d901      	bls.n	8003d7c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e0af      	b.n	8003edc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d7c:	4b5a      	ldr	r3, [pc, #360]	; (8003ee8 <HAL_RCC_OscConfig+0x4e8>)
 8003d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1ee      	bne.n	8003d66 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d88:	7dfb      	ldrb	r3, [r7, #23]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d105      	bne.n	8003d9a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d8e:	4b56      	ldr	r3, [pc, #344]	; (8003ee8 <HAL_RCC_OscConfig+0x4e8>)
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	4a55      	ldr	r2, [pc, #340]	; (8003ee8 <HAL_RCC_OscConfig+0x4e8>)
 8003d94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d98:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f000 809b 	beq.w	8003eda <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003da4:	4b50      	ldr	r3, [pc, #320]	; (8003ee8 <HAL_RCC_OscConfig+0x4e8>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f003 030c 	and.w	r3, r3, #12
 8003dac:	2b08      	cmp	r3, #8
 8003dae:	d05c      	beq.n	8003e6a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d141      	bne.n	8003e3c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003db8:	4b4c      	ldr	r3, [pc, #304]	; (8003eec <HAL_RCC_OscConfig+0x4ec>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dbe:	f7fd fdb7 	bl	8001930 <HAL_GetTick>
 8003dc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dc4:	e008      	b.n	8003dd8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dc6:	f7fd fdb3 	bl	8001930 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d901      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e081      	b.n	8003edc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dd8:	4b43      	ldr	r3, [pc, #268]	; (8003ee8 <HAL_RCC_OscConfig+0x4e8>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1f0      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	69da      	ldr	r2, [r3, #28]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a1b      	ldr	r3, [r3, #32]
 8003dec:	431a      	orrs	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	019b      	lsls	r3, r3, #6
 8003df4:	431a      	orrs	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfa:	085b      	lsrs	r3, r3, #1
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	041b      	lsls	r3, r3, #16
 8003e00:	431a      	orrs	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e06:	061b      	lsls	r3, r3, #24
 8003e08:	4937      	ldr	r1, [pc, #220]	; (8003ee8 <HAL_RCC_OscConfig+0x4e8>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e0e:	4b37      	ldr	r3, [pc, #220]	; (8003eec <HAL_RCC_OscConfig+0x4ec>)
 8003e10:	2201      	movs	r2, #1
 8003e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e14:	f7fd fd8c 	bl	8001930 <HAL_GetTick>
 8003e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e1a:	e008      	b.n	8003e2e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e1c:	f7fd fd88 	bl	8001930 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e056      	b.n	8003edc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e2e:	4b2e      	ldr	r3, [pc, #184]	; (8003ee8 <HAL_RCC_OscConfig+0x4e8>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d0f0      	beq.n	8003e1c <HAL_RCC_OscConfig+0x41c>
 8003e3a:	e04e      	b.n	8003eda <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e3c:	4b2b      	ldr	r3, [pc, #172]	; (8003eec <HAL_RCC_OscConfig+0x4ec>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e42:	f7fd fd75 	bl	8001930 <HAL_GetTick>
 8003e46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e48:	e008      	b.n	8003e5c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e4a:	f7fd fd71 	bl	8001930 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d901      	bls.n	8003e5c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e03f      	b.n	8003edc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e5c:	4b22      	ldr	r3, [pc, #136]	; (8003ee8 <HAL_RCC_OscConfig+0x4e8>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1f0      	bne.n	8003e4a <HAL_RCC_OscConfig+0x44a>
 8003e68:	e037      	b.n	8003eda <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d101      	bne.n	8003e76 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e032      	b.n	8003edc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e76:	4b1c      	ldr	r3, [pc, #112]	; (8003ee8 <HAL_RCC_OscConfig+0x4e8>)
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d028      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d121      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d11a      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003eac:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d111      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ebc:	085b      	lsrs	r3, r3, #1
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d107      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d001      	beq.n	8003eda <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e000      	b.n	8003edc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3718      	adds	r7, #24
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	40007000 	.word	0x40007000
 8003ee8:	40023800 	.word	0x40023800
 8003eec:	42470060 	.word	0x42470060

08003ef0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d101      	bne.n	8003f04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e0cc      	b.n	800409e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f04:	4b68      	ldr	r3, [pc, #416]	; (80040a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0307 	and.w	r3, r3, #7
 8003f0c:	683a      	ldr	r2, [r7, #0]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d90c      	bls.n	8003f2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f12:	4b65      	ldr	r3, [pc, #404]	; (80040a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f14:	683a      	ldr	r2, [r7, #0]
 8003f16:	b2d2      	uxtb	r2, r2
 8003f18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f1a:	4b63      	ldr	r3, [pc, #396]	; (80040a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0307 	and.w	r3, r3, #7
 8003f22:	683a      	ldr	r2, [r7, #0]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d001      	beq.n	8003f2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e0b8      	b.n	800409e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d020      	beq.n	8003f7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0304 	and.w	r3, r3, #4
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d005      	beq.n	8003f50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f44:	4b59      	ldr	r3, [pc, #356]	; (80040ac <HAL_RCC_ClockConfig+0x1bc>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	4a58      	ldr	r2, [pc, #352]	; (80040ac <HAL_RCC_ClockConfig+0x1bc>)
 8003f4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0308 	and.w	r3, r3, #8
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d005      	beq.n	8003f68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f5c:	4b53      	ldr	r3, [pc, #332]	; (80040ac <HAL_RCC_ClockConfig+0x1bc>)
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	4a52      	ldr	r2, [pc, #328]	; (80040ac <HAL_RCC_ClockConfig+0x1bc>)
 8003f62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f68:	4b50      	ldr	r3, [pc, #320]	; (80040ac <HAL_RCC_ClockConfig+0x1bc>)
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	494d      	ldr	r1, [pc, #308]	; (80040ac <HAL_RCC_ClockConfig+0x1bc>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d044      	beq.n	8004010 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d107      	bne.n	8003f9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f8e:	4b47      	ldr	r3, [pc, #284]	; (80040ac <HAL_RCC_ClockConfig+0x1bc>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d119      	bne.n	8003fce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e07f      	b.n	800409e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d003      	beq.n	8003fae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003faa:	2b03      	cmp	r3, #3
 8003fac:	d107      	bne.n	8003fbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fae:	4b3f      	ldr	r3, [pc, #252]	; (80040ac <HAL_RCC_ClockConfig+0x1bc>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d109      	bne.n	8003fce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e06f      	b.n	800409e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fbe:	4b3b      	ldr	r3, [pc, #236]	; (80040ac <HAL_RCC_ClockConfig+0x1bc>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d101      	bne.n	8003fce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e067      	b.n	800409e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fce:	4b37      	ldr	r3, [pc, #220]	; (80040ac <HAL_RCC_ClockConfig+0x1bc>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f023 0203 	bic.w	r2, r3, #3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	4934      	ldr	r1, [pc, #208]	; (80040ac <HAL_RCC_ClockConfig+0x1bc>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fe0:	f7fd fca6 	bl	8001930 <HAL_GetTick>
 8003fe4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fe6:	e00a      	b.n	8003ffe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fe8:	f7fd fca2 	bl	8001930 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e04f      	b.n	800409e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ffe:	4b2b      	ldr	r3, [pc, #172]	; (80040ac <HAL_RCC_ClockConfig+0x1bc>)
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f003 020c 	and.w	r2, r3, #12
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	429a      	cmp	r2, r3
 800400e:	d1eb      	bne.n	8003fe8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004010:	4b25      	ldr	r3, [pc, #148]	; (80040a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0307 	and.w	r3, r3, #7
 8004018:	683a      	ldr	r2, [r7, #0]
 800401a:	429a      	cmp	r2, r3
 800401c:	d20c      	bcs.n	8004038 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800401e:	4b22      	ldr	r3, [pc, #136]	; (80040a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004020:	683a      	ldr	r2, [r7, #0]
 8004022:	b2d2      	uxtb	r2, r2
 8004024:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004026:	4b20      	ldr	r3, [pc, #128]	; (80040a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0307 	and.w	r3, r3, #7
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	429a      	cmp	r2, r3
 8004032:	d001      	beq.n	8004038 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e032      	b.n	800409e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0304 	and.w	r3, r3, #4
 8004040:	2b00      	cmp	r3, #0
 8004042:	d008      	beq.n	8004056 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004044:	4b19      	ldr	r3, [pc, #100]	; (80040ac <HAL_RCC_ClockConfig+0x1bc>)
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	4916      	ldr	r1, [pc, #88]	; (80040ac <HAL_RCC_ClockConfig+0x1bc>)
 8004052:	4313      	orrs	r3, r2
 8004054:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0308 	and.w	r3, r3, #8
 800405e:	2b00      	cmp	r3, #0
 8004060:	d009      	beq.n	8004076 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004062:	4b12      	ldr	r3, [pc, #72]	; (80040ac <HAL_RCC_ClockConfig+0x1bc>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	00db      	lsls	r3, r3, #3
 8004070:	490e      	ldr	r1, [pc, #56]	; (80040ac <HAL_RCC_ClockConfig+0x1bc>)
 8004072:	4313      	orrs	r3, r2
 8004074:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004076:	f000 f821 	bl	80040bc <HAL_RCC_GetSysClockFreq>
 800407a:	4602      	mov	r2, r0
 800407c:	4b0b      	ldr	r3, [pc, #44]	; (80040ac <HAL_RCC_ClockConfig+0x1bc>)
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	091b      	lsrs	r3, r3, #4
 8004082:	f003 030f 	and.w	r3, r3, #15
 8004086:	490a      	ldr	r1, [pc, #40]	; (80040b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004088:	5ccb      	ldrb	r3, [r1, r3]
 800408a:	fa22 f303 	lsr.w	r3, r2, r3
 800408e:	4a09      	ldr	r2, [pc, #36]	; (80040b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004090:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004092:	4b09      	ldr	r3, [pc, #36]	; (80040b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4618      	mov	r0, r3
 8004098:	f7fd fc06 	bl	80018a8 <HAL_InitTick>

  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	40023c00 	.word	0x40023c00
 80040ac:	40023800 	.word	0x40023800
 80040b0:	08010510 	.word	0x08010510
 80040b4:	20000000 	.word	0x20000000
 80040b8:	20000004 	.word	0x20000004

080040bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80040c0:	b084      	sub	sp, #16
 80040c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040c4:	2300      	movs	r3, #0
 80040c6:	607b      	str	r3, [r7, #4]
 80040c8:	2300      	movs	r3, #0
 80040ca:	60fb      	str	r3, [r7, #12]
 80040cc:	2300      	movs	r3, #0
 80040ce:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80040d0:	2300      	movs	r3, #0
 80040d2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040d4:	4b67      	ldr	r3, [pc, #412]	; (8004274 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f003 030c 	and.w	r3, r3, #12
 80040dc:	2b08      	cmp	r3, #8
 80040de:	d00d      	beq.n	80040fc <HAL_RCC_GetSysClockFreq+0x40>
 80040e0:	2b08      	cmp	r3, #8
 80040e2:	f200 80bd 	bhi.w	8004260 <HAL_RCC_GetSysClockFreq+0x1a4>
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d002      	beq.n	80040f0 <HAL_RCC_GetSysClockFreq+0x34>
 80040ea:	2b04      	cmp	r3, #4
 80040ec:	d003      	beq.n	80040f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80040ee:	e0b7      	b.n	8004260 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040f0:	4b61      	ldr	r3, [pc, #388]	; (8004278 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80040f2:	60bb      	str	r3, [r7, #8]
       break;
 80040f4:	e0b7      	b.n	8004266 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040f6:	4b61      	ldr	r3, [pc, #388]	; (800427c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80040f8:	60bb      	str	r3, [r7, #8]
      break;
 80040fa:	e0b4      	b.n	8004266 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040fc:	4b5d      	ldr	r3, [pc, #372]	; (8004274 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004104:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004106:	4b5b      	ldr	r3, [pc, #364]	; (8004274 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d04d      	beq.n	80041ae <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004112:	4b58      	ldr	r3, [pc, #352]	; (8004274 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	099b      	lsrs	r3, r3, #6
 8004118:	461a      	mov	r2, r3
 800411a:	f04f 0300 	mov.w	r3, #0
 800411e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004122:	f04f 0100 	mov.w	r1, #0
 8004126:	ea02 0800 	and.w	r8, r2, r0
 800412a:	ea03 0901 	and.w	r9, r3, r1
 800412e:	4640      	mov	r0, r8
 8004130:	4649      	mov	r1, r9
 8004132:	f04f 0200 	mov.w	r2, #0
 8004136:	f04f 0300 	mov.w	r3, #0
 800413a:	014b      	lsls	r3, r1, #5
 800413c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004140:	0142      	lsls	r2, r0, #5
 8004142:	4610      	mov	r0, r2
 8004144:	4619      	mov	r1, r3
 8004146:	ebb0 0008 	subs.w	r0, r0, r8
 800414a:	eb61 0109 	sbc.w	r1, r1, r9
 800414e:	f04f 0200 	mov.w	r2, #0
 8004152:	f04f 0300 	mov.w	r3, #0
 8004156:	018b      	lsls	r3, r1, #6
 8004158:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800415c:	0182      	lsls	r2, r0, #6
 800415e:	1a12      	subs	r2, r2, r0
 8004160:	eb63 0301 	sbc.w	r3, r3, r1
 8004164:	f04f 0000 	mov.w	r0, #0
 8004168:	f04f 0100 	mov.w	r1, #0
 800416c:	00d9      	lsls	r1, r3, #3
 800416e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004172:	00d0      	lsls	r0, r2, #3
 8004174:	4602      	mov	r2, r0
 8004176:	460b      	mov	r3, r1
 8004178:	eb12 0208 	adds.w	r2, r2, r8
 800417c:	eb43 0309 	adc.w	r3, r3, r9
 8004180:	f04f 0000 	mov.w	r0, #0
 8004184:	f04f 0100 	mov.w	r1, #0
 8004188:	0259      	lsls	r1, r3, #9
 800418a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800418e:	0250      	lsls	r0, r2, #9
 8004190:	4602      	mov	r2, r0
 8004192:	460b      	mov	r3, r1
 8004194:	4610      	mov	r0, r2
 8004196:	4619      	mov	r1, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	461a      	mov	r2, r3
 800419c:	f04f 0300 	mov.w	r3, #0
 80041a0:	f7fc fb84 	bl	80008ac <__aeabi_uldivmod>
 80041a4:	4602      	mov	r2, r0
 80041a6:	460b      	mov	r3, r1
 80041a8:	4613      	mov	r3, r2
 80041aa:	60fb      	str	r3, [r7, #12]
 80041ac:	e04a      	b.n	8004244 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041ae:	4b31      	ldr	r3, [pc, #196]	; (8004274 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	099b      	lsrs	r3, r3, #6
 80041b4:	461a      	mov	r2, r3
 80041b6:	f04f 0300 	mov.w	r3, #0
 80041ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80041be:	f04f 0100 	mov.w	r1, #0
 80041c2:	ea02 0400 	and.w	r4, r2, r0
 80041c6:	ea03 0501 	and.w	r5, r3, r1
 80041ca:	4620      	mov	r0, r4
 80041cc:	4629      	mov	r1, r5
 80041ce:	f04f 0200 	mov.w	r2, #0
 80041d2:	f04f 0300 	mov.w	r3, #0
 80041d6:	014b      	lsls	r3, r1, #5
 80041d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80041dc:	0142      	lsls	r2, r0, #5
 80041de:	4610      	mov	r0, r2
 80041e0:	4619      	mov	r1, r3
 80041e2:	1b00      	subs	r0, r0, r4
 80041e4:	eb61 0105 	sbc.w	r1, r1, r5
 80041e8:	f04f 0200 	mov.w	r2, #0
 80041ec:	f04f 0300 	mov.w	r3, #0
 80041f0:	018b      	lsls	r3, r1, #6
 80041f2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80041f6:	0182      	lsls	r2, r0, #6
 80041f8:	1a12      	subs	r2, r2, r0
 80041fa:	eb63 0301 	sbc.w	r3, r3, r1
 80041fe:	f04f 0000 	mov.w	r0, #0
 8004202:	f04f 0100 	mov.w	r1, #0
 8004206:	00d9      	lsls	r1, r3, #3
 8004208:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800420c:	00d0      	lsls	r0, r2, #3
 800420e:	4602      	mov	r2, r0
 8004210:	460b      	mov	r3, r1
 8004212:	1912      	adds	r2, r2, r4
 8004214:	eb45 0303 	adc.w	r3, r5, r3
 8004218:	f04f 0000 	mov.w	r0, #0
 800421c:	f04f 0100 	mov.w	r1, #0
 8004220:	0299      	lsls	r1, r3, #10
 8004222:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004226:	0290      	lsls	r0, r2, #10
 8004228:	4602      	mov	r2, r0
 800422a:	460b      	mov	r3, r1
 800422c:	4610      	mov	r0, r2
 800422e:	4619      	mov	r1, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	461a      	mov	r2, r3
 8004234:	f04f 0300 	mov.w	r3, #0
 8004238:	f7fc fb38 	bl	80008ac <__aeabi_uldivmod>
 800423c:	4602      	mov	r2, r0
 800423e:	460b      	mov	r3, r1
 8004240:	4613      	mov	r3, r2
 8004242:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004244:	4b0b      	ldr	r3, [pc, #44]	; (8004274 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	0c1b      	lsrs	r3, r3, #16
 800424a:	f003 0303 	and.w	r3, r3, #3
 800424e:	3301      	adds	r3, #1
 8004250:	005b      	lsls	r3, r3, #1
 8004252:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	fbb2 f3f3 	udiv	r3, r2, r3
 800425c:	60bb      	str	r3, [r7, #8]
      break;
 800425e:	e002      	b.n	8004266 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004260:	4b05      	ldr	r3, [pc, #20]	; (8004278 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004262:	60bb      	str	r3, [r7, #8]
      break;
 8004264:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004266:	68bb      	ldr	r3, [r7, #8]
}
 8004268:	4618      	mov	r0, r3
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004272:	bf00      	nop
 8004274:	40023800 	.word	0x40023800
 8004278:	00f42400 	.word	0x00f42400
 800427c:	007a1200 	.word	0x007a1200

08004280 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004280:	b480      	push	{r7}
 8004282:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004284:	4b03      	ldr	r3, [pc, #12]	; (8004294 <HAL_RCC_GetHCLKFreq+0x14>)
 8004286:	681b      	ldr	r3, [r3, #0]
}
 8004288:	4618      	mov	r0, r3
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	20000000 	.word	0x20000000

08004298 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800429c:	f7ff fff0 	bl	8004280 <HAL_RCC_GetHCLKFreq>
 80042a0:	4602      	mov	r2, r0
 80042a2:	4b05      	ldr	r3, [pc, #20]	; (80042b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	0a9b      	lsrs	r3, r3, #10
 80042a8:	f003 0307 	and.w	r3, r3, #7
 80042ac:	4903      	ldr	r1, [pc, #12]	; (80042bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80042ae:	5ccb      	ldrb	r3, [r1, r3]
 80042b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	40023800 	.word	0x40023800
 80042bc:	08010520 	.word	0x08010520

080042c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80042c4:	f7ff ffdc 	bl	8004280 <HAL_RCC_GetHCLKFreq>
 80042c8:	4602      	mov	r2, r0
 80042ca:	4b05      	ldr	r3, [pc, #20]	; (80042e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	0b5b      	lsrs	r3, r3, #13
 80042d0:	f003 0307 	and.w	r3, r3, #7
 80042d4:	4903      	ldr	r1, [pc, #12]	; (80042e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042d6:	5ccb      	ldrb	r3, [r1, r3]
 80042d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042dc:	4618      	mov	r0, r3
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	40023800 	.word	0x40023800
 80042e4:	08010520 	.word	0x08010520

080042e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d101      	bne.n	80042fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e03f      	b.n	800437a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d106      	bne.n	8004314 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f7fd f9ba 	bl	8001688 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2224      	movs	r2, #36	; 0x24
 8004318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68da      	ldr	r2, [r3, #12]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800432a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 f9cb 	bl	80046c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	691a      	ldr	r2, [r3, #16]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004340:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	695a      	ldr	r2, [r3, #20]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004350:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68da      	ldr	r2, [r3, #12]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004360:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2220      	movs	r2, #32
 800436c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2220      	movs	r2, #32
 8004374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3708      	adds	r7, #8
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004382:	b580      	push	{r7, lr}
 8004384:	b08a      	sub	sp, #40	; 0x28
 8004386:	af02      	add	r7, sp, #8
 8004388:	60f8      	str	r0, [r7, #12]
 800438a:	60b9      	str	r1, [r7, #8]
 800438c:	603b      	str	r3, [r7, #0]
 800438e:	4613      	mov	r3, r2
 8004390:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004392:	2300      	movs	r3, #0
 8004394:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b20      	cmp	r3, #32
 80043a0:	d17c      	bne.n	800449c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d002      	beq.n	80043ae <HAL_UART_Transmit+0x2c>
 80043a8:	88fb      	ldrh	r3, [r7, #6]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e075      	b.n	800449e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d101      	bne.n	80043c0 <HAL_UART_Transmit+0x3e>
 80043bc:	2302      	movs	r3, #2
 80043be:	e06e      	b.n	800449e <HAL_UART_Transmit+0x11c>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2221      	movs	r2, #33	; 0x21
 80043d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043d6:	f7fd faab 	bl	8001930 <HAL_GetTick>
 80043da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	88fa      	ldrh	r2, [r7, #6]
 80043e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	88fa      	ldrh	r2, [r7, #6]
 80043e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043f0:	d108      	bne.n	8004404 <HAL_UART_Transmit+0x82>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d104      	bne.n	8004404 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80043fa:	2300      	movs	r3, #0
 80043fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	61bb      	str	r3, [r7, #24]
 8004402:	e003      	b.n	800440c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004408:	2300      	movs	r3, #0
 800440a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004414:	e02a      	b.n	800446c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	9300      	str	r3, [sp, #0]
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	2200      	movs	r2, #0
 800441e:	2180      	movs	r1, #128	; 0x80
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	f000 f8e2 	bl	80045ea <UART_WaitOnFlagUntilTimeout>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d001      	beq.n	8004430 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e036      	b.n	800449e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10b      	bne.n	800444e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	881b      	ldrh	r3, [r3, #0]
 800443a:	461a      	mov	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004444:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	3302      	adds	r3, #2
 800444a:	61bb      	str	r3, [r7, #24]
 800444c:	e007      	b.n	800445e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	781a      	ldrb	r2, [r3, #0]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	3301      	adds	r3, #1
 800445c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004462:	b29b      	uxth	r3, r3
 8004464:	3b01      	subs	r3, #1
 8004466:	b29a      	uxth	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004470:	b29b      	uxth	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1cf      	bne.n	8004416 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	9300      	str	r3, [sp, #0]
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	2200      	movs	r2, #0
 800447e:	2140      	movs	r1, #64	; 0x40
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f000 f8b2 	bl	80045ea <UART_WaitOnFlagUntilTimeout>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d001      	beq.n	8004490 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e006      	b.n	800449e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2220      	movs	r2, #32
 8004494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004498:	2300      	movs	r3, #0
 800449a:	e000      	b.n	800449e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800449c:	2302      	movs	r3, #2
  }
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3720      	adds	r7, #32
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044a6:	b580      	push	{r7, lr}
 80044a8:	b08a      	sub	sp, #40	; 0x28
 80044aa:	af02      	add	r7, sp, #8
 80044ac:	60f8      	str	r0, [r7, #12]
 80044ae:	60b9      	str	r1, [r7, #8]
 80044b0:	603b      	str	r3, [r7, #0]
 80044b2:	4613      	mov	r3, r2
 80044b4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044b6:	2300      	movs	r3, #0
 80044b8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b20      	cmp	r3, #32
 80044c4:	f040 808c 	bne.w	80045e0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d002      	beq.n	80044d4 <HAL_UART_Receive+0x2e>
 80044ce:	88fb      	ldrh	r3, [r7, #6]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d101      	bne.n	80044d8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e084      	b.n	80045e2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d101      	bne.n	80044e6 <HAL_UART_Receive+0x40>
 80044e2:	2302      	movs	r3, #2
 80044e4:	e07d      	b.n	80045e2 <HAL_UART_Receive+0x13c>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2201      	movs	r2, #1
 80044ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2222      	movs	r2, #34	; 0x22
 80044f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004502:	f7fd fa15 	bl	8001930 <HAL_GetTick>
 8004506:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	88fa      	ldrh	r2, [r7, #6]
 800450c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	88fa      	ldrh	r2, [r7, #6]
 8004512:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800451c:	d108      	bne.n	8004530 <HAL_UART_Receive+0x8a>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d104      	bne.n	8004530 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004526:	2300      	movs	r3, #0
 8004528:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	61bb      	str	r3, [r7, #24]
 800452e:	e003      	b.n	8004538 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004534:	2300      	movs	r3, #0
 8004536:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004540:	e043      	b.n	80045ca <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	9300      	str	r3, [sp, #0]
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	2200      	movs	r2, #0
 800454a:	2120      	movs	r1, #32
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f000 f84c 	bl	80045ea <UART_WaitOnFlagUntilTimeout>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d001      	beq.n	800455c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e042      	b.n	80045e2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10c      	bne.n	800457c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	b29b      	uxth	r3, r3
 800456a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800456e:	b29a      	uxth	r2, r3
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	3302      	adds	r3, #2
 8004578:	61bb      	str	r3, [r7, #24]
 800457a:	e01f      	b.n	80045bc <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004584:	d007      	beq.n	8004596 <HAL_UART_Receive+0xf0>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10a      	bne.n	80045a4 <HAL_UART_Receive+0xfe>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d106      	bne.n	80045a4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	b2da      	uxtb	r2, r3
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	701a      	strb	r2, [r3, #0]
 80045a2:	e008      	b.n	80045b6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045b0:	b2da      	uxtb	r2, r3
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	3301      	adds	r3, #1
 80045ba:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	3b01      	subs	r3, #1
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1b6      	bne.n	8004542 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2220      	movs	r2, #32
 80045d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80045dc:	2300      	movs	r3, #0
 80045de:	e000      	b.n	80045e2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80045e0:	2302      	movs	r3, #2
  }
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3720      	adds	r7, #32
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b090      	sub	sp, #64	; 0x40
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	60f8      	str	r0, [r7, #12]
 80045f2:	60b9      	str	r1, [r7, #8]
 80045f4:	603b      	str	r3, [r7, #0]
 80045f6:	4613      	mov	r3, r2
 80045f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045fa:	e050      	b.n	800469e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004602:	d04c      	beq.n	800469e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004604:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004606:	2b00      	cmp	r3, #0
 8004608:	d007      	beq.n	800461a <UART_WaitOnFlagUntilTimeout+0x30>
 800460a:	f7fd f991 	bl	8001930 <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004616:	429a      	cmp	r2, r3
 8004618:	d241      	bcs.n	800469e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	330c      	adds	r3, #12
 8004620:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004624:	e853 3f00 	ldrex	r3, [r3]
 8004628:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004630:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	330c      	adds	r3, #12
 8004638:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800463a:	637a      	str	r2, [r7, #52]	; 0x34
 800463c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004640:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004642:	e841 2300 	strex	r3, r2, [r1]
 8004646:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1e5      	bne.n	800461a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	3314      	adds	r3, #20
 8004654:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	e853 3f00 	ldrex	r3, [r3]
 800465c:	613b      	str	r3, [r7, #16]
   return(result);
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	f023 0301 	bic.w	r3, r3, #1
 8004664:	63bb      	str	r3, [r7, #56]	; 0x38
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	3314      	adds	r3, #20
 800466c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800466e:	623a      	str	r2, [r7, #32]
 8004670:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004672:	69f9      	ldr	r1, [r7, #28]
 8004674:	6a3a      	ldr	r2, [r7, #32]
 8004676:	e841 2300 	strex	r3, r2, [r1]
 800467a:	61bb      	str	r3, [r7, #24]
   return(result);
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1e5      	bne.n	800464e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2220      	movs	r2, #32
 8004686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2220      	movs	r2, #32
 800468e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e00f      	b.n	80046be <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	4013      	ands	r3, r2
 80046a8:	68ba      	ldr	r2, [r7, #8]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	bf0c      	ite	eq
 80046ae:	2301      	moveq	r3, #1
 80046b0:	2300      	movne	r3, #0
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	461a      	mov	r2, r3
 80046b6:	79fb      	ldrb	r3, [r7, #7]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d09f      	beq.n	80045fc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3740      	adds	r7, #64	; 0x40
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
	...

080046c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046cc:	b09f      	sub	sp, #124	; 0x7c
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80046dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046de:	68d9      	ldr	r1, [r3, #12]
 80046e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	ea40 0301 	orr.w	r3, r0, r1
 80046e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046ec:	689a      	ldr	r2, [r3, #8]
 80046ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	431a      	orrs	r2, r3
 80046f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	431a      	orrs	r2, r3
 80046fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046fc:	69db      	ldr	r3, [r3, #28]
 80046fe:	4313      	orrs	r3, r2
 8004700:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800470c:	f021 010c 	bic.w	r1, r1, #12
 8004710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004716:	430b      	orrs	r3, r1
 8004718:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800471a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004724:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004726:	6999      	ldr	r1, [r3, #24]
 8004728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	ea40 0301 	orr.w	r3, r0, r1
 8004730:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004732:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	4bc5      	ldr	r3, [pc, #788]	; (8004a4c <UART_SetConfig+0x384>)
 8004738:	429a      	cmp	r2, r3
 800473a:	d004      	beq.n	8004746 <UART_SetConfig+0x7e>
 800473c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	4bc3      	ldr	r3, [pc, #780]	; (8004a50 <UART_SetConfig+0x388>)
 8004742:	429a      	cmp	r2, r3
 8004744:	d103      	bne.n	800474e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004746:	f7ff fdbb 	bl	80042c0 <HAL_RCC_GetPCLK2Freq>
 800474a:	6778      	str	r0, [r7, #116]	; 0x74
 800474c:	e002      	b.n	8004754 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800474e:	f7ff fda3 	bl	8004298 <HAL_RCC_GetPCLK1Freq>
 8004752:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004756:	69db      	ldr	r3, [r3, #28]
 8004758:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800475c:	f040 80b6 	bne.w	80048cc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004760:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004762:	461c      	mov	r4, r3
 8004764:	f04f 0500 	mov.w	r5, #0
 8004768:	4622      	mov	r2, r4
 800476a:	462b      	mov	r3, r5
 800476c:	1891      	adds	r1, r2, r2
 800476e:	6439      	str	r1, [r7, #64]	; 0x40
 8004770:	415b      	adcs	r3, r3
 8004772:	647b      	str	r3, [r7, #68]	; 0x44
 8004774:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004778:	1912      	adds	r2, r2, r4
 800477a:	eb45 0303 	adc.w	r3, r5, r3
 800477e:	f04f 0000 	mov.w	r0, #0
 8004782:	f04f 0100 	mov.w	r1, #0
 8004786:	00d9      	lsls	r1, r3, #3
 8004788:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800478c:	00d0      	lsls	r0, r2, #3
 800478e:	4602      	mov	r2, r0
 8004790:	460b      	mov	r3, r1
 8004792:	1911      	adds	r1, r2, r4
 8004794:	6639      	str	r1, [r7, #96]	; 0x60
 8004796:	416b      	adcs	r3, r5
 8004798:	667b      	str	r3, [r7, #100]	; 0x64
 800479a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	461a      	mov	r2, r3
 80047a0:	f04f 0300 	mov.w	r3, #0
 80047a4:	1891      	adds	r1, r2, r2
 80047a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80047a8:	415b      	adcs	r3, r3
 80047aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80047b0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80047b4:	f7fc f87a 	bl	80008ac <__aeabi_uldivmod>
 80047b8:	4602      	mov	r2, r0
 80047ba:	460b      	mov	r3, r1
 80047bc:	4ba5      	ldr	r3, [pc, #660]	; (8004a54 <UART_SetConfig+0x38c>)
 80047be:	fba3 2302 	umull	r2, r3, r3, r2
 80047c2:	095b      	lsrs	r3, r3, #5
 80047c4:	011e      	lsls	r6, r3, #4
 80047c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047c8:	461c      	mov	r4, r3
 80047ca:	f04f 0500 	mov.w	r5, #0
 80047ce:	4622      	mov	r2, r4
 80047d0:	462b      	mov	r3, r5
 80047d2:	1891      	adds	r1, r2, r2
 80047d4:	6339      	str	r1, [r7, #48]	; 0x30
 80047d6:	415b      	adcs	r3, r3
 80047d8:	637b      	str	r3, [r7, #52]	; 0x34
 80047da:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80047de:	1912      	adds	r2, r2, r4
 80047e0:	eb45 0303 	adc.w	r3, r5, r3
 80047e4:	f04f 0000 	mov.w	r0, #0
 80047e8:	f04f 0100 	mov.w	r1, #0
 80047ec:	00d9      	lsls	r1, r3, #3
 80047ee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047f2:	00d0      	lsls	r0, r2, #3
 80047f4:	4602      	mov	r2, r0
 80047f6:	460b      	mov	r3, r1
 80047f8:	1911      	adds	r1, r2, r4
 80047fa:	65b9      	str	r1, [r7, #88]	; 0x58
 80047fc:	416b      	adcs	r3, r5
 80047fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	461a      	mov	r2, r3
 8004806:	f04f 0300 	mov.w	r3, #0
 800480a:	1891      	adds	r1, r2, r2
 800480c:	62b9      	str	r1, [r7, #40]	; 0x28
 800480e:	415b      	adcs	r3, r3
 8004810:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004812:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004816:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800481a:	f7fc f847 	bl	80008ac <__aeabi_uldivmod>
 800481e:	4602      	mov	r2, r0
 8004820:	460b      	mov	r3, r1
 8004822:	4b8c      	ldr	r3, [pc, #560]	; (8004a54 <UART_SetConfig+0x38c>)
 8004824:	fba3 1302 	umull	r1, r3, r3, r2
 8004828:	095b      	lsrs	r3, r3, #5
 800482a:	2164      	movs	r1, #100	; 0x64
 800482c:	fb01 f303 	mul.w	r3, r1, r3
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	00db      	lsls	r3, r3, #3
 8004834:	3332      	adds	r3, #50	; 0x32
 8004836:	4a87      	ldr	r2, [pc, #540]	; (8004a54 <UART_SetConfig+0x38c>)
 8004838:	fba2 2303 	umull	r2, r3, r2, r3
 800483c:	095b      	lsrs	r3, r3, #5
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004844:	441e      	add	r6, r3
 8004846:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004848:	4618      	mov	r0, r3
 800484a:	f04f 0100 	mov.w	r1, #0
 800484e:	4602      	mov	r2, r0
 8004850:	460b      	mov	r3, r1
 8004852:	1894      	adds	r4, r2, r2
 8004854:	623c      	str	r4, [r7, #32]
 8004856:	415b      	adcs	r3, r3
 8004858:	627b      	str	r3, [r7, #36]	; 0x24
 800485a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800485e:	1812      	adds	r2, r2, r0
 8004860:	eb41 0303 	adc.w	r3, r1, r3
 8004864:	f04f 0400 	mov.w	r4, #0
 8004868:	f04f 0500 	mov.w	r5, #0
 800486c:	00dd      	lsls	r5, r3, #3
 800486e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004872:	00d4      	lsls	r4, r2, #3
 8004874:	4622      	mov	r2, r4
 8004876:	462b      	mov	r3, r5
 8004878:	1814      	adds	r4, r2, r0
 800487a:	653c      	str	r4, [r7, #80]	; 0x50
 800487c:	414b      	adcs	r3, r1
 800487e:	657b      	str	r3, [r7, #84]	; 0x54
 8004880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	461a      	mov	r2, r3
 8004886:	f04f 0300 	mov.w	r3, #0
 800488a:	1891      	adds	r1, r2, r2
 800488c:	61b9      	str	r1, [r7, #24]
 800488e:	415b      	adcs	r3, r3
 8004890:	61fb      	str	r3, [r7, #28]
 8004892:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004896:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800489a:	f7fc f807 	bl	80008ac <__aeabi_uldivmod>
 800489e:	4602      	mov	r2, r0
 80048a0:	460b      	mov	r3, r1
 80048a2:	4b6c      	ldr	r3, [pc, #432]	; (8004a54 <UART_SetConfig+0x38c>)
 80048a4:	fba3 1302 	umull	r1, r3, r3, r2
 80048a8:	095b      	lsrs	r3, r3, #5
 80048aa:	2164      	movs	r1, #100	; 0x64
 80048ac:	fb01 f303 	mul.w	r3, r1, r3
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	00db      	lsls	r3, r3, #3
 80048b4:	3332      	adds	r3, #50	; 0x32
 80048b6:	4a67      	ldr	r2, [pc, #412]	; (8004a54 <UART_SetConfig+0x38c>)
 80048b8:	fba2 2303 	umull	r2, r3, r2, r3
 80048bc:	095b      	lsrs	r3, r3, #5
 80048be:	f003 0207 	and.w	r2, r3, #7
 80048c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4432      	add	r2, r6
 80048c8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80048ca:	e0b9      	b.n	8004a40 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048ce:	461c      	mov	r4, r3
 80048d0:	f04f 0500 	mov.w	r5, #0
 80048d4:	4622      	mov	r2, r4
 80048d6:	462b      	mov	r3, r5
 80048d8:	1891      	adds	r1, r2, r2
 80048da:	6139      	str	r1, [r7, #16]
 80048dc:	415b      	adcs	r3, r3
 80048de:	617b      	str	r3, [r7, #20]
 80048e0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80048e4:	1912      	adds	r2, r2, r4
 80048e6:	eb45 0303 	adc.w	r3, r5, r3
 80048ea:	f04f 0000 	mov.w	r0, #0
 80048ee:	f04f 0100 	mov.w	r1, #0
 80048f2:	00d9      	lsls	r1, r3, #3
 80048f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048f8:	00d0      	lsls	r0, r2, #3
 80048fa:	4602      	mov	r2, r0
 80048fc:	460b      	mov	r3, r1
 80048fe:	eb12 0804 	adds.w	r8, r2, r4
 8004902:	eb43 0905 	adc.w	r9, r3, r5
 8004906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	4618      	mov	r0, r3
 800490c:	f04f 0100 	mov.w	r1, #0
 8004910:	f04f 0200 	mov.w	r2, #0
 8004914:	f04f 0300 	mov.w	r3, #0
 8004918:	008b      	lsls	r3, r1, #2
 800491a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800491e:	0082      	lsls	r2, r0, #2
 8004920:	4640      	mov	r0, r8
 8004922:	4649      	mov	r1, r9
 8004924:	f7fb ffc2 	bl	80008ac <__aeabi_uldivmod>
 8004928:	4602      	mov	r2, r0
 800492a:	460b      	mov	r3, r1
 800492c:	4b49      	ldr	r3, [pc, #292]	; (8004a54 <UART_SetConfig+0x38c>)
 800492e:	fba3 2302 	umull	r2, r3, r3, r2
 8004932:	095b      	lsrs	r3, r3, #5
 8004934:	011e      	lsls	r6, r3, #4
 8004936:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004938:	4618      	mov	r0, r3
 800493a:	f04f 0100 	mov.w	r1, #0
 800493e:	4602      	mov	r2, r0
 8004940:	460b      	mov	r3, r1
 8004942:	1894      	adds	r4, r2, r2
 8004944:	60bc      	str	r4, [r7, #8]
 8004946:	415b      	adcs	r3, r3
 8004948:	60fb      	str	r3, [r7, #12]
 800494a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800494e:	1812      	adds	r2, r2, r0
 8004950:	eb41 0303 	adc.w	r3, r1, r3
 8004954:	f04f 0400 	mov.w	r4, #0
 8004958:	f04f 0500 	mov.w	r5, #0
 800495c:	00dd      	lsls	r5, r3, #3
 800495e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004962:	00d4      	lsls	r4, r2, #3
 8004964:	4622      	mov	r2, r4
 8004966:	462b      	mov	r3, r5
 8004968:	1814      	adds	r4, r2, r0
 800496a:	64bc      	str	r4, [r7, #72]	; 0x48
 800496c:	414b      	adcs	r3, r1
 800496e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	4618      	mov	r0, r3
 8004976:	f04f 0100 	mov.w	r1, #0
 800497a:	f04f 0200 	mov.w	r2, #0
 800497e:	f04f 0300 	mov.w	r3, #0
 8004982:	008b      	lsls	r3, r1, #2
 8004984:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004988:	0082      	lsls	r2, r0, #2
 800498a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800498e:	f7fb ff8d 	bl	80008ac <__aeabi_uldivmod>
 8004992:	4602      	mov	r2, r0
 8004994:	460b      	mov	r3, r1
 8004996:	4b2f      	ldr	r3, [pc, #188]	; (8004a54 <UART_SetConfig+0x38c>)
 8004998:	fba3 1302 	umull	r1, r3, r3, r2
 800499c:	095b      	lsrs	r3, r3, #5
 800499e:	2164      	movs	r1, #100	; 0x64
 80049a0:	fb01 f303 	mul.w	r3, r1, r3
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	011b      	lsls	r3, r3, #4
 80049a8:	3332      	adds	r3, #50	; 0x32
 80049aa:	4a2a      	ldr	r2, [pc, #168]	; (8004a54 <UART_SetConfig+0x38c>)
 80049ac:	fba2 2303 	umull	r2, r3, r2, r3
 80049b0:	095b      	lsrs	r3, r3, #5
 80049b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049b6:	441e      	add	r6, r3
 80049b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049ba:	4618      	mov	r0, r3
 80049bc:	f04f 0100 	mov.w	r1, #0
 80049c0:	4602      	mov	r2, r0
 80049c2:	460b      	mov	r3, r1
 80049c4:	1894      	adds	r4, r2, r2
 80049c6:	603c      	str	r4, [r7, #0]
 80049c8:	415b      	adcs	r3, r3
 80049ca:	607b      	str	r3, [r7, #4]
 80049cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049d0:	1812      	adds	r2, r2, r0
 80049d2:	eb41 0303 	adc.w	r3, r1, r3
 80049d6:	f04f 0400 	mov.w	r4, #0
 80049da:	f04f 0500 	mov.w	r5, #0
 80049de:	00dd      	lsls	r5, r3, #3
 80049e0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80049e4:	00d4      	lsls	r4, r2, #3
 80049e6:	4622      	mov	r2, r4
 80049e8:	462b      	mov	r3, r5
 80049ea:	eb12 0a00 	adds.w	sl, r2, r0
 80049ee:	eb43 0b01 	adc.w	fp, r3, r1
 80049f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f04f 0100 	mov.w	r1, #0
 80049fc:	f04f 0200 	mov.w	r2, #0
 8004a00:	f04f 0300 	mov.w	r3, #0
 8004a04:	008b      	lsls	r3, r1, #2
 8004a06:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004a0a:	0082      	lsls	r2, r0, #2
 8004a0c:	4650      	mov	r0, sl
 8004a0e:	4659      	mov	r1, fp
 8004a10:	f7fb ff4c 	bl	80008ac <__aeabi_uldivmod>
 8004a14:	4602      	mov	r2, r0
 8004a16:	460b      	mov	r3, r1
 8004a18:	4b0e      	ldr	r3, [pc, #56]	; (8004a54 <UART_SetConfig+0x38c>)
 8004a1a:	fba3 1302 	umull	r1, r3, r3, r2
 8004a1e:	095b      	lsrs	r3, r3, #5
 8004a20:	2164      	movs	r1, #100	; 0x64
 8004a22:	fb01 f303 	mul.w	r3, r1, r3
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	011b      	lsls	r3, r3, #4
 8004a2a:	3332      	adds	r3, #50	; 0x32
 8004a2c:	4a09      	ldr	r2, [pc, #36]	; (8004a54 <UART_SetConfig+0x38c>)
 8004a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a32:	095b      	lsrs	r3, r3, #5
 8004a34:	f003 020f 	and.w	r2, r3, #15
 8004a38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4432      	add	r2, r6
 8004a3e:	609a      	str	r2, [r3, #8]
}
 8004a40:	bf00      	nop
 8004a42:	377c      	adds	r7, #124	; 0x7c
 8004a44:	46bd      	mov	sp, r7
 8004a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a4a:	bf00      	nop
 8004a4c:	40011000 	.word	0x40011000
 8004a50:	40011400 	.word	0x40011400
 8004a54:	51eb851f 	.word	0x51eb851f

08004a58 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a58:	b084      	sub	sp, #16
 8004a5a:	b580      	push	{r7, lr}
 8004a5c:	b084      	sub	sp, #16
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
 8004a62:	f107 001c 	add.w	r0, r7, #28
 8004a66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d122      	bne.n	8004ab6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a74:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004a84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d105      	bne.n	8004aaa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 f9a0 	bl	8004df0 <USB_CoreReset>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	73fb      	strb	r3, [r7, #15]
 8004ab4:	e01a      	b.n	8004aec <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f994 	bl	8004df0 <USB_CoreReset>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004acc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d106      	bne.n	8004ae0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	639a      	str	r2, [r3, #56]	; 0x38
 8004ade:	e005      	b.n	8004aec <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d10b      	bne.n	8004b0a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f043 0206 	orr.w	r2, r3, #6
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f043 0220 	orr.w	r2, r3, #32
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3710      	adds	r7, #16
 8004b10:	46bd      	mov	sp, r7
 8004b12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b16:	b004      	add	sp, #16
 8004b18:	4770      	bx	lr

08004b1a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b083      	sub	sp, #12
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f043 0201 	orr.w	r2, r3, #1
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f023 0201 	bic.w	r2, r3, #1
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b084      	sub	sp, #16
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
 8004b66:	460b      	mov	r3, r1
 8004b68:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004b7a:	78fb      	ldrb	r3, [r7, #3]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d115      	bne.n	8004bac <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b8c:	2001      	movs	r0, #1
 8004b8e:	f7fc fedb 	bl	8001948 <HAL_Delay>
      ms++;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	3301      	adds	r3, #1
 8004b96:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 f91a 	bl	8004dd2 <USB_GetMode>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d01e      	beq.n	8004be2 <USB_SetCurrentMode+0x84>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2b31      	cmp	r3, #49	; 0x31
 8004ba8:	d9f0      	bls.n	8004b8c <USB_SetCurrentMode+0x2e>
 8004baa:	e01a      	b.n	8004be2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004bac:	78fb      	ldrb	r3, [r7, #3]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d115      	bne.n	8004bde <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004bbe:	2001      	movs	r0, #1
 8004bc0:	f7fc fec2 	bl	8001948 <HAL_Delay>
      ms++;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 f901 	bl	8004dd2 <USB_GetMode>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d005      	beq.n	8004be2 <USB_SetCurrentMode+0x84>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2b31      	cmp	r3, #49	; 0x31
 8004bda:	d9f0      	bls.n	8004bbe <USB_SetCurrentMode+0x60>
 8004bdc:	e001      	b.n	8004be2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e005      	b.n	8004bee <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2b32      	cmp	r3, #50	; 0x32
 8004be6:	d101      	bne.n	8004bec <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e000      	b.n	8004bee <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
	...

08004bf8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004c02:	2300      	movs	r3, #0
 8004c04:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	019b      	lsls	r3, r3, #6
 8004c0a:	f043 0220 	orr.w	r2, r3, #32
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	3301      	adds	r3, #1
 8004c16:	60fb      	str	r3, [r7, #12]
 8004c18:	4a08      	ldr	r2, [pc, #32]	; (8004c3c <USB_FlushTxFifo+0x44>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d901      	bls.n	8004c22 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e006      	b.n	8004c30 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	f003 0320 	and.w	r3, r3, #32
 8004c2a:	2b20      	cmp	r3, #32
 8004c2c:	d0f1      	beq.n	8004c12 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3714      	adds	r7, #20
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr
 8004c3c:	00030d40 	.word	0x00030d40

08004c40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2210      	movs	r2, #16
 8004c50:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	3301      	adds	r3, #1
 8004c56:	60fb      	str	r3, [r7, #12]
 8004c58:	4a08      	ldr	r2, [pc, #32]	; (8004c7c <USB_FlushRxFifo+0x3c>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d901      	bls.n	8004c62 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e006      	b.n	8004c70 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	f003 0310 	and.w	r3, r3, #16
 8004c6a:	2b10      	cmp	r3, #16
 8004c6c:	d0f1      	beq.n	8004c52 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3714      	adds	r7, #20
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr
 8004c7c:	00030d40 	.word	0x00030d40

08004c80 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b089      	sub	sp, #36	; 0x24
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	4611      	mov	r1, r2
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	460b      	mov	r3, r1
 8004c90:	71fb      	strb	r3, [r7, #7]
 8004c92:	4613      	mov	r3, r2
 8004c94:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004c9e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d123      	bne.n	8004cee <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004ca6:	88bb      	ldrh	r3, [r7, #4]
 8004ca8:	3303      	adds	r3, #3
 8004caa:	089b      	lsrs	r3, r3, #2
 8004cac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004cae:	2300      	movs	r3, #0
 8004cb0:	61bb      	str	r3, [r7, #24]
 8004cb2:	e018      	b.n	8004ce6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004cb4:	79fb      	ldrb	r3, [r7, #7]
 8004cb6:	031a      	lsls	r2, r3, #12
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	4413      	add	r3, r2
 8004cbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	3301      	adds	r3, #1
 8004cde:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	61bb      	str	r3, [r7, #24]
 8004ce6:	69ba      	ldr	r2, [r7, #24]
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d3e2      	bcc.n	8004cb4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3724      	adds	r7, #36	; 0x24
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b08b      	sub	sp, #44	; 0x2c
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	4613      	mov	r3, r2
 8004d08:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004d12:	88fb      	ldrh	r3, [r7, #6]
 8004d14:	089b      	lsrs	r3, r3, #2
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004d1a:	88fb      	ldrh	r3, [r7, #6]
 8004d1c:	f003 0303 	and.w	r3, r3, #3
 8004d20:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004d22:	2300      	movs	r3, #0
 8004d24:	623b      	str	r3, [r7, #32]
 8004d26:	e014      	b.n	8004d52 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d32:	601a      	str	r2, [r3, #0]
    pDest++;
 8004d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d36:	3301      	adds	r3, #1
 8004d38:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d42:	3301      	adds	r3, #1
 8004d44:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d48:	3301      	adds	r3, #1
 8004d4a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004d4c:	6a3b      	ldr	r3, [r7, #32]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	623b      	str	r3, [r7, #32]
 8004d52:	6a3a      	ldr	r2, [r7, #32]
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d3e6      	bcc.n	8004d28 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004d5a:	8bfb      	ldrh	r3, [r7, #30]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d01e      	beq.n	8004d9e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004d60:	2300      	movs	r3, #0
 8004d62:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	f107 0310 	add.w	r3, r7, #16
 8004d70:	6812      	ldr	r2, [r2, #0]
 8004d72:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	6a3b      	ldr	r3, [r7, #32]
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	00db      	lsls	r3, r3, #3
 8004d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d80:	b2da      	uxtb	r2, r3
 8004d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d84:	701a      	strb	r2, [r3, #0]
      i++;
 8004d86:	6a3b      	ldr	r3, [r7, #32]
 8004d88:	3301      	adds	r3, #1
 8004d8a:	623b      	str	r3, [r7, #32]
      pDest++;
 8004d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8e:	3301      	adds	r3, #1
 8004d90:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004d92:	8bfb      	ldrh	r3, [r7, #30]
 8004d94:	3b01      	subs	r3, #1
 8004d96:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004d98:	8bfb      	ldrh	r3, [r7, #30]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1ea      	bne.n	8004d74 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	372c      	adds	r7, #44	; 0x2c
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	695b      	ldr	r3, [r3, #20]
 8004db8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3714      	adds	r7, #20
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	b083      	sub	sp, #12
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	f003 0301 	and.w	r3, r3, #1
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	370c      	adds	r7, #12
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
	...

08004df0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	3301      	adds	r3, #1
 8004e00:	60fb      	str	r3, [r7, #12]
 8004e02:	4a13      	ldr	r2, [pc, #76]	; (8004e50 <USB_CoreReset+0x60>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d901      	bls.n	8004e0c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e01a      	b.n	8004e42 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	daf3      	bge.n	8004dfc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004e14:	2300      	movs	r3, #0
 8004e16:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	f043 0201 	orr.w	r2, r3, #1
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	3301      	adds	r3, #1
 8004e28:	60fb      	str	r3, [r7, #12]
 8004e2a:	4a09      	ldr	r2, [pc, #36]	; (8004e50 <USB_CoreReset+0x60>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d901      	bls.n	8004e34 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e006      	b.n	8004e42 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	f003 0301 	and.w	r3, r3, #1
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d0f1      	beq.n	8004e24 <USB_CoreReset+0x34>

  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3714      	adds	r7, #20
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	00030d40 	.word	0x00030d40

08004e54 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e54:	b084      	sub	sp, #16
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b084      	sub	sp, #16
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
 8004e5e:	f107 001c 	add.w	r0, r7, #28
 8004e62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004e70:	461a      	mov	r2, r3
 8004e72:	2300      	movs	r3, #0
 8004e74:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e86:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e92:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d018      	beq.n	8004ed8 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d10a      	bne.n	8004ec2 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68ba      	ldr	r2, [r7, #8]
 8004eb6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004eba:	f043 0304 	orr.w	r3, r3, #4
 8004ebe:	6013      	str	r3, [r2, #0]
 8004ec0:	e014      	b.n	8004eec <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68ba      	ldr	r2, [r7, #8]
 8004ecc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ed0:	f023 0304 	bic.w	r3, r3, #4
 8004ed4:	6013      	str	r3, [r2, #0]
 8004ed6:	e009      	b.n	8004eec <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68ba      	ldr	r2, [r7, #8]
 8004ee2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ee6:	f023 0304 	bic.w	r3, r3, #4
 8004eea:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004eec:	2110      	movs	r1, #16
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f7ff fe82 	bl	8004bf8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f7ff fea3 	bl	8004c40 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004efa:	2300      	movs	r3, #0
 8004efc:	60fb      	str	r3, [r7, #12]
 8004efe:	e015      	b.n	8004f2c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	015a      	lsls	r2, r3, #5
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	4413      	add	r3, r2
 8004f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f12:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	015a      	lsls	r2, r3, #5
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f20:	461a      	mov	r2, r3
 8004f22:	2300      	movs	r3, #0
 8004f24:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	60fb      	str	r3, [r7, #12]
 8004f2c:	6a3b      	ldr	r3, [r7, #32]
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d3e5      	bcc.n	8004f00 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8004f40:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00b      	beq.n	8004f66 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f54:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a13      	ldr	r2, [pc, #76]	; (8004fa8 <USB_HostInit+0x154>)
 8004f5a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a13      	ldr	r2, [pc, #76]	; (8004fac <USB_HostInit+0x158>)
 8004f60:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004f64:	e009      	b.n	8004f7a <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2280      	movs	r2, #128	; 0x80
 8004f6a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a10      	ldr	r2, [pc, #64]	; (8004fb0 <USB_HostInit+0x15c>)
 8004f70:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a0f      	ldr	r2, [pc, #60]	; (8004fb4 <USB_HostInit+0x160>)
 8004f76:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d105      	bne.n	8004f8c <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	f043 0210 	orr.w	r2, r3, #16
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	699a      	ldr	r2, [r3, #24]
 8004f90:	4b09      	ldr	r3, [pc, #36]	; (8004fb8 <USB_HostInit+0x164>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004fa4:	b004      	add	sp, #16
 8004fa6:	4770      	bx	lr
 8004fa8:	01000200 	.word	0x01000200
 8004fac:	00e00300 	.word	0x00e00300
 8004fb0:	00600080 	.word	0x00600080
 8004fb4:	004000e0 	.word	0x004000e0
 8004fb8:	a3200008 	.word	0xa3200008

08004fbc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004fda:	f023 0303 	bic.w	r3, r3, #3
 8004fde:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	78fb      	ldrb	r3, [r7, #3]
 8004fea:	f003 0303 	and.w	r3, r3, #3
 8004fee:	68f9      	ldr	r1, [r7, #12]
 8004ff0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004ff8:	78fb      	ldrb	r3, [r7, #3]
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d107      	bne.n	800500e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005004:	461a      	mov	r2, r3
 8005006:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800500a:	6053      	str	r3, [r2, #4]
 800500c:	e009      	b.n	8005022 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800500e:	78fb      	ldrb	r3, [r7, #3]
 8005010:	2b02      	cmp	r3, #2
 8005012:	d106      	bne.n	8005022 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800501a:	461a      	mov	r2, r3
 800501c:	f241 7370 	movw	r3, #6000	; 0x1770
 8005020:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3714      	adds	r7, #20
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800503c:	2300      	movs	r3, #0
 800503e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005050:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800505a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800505e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005060:	2064      	movs	r0, #100	; 0x64
 8005062:	f7fc fc71 	bl	8001948 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800506e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005072:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005074:	200a      	movs	r0, #10
 8005076:	f7fc fc67 	bl	8001948 <HAL_Delay>

  return HAL_OK;
 800507a:	2300      	movs	r3, #0
}
 800507c:	4618      	mov	r0, r3
 800507e:	3710      	adds	r7, #16
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	460b      	mov	r3, r1
 800508e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005094:	2300      	movs	r3, #0
 8005096:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80050a8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d109      	bne.n	80050c8 <USB_DriveVbus+0x44>
 80050b4:	78fb      	ldrb	r3, [r7, #3]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d106      	bne.n	80050c8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80050c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80050c6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050d2:	d109      	bne.n	80050e8 <USB_DriveVbus+0x64>
 80050d4:	78fb      	ldrb	r3, [r7, #3]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d106      	bne.n	80050e8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80050e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050e6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3714      	adds	r7, #20
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr

080050f6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80050f6:	b480      	push	{r7}
 80050f8:	b085      	sub	sp, #20
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005102:	2300      	movs	r3, #0
 8005104:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	0c5b      	lsrs	r3, r3, #17
 8005114:	f003 0303 	and.w	r3, r3, #3
}
 8005118:	4618      	mov	r0, r3
 800511a:	3714      	adds	r7, #20
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	b29b      	uxth	r3, r3
}
 800513a:	4618      	mov	r0, r3
 800513c:	3714      	adds	r7, #20
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
	...

08005148 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b088      	sub	sp, #32
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	4608      	mov	r0, r1
 8005152:	4611      	mov	r1, r2
 8005154:	461a      	mov	r2, r3
 8005156:	4603      	mov	r3, r0
 8005158:	70fb      	strb	r3, [r7, #3]
 800515a:	460b      	mov	r3, r1
 800515c:	70bb      	strb	r3, [r7, #2]
 800515e:	4613      	mov	r3, r2
 8005160:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005162:	2300      	movs	r3, #0
 8005164:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800516a:	78fb      	ldrb	r3, [r7, #3]
 800516c:	015a      	lsls	r2, r3, #5
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	4413      	add	r3, r2
 8005172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005176:	461a      	mov	r2, r3
 8005178:	f04f 33ff 	mov.w	r3, #4294967295
 800517c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800517e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005182:	2b03      	cmp	r3, #3
 8005184:	d87e      	bhi.n	8005284 <USB_HC_Init+0x13c>
 8005186:	a201      	add	r2, pc, #4	; (adr r2, 800518c <USB_HC_Init+0x44>)
 8005188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800518c:	0800519d 	.word	0x0800519d
 8005190:	08005247 	.word	0x08005247
 8005194:	0800519d 	.word	0x0800519d
 8005198:	08005209 	.word	0x08005209
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800519c:	78fb      	ldrb	r3, [r7, #3]
 800519e:	015a      	lsls	r2, r3, #5
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	4413      	add	r3, r2
 80051a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051a8:	461a      	mov	r2, r3
 80051aa:	f240 439d 	movw	r3, #1181	; 0x49d
 80051ae:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80051b0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	da10      	bge.n	80051da <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80051b8:	78fb      	ldrb	r3, [r7, #3]
 80051ba:	015a      	lsls	r2, r3, #5
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	78fa      	ldrb	r2, [r7, #3]
 80051c8:	0151      	lsls	r1, r2, #5
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	440a      	add	r2, r1
 80051ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051d6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80051d8:	e057      	b.n	800528a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d051      	beq.n	800528a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80051e6:	78fb      	ldrb	r3, [r7, #3]
 80051e8:	015a      	lsls	r2, r3, #5
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	4413      	add	r3, r2
 80051ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	78fa      	ldrb	r2, [r7, #3]
 80051f6:	0151      	lsls	r1, r2, #5
 80051f8:	693a      	ldr	r2, [r7, #16]
 80051fa:	440a      	add	r2, r1
 80051fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005200:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005204:	60d3      	str	r3, [r2, #12]
      break;
 8005206:	e040      	b.n	800528a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005208:	78fb      	ldrb	r3, [r7, #3]
 800520a:	015a      	lsls	r2, r3, #5
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	4413      	add	r3, r2
 8005210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005214:	461a      	mov	r2, r3
 8005216:	f240 639d 	movw	r3, #1693	; 0x69d
 800521a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800521c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005220:	2b00      	cmp	r3, #0
 8005222:	da34      	bge.n	800528e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005224:	78fb      	ldrb	r3, [r7, #3]
 8005226:	015a      	lsls	r2, r3, #5
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	4413      	add	r3, r2
 800522c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	78fa      	ldrb	r2, [r7, #3]
 8005234:	0151      	lsls	r1, r2, #5
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	440a      	add	r2, r1
 800523a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800523e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005242:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005244:	e023      	b.n	800528e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005246:	78fb      	ldrb	r3, [r7, #3]
 8005248:	015a      	lsls	r2, r3, #5
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	4413      	add	r3, r2
 800524e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005252:	461a      	mov	r2, r3
 8005254:	f240 2325 	movw	r3, #549	; 0x225
 8005258:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800525a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800525e:	2b00      	cmp	r3, #0
 8005260:	da17      	bge.n	8005292 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005262:	78fb      	ldrb	r3, [r7, #3]
 8005264:	015a      	lsls	r2, r3, #5
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	4413      	add	r3, r2
 800526a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	78fa      	ldrb	r2, [r7, #3]
 8005272:	0151      	lsls	r1, r2, #5
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	440a      	add	r2, r1
 8005278:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800527c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005280:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005282:	e006      	b.n	8005292 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	77fb      	strb	r3, [r7, #31]
      break;
 8005288:	e004      	b.n	8005294 <USB_HC_Init+0x14c>
      break;
 800528a:	bf00      	nop
 800528c:	e002      	b.n	8005294 <USB_HC_Init+0x14c>
      break;
 800528e:	bf00      	nop
 8005290:	e000      	b.n	8005294 <USB_HC_Init+0x14c>
      break;
 8005292:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800529a:	699a      	ldr	r2, [r3, #24]
 800529c:	78fb      	ldrb	r3, [r7, #3]
 800529e:	f003 030f 	and.w	r3, r3, #15
 80052a2:	2101      	movs	r1, #1
 80052a4:	fa01 f303 	lsl.w	r3, r1, r3
 80052a8:	6939      	ldr	r1, [r7, #16]
 80052aa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80052ae:	4313      	orrs	r3, r2
 80052b0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80052be:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	da03      	bge.n	80052ce <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80052c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052ca:	61bb      	str	r3, [r7, #24]
 80052cc:	e001      	b.n	80052d2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80052ce:	2300      	movs	r3, #0
 80052d0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f7ff ff0f 	bl	80050f6 <USB_GetHostSpeed>
 80052d8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80052da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d106      	bne.n	80052f0 <USB_HC_Init+0x1a8>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d003      	beq.n	80052f0 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80052e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80052ec:	617b      	str	r3, [r7, #20]
 80052ee:	e001      	b.n	80052f4 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80052f0:	2300      	movs	r3, #0
 80052f2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80052f4:	787b      	ldrb	r3, [r7, #1]
 80052f6:	059b      	lsls	r3, r3, #22
 80052f8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80052fc:	78bb      	ldrb	r3, [r7, #2]
 80052fe:	02db      	lsls	r3, r3, #11
 8005300:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005304:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005306:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800530a:	049b      	lsls	r3, r3, #18
 800530c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005310:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005312:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005314:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005318:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800531e:	78fb      	ldrb	r3, [r7, #3]
 8005320:	0159      	lsls	r1, r3, #5
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	440b      	add	r3, r1
 8005326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800532a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005330:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005332:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005336:	2b03      	cmp	r3, #3
 8005338:	d10f      	bne.n	800535a <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800533a:	78fb      	ldrb	r3, [r7, #3]
 800533c:	015a      	lsls	r2, r3, #5
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	4413      	add	r3, r2
 8005342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	78fa      	ldrb	r2, [r7, #3]
 800534a:	0151      	lsls	r1, r2, #5
 800534c:	693a      	ldr	r2, [r7, #16]
 800534e:	440a      	add	r2, r1
 8005350:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005354:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005358:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800535a:	7ffb      	ldrb	r3, [r7, #31]
}
 800535c:	4618      	mov	r0, r3
 800535e:	3720      	adds	r7, #32
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b08c      	sub	sp, #48	; 0x30
 8005368:	af02      	add	r7, sp, #8
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	4613      	mov	r3, r2
 8005370:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	785b      	ldrb	r3, [r3, #1]
 800537a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800537c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005380:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800538a:	2b00      	cmp	r3, #0
 800538c:	d02d      	beq.n	80053ea <USB_HC_StartXfer+0x86>
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	791b      	ldrb	r3, [r3, #4]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d129      	bne.n	80053ea <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005396:	79fb      	ldrb	r3, [r7, #7]
 8005398:	2b01      	cmp	r3, #1
 800539a:	d117      	bne.n	80053cc <USB_HC_StartXfer+0x68>
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	79db      	ldrb	r3, [r3, #7]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d003      	beq.n	80053ac <USB_HC_StartXfer+0x48>
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	79db      	ldrb	r3, [r3, #7]
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d10f      	bne.n	80053cc <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	015a      	lsls	r2, r3, #5
 80053b0:	6a3b      	ldr	r3, [r7, #32]
 80053b2:	4413      	add	r3, r2
 80053b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	69fa      	ldr	r2, [r7, #28]
 80053bc:	0151      	lsls	r1, r2, #5
 80053be:	6a3a      	ldr	r2, [r7, #32]
 80053c0:	440a      	add	r2, r1
 80053c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ca:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80053cc:	79fb      	ldrb	r3, [r7, #7]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d10b      	bne.n	80053ea <USB_HC_StartXfer+0x86>
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	795b      	ldrb	r3, [r3, #5]
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d107      	bne.n	80053ea <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	785b      	ldrb	r3, [r3, #1]
 80053de:	4619      	mov	r1, r3
 80053e0:	68f8      	ldr	r0, [r7, #12]
 80053e2:	f000 fa2f 	bl	8005844 <USB_DoPing>
      return HAL_OK;
 80053e6:	2300      	movs	r3, #0
 80053e8:	e0f8      	b.n	80055dc <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d018      	beq.n	8005424 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	8912      	ldrh	r2, [r2, #8]
 80053fa:	4413      	add	r3, r2
 80053fc:	3b01      	subs	r3, #1
 80053fe:	68ba      	ldr	r2, [r7, #8]
 8005400:	8912      	ldrh	r2, [r2, #8]
 8005402:	fbb3 f3f2 	udiv	r3, r3, r2
 8005406:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005408:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800540a:	8b7b      	ldrh	r3, [r7, #26]
 800540c:	429a      	cmp	r2, r3
 800540e:	d90b      	bls.n	8005428 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005410:	8b7b      	ldrh	r3, [r7, #26]
 8005412:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005414:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	8912      	ldrh	r2, [r2, #8]
 800541a:	fb02 f203 	mul.w	r2, r2, r3
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	611a      	str	r2, [r3, #16]
 8005422:	e001      	b.n	8005428 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005424:	2301      	movs	r3, #1
 8005426:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	78db      	ldrb	r3, [r3, #3]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d007      	beq.n	8005440 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005430:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005432:	68ba      	ldr	r2, [r7, #8]
 8005434:	8912      	ldrh	r2, [r2, #8]
 8005436:	fb02 f203 	mul.w	r2, r2, r3
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	611a      	str	r2, [r3, #16]
 800543e:	e003      	b.n	8005448 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	695a      	ldr	r2, [r3, #20]
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005450:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005452:	04d9      	lsls	r1, r3, #19
 8005454:	4b63      	ldr	r3, [pc, #396]	; (80055e4 <USB_HC_StartXfer+0x280>)
 8005456:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005458:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	7a9b      	ldrb	r3, [r3, #10]
 800545e:	075b      	lsls	r3, r3, #29
 8005460:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005464:	69f9      	ldr	r1, [r7, #28]
 8005466:	0148      	lsls	r0, r1, #5
 8005468:	6a39      	ldr	r1, [r7, #32]
 800546a:	4401      	add	r1, r0
 800546c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005470:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005472:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005474:	79fb      	ldrb	r3, [r7, #7]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d009      	beq.n	800548e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	68d9      	ldr	r1, [r3, #12]
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	015a      	lsls	r2, r3, #5
 8005482:	6a3b      	ldr	r3, [r7, #32]
 8005484:	4413      	add	r3, r2
 8005486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800548a:	460a      	mov	r2, r1
 800548c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800548e:	6a3b      	ldr	r3, [r7, #32]
 8005490:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	2b00      	cmp	r3, #0
 800549c:	bf0c      	ite	eq
 800549e:	2301      	moveq	r3, #1
 80054a0:	2300      	movne	r3, #0
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	015a      	lsls	r2, r3, #5
 80054aa:	6a3b      	ldr	r3, [r7, #32]
 80054ac:	4413      	add	r3, r2
 80054ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	69fa      	ldr	r2, [r7, #28]
 80054b6:	0151      	lsls	r1, r2, #5
 80054b8:	6a3a      	ldr	r2, [r7, #32]
 80054ba:	440a      	add	r2, r1
 80054bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054c0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80054c4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	015a      	lsls	r2, r3, #5
 80054ca:	6a3b      	ldr	r3, [r7, #32]
 80054cc:	4413      	add	r3, r2
 80054ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	7e7b      	ldrb	r3, [r7, #25]
 80054d6:	075b      	lsls	r3, r3, #29
 80054d8:	69f9      	ldr	r1, [r7, #28]
 80054da:	0148      	lsls	r0, r1, #5
 80054dc:	6a39      	ldr	r1, [r7, #32]
 80054de:	4401      	add	r1, r0
 80054e0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80054e4:	4313      	orrs	r3, r2
 80054e6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	015a      	lsls	r2, r3, #5
 80054ec:	6a3b      	ldr	r3, [r7, #32]
 80054ee:	4413      	add	r3, r2
 80054f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80054fe:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	78db      	ldrb	r3, [r3, #3]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d004      	beq.n	8005512 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800550e:	613b      	str	r3, [r7, #16]
 8005510:	e003      	b.n	800551a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005518:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005520:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	015a      	lsls	r2, r3, #5
 8005526:	6a3b      	ldr	r3, [r7, #32]
 8005528:	4413      	add	r3, r2
 800552a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800552e:	461a      	mov	r2, r3
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005534:	79fb      	ldrb	r3, [r7, #7]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d001      	beq.n	800553e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800553a:	2300      	movs	r3, #0
 800553c:	e04e      	b.n	80055dc <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	78db      	ldrb	r3, [r3, #3]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d149      	bne.n	80055da <USB_HC_StartXfer+0x276>
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d045      	beq.n	80055da <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	79db      	ldrb	r3, [r3, #7]
 8005552:	2b03      	cmp	r3, #3
 8005554:	d830      	bhi.n	80055b8 <USB_HC_StartXfer+0x254>
 8005556:	a201      	add	r2, pc, #4	; (adr r2, 800555c <USB_HC_StartXfer+0x1f8>)
 8005558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555c:	0800556d 	.word	0x0800556d
 8005560:	08005591 	.word	0x08005591
 8005564:	0800556d 	.word	0x0800556d
 8005568:	08005591 	.word	0x08005591
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	695b      	ldr	r3, [r3, #20]
 8005570:	3303      	adds	r3, #3
 8005572:	089b      	lsrs	r3, r3, #2
 8005574:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005576:	8afa      	ldrh	r2, [r7, #22]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557c:	b29b      	uxth	r3, r3
 800557e:	429a      	cmp	r2, r3
 8005580:	d91c      	bls.n	80055bc <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	f043 0220 	orr.w	r2, r3, #32
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	619a      	str	r2, [r3, #24]
        }
        break;
 800558e:	e015      	b.n	80055bc <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	695b      	ldr	r3, [r3, #20]
 8005594:	3303      	adds	r3, #3
 8005596:	089b      	lsrs	r3, r3, #2
 8005598:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800559a:	8afa      	ldrh	r2, [r7, #22]
 800559c:	6a3b      	ldr	r3, [r7, #32]
 800559e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d90a      	bls.n	80055c0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	619a      	str	r2, [r3, #24]
        }
        break;
 80055b6:	e003      	b.n	80055c0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80055b8:	bf00      	nop
 80055ba:	e002      	b.n	80055c2 <USB_HC_StartXfer+0x25e>
        break;
 80055bc:	bf00      	nop
 80055be:	e000      	b.n	80055c2 <USB_HC_StartXfer+0x25e>
        break;
 80055c0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	68d9      	ldr	r1, [r3, #12]
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	785a      	ldrb	r2, [r3, #1]
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	2000      	movs	r0, #0
 80055d2:	9000      	str	r0, [sp, #0]
 80055d4:	68f8      	ldr	r0, [r7, #12]
 80055d6:	f7ff fb53 	bl	8004c80 <USB_WritePacket>
  }

  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3728      	adds	r7, #40	; 0x28
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	1ff80000 	.word	0x1ff80000

080055e8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055fa:	695b      	ldr	r3, [r3, #20]
 80055fc:	b29b      	uxth	r3, r3
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3714      	adds	r7, #20
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr

0800560a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800560a:	b480      	push	{r7}
 800560c:	b089      	sub	sp, #36	; 0x24
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
 8005612:	460b      	mov	r3, r1
 8005614:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800561a:	78fb      	ldrb	r3, [r7, #3]
 800561c:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800561e:	2300      	movs	r3, #0
 8005620:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	015a      	lsls	r2, r3, #5
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	4413      	add	r3, r2
 800562a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	0c9b      	lsrs	r3, r3, #18
 8005632:	f003 0303 	and.w	r3, r3, #3
 8005636:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	015a      	lsls	r2, r3, #5
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	4413      	add	r3, r2
 8005640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	0fdb      	lsrs	r3, r3, #31
 8005648:	f003 0301 	and.w	r3, r3, #1
 800564c:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	f003 0320 	and.w	r3, r3, #32
 8005656:	2b20      	cmp	r3, #32
 8005658:	d104      	bne.n	8005664 <USB_HC_Halt+0x5a>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d101      	bne.n	8005664 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005660:	2300      	movs	r3, #0
 8005662:	e0e8      	b.n	8005836 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d002      	beq.n	8005670 <USB_HC_Halt+0x66>
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	2b02      	cmp	r3, #2
 800566e:	d173      	bne.n	8005758 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	015a      	lsls	r2, r3, #5
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	4413      	add	r3, r2
 8005678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	0151      	lsls	r1, r2, #5
 8005682:	69ba      	ldr	r2, [r7, #24]
 8005684:	440a      	add	r2, r1
 8005686:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800568a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800568e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	f003 0320 	and.w	r3, r3, #32
 8005698:	2b00      	cmp	r3, #0
 800569a:	f040 80cb 	bne.w	8005834 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d143      	bne.n	8005732 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	015a      	lsls	r2, r3, #5
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	4413      	add	r3, r2
 80056b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	697a      	ldr	r2, [r7, #20]
 80056ba:	0151      	lsls	r1, r2, #5
 80056bc:	69ba      	ldr	r2, [r7, #24]
 80056be:	440a      	add	r2, r1
 80056c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80056c8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	015a      	lsls	r2, r3, #5
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	4413      	add	r3, r2
 80056d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	697a      	ldr	r2, [r7, #20]
 80056da:	0151      	lsls	r1, r2, #5
 80056dc:	69ba      	ldr	r2, [r7, #24]
 80056de:	440a      	add	r2, r1
 80056e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80056e8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	015a      	lsls	r2, r3, #5
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	4413      	add	r3, r2
 80056f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	697a      	ldr	r2, [r7, #20]
 80056fa:	0151      	lsls	r1, r2, #5
 80056fc:	69ba      	ldr	r2, [r7, #24]
 80056fe:	440a      	add	r2, r1
 8005700:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005704:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005708:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	3301      	adds	r3, #1
 800570e:	61fb      	str	r3, [r7, #28]
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005716:	d81d      	bhi.n	8005754 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	015a      	lsls	r2, r3, #5
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	4413      	add	r3, r2
 8005720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800572a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800572e:	d0ec      	beq.n	800570a <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005730:	e080      	b.n	8005834 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	015a      	lsls	r2, r3, #5
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	4413      	add	r3, r2
 800573a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	697a      	ldr	r2, [r7, #20]
 8005742:	0151      	lsls	r1, r2, #5
 8005744:	69ba      	ldr	r2, [r7, #24]
 8005746:	440a      	add	r2, r1
 8005748:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800574c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005750:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005752:	e06f      	b.n	8005834 <USB_HC_Halt+0x22a>
            break;
 8005754:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005756:	e06d      	b.n	8005834 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	015a      	lsls	r2, r3, #5
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	4413      	add	r3, r2
 8005760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	697a      	ldr	r2, [r7, #20]
 8005768:	0151      	lsls	r1, r2, #5
 800576a:	69ba      	ldr	r2, [r7, #24]
 800576c:	440a      	add	r2, r1
 800576e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005772:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005776:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d143      	bne.n	8005810 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	015a      	lsls	r2, r3, #5
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	4413      	add	r3, r2
 8005790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	0151      	lsls	r1, r2, #5
 800579a:	69ba      	ldr	r2, [r7, #24]
 800579c:	440a      	add	r2, r1
 800579e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80057a6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	015a      	lsls	r2, r3, #5
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	4413      	add	r3, r2
 80057b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	697a      	ldr	r2, [r7, #20]
 80057b8:	0151      	lsls	r1, r2, #5
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	440a      	add	r2, r1
 80057be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057c6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	015a      	lsls	r2, r3, #5
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	4413      	add	r3, r2
 80057d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	0151      	lsls	r1, r2, #5
 80057da:	69ba      	ldr	r2, [r7, #24]
 80057dc:	440a      	add	r2, r1
 80057de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80057e6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	3301      	adds	r3, #1
 80057ec:	61fb      	str	r3, [r7, #28]
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057f4:	d81d      	bhi.n	8005832 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	015a      	lsls	r2, r3, #5
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	4413      	add	r3, r2
 80057fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005808:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800580c:	d0ec      	beq.n	80057e8 <USB_HC_Halt+0x1de>
 800580e:	e011      	b.n	8005834 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	015a      	lsls	r2, r3, #5
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	4413      	add	r3, r2
 8005818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	0151      	lsls	r1, r2, #5
 8005822:	69ba      	ldr	r2, [r7, #24]
 8005824:	440a      	add	r2, r1
 8005826:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800582a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800582e:	6013      	str	r3, [r2, #0]
 8005830:	e000      	b.n	8005834 <USB_HC_Halt+0x22a>
          break;
 8005832:	bf00      	nop
    }
  }

  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3724      	adds	r7, #36	; 0x24
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
	...

08005844 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005844:	b480      	push	{r7}
 8005846:	b087      	sub	sp, #28
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	460b      	mov	r3, r1
 800584e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005854:	78fb      	ldrb	r3, [r7, #3]
 8005856:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005858:	2301      	movs	r3, #1
 800585a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	04da      	lsls	r2, r3, #19
 8005860:	4b15      	ldr	r3, [pc, #84]	; (80058b8 <USB_DoPing+0x74>)
 8005862:	4013      	ands	r3, r2
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	0151      	lsls	r1, r2, #5
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	440a      	add	r2, r1
 800586c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005870:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005874:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	015a      	lsls	r2, r3, #5
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	4413      	add	r3, r2
 800587e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800588c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005894:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	015a      	lsls	r2, r3, #5
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	4413      	add	r3, r2
 800589e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058a2:	461a      	mov	r2, r3
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	371c      	adds	r7, #28
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr
 80058b6:	bf00      	nop
 80058b8:	1ff80000 	.word	0x1ff80000

080058bc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b086      	sub	sp, #24
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80058c8:	2300      	movs	r3, #0
 80058ca:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f7ff f935 	bl	8004b3c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80058d2:	2110      	movs	r1, #16
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f7ff f98f 	bl	8004bf8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f7ff f9b0 	bl	8004c40 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80058e0:	2300      	movs	r3, #0
 80058e2:	613b      	str	r3, [r7, #16]
 80058e4:	e01f      	b.n	8005926 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	015a      	lsls	r2, r3, #5
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	4413      	add	r3, r2
 80058ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058fc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005904:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800590c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	015a      	lsls	r2, r3, #5
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	4413      	add	r3, r2
 8005916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800591a:	461a      	mov	r2, r3
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	3301      	adds	r3, #1
 8005924:	613b      	str	r3, [r7, #16]
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	2b0f      	cmp	r3, #15
 800592a:	d9dc      	bls.n	80058e6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800592c:	2300      	movs	r3, #0
 800592e:	613b      	str	r3, [r7, #16]
 8005930:	e034      	b.n	800599c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	015a      	lsls	r2, r3, #5
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	4413      	add	r3, r2
 800593a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005948:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005950:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005958:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	015a      	lsls	r2, r3, #5
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	4413      	add	r3, r2
 8005962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005966:	461a      	mov	r2, r3
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	3301      	adds	r3, #1
 8005970:	617b      	str	r3, [r7, #20]
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005978:	d80c      	bhi.n	8005994 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	015a      	lsls	r2, r3, #5
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	4413      	add	r3, r2
 8005982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800598c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005990:	d0ec      	beq.n	800596c <USB_StopHost+0xb0>
 8005992:	e000      	b.n	8005996 <USB_StopHost+0xda>
        break;
 8005994:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	3301      	adds	r3, #1
 800599a:	613b      	str	r3, [r7, #16]
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	2b0f      	cmp	r3, #15
 80059a0:	d9c7      	bls.n	8005932 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059a8:	461a      	mov	r2, r3
 80059aa:	f04f 33ff 	mov.w	r3, #4294967295
 80059ae:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f04f 32ff 	mov.w	r2, #4294967295
 80059b6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f7ff f8ae 	bl	8004b1a <USB_EnableGlobalInt>

  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3718      	adds	r7, #24
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 80059cc:	4904      	ldr	r1, [pc, #16]	; (80059e0 <MX_FATFS_Init+0x18>)
 80059ce:	4805      	ldr	r0, [pc, #20]	; (80059e4 <MX_FATFS_Init+0x1c>)
 80059d0:	f007 fd80 	bl	800d4d4 <FATFS_LinkDriver>
 80059d4:	4603      	mov	r3, r0
 80059d6:	461a      	mov	r2, r3
 80059d8:	4b03      	ldr	r3, [pc, #12]	; (80059e8 <MX_FATFS_Init+0x20>)
 80059da:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80059dc:	bf00      	nop
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	20000ab0 	.word	0x20000ab0
 80059e4:	08010528 	.word	0x08010528
 80059e8:	20002b4c 	.word	0x20002b4c

080059ec <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80059ec:	b480      	push	{r7}
 80059ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80059f0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	4603      	mov	r3, r0
 8005a04:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8005a22:	79fb      	ldrb	r3, [r7, #7]
 8005a24:	4619      	mov	r1, r3
 8005a26:	4808      	ldr	r0, [pc, #32]	; (8005a48 <USBH_status+0x34>)
 8005a28:	f000 fe1a 	bl	8006660 <USBH_MSC_UnitIsReady>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d002      	beq.n	8005a38 <USBH_status+0x24>
  {
    res = RES_OK;
 8005a32:	2300      	movs	r3, #0
 8005a34:	73fb      	strb	r3, [r7, #15]
 8005a36:	e001      	b.n	8005a3c <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8005a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3710      	adds	r7, #16
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	20002be0 	.word	0x20002be0

08005a4c <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b094      	sub	sp, #80	; 0x50
 8005a50:	af02      	add	r7, sp, #8
 8005a52:	60b9      	str	r1, [r7, #8]
 8005a54:	607a      	str	r2, [r7, #4]
 8005a56:	603b      	str	r3, [r7, #0]
 8005a58:	4603      	mov	r3, r0
 8005a5a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8005a62:	7bf9      	ldrb	r1, [r7, #15]
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	9300      	str	r3, [sp, #0]
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	4813      	ldr	r0, [pc, #76]	; (8005abc <USBH_read+0x70>)
 8005a6e:	f000 fe41 	bl	80066f4 <USBH_MSC_Read>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d103      	bne.n	8005a80 <USBH_read+0x34>
  {
    res = RES_OK;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005a7e:	e017      	b.n	8005ab0 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8005a80:	f107 0210 	add.w	r2, r7, #16
 8005a84:	7bfb      	ldrb	r3, [r7, #15]
 8005a86:	4619      	mov	r1, r3
 8005a88:	480c      	ldr	r0, [pc, #48]	; (8005abc <USBH_read+0x70>)
 8005a8a:	f000 fe0f 	bl	80066ac <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8005a8e:	7f7b      	ldrb	r3, [r7, #29]
 8005a90:	2b3a      	cmp	r3, #58	; 0x3a
 8005a92:	d005      	beq.n	8005aa0 <USBH_read+0x54>
 8005a94:	2b3a      	cmp	r3, #58	; 0x3a
 8005a96:	dc07      	bgt.n	8005aa8 <USBH_read+0x5c>
 8005a98:	2b04      	cmp	r3, #4
 8005a9a:	d001      	beq.n	8005aa0 <USBH_read+0x54>
 8005a9c:	2b28      	cmp	r3, #40	; 0x28
 8005a9e:	d103      	bne.n	8005aa8 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005aa6:	e003      	b.n	8005ab0 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005aae:	bf00      	nop
    }
  }

  return res;
 8005ab0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3748      	adds	r7, #72	; 0x48
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	20002be0 	.word	0x20002be0

08005ac0 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b094      	sub	sp, #80	; 0x50
 8005ac4:	af02      	add	r7, sp, #8
 8005ac6:	60b9      	str	r1, [r7, #8]
 8005ac8:	607a      	str	r2, [r7, #4]
 8005aca:	603b      	str	r3, [r7, #0]
 8005acc:	4603      	mov	r3, r0
 8005ace:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8005ad6:	7bf9      	ldrb	r1, [r7, #15]
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	9300      	str	r3, [sp, #0]
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	4817      	ldr	r0, [pc, #92]	; (8005b40 <USBH_write+0x80>)
 8005ae2:	f000 fe70 	bl	80067c6 <USBH_MSC_Write>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d103      	bne.n	8005af4 <USBH_write+0x34>
  {
    res = RES_OK;
 8005aec:	2300      	movs	r3, #0
 8005aee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005af2:	e01f      	b.n	8005b34 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8005af4:	f107 0210 	add.w	r2, r7, #16
 8005af8:	7bfb      	ldrb	r3, [r7, #15]
 8005afa:	4619      	mov	r1, r3
 8005afc:	4810      	ldr	r0, [pc, #64]	; (8005b40 <USBH_write+0x80>)
 8005afe:	f000 fdd5 	bl	80066ac <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8005b02:	7f7b      	ldrb	r3, [r7, #29]
 8005b04:	2b3a      	cmp	r3, #58	; 0x3a
 8005b06:	d00d      	beq.n	8005b24 <USBH_write+0x64>
 8005b08:	2b3a      	cmp	r3, #58	; 0x3a
 8005b0a:	dc0f      	bgt.n	8005b2c <USBH_write+0x6c>
 8005b0c:	2b28      	cmp	r3, #40	; 0x28
 8005b0e:	d009      	beq.n	8005b24 <USBH_write+0x64>
 8005b10:	2b28      	cmp	r3, #40	; 0x28
 8005b12:	dc0b      	bgt.n	8005b2c <USBH_write+0x6c>
 8005b14:	2b04      	cmp	r3, #4
 8005b16:	d005      	beq.n	8005b24 <USBH_write+0x64>
 8005b18:	2b27      	cmp	r3, #39	; 0x27
 8005b1a:	d107      	bne.n	8005b2c <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8005b1c:	2302      	movs	r3, #2
 8005b1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005b22:	e007      	b.n	8005b34 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8005b24:	2303      	movs	r3, #3
 8005b26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005b2a:	e003      	b.n	8005b34 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005b32:	bf00      	nop
    }
  }

  return res;
 8005b34:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3748      	adds	r7, #72	; 0x48
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	20002be0 	.word	0x20002be0

08005b44 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b090      	sub	sp, #64	; 0x40
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	603a      	str	r2, [r7, #0]
 8005b4e:	71fb      	strb	r3, [r7, #7]
 8005b50:	460b      	mov	r3, r1
 8005b52:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8005b5a:	79bb      	ldrb	r3, [r7, #6]
 8005b5c:	2b03      	cmp	r3, #3
 8005b5e:	d852      	bhi.n	8005c06 <USBH_ioctl+0xc2>
 8005b60:	a201      	add	r2, pc, #4	; (adr r2, 8005b68 <USBH_ioctl+0x24>)
 8005b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b66:	bf00      	nop
 8005b68:	08005b79 	.word	0x08005b79
 8005b6c:	08005b81 	.word	0x08005b81
 8005b70:	08005bab 	.word	0x08005bab
 8005b74:	08005bd7 	.word	0x08005bd7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005b7e:	e045      	b.n	8005c0c <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005b80:	f107 0208 	add.w	r2, r7, #8
 8005b84:	79fb      	ldrb	r3, [r7, #7]
 8005b86:	4619      	mov	r1, r3
 8005b88:	4823      	ldr	r0, [pc, #140]	; (8005c18 <USBH_ioctl+0xd4>)
 8005b8a:	f000 fd8f 	bl	80066ac <USBH_MSC_GetLUNInfo>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d106      	bne.n	8005ba2 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005ba0:	e034      	b.n	8005c0c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005ba8:	e030      	b.n	8005c0c <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005baa:	f107 0208 	add.w	r2, r7, #8
 8005bae:	79fb      	ldrb	r3, [r7, #7]
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	4819      	ldr	r0, [pc, #100]	; (8005c18 <USBH_ioctl+0xd4>)
 8005bb4:	f000 fd7a 	bl	80066ac <USBH_MSC_GetLUNInfo>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d107      	bne.n	8005bce <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8005bbe:	8a3b      	ldrh	r3, [r7, #16]
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005bcc:	e01e      	b.n	8005c0c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005bd4:	e01a      	b.n	8005c0c <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005bd6:	f107 0208 	add.w	r2, r7, #8
 8005bda:	79fb      	ldrb	r3, [r7, #7]
 8005bdc:	4619      	mov	r1, r3
 8005bde:	480e      	ldr	r0, [pc, #56]	; (8005c18 <USBH_ioctl+0xd4>)
 8005be0:	f000 fd64 	bl	80066ac <USBH_MSC_GetLUNInfo>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d109      	bne.n	8005bfe <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8005bea:	8a3b      	ldrh	r3, [r7, #16]
 8005bec:	0a5b      	lsrs	r3, r3, #9
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005bfc:	e006      	b.n	8005c0c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005c04:	e002      	b.n	8005c0c <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8005c06:	2304      	movs	r3, #4
 8005c08:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8005c0c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3740      	adds	r7, #64	; 0x40
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	20002be0 	.word	0x20002be0

08005c1c <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005c1c:	b590      	push	{r4, r7, lr}
 8005c1e:	b089      	sub	sp, #36	; 0x24
 8005c20:	af04      	add	r7, sp, #16
 8005c22:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c2a:	7919      	ldrb	r1, [r3, #4]
 8005c2c:	2350      	movs	r3, #80	; 0x50
 8005c2e:	2206      	movs	r2, #6
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f001 fc53 	bl	80074dc <USBH_FindInterface>
 8005c36:	4603      	mov	r3, r0
 8005c38:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8005c3a:	7bfb      	ldrb	r3, [r7, #15]
 8005c3c:	2bff      	cmp	r3, #255	; 0xff
 8005c3e:	d002      	beq.n	8005c46 <USBH_MSC_InterfaceInit+0x2a>
 8005c40:	7bfb      	ldrb	r3, [r7, #15]
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d901      	bls.n	8005c4a <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005c46:	2302      	movs	r3, #2
 8005c48:	e0ef      	b.n	8005e2a <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8005c4a:	7bfb      	ldrb	r3, [r7, #15]
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f001 fc28 	bl	80074a4 <USBH_SelectInterface>
 8005c54:	4603      	mov	r3, r0
 8005c56:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005c58:	7bbb      	ldrb	r3, [r7, #14]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d001      	beq.n	8005c62 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8005c5e:	2302      	movs	r3, #2
 8005c60:	e0e3      	b.n	8005e2a <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005c68:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005c6c:	f008 f8b8 	bl	800dde0 <malloc>
 8005c70:	4603      	mov	r3, r0
 8005c72:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c7a:	69db      	ldr	r3, [r3, #28]
 8005c7c:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d101      	bne.n	8005c88 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8005c84:	2302      	movs	r3, #2
 8005c86:	e0d0      	b.n	8005e2a <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8005c88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	68b8      	ldr	r0, [r7, #8]
 8005c90:	f008 f8c4 	bl	800de1c <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005c94:	7bfb      	ldrb	r3, [r7, #15]
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	211a      	movs	r1, #26
 8005c9a:	fb01 f303 	mul.w	r3, r1, r3
 8005c9e:	4413      	add	r3, r2
 8005ca0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	b25b      	sxtb	r3, r3
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	da16      	bge.n	8005cda <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8005cac:	7bfb      	ldrb	r3, [r7, #15]
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	211a      	movs	r1, #26
 8005cb2:	fb01 f303 	mul.w	r3, r1, r3
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005cbc:	781a      	ldrb	r2, [r3, #0]
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005cc2:	7bfb      	ldrb	r3, [r7, #15]
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	211a      	movs	r1, #26
 8005cc8:	fb01 f303 	mul.w	r3, r1, r3
 8005ccc:	4413      	add	r3, r2
 8005cce:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005cd2:	881a      	ldrh	r2, [r3, #0]
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	815a      	strh	r2, [r3, #10]
 8005cd8:	e015      	b.n	8005d06 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8005cda:	7bfb      	ldrb	r3, [r7, #15]
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	211a      	movs	r1, #26
 8005ce0:	fb01 f303 	mul.w	r3, r1, r3
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005cea:	781a      	ldrb	r2, [r3, #0]
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005cf0:	7bfb      	ldrb	r3, [r7, #15]
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	211a      	movs	r1, #26
 8005cf6:	fb01 f303 	mul.w	r3, r1, r3
 8005cfa:	4413      	add	r3, r2
 8005cfc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005d00:	881a      	ldrh	r2, [r3, #0]
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005d06:	7bfb      	ldrb	r3, [r7, #15]
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	211a      	movs	r1, #26
 8005d0c:	fb01 f303 	mul.w	r3, r1, r3
 8005d10:	4413      	add	r3, r2
 8005d12:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	b25b      	sxtb	r3, r3
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	da16      	bge.n	8005d4c <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8005d1e:	7bfb      	ldrb	r3, [r7, #15]
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	211a      	movs	r1, #26
 8005d24:	fb01 f303 	mul.w	r3, r1, r3
 8005d28:	4413      	add	r3, r2
 8005d2a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005d2e:	781a      	ldrb	r2, [r3, #0]
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005d34:	7bfb      	ldrb	r3, [r7, #15]
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	211a      	movs	r1, #26
 8005d3a:	fb01 f303 	mul.w	r3, r1, r3
 8005d3e:	4413      	add	r3, r2
 8005d40:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005d44:	881a      	ldrh	r2, [r3, #0]
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	815a      	strh	r2, [r3, #10]
 8005d4a:	e015      	b.n	8005d78 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8005d4c:	7bfb      	ldrb	r3, [r7, #15]
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	211a      	movs	r1, #26
 8005d52:	fb01 f303 	mul.w	r3, r1, r3
 8005d56:	4413      	add	r3, r2
 8005d58:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005d5c:	781a      	ldrb	r2, [r3, #0]
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005d62:	7bfb      	ldrb	r3, [r7, #15]
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	211a      	movs	r1, #26
 8005d68:	fb01 f303 	mul.w	r3, r1, r3
 8005d6c:	4413      	add	r3, r2
 8005d6e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005d72:	881a      	ldrh	r2, [r3, #0]
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	2200      	movs	r2, #0
 8005d82:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	2200      	movs	r2, #0
 8005d88:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	799b      	ldrb	r3, [r3, #6]
 8005d8e:	4619      	mov	r1, r3
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f002 fdc4 	bl	800891e <USBH_AllocPipe>
 8005d96:	4603      	mov	r3, r0
 8005d98:	461a      	mov	r2, r3
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	79db      	ldrb	r3, [r3, #7]
 8005da2:	4619      	mov	r1, r3
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f002 fdba 	bl	800891e <USBH_AllocPipe>
 8005daa:	4603      	mov	r3, r0
 8005dac:	461a      	mov	r2, r3
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 fdac 	bl	8006910 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	7959      	ldrb	r1, [r3, #5]
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	7998      	ldrb	r0, [r3, #6]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005dcc:	68ba      	ldr	r2, [r7, #8]
 8005dce:	8912      	ldrh	r2, [r2, #8]
 8005dd0:	9202      	str	r2, [sp, #8]
 8005dd2:	2202      	movs	r2, #2
 8005dd4:	9201      	str	r2, [sp, #4]
 8005dd6:	9300      	str	r3, [sp, #0]
 8005dd8:	4623      	mov	r3, r4
 8005dda:	4602      	mov	r2, r0
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f002 fd6f 	bl	80088c0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	7919      	ldrb	r1, [r3, #4]
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	79d8      	ldrb	r0, [r3, #7]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005df6:	68ba      	ldr	r2, [r7, #8]
 8005df8:	8952      	ldrh	r2, [r2, #10]
 8005dfa:	9202      	str	r2, [sp, #8]
 8005dfc:	2202      	movs	r2, #2
 8005dfe:	9201      	str	r2, [sp, #4]
 8005e00:	9300      	str	r3, [sp, #0]
 8005e02:	4623      	mov	r3, r4
 8005e04:	4602      	mov	r2, r0
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f002 fd5a 	bl	80088c0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	791b      	ldrb	r3, [r3, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	4619      	mov	r1, r3
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f007 ff05 	bl	800dc24 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	795b      	ldrb	r3, [r3, #5]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	4619      	mov	r1, r3
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f007 fefe 	bl	800dc24 <USBH_LL_SetToggle>

  return USBH_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3714      	adds	r7, #20
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd90      	pop	{r4, r7, pc}

08005e32 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005e32:	b580      	push	{r7, lr}
 8005e34:	b084      	sub	sp, #16
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e40:	69db      	ldr	r3, [r3, #28]
 8005e42:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	795b      	ldrb	r3, [r3, #5]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00e      	beq.n	8005e6a <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	795b      	ldrb	r3, [r3, #5]
 8005e50:	4619      	mov	r1, r3
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f002 fd53 	bl	80088fe <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	795b      	ldrb	r3, [r3, #5]
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f002 fd7e 	bl	8008960 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	791b      	ldrb	r3, [r3, #4]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00e      	beq.n	8005e90 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	791b      	ldrb	r3, [r3, #4]
 8005e76:	4619      	mov	r1, r3
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f002 fd40 	bl	80088fe <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	791b      	ldrb	r3, [r3, #4]
 8005e82:	4619      	mov	r1, r3
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f002 fd6b 	bl	8008960 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e96:	69db      	ldr	r3, [r3, #28]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d00b      	beq.n	8005eb4 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ea2:	69db      	ldr	r3, [r3, #28]
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f007 ffa3 	bl	800ddf0 <free>
    phost->pActiveClass->pData = 0U;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b084      	sub	sp, #16
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ecc:	69db      	ldr	r3, [r3, #28]
 8005ece:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	7b9b      	ldrb	r3, [r3, #14]
 8005ed8:	2b03      	cmp	r3, #3
 8005eda:	d041      	beq.n	8005f60 <USBH_MSC_ClassRequest+0xa2>
 8005edc:	2b03      	cmp	r3, #3
 8005ede:	dc4b      	bgt.n	8005f78 <USBH_MSC_ClassRequest+0xba>
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d001      	beq.n	8005ee8 <USBH_MSC_ClassRequest+0x2a>
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d147      	bne.n	8005f78 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	4619      	mov	r1, r3
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 fcf0 	bl	80068d2 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8005ef6:	7bfb      	ldrb	r3, [r7, #15]
 8005ef8:	2b03      	cmp	r3, #3
 8005efa:	d104      	bne.n	8005f06 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	2200      	movs	r2, #0
 8005f00:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8005f02:	2300      	movs	r3, #0
 8005f04:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8005f06:	7bfb      	ldrb	r3, [r7, #15]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d137      	bne.n	8005f7c <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	2b02      	cmp	r3, #2
 8005f12:	d804      	bhi.n	8005f1e <USBH_MSC_ClassRequest+0x60>
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	3301      	adds	r3, #1
 8005f1a:	b2da      	uxtb	r2, r3
 8005f1c:	e000      	b.n	8005f20 <USBH_MSC_ClassRequest+0x62>
 8005f1e:	2202      	movs	r2, #2
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8005f24:	2300      	movs	r3, #0
 8005f26:	73bb      	strb	r3, [r7, #14]
 8005f28:	e014      	b.n	8005f54 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8005f2a:	7bbb      	ldrb	r3, [r7, #14]
 8005f2c:	68ba      	ldr	r2, [r7, #8]
 8005f2e:	2134      	movs	r1, #52	; 0x34
 8005f30:	fb01 f303 	mul.w	r3, r1, r3
 8005f34:	4413      	add	r3, r2
 8005f36:	3392      	adds	r3, #146	; 0x92
 8005f38:	2202      	movs	r2, #2
 8005f3a:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8005f3c:	7bbb      	ldrb	r3, [r7, #14]
 8005f3e:	68ba      	ldr	r2, [r7, #8]
 8005f40:	2134      	movs	r1, #52	; 0x34
 8005f42:	fb01 f303 	mul.w	r3, r1, r3
 8005f46:	4413      	add	r3, r2
 8005f48:	33c1      	adds	r3, #193	; 0xc1
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8005f4e:	7bbb      	ldrb	r3, [r7, #14]
 8005f50:	3301      	adds	r3, #1
 8005f52:	73bb      	strb	r3, [r7, #14]
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	7bba      	ldrb	r2, [r7, #14]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d3e5      	bcc.n	8005f2a <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8005f5e:	e00d      	b.n	8005f7c <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8005f60:	2100      	movs	r1, #0
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f002 f87b 	bl	800805e <USBH_ClrFeature>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d108      	bne.n	8005f80 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	7bda      	ldrb	r2, [r3, #15]
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	739a      	strb	r2, [r3, #14]
      }
      break;
 8005f76:	e003      	b.n	8005f80 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8005f78:	bf00      	nop
 8005f7a:	e002      	b.n	8005f82 <USBH_MSC_ClassRequest+0xc4>
      break;
 8005f7c:	bf00      	nop
 8005f7e:	e000      	b.n	8005f82 <USBH_MSC_ClassRequest+0xc4>
      break;
 8005f80:	bf00      	nop
  }

  return status;
 8005f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3710      	adds	r7, #16
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b086      	sub	sp, #24
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f9a:	69db      	ldr	r3, [r3, #28]
 8005f9c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	7b1b      	ldrb	r3, [r3, #12]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d003      	beq.n	8005fba <USBH_MSC_Process+0x2e>
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	f000 8271 	beq.w	800649a <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8005fb8:	e272      	b.n	80064a0 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	f080 824f 	bcs.w	800646a <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	693a      	ldr	r2, [r7, #16]
 8005fd6:	2334      	movs	r3, #52	; 0x34
 8005fd8:	fb03 f301 	mul.w	r3, r3, r1
 8005fdc:	4413      	add	r3, r2
 8005fde:	3391      	adds	r3, #145	; 0x91
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005fea:	4619      	mov	r1, r3
 8005fec:	693a      	ldr	r2, [r7, #16]
 8005fee:	2334      	movs	r3, #52	; 0x34
 8005ff0:	fb03 f301 	mul.w	r3, r3, r1
 8005ff4:	4413      	add	r3, r2
 8005ff6:	3390      	adds	r3, #144	; 0x90
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	2b08      	cmp	r3, #8
 8005ffc:	f200 8243 	bhi.w	8006486 <USBH_MSC_Process+0x4fa>
 8006000:	a201      	add	r2, pc, #4	; (adr r2, 8006008 <USBH_MSC_Process+0x7c>)
 8006002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006006:	bf00      	nop
 8006008:	0800602d 	.word	0x0800602d
 800600c:	08006487 	.word	0x08006487
 8006010:	080060f5 	.word	0x080060f5
 8006014:	08006279 	.word	0x08006279
 8006018:	08006053 	.word	0x08006053
 800601c:	08006345 	.word	0x08006345
 8006020:	08006487 	.word	0x08006487
 8006024:	08006487 	.word	0x08006487
 8006028:	08006459 	.word	0x08006459
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006032:	4619      	mov	r1, r3
 8006034:	693a      	ldr	r2, [r7, #16]
 8006036:	2334      	movs	r3, #52	; 0x34
 8006038:	fb03 f301 	mul.w	r3, r3, r1
 800603c:	4413      	add	r3, r2
 800603e:	3390      	adds	r3, #144	; 0x90
 8006040:	2204      	movs	r2, #4
 8006042:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8006050:	e222      	b.n	8006498 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006058:	b2d9      	uxtb	r1, r3
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006060:	461a      	mov	r2, r3
 8006062:	2334      	movs	r3, #52	; 0x34
 8006064:	fb03 f302 	mul.w	r3, r3, r2
 8006068:	3398      	adds	r3, #152	; 0x98
 800606a:	693a      	ldr	r2, [r7, #16]
 800606c:	4413      	add	r3, r2
 800606e:	3307      	adds	r3, #7
 8006070:	461a      	mov	r2, r3
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 ff6a 	bl	8006f4c <USBH_MSC_SCSI_Inquiry>
 8006078:	4603      	mov	r3, r0
 800607a:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800607c:	7bfb      	ldrb	r3, [r7, #15]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d10b      	bne.n	800609a <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006088:	4619      	mov	r1, r3
 800608a:	693a      	ldr	r2, [r7, #16]
 800608c:	2334      	movs	r3, #52	; 0x34
 800608e:	fb03 f301 	mul.w	r3, r3, r1
 8006092:	4413      	add	r3, r2
 8006094:	3390      	adds	r3, #144	; 0x90
 8006096:	2202      	movs	r2, #2
 8006098:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800609a:	7bfb      	ldrb	r3, [r7, #15]
 800609c:	2b02      	cmp	r3, #2
 800609e:	d10c      	bne.n	80060ba <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80060a6:	4619      	mov	r1, r3
 80060a8:	693a      	ldr	r2, [r7, #16]
 80060aa:	2334      	movs	r3, #52	; 0x34
 80060ac:	fb03 f301 	mul.w	r3, r3, r1
 80060b0:	4413      	add	r3, r2
 80060b2:	3390      	adds	r3, #144	; 0x90
 80060b4:	2205      	movs	r2, #5
 80060b6:	701a      	strb	r2, [r3, #0]
            break;
 80060b8:	e1e7      	b.n	800648a <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80060ba:	7bfb      	ldrb	r3, [r7, #15]
 80060bc:	2b04      	cmp	r3, #4
 80060be:	f040 81e4 	bne.w	800648a <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80060c8:	4619      	mov	r1, r3
 80060ca:	693a      	ldr	r2, [r7, #16]
 80060cc:	2334      	movs	r3, #52	; 0x34
 80060ce:	fb03 f301 	mul.w	r3, r3, r1
 80060d2:	4413      	add	r3, r2
 80060d4:	3390      	adds	r3, #144	; 0x90
 80060d6:	2201      	movs	r2, #1
 80060d8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80060e0:	4619      	mov	r1, r3
 80060e2:	693a      	ldr	r2, [r7, #16]
 80060e4:	2334      	movs	r3, #52	; 0x34
 80060e6:	fb03 f301 	mul.w	r3, r3, r1
 80060ea:	4413      	add	r3, r2
 80060ec:	3391      	adds	r3, #145	; 0x91
 80060ee:	2202      	movs	r2, #2
 80060f0:	701a      	strb	r2, [r3, #0]
            break;
 80060f2:	e1ca      	b.n	800648a <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	4619      	mov	r1, r3
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 fe66 	bl	8006dd0 <USBH_MSC_SCSI_TestUnitReady>
 8006104:	4603      	mov	r3, r0
 8006106:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8006108:	7bbb      	ldrb	r3, [r7, #14]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d149      	bne.n	80061a2 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006114:	4619      	mov	r1, r3
 8006116:	693a      	ldr	r2, [r7, #16]
 8006118:	2334      	movs	r3, #52	; 0x34
 800611a:	fb03 f301 	mul.w	r3, r3, r1
 800611e:	4413      	add	r3, r2
 8006120:	3392      	adds	r3, #146	; 0x92
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00c      	beq.n	8006142 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800612e:	4619      	mov	r1, r3
 8006130:	693a      	ldr	r2, [r7, #16]
 8006132:	2334      	movs	r3, #52	; 0x34
 8006134:	fb03 f301 	mul.w	r3, r3, r1
 8006138:	4413      	add	r3, r2
 800613a:	33c1      	adds	r3, #193	; 0xc1
 800613c:	2201      	movs	r2, #1
 800613e:	701a      	strb	r2, [r3, #0]
 8006140:	e00b      	b.n	800615a <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006148:	4619      	mov	r1, r3
 800614a:	693a      	ldr	r2, [r7, #16]
 800614c:	2334      	movs	r3, #52	; 0x34
 800614e:	fb03 f301 	mul.w	r3, r3, r1
 8006152:	4413      	add	r3, r2
 8006154:	33c1      	adds	r3, #193	; 0xc1
 8006156:	2200      	movs	r2, #0
 8006158:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006160:	4619      	mov	r1, r3
 8006162:	693a      	ldr	r2, [r7, #16]
 8006164:	2334      	movs	r3, #52	; 0x34
 8006166:	fb03 f301 	mul.w	r3, r3, r1
 800616a:	4413      	add	r3, r2
 800616c:	3390      	adds	r3, #144	; 0x90
 800616e:	2203      	movs	r2, #3
 8006170:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006178:	4619      	mov	r1, r3
 800617a:	693a      	ldr	r2, [r7, #16]
 800617c:	2334      	movs	r3, #52	; 0x34
 800617e:	fb03 f301 	mul.w	r3, r3, r1
 8006182:	4413      	add	r3, r2
 8006184:	3391      	adds	r3, #145	; 0x91
 8006186:	2200      	movs	r2, #0
 8006188:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006190:	4619      	mov	r1, r3
 8006192:	693a      	ldr	r2, [r7, #16]
 8006194:	2334      	movs	r3, #52	; 0x34
 8006196:	fb03 f301 	mul.w	r3, r3, r1
 800619a:	4413      	add	r3, r2
 800619c:	3392      	adds	r3, #146	; 0x92
 800619e:	2200      	movs	r2, #0
 80061a0:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 80061a2:	7bbb      	ldrb	r3, [r7, #14]
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d14a      	bne.n	800623e <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80061ae:	4619      	mov	r1, r3
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	2334      	movs	r3, #52	; 0x34
 80061b4:	fb03 f301 	mul.w	r3, r3, r1
 80061b8:	4413      	add	r3, r2
 80061ba:	3392      	adds	r3, #146	; 0x92
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d00c      	beq.n	80061dc <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80061c8:	4619      	mov	r1, r3
 80061ca:	693a      	ldr	r2, [r7, #16]
 80061cc:	2334      	movs	r3, #52	; 0x34
 80061ce:	fb03 f301 	mul.w	r3, r3, r1
 80061d2:	4413      	add	r3, r2
 80061d4:	33c1      	adds	r3, #193	; 0xc1
 80061d6:	2201      	movs	r2, #1
 80061d8:	701a      	strb	r2, [r3, #0]
 80061da:	e00b      	b.n	80061f4 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80061e2:	4619      	mov	r1, r3
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	2334      	movs	r3, #52	; 0x34
 80061e8:	fb03 f301 	mul.w	r3, r3, r1
 80061ec:	4413      	add	r3, r2
 80061ee:	33c1      	adds	r3, #193	; 0xc1
 80061f0:	2200      	movs	r2, #0
 80061f2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80061fa:	4619      	mov	r1, r3
 80061fc:	693a      	ldr	r2, [r7, #16]
 80061fe:	2334      	movs	r3, #52	; 0x34
 8006200:	fb03 f301 	mul.w	r3, r3, r1
 8006204:	4413      	add	r3, r2
 8006206:	3390      	adds	r3, #144	; 0x90
 8006208:	2205      	movs	r2, #5
 800620a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006212:	4619      	mov	r1, r3
 8006214:	693a      	ldr	r2, [r7, #16]
 8006216:	2334      	movs	r3, #52	; 0x34
 8006218:	fb03 f301 	mul.w	r3, r3, r1
 800621c:	4413      	add	r3, r2
 800621e:	3391      	adds	r3, #145	; 0x91
 8006220:	2201      	movs	r2, #1
 8006222:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800622a:	4619      	mov	r1, r3
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	2334      	movs	r3, #52	; 0x34
 8006230:	fb03 f301 	mul.w	r3, r3, r1
 8006234:	4413      	add	r3, r2
 8006236:	3392      	adds	r3, #146	; 0x92
 8006238:	2202      	movs	r2, #2
 800623a:	701a      	strb	r2, [r3, #0]
            break;
 800623c:	e127      	b.n	800648e <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800623e:	7bbb      	ldrb	r3, [r7, #14]
 8006240:	2b04      	cmp	r3, #4
 8006242:	f040 8124 	bne.w	800648e <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800624c:	4619      	mov	r1, r3
 800624e:	693a      	ldr	r2, [r7, #16]
 8006250:	2334      	movs	r3, #52	; 0x34
 8006252:	fb03 f301 	mul.w	r3, r3, r1
 8006256:	4413      	add	r3, r2
 8006258:	3390      	adds	r3, #144	; 0x90
 800625a:	2201      	movs	r2, #1
 800625c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006264:	4619      	mov	r1, r3
 8006266:	693a      	ldr	r2, [r7, #16]
 8006268:	2334      	movs	r3, #52	; 0x34
 800626a:	fb03 f301 	mul.w	r3, r3, r1
 800626e:	4413      	add	r3, r2
 8006270:	3391      	adds	r3, #145	; 0x91
 8006272:	2202      	movs	r2, #2
 8006274:	701a      	strb	r2, [r3, #0]
            break;
 8006276:	e10a      	b.n	800648e <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800627e:	b2d9      	uxtb	r1, r3
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006286:	461a      	mov	r2, r3
 8006288:	2334      	movs	r3, #52	; 0x34
 800628a:	fb03 f302 	mul.w	r3, r3, r2
 800628e:	3390      	adds	r3, #144	; 0x90
 8006290:	693a      	ldr	r2, [r7, #16]
 8006292:	4413      	add	r3, r2
 8006294:	3304      	adds	r3, #4
 8006296:	461a      	mov	r2, r3
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 fddc 	bl	8006e56 <USBH_MSC_SCSI_ReadCapacity>
 800629e:	4603      	mov	r3, r0
 80062a0:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80062a2:	7bfb      	ldrb	r3, [r7, #15]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d120      	bne.n	80062ea <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80062ae:	4619      	mov	r1, r3
 80062b0:	693a      	ldr	r2, [r7, #16]
 80062b2:	2334      	movs	r3, #52	; 0x34
 80062b4:	fb03 f301 	mul.w	r3, r3, r1
 80062b8:	4413      	add	r3, r2
 80062ba:	3390      	adds	r3, #144	; 0x90
 80062bc:	2201      	movs	r2, #1
 80062be:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80062c6:	4619      	mov	r1, r3
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	2334      	movs	r3, #52	; 0x34
 80062cc:	fb03 f301 	mul.w	r3, r3, r1
 80062d0:	4413      	add	r3, r2
 80062d2:	3391      	adds	r3, #145	; 0x91
 80062d4:	2200      	movs	r2, #0
 80062d6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80062de:	3301      	adds	r3, #1
 80062e0:	b29a      	uxth	r2, r3
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80062e8:	e0d3      	b.n	8006492 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 80062ea:	7bfb      	ldrb	r3, [r7, #15]
 80062ec:	2b02      	cmp	r3, #2
 80062ee:	d10c      	bne.n	800630a <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80062f6:	4619      	mov	r1, r3
 80062f8:	693a      	ldr	r2, [r7, #16]
 80062fa:	2334      	movs	r3, #52	; 0x34
 80062fc:	fb03 f301 	mul.w	r3, r3, r1
 8006300:	4413      	add	r3, r2
 8006302:	3390      	adds	r3, #144	; 0x90
 8006304:	2205      	movs	r2, #5
 8006306:	701a      	strb	r2, [r3, #0]
            break;
 8006308:	e0c3      	b.n	8006492 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800630a:	7bfb      	ldrb	r3, [r7, #15]
 800630c:	2b04      	cmp	r3, #4
 800630e:	f040 80c0 	bne.w	8006492 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006318:	4619      	mov	r1, r3
 800631a:	693a      	ldr	r2, [r7, #16]
 800631c:	2334      	movs	r3, #52	; 0x34
 800631e:	fb03 f301 	mul.w	r3, r3, r1
 8006322:	4413      	add	r3, r2
 8006324:	3390      	adds	r3, #144	; 0x90
 8006326:	2201      	movs	r2, #1
 8006328:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006330:	4619      	mov	r1, r3
 8006332:	693a      	ldr	r2, [r7, #16]
 8006334:	2334      	movs	r3, #52	; 0x34
 8006336:	fb03 f301 	mul.w	r3, r3, r1
 800633a:	4413      	add	r3, r2
 800633c:	3391      	adds	r3, #145	; 0x91
 800633e:	2202      	movs	r2, #2
 8006340:	701a      	strb	r2, [r3, #0]
            break;
 8006342:	e0a6      	b.n	8006492 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800634a:	b2d9      	uxtb	r1, r3
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006352:	461a      	mov	r2, r3
 8006354:	2334      	movs	r3, #52	; 0x34
 8006356:	fb03 f302 	mul.w	r3, r3, r2
 800635a:	3398      	adds	r3, #152	; 0x98
 800635c:	693a      	ldr	r2, [r7, #16]
 800635e:	4413      	add	r3, r2
 8006360:	3304      	adds	r3, #4
 8006362:	461a      	mov	r2, r3
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 fe96 	bl	8007096 <USBH_MSC_SCSI_RequestSense>
 800636a:	4603      	mov	r3, r0
 800636c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800636e:	7bfb      	ldrb	r3, [r7, #15]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d145      	bne.n	8006400 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800637a:	4619      	mov	r1, r3
 800637c:	693a      	ldr	r2, [r7, #16]
 800637e:	2334      	movs	r3, #52	; 0x34
 8006380:	fb03 f301 	mul.w	r3, r3, r1
 8006384:	4413      	add	r3, r2
 8006386:	339c      	adds	r3, #156	; 0x9c
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	2b06      	cmp	r3, #6
 800638c:	d00c      	beq.n	80063a8 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006394:	4619      	mov	r1, r3
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	2334      	movs	r3, #52	; 0x34
 800639a:	fb03 f301 	mul.w	r3, r3, r1
 800639e:	4413      	add	r3, r2
 80063a0:	339c      	adds	r3, #156	; 0x9c
 80063a2:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	d117      	bne.n	80063d8 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	f242 720f 	movw	r2, #9999	; 0x270f
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d80c      	bhi.n	80063d8 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80063c4:	4619      	mov	r1, r3
 80063c6:	693a      	ldr	r2, [r7, #16]
 80063c8:	2334      	movs	r3, #52	; 0x34
 80063ca:	fb03 f301 	mul.w	r3, r3, r1
 80063ce:	4413      	add	r3, r2
 80063d0:	3390      	adds	r3, #144	; 0x90
 80063d2:	2202      	movs	r2, #2
 80063d4:	701a      	strb	r2, [r3, #0]
                  break;
 80063d6:	e05f      	b.n	8006498 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80063de:	4619      	mov	r1, r3
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	2334      	movs	r3, #52	; 0x34
 80063e4:	fb03 f301 	mul.w	r3, r3, r1
 80063e8:	4413      	add	r3, r2
 80063ea:	3390      	adds	r3, #144	; 0x90
 80063ec:	2201      	movs	r2, #1
 80063ee:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80063f6:	3301      	adds	r3, #1
 80063f8:	b29a      	uxth	r2, r3
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8006400:	7bfb      	ldrb	r3, [r7, #15]
 8006402:	2b02      	cmp	r3, #2
 8006404:	d10c      	bne.n	8006420 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800640c:	4619      	mov	r1, r3
 800640e:	693a      	ldr	r2, [r7, #16]
 8006410:	2334      	movs	r3, #52	; 0x34
 8006412:	fb03 f301 	mul.w	r3, r3, r1
 8006416:	4413      	add	r3, r2
 8006418:	3390      	adds	r3, #144	; 0x90
 800641a:	2208      	movs	r2, #8
 800641c:	701a      	strb	r2, [r3, #0]
            break;
 800641e:	e03a      	b.n	8006496 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006420:	7bfb      	ldrb	r3, [r7, #15]
 8006422:	2b04      	cmp	r3, #4
 8006424:	d137      	bne.n	8006496 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800642c:	4619      	mov	r1, r3
 800642e:	693a      	ldr	r2, [r7, #16]
 8006430:	2334      	movs	r3, #52	; 0x34
 8006432:	fb03 f301 	mul.w	r3, r3, r1
 8006436:	4413      	add	r3, r2
 8006438:	3390      	adds	r3, #144	; 0x90
 800643a:	2201      	movs	r2, #1
 800643c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006444:	4619      	mov	r1, r3
 8006446:	693a      	ldr	r2, [r7, #16]
 8006448:	2334      	movs	r3, #52	; 0x34
 800644a:	fb03 f301 	mul.w	r3, r3, r1
 800644e:	4413      	add	r3, r2
 8006450:	3391      	adds	r3, #145	; 0x91
 8006452:	2202      	movs	r2, #2
 8006454:	701a      	strb	r2, [r3, #0]
            break;
 8006456:	e01e      	b.n	8006496 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800645e:	3301      	adds	r3, #1
 8006460:	b29a      	uxth	r2, r3
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8006468:	e016      	b.n	8006498 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	2200      	movs	r2, #0
 800646e:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	2201      	movs	r2, #1
 8006476:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800647e:	2102      	movs	r1, #2
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	4798      	blx	r3
      break;
 8006484:	e00c      	b.n	80064a0 <USBH_MSC_Process+0x514>
            break;
 8006486:	bf00      	nop
 8006488:	e00a      	b.n	80064a0 <USBH_MSC_Process+0x514>
            break;
 800648a:	bf00      	nop
 800648c:	e008      	b.n	80064a0 <USBH_MSC_Process+0x514>
            break;
 800648e:	bf00      	nop
 8006490:	e006      	b.n	80064a0 <USBH_MSC_Process+0x514>
            break;
 8006492:	bf00      	nop
 8006494:	e004      	b.n	80064a0 <USBH_MSC_Process+0x514>
            break;
 8006496:	bf00      	nop
      break;
 8006498:	e002      	b.n	80064a0 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800649a:	2300      	movs	r3, #0
 800649c:	75fb      	strb	r3, [r7, #23]
      break;
 800649e:	bf00      	nop
  }
  return error;
 80064a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3718      	adds	r7, #24
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop

080064ac <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	370c      	adds	r7, #12
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr

080064c2 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b088      	sub	sp, #32
 80064c6:	af02      	add	r7, sp, #8
 80064c8:	6078      	str	r0, [r7, #4]
 80064ca:	460b      	mov	r3, r1
 80064cc:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064d4:	69db      	ldr	r3, [r3, #28]
 80064d6:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 80064d8:	2301      	movs	r3, #1
 80064da:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 80064dc:	2301      	movs	r3, #1
 80064de:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 80064e0:	78fb      	ldrb	r3, [r7, #3]
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	2134      	movs	r1, #52	; 0x34
 80064e6:	fb01 f303 	mul.w	r3, r1, r3
 80064ea:	4413      	add	r3, r2
 80064ec:	3390      	adds	r3, #144	; 0x90
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	2b07      	cmp	r3, #7
 80064f2:	d03c      	beq.n	800656e <USBH_MSC_RdWrProcess+0xac>
 80064f4:	2b07      	cmp	r3, #7
 80064f6:	f300 80a7 	bgt.w	8006648 <USBH_MSC_RdWrProcess+0x186>
 80064fa:	2b05      	cmp	r3, #5
 80064fc:	d06c      	beq.n	80065d8 <USBH_MSC_RdWrProcess+0x116>
 80064fe:	2b06      	cmp	r3, #6
 8006500:	f040 80a2 	bne.w	8006648 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8006504:	78f9      	ldrb	r1, [r7, #3]
 8006506:	2300      	movs	r3, #0
 8006508:	9300      	str	r3, [sp, #0]
 800650a:	2300      	movs	r3, #0
 800650c:	2200      	movs	r2, #0
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 fea5 	bl	800725e <USBH_MSC_SCSI_Read>
 8006514:	4603      	mov	r3, r0
 8006516:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8006518:	7bfb      	ldrb	r3, [r7, #15]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d10b      	bne.n	8006536 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800651e:	78fb      	ldrb	r3, [r7, #3]
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	2134      	movs	r1, #52	; 0x34
 8006524:	fb01 f303 	mul.w	r3, r1, r3
 8006528:	4413      	add	r3, r2
 800652a:	3390      	adds	r3, #144	; 0x90
 800652c:	2201      	movs	r2, #1
 800652e:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8006530:	2300      	movs	r3, #0
 8006532:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006534:	e08a      	b.n	800664c <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 8006536:	7bfb      	ldrb	r3, [r7, #15]
 8006538:	2b02      	cmp	r3, #2
 800653a:	d109      	bne.n	8006550 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800653c:	78fb      	ldrb	r3, [r7, #3]
 800653e:	693a      	ldr	r2, [r7, #16]
 8006540:	2134      	movs	r1, #52	; 0x34
 8006542:	fb01 f303 	mul.w	r3, r1, r3
 8006546:	4413      	add	r3, r2
 8006548:	3390      	adds	r3, #144	; 0x90
 800654a:	2205      	movs	r2, #5
 800654c:	701a      	strb	r2, [r3, #0]
      break;
 800654e:	e07d      	b.n	800664c <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006550:	7bfb      	ldrb	r3, [r7, #15]
 8006552:	2b04      	cmp	r3, #4
 8006554:	d17a      	bne.n	800664c <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8006556:	78fb      	ldrb	r3, [r7, #3]
 8006558:	693a      	ldr	r2, [r7, #16]
 800655a:	2134      	movs	r1, #52	; 0x34
 800655c:	fb01 f303 	mul.w	r3, r1, r3
 8006560:	4413      	add	r3, r2
 8006562:	3390      	adds	r3, #144	; 0x90
 8006564:	2208      	movs	r2, #8
 8006566:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8006568:	2302      	movs	r3, #2
 800656a:	75fb      	strb	r3, [r7, #23]
      break;
 800656c:	e06e      	b.n	800664c <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800656e:	78f9      	ldrb	r1, [r7, #3]
 8006570:	2300      	movs	r3, #0
 8006572:	9300      	str	r3, [sp, #0]
 8006574:	2300      	movs	r3, #0
 8006576:	2200      	movs	r2, #0
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 fe05 	bl	8007188 <USBH_MSC_SCSI_Write>
 800657e:	4603      	mov	r3, r0
 8006580:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8006582:	7bfb      	ldrb	r3, [r7, #15]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d10b      	bne.n	80065a0 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8006588:	78fb      	ldrb	r3, [r7, #3]
 800658a:	693a      	ldr	r2, [r7, #16]
 800658c:	2134      	movs	r1, #52	; 0x34
 800658e:	fb01 f303 	mul.w	r3, r1, r3
 8006592:	4413      	add	r3, r2
 8006594:	3390      	adds	r3, #144	; 0x90
 8006596:	2201      	movs	r2, #1
 8006598:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800659a:	2300      	movs	r3, #0
 800659c:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800659e:	e057      	b.n	8006650 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 80065a0:	7bfb      	ldrb	r3, [r7, #15]
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	d109      	bne.n	80065ba <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80065a6:	78fb      	ldrb	r3, [r7, #3]
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	2134      	movs	r1, #52	; 0x34
 80065ac:	fb01 f303 	mul.w	r3, r1, r3
 80065b0:	4413      	add	r3, r2
 80065b2:	3390      	adds	r3, #144	; 0x90
 80065b4:	2205      	movs	r2, #5
 80065b6:	701a      	strb	r2, [r3, #0]
      break;
 80065b8:	e04a      	b.n	8006650 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80065ba:	7bfb      	ldrb	r3, [r7, #15]
 80065bc:	2b04      	cmp	r3, #4
 80065be:	d147      	bne.n	8006650 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80065c0:	78fb      	ldrb	r3, [r7, #3]
 80065c2:	693a      	ldr	r2, [r7, #16]
 80065c4:	2134      	movs	r1, #52	; 0x34
 80065c6:	fb01 f303 	mul.w	r3, r1, r3
 80065ca:	4413      	add	r3, r2
 80065cc:	3390      	adds	r3, #144	; 0x90
 80065ce:	2208      	movs	r2, #8
 80065d0:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80065d2:	2302      	movs	r3, #2
 80065d4:	75fb      	strb	r3, [r7, #23]
      break;
 80065d6:	e03b      	b.n	8006650 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 80065d8:	78fb      	ldrb	r3, [r7, #3]
 80065da:	2234      	movs	r2, #52	; 0x34
 80065dc:	fb02 f303 	mul.w	r3, r2, r3
 80065e0:	3398      	adds	r3, #152	; 0x98
 80065e2:	693a      	ldr	r2, [r7, #16]
 80065e4:	4413      	add	r3, r2
 80065e6:	1d1a      	adds	r2, r3, #4
 80065e8:	78fb      	ldrb	r3, [r7, #3]
 80065ea:	4619      	mov	r1, r3
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 fd52 	bl	8007096 <USBH_MSC_SCSI_RequestSense>
 80065f2:	4603      	mov	r3, r0
 80065f4:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80065f6:	7bfb      	ldrb	r3, [r7, #15]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d113      	bne.n	8006624 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80065fc:	78fb      	ldrb	r3, [r7, #3]
 80065fe:	693a      	ldr	r2, [r7, #16]
 8006600:	2134      	movs	r1, #52	; 0x34
 8006602:	fb01 f303 	mul.w	r3, r1, r3
 8006606:	4413      	add	r3, r2
 8006608:	3390      	adds	r3, #144	; 0x90
 800660a:	2201      	movs	r2, #1
 800660c:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800660e:	78fb      	ldrb	r3, [r7, #3]
 8006610:	693a      	ldr	r2, [r7, #16]
 8006612:	2134      	movs	r1, #52	; 0x34
 8006614:	fb01 f303 	mul.w	r3, r1, r3
 8006618:	4413      	add	r3, r2
 800661a:	3391      	adds	r3, #145	; 0x91
 800661c:	2202      	movs	r2, #2
 800661e:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8006620:	2302      	movs	r3, #2
 8006622:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8006624:	7bfb      	ldrb	r3, [r7, #15]
 8006626:	2b02      	cmp	r3, #2
 8006628:	d014      	beq.n	8006654 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800662a:	7bfb      	ldrb	r3, [r7, #15]
 800662c:	2b04      	cmp	r3, #4
 800662e:	d111      	bne.n	8006654 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8006630:	78fb      	ldrb	r3, [r7, #3]
 8006632:	693a      	ldr	r2, [r7, #16]
 8006634:	2134      	movs	r1, #52	; 0x34
 8006636:	fb01 f303 	mul.w	r3, r1, r3
 800663a:	4413      	add	r3, r2
 800663c:	3390      	adds	r3, #144	; 0x90
 800663e:	2208      	movs	r2, #8
 8006640:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8006642:	2302      	movs	r3, #2
 8006644:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006646:	e005      	b.n	8006654 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 8006648:	bf00      	nop
 800664a:	e004      	b.n	8006656 <USBH_MSC_RdWrProcess+0x194>
      break;
 800664c:	bf00      	nop
 800664e:	e002      	b.n	8006656 <USBH_MSC_RdWrProcess+0x194>
      break;
 8006650:	bf00      	nop
 8006652:	e000      	b.n	8006656 <USBH_MSC_RdWrProcess+0x194>
      break;
 8006654:	bf00      	nop

  }
  return error;
 8006656:	7dfb      	ldrb	r3, [r7, #23]
}
 8006658:	4618      	mov	r0, r3
 800665a:	3718      	adds	r7, #24
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8006660:	b480      	push	{r7}
 8006662:	b085      	sub	sp, #20
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	460b      	mov	r3, r1
 800666a:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006672:	69db      	ldr	r3, [r3, #28]
 8006674:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	b2db      	uxtb	r3, r3
 800667c:	2b0b      	cmp	r3, #11
 800667e:	d10c      	bne.n	800669a <USBH_MSC_UnitIsReady+0x3a>
 8006680:	78fb      	ldrb	r3, [r7, #3]
 8006682:	68ba      	ldr	r2, [r7, #8]
 8006684:	2134      	movs	r1, #52	; 0x34
 8006686:	fb01 f303 	mul.w	r3, r1, r3
 800668a:	4413      	add	r3, r2
 800668c:	3391      	adds	r3, #145	; 0x91
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d102      	bne.n	800669a <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8006694:	2301      	movs	r3, #1
 8006696:	73fb      	strb	r3, [r7, #15]
 8006698:	e001      	b.n	800669e <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800669a:	2300      	movs	r3, #0
 800669c:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800669e:	7bfb      	ldrb	r3, [r7, #15]
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3714      	adds	r7, #20
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b086      	sub	sp, #24
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	460b      	mov	r3, r1
 80066b6:	607a      	str	r2, [r7, #4]
 80066b8:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066c0:	69db      	ldr	r3, [r3, #28]
 80066c2:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	2b0b      	cmp	r3, #11
 80066cc:	d10d      	bne.n	80066ea <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 80066ce:	7afb      	ldrb	r3, [r7, #11]
 80066d0:	2234      	movs	r2, #52	; 0x34
 80066d2:	fb02 f303 	mul.w	r3, r2, r3
 80066d6:	3390      	adds	r3, #144	; 0x90
 80066d8:	697a      	ldr	r2, [r7, #20]
 80066da:	4413      	add	r3, r2
 80066dc:	2234      	movs	r2, #52	; 0x34
 80066de:	4619      	mov	r1, r3
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f007 fb8d 	bl	800de00 <memcpy>
    return USBH_OK;
 80066e6:	2300      	movs	r3, #0
 80066e8:	e000      	b.n	80066ec <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 80066ea:	2302      	movs	r3, #2
  }
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3718      	adds	r7, #24
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b088      	sub	sp, #32
 80066f8:	af02      	add	r7, sp, #8
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	607a      	str	r2, [r7, #4]
 80066fe:	603b      	str	r3, [r7, #0]
 8006700:	460b      	mov	r3, r1
 8006702:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800670a:	69db      	ldr	r3, [r3, #28]
 800670c:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006714:	b2db      	uxtb	r3, r3
 8006716:	2b00      	cmp	r3, #0
 8006718:	d00e      	beq.n	8006738 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8006720:	2b0b      	cmp	r3, #11
 8006722:	d109      	bne.n	8006738 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8006724:	7afb      	ldrb	r3, [r7, #11]
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	2134      	movs	r1, #52	; 0x34
 800672a:	fb01 f303 	mul.w	r3, r1, r3
 800672e:	4413      	add	r3, r2
 8006730:	3390      	adds	r3, #144	; 0x90
 8006732:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8006734:	2b01      	cmp	r3, #1
 8006736:	d001      	beq.n	800673c <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8006738:	2302      	movs	r3, #2
 800673a:	e040      	b.n	80067be <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	2206      	movs	r2, #6
 8006740:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8006742:	7afb      	ldrb	r3, [r7, #11]
 8006744:	697a      	ldr	r2, [r7, #20]
 8006746:	2134      	movs	r1, #52	; 0x34
 8006748:	fb01 f303 	mul.w	r3, r1, r3
 800674c:	4413      	add	r3, r2
 800674e:	3390      	adds	r3, #144	; 0x90
 8006750:	2206      	movs	r2, #6
 8006752:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8006754:	7afb      	ldrb	r3, [r7, #11]
 8006756:	b29a      	uxth	r2, r3
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800675e:	7af9      	ldrb	r1, [r7, #11]
 8006760:	6a3b      	ldr	r3, [r7, #32]
 8006762:	9300      	str	r3, [sp, #0]
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	68f8      	ldr	r0, [r7, #12]
 800676a:	f000 fd78 	bl	800725e <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006774:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006776:	e016      	b.n	80067a6 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	1ad2      	subs	r2, r2, r3
 8006782:	6a3b      	ldr	r3, [r7, #32]
 8006784:	f242 7110 	movw	r1, #10000	; 0x2710
 8006788:	fb01 f303 	mul.w	r3, r1, r3
 800678c:	429a      	cmp	r2, r3
 800678e:	d805      	bhi.n	800679c <USBH_MSC_Read+0xa8>
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006796:	b2db      	uxtb	r3, r3
 8006798:	2b00      	cmp	r3, #0
 800679a:	d104      	bne.n	80067a6 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	2201      	movs	r2, #1
 80067a0:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80067a2:	2302      	movs	r3, #2
 80067a4:	e00b      	b.n	80067be <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80067a6:	7afb      	ldrb	r3, [r7, #11]
 80067a8:	4619      	mov	r1, r3
 80067aa:	68f8      	ldr	r0, [r7, #12]
 80067ac:	f7ff fe89 	bl	80064c2 <USBH_MSC_RdWrProcess>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d0e0      	beq.n	8006778 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	2201      	movs	r2, #1
 80067ba:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3718      	adds	r7, #24
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}

080067c6 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b088      	sub	sp, #32
 80067ca:	af02      	add	r7, sp, #8
 80067cc:	60f8      	str	r0, [r7, #12]
 80067ce:	607a      	str	r2, [r7, #4]
 80067d0:	603b      	str	r3, [r7, #0]
 80067d2:	460b      	mov	r3, r1
 80067d4:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067dc:	69db      	ldr	r3, [r3, #28]
 80067de:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00e      	beq.n	800680a <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80067f2:	2b0b      	cmp	r3, #11
 80067f4:	d109      	bne.n	800680a <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80067f6:	7afb      	ldrb	r3, [r7, #11]
 80067f8:	697a      	ldr	r2, [r7, #20]
 80067fa:	2134      	movs	r1, #52	; 0x34
 80067fc:	fb01 f303 	mul.w	r3, r1, r3
 8006800:	4413      	add	r3, r2
 8006802:	3390      	adds	r3, #144	; 0x90
 8006804:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8006806:	2b01      	cmp	r3, #1
 8006808:	d001      	beq.n	800680e <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800680a:	2302      	movs	r3, #2
 800680c:	e040      	b.n	8006890 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	2207      	movs	r2, #7
 8006812:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8006814:	7afb      	ldrb	r3, [r7, #11]
 8006816:	697a      	ldr	r2, [r7, #20]
 8006818:	2134      	movs	r1, #52	; 0x34
 800681a:	fb01 f303 	mul.w	r3, r1, r3
 800681e:	4413      	add	r3, r2
 8006820:	3390      	adds	r3, #144	; 0x90
 8006822:	2207      	movs	r2, #7
 8006824:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8006826:	7afb      	ldrb	r3, [r7, #11]
 8006828:	b29a      	uxth	r2, r3
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8006830:	7af9      	ldrb	r1, [r7, #11]
 8006832:	6a3b      	ldr	r3, [r7, #32]
 8006834:	9300      	str	r3, [sp, #0]
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	68f8      	ldr	r0, [r7, #12]
 800683c:	f000 fca4 	bl	8007188 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006846:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006848:	e016      	b.n	8006878 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	1ad2      	subs	r2, r2, r3
 8006854:	6a3b      	ldr	r3, [r7, #32]
 8006856:	f242 7110 	movw	r1, #10000	; 0x2710
 800685a:	fb01 f303 	mul.w	r3, r1, r3
 800685e:	429a      	cmp	r2, r3
 8006860:	d805      	bhi.n	800686e <USBH_MSC_Write+0xa8>
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006868:	b2db      	uxtb	r3, r3
 800686a:	2b00      	cmp	r3, #0
 800686c:	d104      	bne.n	8006878 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	2201      	movs	r2, #1
 8006872:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8006874:	2302      	movs	r3, #2
 8006876:	e00b      	b.n	8006890 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006878:	7afb      	ldrb	r3, [r7, #11]
 800687a:	4619      	mov	r1, r3
 800687c:	68f8      	ldr	r0, [r7, #12]
 800687e:	f7ff fe20 	bl	80064c2 <USBH_MSC_RdWrProcess>
 8006882:	4603      	mov	r3, r0
 8006884:	2b01      	cmp	r3, #1
 8006886:	d0e0      	beq.n	800684a <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	2201      	movs	r2, #1
 800688c:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800688e:	2300      	movs	r3, #0
}
 8006890:	4618      	mov	r0, r3
 8006892:	3718      	adds	r7, #24
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2221      	movs	r2, #33	; 0x21
 80068a4:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	22ff      	movs	r2, #255	; 0xff
 80068aa:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 80068be:	2200      	movs	r2, #0
 80068c0:	2100      	movs	r1, #0
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f001 fdab 	bl	800841e <USBH_CtlReq>
 80068c8:	4603      	mov	r3, r0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3708      	adds	r7, #8
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}

080068d2 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 80068d2:	b580      	push	{r7, lr}
 80068d4:	b082      	sub	sp, #8
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
 80068da:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	22a1      	movs	r2, #161	; 0xa1
 80068e0:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	22fe      	movs	r2, #254	; 0xfe
 80068e6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 80068fa:	2201      	movs	r2, #1
 80068fc:	6839      	ldr	r1, [r7, #0]
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f001 fd8d 	bl	800841e <USBH_CtlReq>
 8006904:	4603      	mov	r3, r0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3708      	adds	r7, #8
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
	...

08006910 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8006910:	b480      	push	{r7}
 8006912:	b085      	sub	sp, #20
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800691e:	69db      	ldr	r3, [r3, #28]
 8006920:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	4a09      	ldr	r2, [pc, #36]	; (800694c <USBH_MSC_BOT_Init+0x3c>)
 8006926:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	4a09      	ldr	r2, [pc, #36]	; (8006950 <USBH_MSC_BOT_Init+0x40>)
 800692c:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2201      	movs	r2, #1
 8006932:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2201      	movs	r2, #1
 800693a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	3714      	adds	r7, #20
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr
 800694c:	43425355 	.word	0x43425355
 8006950:	20304050 	.word	0x20304050

08006954 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b088      	sub	sp, #32
 8006958:	af02      	add	r7, sp, #8
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	460b      	mov	r3, r1
 800695e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8006960:	2301      	movs	r3, #1
 8006962:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8006964:	2301      	movs	r3, #1
 8006966:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8006968:	2301      	movs	r3, #1
 800696a:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800696c:	2300      	movs	r3, #0
 800696e:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006976:	69db      	ldr	r3, [r3, #28]
 8006978:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800697a:	2300      	movs	r3, #0
 800697c:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006984:	3b01      	subs	r3, #1
 8006986:	2b0a      	cmp	r3, #10
 8006988:	f200 819e 	bhi.w	8006cc8 <USBH_MSC_BOT_Process+0x374>
 800698c:	a201      	add	r2, pc, #4	; (adr r2, 8006994 <USBH_MSC_BOT_Process+0x40>)
 800698e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006992:	bf00      	nop
 8006994:	080069c1 	.word	0x080069c1
 8006998:	080069e9 	.word	0x080069e9
 800699c:	08006a53 	.word	0x08006a53
 80069a0:	08006a71 	.word	0x08006a71
 80069a4:	08006af5 	.word	0x08006af5
 80069a8:	08006b17 	.word	0x08006b17
 80069ac:	08006baf 	.word	0x08006baf
 80069b0:	08006bcb 	.word	0x08006bcb
 80069b4:	08006c1d 	.word	0x08006c1d
 80069b8:	08006c4d 	.word	0x08006c4d
 80069bc:	08006caf 	.word	0x08006caf
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	78fa      	ldrb	r2, [r7, #3]
 80069c4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	2202      	movs	r2, #2
 80069cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	795b      	ldrb	r3, [r3, #5]
 80069da:	2201      	movs	r2, #1
 80069dc:	9200      	str	r2, [sp, #0]
 80069de:	221f      	movs	r2, #31
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f001 ff2a 	bl	800883a <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 80069e6:	e17e      	b.n	8006ce6 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	795b      	ldrb	r3, [r3, #5]
 80069ec:	4619      	mov	r1, r3
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f007 f8ee 	bl	800dbd0 <USBH_LL_GetURBState>
 80069f4:	4603      	mov	r3, r0
 80069f6:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80069f8:	7d3b      	ldrb	r3, [r7, #20]
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d118      	bne.n	8006a30 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d00f      	beq.n	8006a26 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8006a0c:	b25b      	sxtb	r3, r3
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	da04      	bge.n	8006a1c <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	2203      	movs	r2, #3
 8006a16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006a1a:	e157      	b.n	8006ccc <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	2205      	movs	r2, #5
 8006a20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006a24:	e152      	b.n	8006ccc <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	2207      	movs	r2, #7
 8006a2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006a2e:	e14d      	b.n	8006ccc <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006a30:	7d3b      	ldrb	r3, [r7, #20]
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	d104      	bne.n	8006a40 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006a3e:	e145      	b.n	8006ccc <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8006a40:	7d3b      	ldrb	r3, [r7, #20]
 8006a42:	2b05      	cmp	r3, #5
 8006a44:	f040 8142 	bne.w	8006ccc <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	220a      	movs	r2, #10
 8006a4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006a50:	e13c      	b.n	8006ccc <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	895a      	ldrh	r2, [r3, #10]
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	791b      	ldrb	r3, [r3, #4]
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f001 ff0f 	bl	8008884 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	2204      	movs	r2, #4
 8006a6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8006a6e:	e13a      	b.n	8006ce6 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	791b      	ldrb	r3, [r3, #4]
 8006a74:	4619      	mov	r1, r3
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f007 f8aa 	bl	800dbd0 <USBH_LL_GetURBState>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8006a80:	7d3b      	ldrb	r3, [r7, #20]
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d12d      	bne.n	8006ae2 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a8a:	693a      	ldr	r2, [r7, #16]
 8006a8c:	8952      	ldrh	r2, [r2, #10]
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d910      	bls.n	8006ab4 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a98:	693a      	ldr	r2, [r7, #16]
 8006a9a:	8952      	ldrh	r2, [r2, #10]
 8006a9c:	441a      	add	r2, r3
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aa8:	693a      	ldr	r2, [r7, #16]
 8006aaa:	8952      	ldrh	r2, [r2, #10]
 8006aac:	1a9a      	subs	r2, r3, r2
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	65da      	str	r2, [r3, #92]	; 0x5c
 8006ab2:	e002      	b.n	8006aba <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d00a      	beq.n	8006ad8 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	895a      	ldrh	r2, [r3, #10]
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	791b      	ldrb	r3, [r3, #4]
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f001 fed7 	bl	8008884 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8006ad6:	e0fb      	b.n	8006cd0 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	2207      	movs	r2, #7
 8006adc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006ae0:	e0f6      	b.n	8006cd0 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 8006ae2:	7d3b      	ldrb	r3, [r7, #20]
 8006ae4:	2b05      	cmp	r3, #5
 8006ae6:	f040 80f3 	bne.w	8006cd0 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	2209      	movs	r2, #9
 8006aee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006af2:	e0ed      	b.n	8006cd0 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	891a      	ldrh	r2, [r3, #8]
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	795b      	ldrb	r3, [r3, #5]
 8006b02:	2001      	movs	r0, #1
 8006b04:	9000      	str	r0, [sp, #0]
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f001 fe97 	bl	800883a <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	2206      	movs	r2, #6
 8006b10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006b14:	e0e7      	b.n	8006ce6 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	795b      	ldrb	r3, [r3, #5]
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f007 f857 	bl	800dbd0 <USBH_LL_GetURBState>
 8006b22:	4603      	mov	r3, r0
 8006b24:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8006b26:	7d3b      	ldrb	r3, [r7, #20]
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d12f      	bne.n	8006b8c <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b30:	693a      	ldr	r2, [r7, #16]
 8006b32:	8912      	ldrh	r2, [r2, #8]
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d910      	bls.n	8006b5a <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b3e:	693a      	ldr	r2, [r7, #16]
 8006b40:	8912      	ldrh	r2, [r2, #8]
 8006b42:	441a      	add	r2, r3
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b4e:	693a      	ldr	r2, [r7, #16]
 8006b50:	8912      	ldrh	r2, [r2, #8]
 8006b52:	1a9a      	subs	r2, r3, r2
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	65da      	str	r2, [r3, #92]	; 0x5c
 8006b58:	e002      	b.n	8006b60 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d00c      	beq.n	8006b82 <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	891a      	ldrh	r2, [r3, #8]
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	795b      	ldrb	r3, [r3, #5]
 8006b76:	2001      	movs	r0, #1
 8006b78:	9000      	str	r0, [sp, #0]
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f001 fe5d 	bl	800883a <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8006b80:	e0a8      	b.n	8006cd4 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	2207      	movs	r2, #7
 8006b86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006b8a:	e0a3      	b.n	8006cd4 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006b8c:	7d3b      	ldrb	r3, [r7, #20]
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	d104      	bne.n	8006b9c <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	2205      	movs	r2, #5
 8006b96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006b9a:	e09b      	b.n	8006cd4 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8006b9c:	7d3b      	ldrb	r3, [r7, #20]
 8006b9e:	2b05      	cmp	r3, #5
 8006ba0:	f040 8098 	bne.w	8006cd4 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	220a      	movs	r2, #10
 8006ba8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006bac:	e092      	b.n	8006cd4 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	791b      	ldrb	r3, [r3, #4]
 8006bb8:	220d      	movs	r2, #13
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f001 fe62 	bl	8008884 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	2208      	movs	r2, #8
 8006bc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006bc8:	e08d      	b.n	8006ce6 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	791b      	ldrb	r3, [r3, #4]
 8006bce:	4619      	mov	r1, r3
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f006 fffd 	bl	800dbd0 <USBH_LL_GetURBState>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8006bda:	7d3b      	ldrb	r3, [r7, #20]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d115      	bne.n	8006c0c <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 f8a9 	bl	8006d48 <USBH_MSC_DecodeCSW>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8006bfa:	7d7b      	ldrb	r3, [r7, #21]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d102      	bne.n	8006c06 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8006c00:	2300      	movs	r3, #0
 8006c02:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8006c04:	e068      	b.n	8006cd8 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 8006c06:	2302      	movs	r3, #2
 8006c08:	75fb      	strb	r3, [r7, #23]
      break;
 8006c0a:	e065      	b.n	8006cd8 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8006c0c:	7d3b      	ldrb	r3, [r7, #20]
 8006c0e:	2b05      	cmp	r3, #5
 8006c10:	d162      	bne.n	8006cd8 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	2209      	movs	r2, #9
 8006c16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006c1a:	e05d      	b.n	8006cd8 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8006c1c:	78fb      	ldrb	r3, [r7, #3]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	4619      	mov	r1, r3
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 f864 	bl	8006cf0 <USBH_MSC_BOT_Abort>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8006c2c:	7dbb      	ldrb	r3, [r7, #22]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d104      	bne.n	8006c3c <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	2207      	movs	r2, #7
 8006c36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8006c3a:	e04f      	b.n	8006cdc <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8006c3c:	7dbb      	ldrb	r3, [r7, #22]
 8006c3e:	2b04      	cmp	r3, #4
 8006c40:	d14c      	bne.n	8006cdc <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	220b      	movs	r2, #11
 8006c46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006c4a:	e047      	b.n	8006cdc <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8006c4c:	78fb      	ldrb	r3, [r7, #3]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	4619      	mov	r1, r3
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 f84c 	bl	8006cf0 <USBH_MSC_BOT_Abort>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8006c5c:	7dbb      	ldrb	r3, [r7, #22]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d11d      	bne.n	8006c9e <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	795b      	ldrb	r3, [r3, #5]
 8006c66:	4619      	mov	r1, r3
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f007 f80b 	bl	800dc84 <USBH_LL_GetToggle>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	7959      	ldrb	r1, [r3, #5]
 8006c76:	7bfb      	ldrb	r3, [r7, #15]
 8006c78:	f1c3 0301 	rsb	r3, r3, #1
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	461a      	mov	r2, r3
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f006 ffcf 	bl	800dc24 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	791b      	ldrb	r3, [r3, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f006 ffc8 	bl	800dc24 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	2209      	movs	r2, #9
 8006c98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8006c9c:	e020      	b.n	8006ce0 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 8006c9e:	7dbb      	ldrb	r3, [r7, #22]
 8006ca0:	2b04      	cmp	r3, #4
 8006ca2:	d11d      	bne.n	8006ce0 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	220b      	movs	r2, #11
 8006ca8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006cac:	e018      	b.n	8006ce0 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f7ff fdf2 	bl	8006898 <USBH_MSC_BOT_REQ_Reset>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8006cb8:	7dfb      	ldrb	r3, [r7, #23]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d112      	bne.n	8006ce4 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8006cc6:	e00d      	b.n	8006ce4 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8006cc8:	bf00      	nop
 8006cca:	e00c      	b.n	8006ce6 <USBH_MSC_BOT_Process+0x392>
      break;
 8006ccc:	bf00      	nop
 8006cce:	e00a      	b.n	8006ce6 <USBH_MSC_BOT_Process+0x392>
      break;
 8006cd0:	bf00      	nop
 8006cd2:	e008      	b.n	8006ce6 <USBH_MSC_BOT_Process+0x392>
      break;
 8006cd4:	bf00      	nop
 8006cd6:	e006      	b.n	8006ce6 <USBH_MSC_BOT_Process+0x392>
      break;
 8006cd8:	bf00      	nop
 8006cda:	e004      	b.n	8006ce6 <USBH_MSC_BOT_Process+0x392>
      break;
 8006cdc:	bf00      	nop
 8006cde:	e002      	b.n	8006ce6 <USBH_MSC_BOT_Process+0x392>
      break;
 8006ce0:	bf00      	nop
 8006ce2:	e000      	b.n	8006ce6 <USBH_MSC_BOT_Process+0x392>
      break;
 8006ce4:	bf00      	nop
  }
  return status;
 8006ce6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3718      	adds	r7, #24
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	70fb      	strb	r3, [r7, #3]
 8006cfc:	4613      	mov	r3, r2
 8006cfe:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8006d00:	2302      	movs	r3, #2
 8006d02:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d0a:	69db      	ldr	r3, [r3, #28]
 8006d0c:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8006d0e:	78bb      	ldrb	r3, [r7, #2]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d002      	beq.n	8006d1a <USBH_MSC_BOT_Abort+0x2a>
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d009      	beq.n	8006d2c <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8006d18:	e011      	b.n	8006d3e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	79db      	ldrb	r3, [r3, #7]
 8006d1e:	4619      	mov	r1, r3
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f001 f99c 	bl	800805e <USBH_ClrFeature>
 8006d26:	4603      	mov	r3, r0
 8006d28:	73fb      	strb	r3, [r7, #15]
      break;
 8006d2a:	e008      	b.n	8006d3e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	799b      	ldrb	r3, [r3, #6]
 8006d30:	4619      	mov	r1, r3
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f001 f993 	bl	800805e <USBH_ClrFeature>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8006d3c:	bf00      	nop
  }
  return status;
 8006d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3710      	adds	r7, #16
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d56:	69db      	ldr	r3, [r3, #28]
 8006d58:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	791b      	ldrb	r3, [r3, #4]
 8006d62:	4619      	mov	r1, r3
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f006 fea1 	bl	800daac <USBH_LL_GetLastXferSize>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b0d      	cmp	r3, #13
 8006d6e:	d002      	beq.n	8006d76 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8006d70:	2302      	movs	r3, #2
 8006d72:	73fb      	strb	r3, [r7, #15]
 8006d74:	e024      	b.n	8006dc0 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d7a:	4a14      	ldr	r2, [pc, #80]	; (8006dcc <USBH_MSC_DecodeCSW+0x84>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d11d      	bne.n	8006dbc <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d119      	bne.n	8006dc0 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d102      	bne.n	8006d9c <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8006d96:	2300      	movs	r3, #0
 8006d98:	73fb      	strb	r3, [r7, #15]
 8006d9a:	e011      	b.n	8006dc0 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d102      	bne.n	8006dac <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8006da6:	2301      	movs	r3, #1
 8006da8:	73fb      	strb	r3, [r7, #15]
 8006daa:	e009      	b.n	8006dc0 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	d104      	bne.n	8006dc0 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8006db6:	2302      	movs	r3, #2
 8006db8:	73fb      	strb	r3, [r7, #15]
 8006dba:	e001      	b.n	8006dc0 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8006dbc:	2302      	movs	r3, #2
 8006dbe:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8006dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3710      	adds	r7, #16
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	53425355 	.word	0x53425355

08006dd0 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	460b      	mov	r3, r1
 8006dda:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006ddc:	2302      	movs	r3, #2
 8006dde:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006de6:	69db      	ldr	r3, [r3, #28]
 8006de8:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d002      	beq.n	8006dfa <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8006df4:	2b02      	cmp	r3, #2
 8006df6:	d021      	beq.n	8006e3c <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8006df8:	e028      	b.n	8006e4c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	220a      	movs	r2, #10
 8006e0c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	3363      	adds	r3, #99	; 0x63
 8006e14:	2210      	movs	r2, #16
 8006e16:	2100      	movs	r1, #0
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f006 ffff 	bl	800de1c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	2202      	movs	r2, #2
 8006e32:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8006e36:	2301      	movs	r3, #1
 8006e38:	73fb      	strb	r3, [r7, #15]
      break;
 8006e3a:	e007      	b.n	8006e4c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006e3c:	78fb      	ldrb	r3, [r7, #3]
 8006e3e:	4619      	mov	r1, r3
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f7ff fd87 	bl	8006954 <USBH_MSC_BOT_Process>
 8006e46:	4603      	mov	r3, r0
 8006e48:	73fb      	strb	r3, [r7, #15]
      break;
 8006e4a:	bf00      	nop
  }

  return error;
 8006e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3710      	adds	r7, #16
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}

08006e56 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8006e56:	b580      	push	{r7, lr}
 8006e58:	b086      	sub	sp, #24
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	60f8      	str	r0, [r7, #12]
 8006e5e:	460b      	mov	r3, r1
 8006e60:	607a      	str	r2, [r7, #4]
 8006e62:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8006e64:	2301      	movs	r3, #1
 8006e66:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e6e:	69db      	ldr	r3, [r3, #28]
 8006e70:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d002      	beq.n	8006e82 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8006e7c:	2b02      	cmp	r3, #2
 8006e7e:	d027      	beq.n	8006ed0 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8006e80:	e05f      	b.n	8006f42 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	2208      	movs	r2, #8
 8006e86:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	2280      	movs	r2, #128	; 0x80
 8006e8c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	220a      	movs	r2, #10
 8006e94:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	3363      	adds	r3, #99	; 0x63
 8006e9c:	2210      	movs	r2, #16
 8006e9e:	2100      	movs	r1, #0
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f006 ffbb 	bl	800de1c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	2225      	movs	r2, #37	; 0x25
 8006eaa:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	2202      	movs	r2, #2
 8006eba:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	f103 0210 	add.w	r2, r3, #16
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	75fb      	strb	r3, [r7, #23]
      break;
 8006ece:	e038      	b.n	8006f42 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006ed0:	7afb      	ldrb	r3, [r7, #11]
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f7ff fd3d 	bl	8006954 <USBH_MSC_BOT_Process>
 8006eda:	4603      	mov	r3, r0
 8006edc:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8006ede:	7dfb      	ldrb	r3, [r7, #23]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d12d      	bne.n	8006f40 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006eea:	3303      	adds	r3, #3
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	461a      	mov	r2, r3
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ef6:	3302      	adds	r3, #2
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	021b      	lsls	r3, r3, #8
 8006efc:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f04:	3301      	adds	r3, #1
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8006f0a:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	061b      	lsls	r3, r3, #24
 8006f16:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f22:	3307      	adds	r3, #7
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	b29a      	uxth	r2, r3
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f2e:	3306      	adds	r3, #6
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	021b      	lsls	r3, r3, #8
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	b29a      	uxth	r2, r3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	809a      	strh	r2, [r3, #4]
      break;
 8006f40:	bf00      	nop
  }

  return error;
 8006f42:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3718      	adds	r7, #24
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b086      	sub	sp, #24
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	60f8      	str	r0, [r7, #12]
 8006f54:	460b      	mov	r3, r1
 8006f56:	607a      	str	r2, [r7, #4]
 8006f58:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8006f5a:	2302      	movs	r3, #2
 8006f5c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f64:	69db      	ldr	r3, [r3, #28]
 8006f66:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d002      	beq.n	8006f78 <USBH_MSC_SCSI_Inquiry+0x2c>
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	d03d      	beq.n	8006ff2 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8006f76:	e089      	b.n	800708c <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	2224      	movs	r2, #36	; 0x24
 8006f7c:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	2280      	movs	r2, #128	; 0x80
 8006f82:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	220a      	movs	r2, #10
 8006f8a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	3363      	adds	r3, #99	; 0x63
 8006f92:	220a      	movs	r2, #10
 8006f94:	2100      	movs	r1, #0
 8006f96:	4618      	mov	r0, r3
 8006f98:	f006 ff40 	bl	800de1c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	2212      	movs	r2, #18
 8006fa0:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8006fa4:	7afb      	ldrb	r3, [r7, #11]
 8006fa6:	015b      	lsls	r3, r3, #5
 8006fa8:	b2da      	uxtb	r2, r3
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	2224      	movs	r2, #36	; 0x24
 8006fc4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	2202      	movs	r2, #2
 8006fdc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	f103 0210 	add.w	r2, r3, #16
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006fec:	2301      	movs	r3, #1
 8006fee:	75fb      	strb	r3, [r7, #23]
      break;
 8006ff0:	e04c      	b.n	800708c <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006ff2:	7afb      	ldrb	r3, [r7, #11]
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	68f8      	ldr	r0, [r7, #12]
 8006ff8:	f7ff fcac 	bl	8006954 <USBH_MSC_BOT_Process>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8007000:	7dfb      	ldrb	r3, [r7, #23]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d141      	bne.n	800708a <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8007006:	2222      	movs	r2, #34	; 0x22
 8007008:	2100      	movs	r1, #0
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f006 ff06 	bl	800de1c <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	f003 031f 	and.w	r3, r3, #31
 800701c:	b2da      	uxtb	r2, r3
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	095b      	lsrs	r3, r3, #5
 800702c:	b2da      	uxtb	r2, r3
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007038:	3301      	adds	r3, #1
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	b25b      	sxtb	r3, r3
 800703e:	2b00      	cmp	r3, #0
 8007040:	da03      	bge.n	800704a <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2201      	movs	r2, #1
 8007046:	709a      	strb	r2, [r3, #2]
 8007048:	e002      	b.n	8007050 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	1cd8      	adds	r0, r3, #3
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800705a:	3308      	adds	r3, #8
 800705c:	2208      	movs	r2, #8
 800705e:	4619      	mov	r1, r3
 8007060:	f006 fece 	bl	800de00 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f103 000c 	add.w	r0, r3, #12
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007070:	3310      	adds	r3, #16
 8007072:	2210      	movs	r2, #16
 8007074:	4619      	mov	r1, r3
 8007076:	f006 fec3 	bl	800de00 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	331d      	adds	r3, #29
 800707e:	693a      	ldr	r2, [r7, #16]
 8007080:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8007084:	3220      	adds	r2, #32
 8007086:	6812      	ldr	r2, [r2, #0]
 8007088:	601a      	str	r2, [r3, #0]
      break;
 800708a:	bf00      	nop
  }

  return error;
 800708c:	7dfb      	ldrb	r3, [r7, #23]
}
 800708e:	4618      	mov	r0, r3
 8007090:	3718      	adds	r7, #24
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}

08007096 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8007096:	b580      	push	{r7, lr}
 8007098:	b086      	sub	sp, #24
 800709a:	af00      	add	r7, sp, #0
 800709c:	60f8      	str	r0, [r7, #12]
 800709e:	460b      	mov	r3, r1
 80070a0:	607a      	str	r2, [r7, #4]
 80070a2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80070a4:	2302      	movs	r3, #2
 80070a6:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070ae:	69db      	ldr	r3, [r3, #28]
 80070b0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d002      	beq.n	80070c2 <USBH_MSC_SCSI_RequestSense+0x2c>
 80070bc:	2b02      	cmp	r3, #2
 80070be:	d03d      	beq.n	800713c <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 80070c0:	e05d      	b.n	800717e <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	220e      	movs	r2, #14
 80070c6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	2280      	movs	r2, #128	; 0x80
 80070cc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	220a      	movs	r2, #10
 80070d4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	3363      	adds	r3, #99	; 0x63
 80070dc:	2210      	movs	r2, #16
 80070de:	2100      	movs	r1, #0
 80070e0:	4618      	mov	r0, r3
 80070e2:	f006 fe9b 	bl	800de1c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	2203      	movs	r2, #3
 80070ea:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80070ee:	7afb      	ldrb	r3, [r7, #11]
 80070f0:	015b      	lsls	r3, r3, #5
 80070f2:	b2da      	uxtb	r2, r3
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	2200      	movs	r2, #0
 8007106:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	220e      	movs	r2, #14
 800710e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	2200      	movs	r2, #0
 8007116:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	2201      	movs	r2, #1
 800711e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	2202      	movs	r2, #2
 8007126:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	f103 0210 	add.w	r2, r3, #16
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8007136:	2301      	movs	r3, #1
 8007138:	75fb      	strb	r3, [r7, #23]
      break;
 800713a:	e020      	b.n	800717e <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800713c:	7afb      	ldrb	r3, [r7, #11]
 800713e:	4619      	mov	r1, r3
 8007140:	68f8      	ldr	r0, [r7, #12]
 8007142:	f7ff fc07 	bl	8006954 <USBH_MSC_BOT_Process>
 8007146:	4603      	mov	r3, r0
 8007148:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800714a:	7dfb      	ldrb	r3, [r7, #23]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d115      	bne.n	800717c <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007156:	3302      	adds	r3, #2
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	f003 030f 	and.w	r3, r3, #15
 800715e:	b2da      	uxtb	r2, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800716a:	7b1a      	ldrb	r2, [r3, #12]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007176:	7b5a      	ldrb	r2, [r3, #13]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	709a      	strb	r2, [r3, #2]
      break;
 800717c:	bf00      	nop
  }

  return error;
 800717e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007180:	4618      	mov	r0, r3
 8007182:	3718      	adds	r7, #24
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b086      	sub	sp, #24
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	607a      	str	r2, [r7, #4]
 8007192:	603b      	str	r3, [r7, #0]
 8007194:	460b      	mov	r3, r1
 8007196:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8007198:	2302      	movs	r3, #2
 800719a:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071a2:	69db      	ldr	r3, [r3, #28]
 80071a4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d002      	beq.n	80071b6 <USBH_MSC_SCSI_Write+0x2e>
 80071b0:	2b02      	cmp	r3, #2
 80071b2:	d047      	beq.n	8007244 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80071b4:	e04e      	b.n	8007254 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80071bc:	461a      	mov	r2, r3
 80071be:	6a3b      	ldr	r3, [r7, #32]
 80071c0:	fb03 f202 	mul.w	r2, r3, r2
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	2200      	movs	r2, #0
 80071cc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	220a      	movs	r2, #10
 80071d4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	3363      	adds	r3, #99	; 0x63
 80071dc:	2210      	movs	r2, #16
 80071de:	2100      	movs	r1, #0
 80071e0:	4618      	mov	r0, r3
 80071e2:	f006 fe1b 	bl	800de1c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	222a      	movs	r2, #42	; 0x2a
 80071ea:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 80071ee:	79fa      	ldrb	r2, [r7, #7]
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 80071f6:	79ba      	ldrb	r2, [r7, #6]
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 80071fe:	797a      	ldrb	r2, [r7, #5]
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8007206:	1d3b      	adds	r3, r7, #4
 8007208:	781a      	ldrb	r2, [r3, #0]
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8007210:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800721a:	f107 0320 	add.w	r3, r7, #32
 800721e:	781a      	ldrb	r2, [r3, #0]
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	2201      	movs	r2, #1
 800722a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	2202      	movs	r2, #2
 8007232:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	683a      	ldr	r2, [r7, #0]
 800723a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800723e:	2301      	movs	r3, #1
 8007240:	75fb      	strb	r3, [r7, #23]
      break;
 8007242:	e007      	b.n	8007254 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007244:	7afb      	ldrb	r3, [r7, #11]
 8007246:	4619      	mov	r1, r3
 8007248:	68f8      	ldr	r0, [r7, #12]
 800724a:	f7ff fb83 	bl	8006954 <USBH_MSC_BOT_Process>
 800724e:	4603      	mov	r3, r0
 8007250:	75fb      	strb	r3, [r7, #23]
      break;
 8007252:	bf00      	nop
  }

  return error;
 8007254:	7dfb      	ldrb	r3, [r7, #23]
}
 8007256:	4618      	mov	r0, r3
 8007258:	3718      	adds	r7, #24
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800725e:	b580      	push	{r7, lr}
 8007260:	b086      	sub	sp, #24
 8007262:	af00      	add	r7, sp, #0
 8007264:	60f8      	str	r0, [r7, #12]
 8007266:	607a      	str	r2, [r7, #4]
 8007268:	603b      	str	r3, [r7, #0]
 800726a:	460b      	mov	r3, r1
 800726c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800726e:	2302      	movs	r3, #2
 8007270:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007278:	69db      	ldr	r3, [r3, #28]
 800727a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007282:	2b01      	cmp	r3, #1
 8007284:	d002      	beq.n	800728c <USBH_MSC_SCSI_Read+0x2e>
 8007286:	2b02      	cmp	r3, #2
 8007288:	d047      	beq.n	800731a <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800728a:	e04e      	b.n	800732a <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8007292:	461a      	mov	r2, r3
 8007294:	6a3b      	ldr	r3, [r7, #32]
 8007296:	fb03 f202 	mul.w	r2, r3, r2
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	2280      	movs	r2, #128	; 0x80
 80072a2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	220a      	movs	r2, #10
 80072aa:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	3363      	adds	r3, #99	; 0x63
 80072b2:	2210      	movs	r2, #16
 80072b4:	2100      	movs	r1, #0
 80072b6:	4618      	mov	r0, r3
 80072b8:	f006 fdb0 	bl	800de1c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	2228      	movs	r2, #40	; 0x28
 80072c0:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 80072c4:	79fa      	ldrb	r2, [r7, #7]
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 80072cc:	79ba      	ldrb	r2, [r7, #6]
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 80072d4:	797a      	ldrb	r2, [r7, #5]
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 80072dc:	1d3b      	adds	r3, r7, #4
 80072de:	781a      	ldrb	r2, [r3, #0]
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 80072e6:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 80072f0:	f107 0320 	add.w	r3, r7, #32
 80072f4:	781a      	ldrb	r2, [r3, #0]
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	2202      	movs	r2, #2
 8007308:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	683a      	ldr	r2, [r7, #0]
 8007310:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8007314:	2301      	movs	r3, #1
 8007316:	75fb      	strb	r3, [r7, #23]
      break;
 8007318:	e007      	b.n	800732a <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800731a:	7afb      	ldrb	r3, [r7, #11]
 800731c:	4619      	mov	r1, r3
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	f7ff fb18 	bl	8006954 <USBH_MSC_BOT_Process>
 8007324:	4603      	mov	r3, r0
 8007326:	75fb      	strb	r3, [r7, #23]
      break;
 8007328:	bf00      	nop
  }

  return error;
 800732a:	7dfb      	ldrb	r3, [r7, #23]
}
 800732c:	4618      	mov	r0, r3
 800732e:	3718      	adds	r7, #24
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	4613      	mov	r3, r2
 8007340:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d101      	bne.n	800734c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007348:	2302      	movs	r3, #2
 800734a:	e029      	b.n	80073a0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	79fa      	ldrb	r2, [r7, #7]
 8007350:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2200      	movs	r2, #0
 8007358:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2200      	movs	r2, #0
 8007360:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007364:	68f8      	ldr	r0, [r7, #12]
 8007366:	f000 f81f 	bl	80073a8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2200      	movs	r2, #0
 800736e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2200      	movs	r2, #0
 8007376:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2200      	movs	r2, #0
 800737e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2200      	movs	r2, #0
 8007386:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d003      	beq.n	8007398 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	68ba      	ldr	r2, [r7, #8]
 8007394:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007398:	68f8      	ldr	r0, [r7, #12]
 800739a:	f006 fad3 	bl	800d944 <USBH_LL_Init>

  return USBH_OK;
 800739e:	2300      	movs	r3, #0
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3710      	adds	r7, #16
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b085      	sub	sp, #20
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80073b0:	2300      	movs	r3, #0
 80073b2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80073b4:	2300      	movs	r3, #0
 80073b6:	60fb      	str	r3, [r7, #12]
 80073b8:	e009      	b.n	80073ce <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	33e0      	adds	r3, #224	; 0xe0
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	4413      	add	r3, r2
 80073c4:	2200      	movs	r2, #0
 80073c6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	3301      	adds	r3, #1
 80073cc:	60fb      	str	r3, [r7, #12]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2b0e      	cmp	r3, #14
 80073d2:	d9f2      	bls.n	80073ba <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80073d4:	2300      	movs	r3, #0
 80073d6:	60fb      	str	r3, [r7, #12]
 80073d8:	e009      	b.n	80073ee <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	4413      	add	r3, r2
 80073e0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80073e4:	2200      	movs	r2, #0
 80073e6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	3301      	adds	r3, #1
 80073ec:	60fb      	str	r3, [r7, #12]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073f4:	d3f1      	bcc.n	80073da <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2201      	movs	r2, #1
 8007406:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2240      	movs	r2, #64	; 0x40
 800741a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2200      	movs	r2, #0
 8007426:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2201      	movs	r2, #1
 800742e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007442:	2300      	movs	r3, #0
}
 8007444:	4618      	mov	r0, r3
 8007446:	3714      	adds	r7, #20
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007450:	b480      	push	{r7}
 8007452:	b085      	sub	sp, #20
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800745a:	2300      	movs	r3, #0
 800745c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d016      	beq.n	8007492 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800746a:	2b00      	cmp	r3, #0
 800746c:	d10e      	bne.n	800748c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007474:	1c59      	adds	r1, r3, #1
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	33de      	adds	r3, #222	; 0xde
 8007480:	6839      	ldr	r1, [r7, #0]
 8007482:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007486:	2300      	movs	r3, #0
 8007488:	73fb      	strb	r3, [r7, #15]
 800748a:	e004      	b.n	8007496 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800748c:	2302      	movs	r3, #2
 800748e:	73fb      	strb	r3, [r7, #15]
 8007490:	e001      	b.n	8007496 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007492:	2302      	movs	r3, #2
 8007494:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007496:	7bfb      	ldrb	r3, [r7, #15]
}
 8007498:	4618      	mov	r0, r3
 800749a:	3714      	adds	r7, #20
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b085      	sub	sp, #20
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	460b      	mov	r3, r1
 80074ae:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80074b0:	2300      	movs	r3, #0
 80074b2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80074ba:	78fa      	ldrb	r2, [r7, #3]
 80074bc:	429a      	cmp	r2, r3
 80074be:	d204      	bcs.n	80074ca <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	78fa      	ldrb	r2, [r7, #3]
 80074c4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80074c8:	e001      	b.n	80074ce <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80074ca:	2302      	movs	r3, #2
 80074cc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80074ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3714      	adds	r7, #20
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80074dc:	b480      	push	{r7}
 80074de:	b087      	sub	sp, #28
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	4608      	mov	r0, r1
 80074e6:	4611      	mov	r1, r2
 80074e8:	461a      	mov	r2, r3
 80074ea:	4603      	mov	r3, r0
 80074ec:	70fb      	strb	r3, [r7, #3]
 80074ee:	460b      	mov	r3, r1
 80074f0:	70bb      	strb	r3, [r7, #2]
 80074f2:	4613      	mov	r3, r2
 80074f4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80074f6:	2300      	movs	r3, #0
 80074f8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80074fa:	2300      	movs	r3, #0
 80074fc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007504:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007506:	e025      	b.n	8007554 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007508:	7dfb      	ldrb	r3, [r7, #23]
 800750a:	221a      	movs	r2, #26
 800750c:	fb02 f303 	mul.w	r3, r2, r3
 8007510:	3308      	adds	r3, #8
 8007512:	68fa      	ldr	r2, [r7, #12]
 8007514:	4413      	add	r3, r2
 8007516:	3302      	adds	r3, #2
 8007518:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	795b      	ldrb	r3, [r3, #5]
 800751e:	78fa      	ldrb	r2, [r7, #3]
 8007520:	429a      	cmp	r2, r3
 8007522:	d002      	beq.n	800752a <USBH_FindInterface+0x4e>
 8007524:	78fb      	ldrb	r3, [r7, #3]
 8007526:	2bff      	cmp	r3, #255	; 0xff
 8007528:	d111      	bne.n	800754e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800752e:	78ba      	ldrb	r2, [r7, #2]
 8007530:	429a      	cmp	r2, r3
 8007532:	d002      	beq.n	800753a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007534:	78bb      	ldrb	r3, [r7, #2]
 8007536:	2bff      	cmp	r3, #255	; 0xff
 8007538:	d109      	bne.n	800754e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800753e:	787a      	ldrb	r2, [r7, #1]
 8007540:	429a      	cmp	r2, r3
 8007542:	d002      	beq.n	800754a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007544:	787b      	ldrb	r3, [r7, #1]
 8007546:	2bff      	cmp	r3, #255	; 0xff
 8007548:	d101      	bne.n	800754e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800754a:	7dfb      	ldrb	r3, [r7, #23]
 800754c:	e006      	b.n	800755c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800754e:	7dfb      	ldrb	r3, [r7, #23]
 8007550:	3301      	adds	r3, #1
 8007552:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007554:	7dfb      	ldrb	r3, [r7, #23]
 8007556:	2b01      	cmp	r3, #1
 8007558:	d9d6      	bls.n	8007508 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800755a:	23ff      	movs	r3, #255	; 0xff
}
 800755c:	4618      	mov	r0, r3
 800755e:	371c      	adds	r7, #28
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f006 fa23 	bl	800d9bc <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007576:	2101      	movs	r1, #1
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f006 fb3c 	bl	800dbf6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800757e:	2300      	movs	r3, #0
}
 8007580:	4618      	mov	r0, r3
 8007582:	3708      	adds	r7, #8
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b088      	sub	sp, #32
 800758c:	af04      	add	r7, sp, #16
 800758e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007590:	2302      	movs	r3, #2
 8007592:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007594:	2300      	movs	r3, #0
 8007596:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d102      	bne.n	80075aa <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2203      	movs	r2, #3
 80075a8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	2b0b      	cmp	r3, #11
 80075b2:	f200 81b3 	bhi.w	800791c <USBH_Process+0x394>
 80075b6:	a201      	add	r2, pc, #4	; (adr r2, 80075bc <USBH_Process+0x34>)
 80075b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075bc:	080075ed 	.word	0x080075ed
 80075c0:	0800761f 	.word	0x0800761f
 80075c4:	08007687 	.word	0x08007687
 80075c8:	080078b7 	.word	0x080078b7
 80075cc:	0800791d 	.word	0x0800791d
 80075d0:	0800772b 	.word	0x0800772b
 80075d4:	0800785d 	.word	0x0800785d
 80075d8:	08007761 	.word	0x08007761
 80075dc:	08007781 	.word	0x08007781
 80075e0:	080077a1 	.word	0x080077a1
 80075e4:	080077cf 	.word	0x080077cf
 80075e8:	0800789f 	.word	0x0800789f
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	f000 8193 	beq.w	8007920 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2201      	movs	r2, #1
 80075fe:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007600:	20c8      	movs	r0, #200	; 0xc8
 8007602:	f006 fb6f 	bl	800dce4 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f006 fa35 	bl	800da76 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800761c:	e180      	b.n	8007920 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007624:	2b01      	cmp	r3, #1
 8007626:	d107      	bne.n	8007638 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2202      	movs	r2, #2
 8007634:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007636:	e182      	b.n	800793e <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800763e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007642:	d914      	bls.n	800766e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800764a:	3301      	adds	r3, #1
 800764c:	b2da      	uxtb	r2, r3
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800765a:	2b03      	cmp	r3, #3
 800765c:	d903      	bls.n	8007666 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	220d      	movs	r2, #13
 8007662:	701a      	strb	r2, [r3, #0]
      break;
 8007664:	e16b      	b.n	800793e <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	701a      	strb	r2, [r3, #0]
      break;
 800766c:	e167      	b.n	800793e <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007674:	f103 020a 	add.w	r2, r3, #10
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800767e:	200a      	movs	r0, #10
 8007680:	f006 fb30 	bl	800dce4 <USBH_Delay>
      break;
 8007684:	e15b      	b.n	800793e <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800768c:	2b00      	cmp	r3, #0
 800768e:	d005      	beq.n	800769c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007696:	2104      	movs	r1, #4
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800769c:	2064      	movs	r0, #100	; 0x64
 800769e:	f006 fb21 	bl	800dce4 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f006 f9c0 	bl	800da28 <USBH_LL_GetSpeed>
 80076a8:	4603      	mov	r3, r0
 80076aa:	461a      	mov	r2, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2205      	movs	r2, #5
 80076b6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80076b8:	2100      	movs	r1, #0
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f001 f92f 	bl	800891e <USBH_AllocPipe>
 80076c0:	4603      	mov	r3, r0
 80076c2:	461a      	mov	r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80076c8:	2180      	movs	r1, #128	; 0x80
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f001 f927 	bl	800891e <USBH_AllocPipe>
 80076d0:	4603      	mov	r3, r0
 80076d2:	461a      	mov	r2, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	7919      	ldrb	r1, [r3, #4]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80076ec:	b292      	uxth	r2, r2
 80076ee:	9202      	str	r2, [sp, #8]
 80076f0:	2200      	movs	r2, #0
 80076f2:	9201      	str	r2, [sp, #4]
 80076f4:	9300      	str	r3, [sp, #0]
 80076f6:	4603      	mov	r3, r0
 80076f8:	2280      	movs	r2, #128	; 0x80
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f001 f8e0 	bl	80088c0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	7959      	ldrb	r1, [r3, #5]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007714:	b292      	uxth	r2, r2
 8007716:	9202      	str	r2, [sp, #8]
 8007718:	2200      	movs	r2, #0
 800771a:	9201      	str	r2, [sp, #4]
 800771c:	9300      	str	r3, [sp, #0]
 800771e:	4603      	mov	r3, r0
 8007720:	2200      	movs	r2, #0
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f001 f8cc 	bl	80088c0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007728:	e109      	b.n	800793e <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 f90c 	bl	8007948 <USBH_HandleEnum>
 8007730:	4603      	mov	r3, r0
 8007732:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007734:	7bbb      	ldrb	r3, [r7, #14]
 8007736:	b2db      	uxtb	r3, r3
 8007738:	2b00      	cmp	r3, #0
 800773a:	f040 80f3 	bne.w	8007924 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2200      	movs	r2, #0
 8007742:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800774c:	2b01      	cmp	r3, #1
 800774e:	d103      	bne.n	8007758 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2208      	movs	r2, #8
 8007754:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007756:	e0e5      	b.n	8007924 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2207      	movs	r2, #7
 800775c:	701a      	strb	r2, [r3, #0]
      break;
 800775e:	e0e1      	b.n	8007924 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007766:	2b00      	cmp	r3, #0
 8007768:	f000 80de 	beq.w	8007928 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007772:	2101      	movs	r1, #1
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2208      	movs	r2, #8
 800777c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800777e:	e0d3      	b.n	8007928 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007786:	b29b      	uxth	r3, r3
 8007788:	4619      	mov	r1, r3
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 fc20 	bl	8007fd0 <USBH_SetCfg>
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	f040 80ca 	bne.w	800792c <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2209      	movs	r2, #9
 800779c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800779e:	e0c5      	b.n	800792c <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80077a6:	f003 0320 	and.w	r3, r3, #32
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d00b      	beq.n	80077c6 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80077ae:	2101      	movs	r1, #1
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 fc30 	bl	8008016 <USBH_SetFeature>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	f040 80b9 	bne.w	8007930 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	220a      	movs	r2, #10
 80077c2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80077c4:	e0b4      	b.n	8007930 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	220a      	movs	r2, #10
 80077ca:	701a      	strb	r2, [r3, #0]
      break;
 80077cc:	e0b0      	b.n	8007930 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	f000 80ad 	beq.w	8007934 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80077e2:	2300      	movs	r3, #0
 80077e4:	73fb      	strb	r3, [r7, #15]
 80077e6:	e016      	b.n	8007816 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80077e8:	7bfa      	ldrb	r2, [r7, #15]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	32de      	adds	r2, #222	; 0xde
 80077ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077f2:	791a      	ldrb	r2, [r3, #4]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d108      	bne.n	8007810 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 80077fe:	7bfa      	ldrb	r2, [r7, #15]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	32de      	adds	r2, #222	; 0xde
 8007804:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800780e:	e005      	b.n	800781c <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007810:	7bfb      	ldrb	r3, [r7, #15]
 8007812:	3301      	adds	r3, #1
 8007814:	73fb      	strb	r3, [r7, #15]
 8007816:	7bfb      	ldrb	r3, [r7, #15]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d0e5      	beq.n	80077e8 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007822:	2b00      	cmp	r3, #0
 8007824:	d016      	beq.n	8007854 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	4798      	blx	r3
 8007832:	4603      	mov	r3, r0
 8007834:	2b00      	cmp	r3, #0
 8007836:	d109      	bne.n	800784c <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2206      	movs	r2, #6
 800783c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007844:	2103      	movs	r1, #3
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800784a:	e073      	b.n	8007934 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	220d      	movs	r2, #13
 8007850:	701a      	strb	r2, [r3, #0]
      break;
 8007852:	e06f      	b.n	8007934 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	220d      	movs	r2, #13
 8007858:	701a      	strb	r2, [r3, #0]
      break;
 800785a:	e06b      	b.n	8007934 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007862:	2b00      	cmp	r3, #0
 8007864:	d017      	beq.n	8007896 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	4798      	blx	r3
 8007872:	4603      	mov	r3, r0
 8007874:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007876:	7bbb      	ldrb	r3, [r7, #14]
 8007878:	b2db      	uxtb	r3, r3
 800787a:	2b00      	cmp	r3, #0
 800787c:	d103      	bne.n	8007886 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	220b      	movs	r2, #11
 8007882:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007884:	e058      	b.n	8007938 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8007886:	7bbb      	ldrb	r3, [r7, #14]
 8007888:	b2db      	uxtb	r3, r3
 800788a:	2b02      	cmp	r3, #2
 800788c:	d154      	bne.n	8007938 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	220d      	movs	r2, #13
 8007892:	701a      	strb	r2, [r3, #0]
      break;
 8007894:	e050      	b.n	8007938 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	220d      	movs	r2, #13
 800789a:	701a      	strb	r2, [r3, #0]
      break;
 800789c:	e04c      	b.n	8007938 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d049      	beq.n	800793c <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078ae:	695b      	ldr	r3, [r3, #20]
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	4798      	blx	r3
      }
      break;
 80078b4:	e042      	b.n	800793c <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f7ff fd72 	bl	80073a8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d009      	beq.n	80078e2 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d005      	beq.n	80078f8 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80078f2:	2105      	movs	r1, #5
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	2b01      	cmp	r3, #1
 8007902:	d107      	bne.n	8007914 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f7ff fe2b 	bl	8007568 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007912:	e014      	b.n	800793e <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f006 f851 	bl	800d9bc <USBH_LL_Start>
      break;
 800791a:	e010      	b.n	800793e <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800791c:	bf00      	nop
 800791e:	e00e      	b.n	800793e <USBH_Process+0x3b6>
      break;
 8007920:	bf00      	nop
 8007922:	e00c      	b.n	800793e <USBH_Process+0x3b6>
      break;
 8007924:	bf00      	nop
 8007926:	e00a      	b.n	800793e <USBH_Process+0x3b6>
    break;
 8007928:	bf00      	nop
 800792a:	e008      	b.n	800793e <USBH_Process+0x3b6>
      break;
 800792c:	bf00      	nop
 800792e:	e006      	b.n	800793e <USBH_Process+0x3b6>
      break;
 8007930:	bf00      	nop
 8007932:	e004      	b.n	800793e <USBH_Process+0x3b6>
      break;
 8007934:	bf00      	nop
 8007936:	e002      	b.n	800793e <USBH_Process+0x3b6>
      break;
 8007938:	bf00      	nop
 800793a:	e000      	b.n	800793e <USBH_Process+0x3b6>
      break;
 800793c:	bf00      	nop
  }
  return USBH_OK;
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	3710      	adds	r7, #16
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b088      	sub	sp, #32
 800794c:	af04      	add	r7, sp, #16
 800794e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007950:	2301      	movs	r3, #1
 8007952:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007954:	2301      	movs	r3, #1
 8007956:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	785b      	ldrb	r3, [r3, #1]
 800795c:	2b07      	cmp	r3, #7
 800795e:	f200 81c1 	bhi.w	8007ce4 <USBH_HandleEnum+0x39c>
 8007962:	a201      	add	r2, pc, #4	; (adr r2, 8007968 <USBH_HandleEnum+0x20>)
 8007964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007968:	08007989 	.word	0x08007989
 800796c:	08007a47 	.word	0x08007a47
 8007970:	08007ab1 	.word	0x08007ab1
 8007974:	08007b3f 	.word	0x08007b3f
 8007978:	08007ba9 	.word	0x08007ba9
 800797c:	08007c19 	.word	0x08007c19
 8007980:	08007c5f 	.word	0x08007c5f
 8007984:	08007ca5 	.word	0x08007ca5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007988:	2108      	movs	r1, #8
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 fa50 	bl	8007e30 <USBH_Get_DevDesc>
 8007990:	4603      	mov	r3, r0
 8007992:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007994:	7bbb      	ldrb	r3, [r7, #14]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d130      	bne.n	80079fc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	7919      	ldrb	r1, [r3, #4]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80079be:	b292      	uxth	r2, r2
 80079c0:	9202      	str	r2, [sp, #8]
 80079c2:	2200      	movs	r2, #0
 80079c4:	9201      	str	r2, [sp, #4]
 80079c6:	9300      	str	r3, [sp, #0]
 80079c8:	4603      	mov	r3, r0
 80079ca:	2280      	movs	r2, #128	; 0x80
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f000 ff77 	bl	80088c0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	7959      	ldrb	r1, [r3, #5]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80079e6:	b292      	uxth	r2, r2
 80079e8:	9202      	str	r2, [sp, #8]
 80079ea:	2200      	movs	r2, #0
 80079ec:	9201      	str	r2, [sp, #4]
 80079ee:	9300      	str	r3, [sp, #0]
 80079f0:	4603      	mov	r3, r0
 80079f2:	2200      	movs	r2, #0
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 ff63 	bl	80088c0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80079fa:	e175      	b.n	8007ce8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079fc:	7bbb      	ldrb	r3, [r7, #14]
 80079fe:	2b03      	cmp	r3, #3
 8007a00:	f040 8172 	bne.w	8007ce8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	b2da      	uxtb	r2, r3
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a1a:	2b03      	cmp	r3, #3
 8007a1c:	d903      	bls.n	8007a26 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	220d      	movs	r2, #13
 8007a22:	701a      	strb	r2, [r3, #0]
      break;
 8007a24:	e160      	b.n	8007ce8 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	795b      	ldrb	r3, [r3, #5]
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 ff97 	bl	8008960 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	791b      	ldrb	r3, [r3, #4]
 8007a36:	4619      	mov	r1, r3
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 ff91 	bl	8008960 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	701a      	strb	r2, [r3, #0]
      break;
 8007a44:	e150      	b.n	8007ce8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007a46:	2112      	movs	r1, #18
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 f9f1 	bl	8007e30 <USBH_Get_DevDesc>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a52:	7bbb      	ldrb	r3, [r7, #14]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d103      	bne.n	8007a60 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2202      	movs	r2, #2
 8007a5c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007a5e:	e145      	b.n	8007cec <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a60:	7bbb      	ldrb	r3, [r7, #14]
 8007a62:	2b03      	cmp	r3, #3
 8007a64:	f040 8142 	bne.w	8007cec <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a6e:	3301      	adds	r3, #1
 8007a70:	b2da      	uxtb	r2, r3
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a7e:	2b03      	cmp	r3, #3
 8007a80:	d903      	bls.n	8007a8a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	220d      	movs	r2, #13
 8007a86:	701a      	strb	r2, [r3, #0]
      break;
 8007a88:	e130      	b.n	8007cec <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	795b      	ldrb	r3, [r3, #5]
 8007a8e:	4619      	mov	r1, r3
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 ff65 	bl	8008960 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	791b      	ldrb	r3, [r3, #4]
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 ff5f 	bl	8008960 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	701a      	strb	r2, [r3, #0]
      break;
 8007aae:	e11d      	b.n	8007cec <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007ab0:	2101      	movs	r1, #1
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 fa68 	bl	8007f88 <USBH_SetAddress>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007abc:	7bbb      	ldrb	r3, [r7, #14]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d132      	bne.n	8007b28 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007ac2:	2002      	movs	r0, #2
 8007ac4:	f006 f90e 	bl	800dce4 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2201      	movs	r2, #1
 8007acc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2203      	movs	r2, #3
 8007ad4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	7919      	ldrb	r1, [r3, #4]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007aea:	b292      	uxth	r2, r2
 8007aec:	9202      	str	r2, [sp, #8]
 8007aee:	2200      	movs	r2, #0
 8007af0:	9201      	str	r2, [sp, #4]
 8007af2:	9300      	str	r3, [sp, #0]
 8007af4:	4603      	mov	r3, r0
 8007af6:	2280      	movs	r2, #128	; 0x80
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 fee1 	bl	80088c0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	7959      	ldrb	r1, [r3, #5]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007b12:	b292      	uxth	r2, r2
 8007b14:	9202      	str	r2, [sp, #8]
 8007b16:	2200      	movs	r2, #0
 8007b18:	9201      	str	r2, [sp, #4]
 8007b1a:	9300      	str	r3, [sp, #0]
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2200      	movs	r2, #0
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f000 fecd 	bl	80088c0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007b26:	e0e3      	b.n	8007cf0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b28:	7bbb      	ldrb	r3, [r7, #14]
 8007b2a:	2b03      	cmp	r3, #3
 8007b2c:	f040 80e0 	bne.w	8007cf0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	220d      	movs	r2, #13
 8007b34:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	705a      	strb	r2, [r3, #1]
      break;
 8007b3c:	e0d8      	b.n	8007cf0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007b3e:	2109      	movs	r1, #9
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 f99d 	bl	8007e80 <USBH_Get_CfgDesc>
 8007b46:	4603      	mov	r3, r0
 8007b48:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b4a:	7bbb      	ldrb	r3, [r7, #14]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d103      	bne.n	8007b58 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2204      	movs	r2, #4
 8007b54:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007b56:	e0cd      	b.n	8007cf4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b58:	7bbb      	ldrb	r3, [r7, #14]
 8007b5a:	2b03      	cmp	r3, #3
 8007b5c:	f040 80ca 	bne.w	8007cf4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b66:	3301      	adds	r3, #1
 8007b68:	b2da      	uxtb	r2, r3
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b76:	2b03      	cmp	r3, #3
 8007b78:	d903      	bls.n	8007b82 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	220d      	movs	r2, #13
 8007b7e:	701a      	strb	r2, [r3, #0]
      break;
 8007b80:	e0b8      	b.n	8007cf4 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	795b      	ldrb	r3, [r3, #5]
 8007b86:	4619      	mov	r1, r3
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 fee9 	bl	8008960 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	791b      	ldrb	r3, [r3, #4]
 8007b92:	4619      	mov	r1, r3
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 fee3 	bl	8008960 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	701a      	strb	r2, [r3, #0]
      break;
 8007ba6:	e0a5      	b.n	8007cf4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007bae:	4619      	mov	r1, r3
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 f965 	bl	8007e80 <USBH_Get_CfgDesc>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007bba:	7bbb      	ldrb	r3, [r7, #14]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d103      	bne.n	8007bc8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2205      	movs	r2, #5
 8007bc4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007bc6:	e097      	b.n	8007cf8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007bc8:	7bbb      	ldrb	r3, [r7, #14]
 8007bca:	2b03      	cmp	r3, #3
 8007bcc:	f040 8094 	bne.w	8007cf8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	b2da      	uxtb	r2, r3
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007be6:	2b03      	cmp	r3, #3
 8007be8:	d903      	bls.n	8007bf2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	220d      	movs	r2, #13
 8007bee:	701a      	strb	r2, [r3, #0]
      break;
 8007bf0:	e082      	b.n	8007cf8 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	795b      	ldrb	r3, [r3, #5]
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 feb1 	bl	8008960 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	791b      	ldrb	r3, [r3, #4]
 8007c02:	4619      	mov	r1, r3
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 feab 	bl	8008960 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	701a      	strb	r2, [r3, #0]
      break;
 8007c16:	e06f      	b.n	8007cf8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d019      	beq.n	8007c56 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007c2e:	23ff      	movs	r3, #255	; 0xff
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 f949 	bl	8007ec8 <USBH_Get_StringDesc>
 8007c36:	4603      	mov	r3, r0
 8007c38:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007c3a:	7bbb      	ldrb	r3, [r7, #14]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d103      	bne.n	8007c48 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2206      	movs	r2, #6
 8007c44:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007c46:	e059      	b.n	8007cfc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c48:	7bbb      	ldrb	r3, [r7, #14]
 8007c4a:	2b03      	cmp	r3, #3
 8007c4c:	d156      	bne.n	8007cfc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2206      	movs	r2, #6
 8007c52:	705a      	strb	r2, [r3, #1]
      break;
 8007c54:	e052      	b.n	8007cfc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2206      	movs	r2, #6
 8007c5a:	705a      	strb	r2, [r3, #1]
      break;
 8007c5c:	e04e      	b.n	8007cfc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d019      	beq.n	8007c9c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007c74:	23ff      	movs	r3, #255	; 0xff
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 f926 	bl	8007ec8 <USBH_Get_StringDesc>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007c80:	7bbb      	ldrb	r3, [r7, #14]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d103      	bne.n	8007c8e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2207      	movs	r2, #7
 8007c8a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007c8c:	e038      	b.n	8007d00 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c8e:	7bbb      	ldrb	r3, [r7, #14]
 8007c90:	2b03      	cmp	r3, #3
 8007c92:	d135      	bne.n	8007d00 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2207      	movs	r2, #7
 8007c98:	705a      	strb	r2, [r3, #1]
      break;
 8007c9a:	e031      	b.n	8007d00 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2207      	movs	r2, #7
 8007ca0:	705a      	strb	r2, [r3, #1]
      break;
 8007ca2:	e02d      	b.n	8007d00 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d017      	beq.n	8007cde <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007cba:	23ff      	movs	r3, #255	; 0xff
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 f903 	bl	8007ec8 <USBH_Get_StringDesc>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007cc6:	7bbb      	ldrb	r3, [r7, #14]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d102      	bne.n	8007cd2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007cd0:	e018      	b.n	8007d04 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007cd2:	7bbb      	ldrb	r3, [r7, #14]
 8007cd4:	2b03      	cmp	r3, #3
 8007cd6:	d115      	bne.n	8007d04 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	73fb      	strb	r3, [r7, #15]
      break;
 8007cdc:	e012      	b.n	8007d04 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ce2:	e00f      	b.n	8007d04 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007ce4:	bf00      	nop
 8007ce6:	e00e      	b.n	8007d06 <USBH_HandleEnum+0x3be>
      break;
 8007ce8:	bf00      	nop
 8007cea:	e00c      	b.n	8007d06 <USBH_HandleEnum+0x3be>
      break;
 8007cec:	bf00      	nop
 8007cee:	e00a      	b.n	8007d06 <USBH_HandleEnum+0x3be>
      break;
 8007cf0:	bf00      	nop
 8007cf2:	e008      	b.n	8007d06 <USBH_HandleEnum+0x3be>
      break;
 8007cf4:	bf00      	nop
 8007cf6:	e006      	b.n	8007d06 <USBH_HandleEnum+0x3be>
      break;
 8007cf8:	bf00      	nop
 8007cfa:	e004      	b.n	8007d06 <USBH_HandleEnum+0x3be>
      break;
 8007cfc:	bf00      	nop
 8007cfe:	e002      	b.n	8007d06 <USBH_HandleEnum+0x3be>
      break;
 8007d00:	bf00      	nop
 8007d02:	e000      	b.n	8007d06 <USBH_HandleEnum+0x3be>
      break;
 8007d04:	bf00      	nop
  }
  return Status;
 8007d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3710      	adds	r7, #16
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b083      	sub	sp, #12
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	683a      	ldr	r2, [r7, #0]
 8007d1e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007d22:	bf00      	nop
 8007d24:	370c      	adds	r7, #12
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr

08007d2e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007d2e:	b580      	push	{r7, lr}
 8007d30:	b082      	sub	sp, #8
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007d3c:	1c5a      	adds	r2, r3, #1
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 f804 	bl	8007d52 <USBH_HandleSof>
}
 8007d4a:	bf00      	nop
 8007d4c:	3708      	adds	r7, #8
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b082      	sub	sp, #8
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	2b0b      	cmp	r3, #11
 8007d62:	d10a      	bne.n	8007d7a <USBH_HandleSof+0x28>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d005      	beq.n	8007d7a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d74:	699b      	ldr	r3, [r3, #24]
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	4798      	blx	r3
  }
}
 8007d7a:	bf00      	nop
 8007d7c:	3708      	adds	r7, #8
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}

08007d82 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007d82:	b480      	push	{r7}
 8007d84:	b083      	sub	sp, #12
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007d92:	bf00      	nop
}
 8007d94:	370c      	adds	r7, #12
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr

08007d9e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007d9e:	b480      	push	{r7}
 8007da0:	b083      	sub	sp, #12
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007dae:	bf00      	nop
}
 8007db0:	370c      	adds	r7, #12
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr

08007dba <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007dba:	b480      	push	{r7}
 8007dbc:	b083      	sub	sp, #12
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b082      	sub	sp, #8
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2200      	movs	r2, #0
 8007e04:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f005 fdf2 	bl	800d9f2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	791b      	ldrb	r3, [r3, #4]
 8007e12:	4619      	mov	r1, r3
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 fda3 	bl	8008960 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	795b      	ldrb	r3, [r3, #5]
 8007e1e:	4619      	mov	r1, r3
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f000 fd9d 	bl	8008960 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007e26:	2300      	movs	r3, #0
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3708      	adds	r7, #8
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b086      	sub	sp, #24
 8007e34:	af02      	add	r7, sp, #8
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	460b      	mov	r3, r1
 8007e3a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007e42:	78fb      	ldrb	r3, [r7, #3]
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	9300      	str	r3, [sp, #0]
 8007e48:	4613      	mov	r3, r2
 8007e4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e4e:	2100      	movs	r1, #0
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 f864 	bl	8007f1e <USBH_GetDescriptor>
 8007e56:	4603      	mov	r3, r0
 8007e58:	73fb      	strb	r3, [r7, #15]
 8007e5a:	7bfb      	ldrb	r3, [r7, #15]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d10a      	bne.n	8007e76 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007e6c:	78fa      	ldrb	r2, [r7, #3]
 8007e6e:	b292      	uxth	r2, r2
 8007e70:	4619      	mov	r1, r3
 8007e72:	f000 f918 	bl	80080a6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3710      	adds	r7, #16
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b086      	sub	sp, #24
 8007e84:	af02      	add	r7, sp, #8
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	460b      	mov	r3, r1
 8007e8a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	331c      	adds	r3, #28
 8007e90:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007e92:	887b      	ldrh	r3, [r7, #2]
 8007e94:	9300      	str	r3, [sp, #0]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e9c:	2100      	movs	r1, #0
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 f83d 	bl	8007f1e <USBH_GetDescriptor>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	72fb      	strb	r3, [r7, #11]
 8007ea8:	7afb      	ldrb	r3, [r7, #11]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d107      	bne.n	8007ebe <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007eb4:	887a      	ldrh	r2, [r7, #2]
 8007eb6:	68f9      	ldr	r1, [r7, #12]
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f000 f964 	bl	8008186 <USBH_ParseCfgDesc>
  }

  return status;
 8007ebe:	7afb      	ldrb	r3, [r7, #11]
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3710      	adds	r7, #16
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b088      	sub	sp, #32
 8007ecc:	af02      	add	r7, sp, #8
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	607a      	str	r2, [r7, #4]
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	460b      	mov	r3, r1
 8007ed6:	72fb      	strb	r3, [r7, #11]
 8007ed8:	4613      	mov	r3, r2
 8007eda:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007edc:	7afb      	ldrb	r3, [r7, #11]
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007ee4:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007eec:	893b      	ldrh	r3, [r7, #8]
 8007eee:	9300      	str	r3, [sp, #0]
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	2100      	movs	r1, #0
 8007ef4:	68f8      	ldr	r0, [r7, #12]
 8007ef6:	f000 f812 	bl	8007f1e <USBH_GetDescriptor>
 8007efa:	4603      	mov	r3, r0
 8007efc:	75fb      	strb	r3, [r7, #23]
 8007efe:	7dfb      	ldrb	r3, [r7, #23]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d107      	bne.n	8007f14 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007f0a:	893a      	ldrh	r2, [r7, #8]
 8007f0c:	6879      	ldr	r1, [r7, #4]
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f000 fa37 	bl	8008382 <USBH_ParseStringDesc>
  }

  return status;
 8007f14:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3718      	adds	r7, #24
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}

08007f1e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007f1e:	b580      	push	{r7, lr}
 8007f20:	b084      	sub	sp, #16
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	60f8      	str	r0, [r7, #12]
 8007f26:	607b      	str	r3, [r7, #4]
 8007f28:	460b      	mov	r3, r1
 8007f2a:	72fb      	strb	r3, [r7, #11]
 8007f2c:	4613      	mov	r3, r2
 8007f2e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	789b      	ldrb	r3, [r3, #2]
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d11c      	bne.n	8007f72 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007f38:	7afb      	ldrb	r3, [r7, #11]
 8007f3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007f3e:	b2da      	uxtb	r2, r3
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2206      	movs	r2, #6
 8007f48:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	893a      	ldrh	r2, [r7, #8]
 8007f4e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007f50:	893b      	ldrh	r3, [r7, #8]
 8007f52:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007f56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f5a:	d104      	bne.n	8007f66 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f240 4209 	movw	r2, #1033	; 0x409
 8007f62:	829a      	strh	r2, [r3, #20]
 8007f64:	e002      	b.n	8007f6c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	8b3a      	ldrh	r2, [r7, #24]
 8007f70:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007f72:	8b3b      	ldrh	r3, [r7, #24]
 8007f74:	461a      	mov	r2, r3
 8007f76:	6879      	ldr	r1, [r7, #4]
 8007f78:	68f8      	ldr	r0, [r7, #12]
 8007f7a:	f000 fa50 	bl	800841e <USBH_CtlReq>
 8007f7e:	4603      	mov	r3, r0
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3710      	adds	r7, #16
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	460b      	mov	r3, r1
 8007f92:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	789b      	ldrb	r3, [r3, #2]
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d10f      	bne.n	8007fbc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2205      	movs	r2, #5
 8007fa6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007fa8:	78fb      	ldrb	r3, [r7, #3]
 8007faa:	b29a      	uxth	r2, r3
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	2100      	movs	r1, #0
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 fa2c 	bl	800841e <USBH_CtlReq>
 8007fc6:	4603      	mov	r3, r0
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3708      	adds	r7, #8
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	460b      	mov	r3, r1
 8007fda:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	789b      	ldrb	r3, [r3, #2]
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d10e      	bne.n	8008002 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2209      	movs	r2, #9
 8007fee:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	887a      	ldrh	r2, [r7, #2]
 8007ff4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008002:	2200      	movs	r2, #0
 8008004:	2100      	movs	r1, #0
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 fa09 	bl	800841e <USBH_CtlReq>
 800800c:	4603      	mov	r3, r0
}
 800800e:	4618      	mov	r0, r3
 8008010:	3708      	adds	r7, #8
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}

08008016 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008016:	b580      	push	{r7, lr}
 8008018:	b082      	sub	sp, #8
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
 800801e:	460b      	mov	r3, r1
 8008020:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	789b      	ldrb	r3, [r3, #2]
 8008026:	2b01      	cmp	r3, #1
 8008028:	d10f      	bne.n	800804a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2203      	movs	r2, #3
 8008034:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008036:	78fb      	ldrb	r3, [r7, #3]
 8008038:	b29a      	uxth	r2, r3
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800804a:	2200      	movs	r2, #0
 800804c:	2100      	movs	r1, #0
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 f9e5 	bl	800841e <USBH_CtlReq>
 8008054:	4603      	mov	r3, r0
}
 8008056:	4618      	mov	r0, r3
 8008058:	3708      	adds	r7, #8
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}

0800805e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800805e:	b580      	push	{r7, lr}
 8008060:	b082      	sub	sp, #8
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
 8008066:	460b      	mov	r3, r1
 8008068:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	789b      	ldrb	r3, [r3, #2]
 800806e:	2b01      	cmp	r3, #1
 8008070:	d10f      	bne.n	8008092 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2202      	movs	r2, #2
 8008076:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2201      	movs	r2, #1
 800807c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008084:	78fb      	ldrb	r3, [r7, #3]
 8008086:	b29a      	uxth	r2, r3
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8008092:	2200      	movs	r2, #0
 8008094:	2100      	movs	r1, #0
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 f9c1 	bl	800841e <USBH_CtlReq>
 800809c:	4603      	mov	r3, r0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3708      	adds	r7, #8
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80080a6:	b480      	push	{r7}
 80080a8:	b085      	sub	sp, #20
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	60f8      	str	r0, [r7, #12]
 80080ae:	60b9      	str	r1, [r7, #8]
 80080b0:	4613      	mov	r3, r2
 80080b2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	781a      	ldrb	r2, [r3, #0]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	785a      	ldrb	r2, [r3, #1]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	3302      	adds	r3, #2
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	b29a      	uxth	r2, r3
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	3303      	adds	r3, #3
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	021b      	lsls	r3, r3, #8
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	4313      	orrs	r3, r2
 80080da:	b29a      	uxth	r2, r3
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	791a      	ldrb	r2, [r3, #4]
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	795a      	ldrb	r2, [r3, #5]
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	799a      	ldrb	r2, [r3, #6]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	79da      	ldrb	r2, [r3, #7]
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8008100:	88fb      	ldrh	r3, [r7, #6]
 8008102:	2b08      	cmp	r3, #8
 8008104:	d939      	bls.n	800817a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	3308      	adds	r3, #8
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	b29a      	uxth	r2, r3
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	3309      	adds	r3, #9
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	b29b      	uxth	r3, r3
 8008116:	021b      	lsls	r3, r3, #8
 8008118:	b29b      	uxth	r3, r3
 800811a:	4313      	orrs	r3, r2
 800811c:	b29a      	uxth	r2, r3
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	330a      	adds	r3, #10
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	b29a      	uxth	r2, r3
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	330b      	adds	r3, #11
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	b29b      	uxth	r3, r3
 8008132:	021b      	lsls	r3, r3, #8
 8008134:	b29b      	uxth	r3, r3
 8008136:	4313      	orrs	r3, r2
 8008138:	b29a      	uxth	r2, r3
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	330c      	adds	r3, #12
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	b29a      	uxth	r2, r3
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	330d      	adds	r3, #13
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	b29b      	uxth	r3, r3
 800814e:	021b      	lsls	r3, r3, #8
 8008150:	b29b      	uxth	r3, r3
 8008152:	4313      	orrs	r3, r2
 8008154:	b29a      	uxth	r2, r3
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	7b9a      	ldrb	r2, [r3, #14]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	7bda      	ldrb	r2, [r3, #15]
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	7c1a      	ldrb	r2, [r3, #16]
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	7c5a      	ldrb	r2, [r3, #17]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	745a      	strb	r2, [r3, #17]
  }
}
 800817a:	bf00      	nop
 800817c:	3714      	adds	r7, #20
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr

08008186 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8008186:	b580      	push	{r7, lr}
 8008188:	b08a      	sub	sp, #40	; 0x28
 800818a:	af00      	add	r7, sp, #0
 800818c:	60f8      	str	r0, [r7, #12]
 800818e:	60b9      	str	r1, [r7, #8]
 8008190:	4613      	mov	r3, r2
 8008192:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008198:	2300      	movs	r3, #0
 800819a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800819e:	2300      	movs	r3, #0
 80081a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	781a      	ldrb	r2, [r3, #0]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	785a      	ldrb	r2, [r3, #1]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	3302      	adds	r3, #2
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	b29a      	uxth	r2, r3
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	3303      	adds	r3, #3
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	021b      	lsls	r3, r3, #8
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	4313      	orrs	r3, r2
 80081ce:	b29a      	uxth	r2, r3
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	791a      	ldrb	r2, [r3, #4]
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	795a      	ldrb	r2, [r3, #5]
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	799a      	ldrb	r2, [r3, #6]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	79da      	ldrb	r2, [r3, #7]
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	7a1a      	ldrb	r2, [r3, #8]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80081fc:	88fb      	ldrh	r3, [r7, #6]
 80081fe:	2b09      	cmp	r3, #9
 8008200:	d95f      	bls.n	80082c2 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8008202:	2309      	movs	r3, #9
 8008204:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8008206:	2300      	movs	r3, #0
 8008208:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800820a:	e051      	b.n	80082b0 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800820c:	f107 0316 	add.w	r3, r7, #22
 8008210:	4619      	mov	r1, r3
 8008212:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008214:	f000 f8e8 	bl	80083e8 <USBH_GetNextDesc>
 8008218:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800821a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821c:	785b      	ldrb	r3, [r3, #1]
 800821e:	2b04      	cmp	r3, #4
 8008220:	d146      	bne.n	80082b0 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8008222:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008226:	221a      	movs	r2, #26
 8008228:	fb02 f303 	mul.w	r3, r2, r3
 800822c:	3308      	adds	r3, #8
 800822e:	68fa      	ldr	r2, [r7, #12]
 8008230:	4413      	add	r3, r2
 8008232:	3302      	adds	r3, #2
 8008234:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008236:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008238:	69f8      	ldr	r0, [r7, #28]
 800823a:	f000 f846 	bl	80082ca <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800823e:	2300      	movs	r3, #0
 8008240:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008244:	2300      	movs	r3, #0
 8008246:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008248:	e022      	b.n	8008290 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800824a:	f107 0316 	add.w	r3, r7, #22
 800824e:	4619      	mov	r1, r3
 8008250:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008252:	f000 f8c9 	bl	80083e8 <USBH_GetNextDesc>
 8008256:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825a:	785b      	ldrb	r3, [r3, #1]
 800825c:	2b05      	cmp	r3, #5
 800825e:	d117      	bne.n	8008290 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008260:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008264:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008268:	3201      	adds	r2, #1
 800826a:	00d2      	lsls	r2, r2, #3
 800826c:	211a      	movs	r1, #26
 800826e:	fb01 f303 	mul.w	r3, r1, r3
 8008272:	4413      	add	r3, r2
 8008274:	3308      	adds	r3, #8
 8008276:	68fa      	ldr	r2, [r7, #12]
 8008278:	4413      	add	r3, r2
 800827a:	3304      	adds	r3, #4
 800827c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800827e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008280:	69b8      	ldr	r0, [r7, #24]
 8008282:	f000 f851 	bl	8008328 <USBH_ParseEPDesc>
            ep_ix++;
 8008286:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800828a:	3301      	adds	r3, #1
 800828c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008290:	69fb      	ldr	r3, [r7, #28]
 8008292:	791b      	ldrb	r3, [r3, #4]
 8008294:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008298:	429a      	cmp	r2, r3
 800829a:	d204      	bcs.n	80082a6 <USBH_ParseCfgDesc+0x120>
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	885a      	ldrh	r2, [r3, #2]
 80082a0:	8afb      	ldrh	r3, [r7, #22]
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d8d1      	bhi.n	800824a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80082a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80082aa:	3301      	adds	r3, #1
 80082ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80082b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d804      	bhi.n	80082c2 <USBH_ParseCfgDesc+0x13c>
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	885a      	ldrh	r2, [r3, #2]
 80082bc:	8afb      	ldrh	r3, [r7, #22]
 80082be:	429a      	cmp	r2, r3
 80082c0:	d8a4      	bhi.n	800820c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80082c2:	bf00      	nop
 80082c4:	3728      	adds	r7, #40	; 0x28
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}

080082ca <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80082ca:	b480      	push	{r7}
 80082cc:	b083      	sub	sp, #12
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
 80082d2:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	781a      	ldrb	r2, [r3, #0]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	785a      	ldrb	r2, [r3, #1]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	789a      	ldrb	r2, [r3, #2]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	78da      	ldrb	r2, [r3, #3]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	791a      	ldrb	r2, [r3, #4]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	795a      	ldrb	r2, [r3, #5]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	799a      	ldrb	r2, [r3, #6]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	79da      	ldrb	r2, [r3, #7]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	7a1a      	ldrb	r2, [r3, #8]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	721a      	strb	r2, [r3, #8]
}
 800831c:	bf00      	nop
 800831e:	370c      	adds	r7, #12
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr

08008328 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8008328:	b480      	push	{r7}
 800832a:	b083      	sub	sp, #12
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	781a      	ldrb	r2, [r3, #0]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	785a      	ldrb	r2, [r3, #1]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	789a      	ldrb	r2, [r3, #2]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	78da      	ldrb	r2, [r3, #3]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	3304      	adds	r3, #4
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	b29a      	uxth	r2, r3
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	3305      	adds	r3, #5
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	b29b      	uxth	r3, r3
 8008362:	021b      	lsls	r3, r3, #8
 8008364:	b29b      	uxth	r3, r3
 8008366:	4313      	orrs	r3, r2
 8008368:	b29a      	uxth	r2, r3
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	799a      	ldrb	r2, [r3, #6]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	719a      	strb	r2, [r3, #6]
}
 8008376:	bf00      	nop
 8008378:	370c      	adds	r7, #12
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr

08008382 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008382:	b480      	push	{r7}
 8008384:	b087      	sub	sp, #28
 8008386:	af00      	add	r7, sp, #0
 8008388:	60f8      	str	r0, [r7, #12]
 800838a:	60b9      	str	r1, [r7, #8]
 800838c:	4613      	mov	r3, r2
 800838e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	3301      	adds	r3, #1
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	2b03      	cmp	r3, #3
 8008398:	d120      	bne.n	80083dc <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	1e9a      	subs	r2, r3, #2
 80083a0:	88fb      	ldrh	r3, [r7, #6]
 80083a2:	4293      	cmp	r3, r2
 80083a4:	bf28      	it	cs
 80083a6:	4613      	movcs	r3, r2
 80083a8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	3302      	adds	r3, #2
 80083ae:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80083b0:	2300      	movs	r3, #0
 80083b2:	82fb      	strh	r3, [r7, #22]
 80083b4:	e00b      	b.n	80083ce <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80083b6:	8afb      	ldrh	r3, [r7, #22]
 80083b8:	68fa      	ldr	r2, [r7, #12]
 80083ba:	4413      	add	r3, r2
 80083bc:	781a      	ldrb	r2, [r3, #0]
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	701a      	strb	r2, [r3, #0]
      pdest++;
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	3301      	adds	r3, #1
 80083c6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80083c8:	8afb      	ldrh	r3, [r7, #22]
 80083ca:	3302      	adds	r3, #2
 80083cc:	82fb      	strh	r3, [r7, #22]
 80083ce:	8afa      	ldrh	r2, [r7, #22]
 80083d0:	8abb      	ldrh	r3, [r7, #20]
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d3ef      	bcc.n	80083b6 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	2200      	movs	r2, #0
 80083da:	701a      	strb	r2, [r3, #0]
  }
}
 80083dc:	bf00      	nop
 80083de:	371c      	adds	r7, #28
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b085      	sub	sp, #20
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	881a      	ldrh	r2, [r3, #0]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	4413      	add	r3, r2
 80083fe:	b29a      	uxth	r2, r3
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4413      	add	r3, r2
 800840e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008410:	68fb      	ldr	r3, [r7, #12]
}
 8008412:	4618      	mov	r0, r3
 8008414:	3714      	adds	r7, #20
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr

0800841e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800841e:	b580      	push	{r7, lr}
 8008420:	b086      	sub	sp, #24
 8008422:	af00      	add	r7, sp, #0
 8008424:	60f8      	str	r0, [r7, #12]
 8008426:	60b9      	str	r1, [r7, #8]
 8008428:	4613      	mov	r3, r2
 800842a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800842c:	2301      	movs	r3, #1
 800842e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	789b      	ldrb	r3, [r3, #2]
 8008434:	2b01      	cmp	r3, #1
 8008436:	d002      	beq.n	800843e <USBH_CtlReq+0x20>
 8008438:	2b02      	cmp	r3, #2
 800843a:	d00f      	beq.n	800845c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800843c:	e027      	b.n	800848e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	68ba      	ldr	r2, [r7, #8]
 8008442:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	88fa      	ldrh	r2, [r7, #6]
 8008448:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2201      	movs	r2, #1
 800844e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2202      	movs	r2, #2
 8008454:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008456:	2301      	movs	r3, #1
 8008458:	75fb      	strb	r3, [r7, #23]
      break;
 800845a:	e018      	b.n	800848e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800845c:	68f8      	ldr	r0, [r7, #12]
 800845e:	f000 f81b 	bl	8008498 <USBH_HandleControl>
 8008462:	4603      	mov	r3, r0
 8008464:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008466:	7dfb      	ldrb	r3, [r7, #23]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d002      	beq.n	8008472 <USBH_CtlReq+0x54>
 800846c:	7dfb      	ldrb	r3, [r7, #23]
 800846e:	2b03      	cmp	r3, #3
 8008470:	d106      	bne.n	8008480 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2201      	movs	r2, #1
 8008476:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2200      	movs	r2, #0
 800847c:	761a      	strb	r2, [r3, #24]
      break;
 800847e:	e005      	b.n	800848c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008480:	7dfb      	ldrb	r3, [r7, #23]
 8008482:	2b02      	cmp	r3, #2
 8008484:	d102      	bne.n	800848c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2201      	movs	r2, #1
 800848a:	709a      	strb	r2, [r3, #2]
      break;
 800848c:	bf00      	nop
  }
  return status;
 800848e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008490:	4618      	mov	r0, r3
 8008492:	3718      	adds	r7, #24
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b086      	sub	sp, #24
 800849c:	af02      	add	r7, sp, #8
 800849e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80084a0:	2301      	movs	r3, #1
 80084a2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80084a4:	2300      	movs	r3, #0
 80084a6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	7e1b      	ldrb	r3, [r3, #24]
 80084ac:	3b01      	subs	r3, #1
 80084ae:	2b0a      	cmp	r3, #10
 80084b0:	f200 8156 	bhi.w	8008760 <USBH_HandleControl+0x2c8>
 80084b4:	a201      	add	r2, pc, #4	; (adr r2, 80084bc <USBH_HandleControl+0x24>)
 80084b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ba:	bf00      	nop
 80084bc:	080084e9 	.word	0x080084e9
 80084c0:	08008503 	.word	0x08008503
 80084c4:	0800856d 	.word	0x0800856d
 80084c8:	08008593 	.word	0x08008593
 80084cc:	080085cb 	.word	0x080085cb
 80084d0:	080085f5 	.word	0x080085f5
 80084d4:	08008647 	.word	0x08008647
 80084d8:	08008669 	.word	0x08008669
 80084dc:	080086a5 	.word	0x080086a5
 80084e0:	080086cb 	.word	0x080086cb
 80084e4:	08008709 	.word	0x08008709
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f103 0110 	add.w	r1, r3, #16
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	795b      	ldrb	r3, [r3, #5]
 80084f2:	461a      	mov	r2, r3
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f000 f943 	bl	8008780 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2202      	movs	r2, #2
 80084fe:	761a      	strb	r2, [r3, #24]
      break;
 8008500:	e139      	b.n	8008776 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	795b      	ldrb	r3, [r3, #5]
 8008506:	4619      	mov	r1, r3
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f005 fb61 	bl	800dbd0 <USBH_LL_GetURBState>
 800850e:	4603      	mov	r3, r0
 8008510:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008512:	7bbb      	ldrb	r3, [r7, #14]
 8008514:	2b01      	cmp	r3, #1
 8008516:	d11e      	bne.n	8008556 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	7c1b      	ldrb	r3, [r3, #16]
 800851c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008520:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	8adb      	ldrh	r3, [r3, #22]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d00a      	beq.n	8008540 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800852a:	7b7b      	ldrb	r3, [r7, #13]
 800852c:	2b80      	cmp	r3, #128	; 0x80
 800852e:	d103      	bne.n	8008538 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2203      	movs	r2, #3
 8008534:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008536:	e115      	b.n	8008764 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2205      	movs	r2, #5
 800853c:	761a      	strb	r2, [r3, #24]
      break;
 800853e:	e111      	b.n	8008764 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008540:	7b7b      	ldrb	r3, [r7, #13]
 8008542:	2b80      	cmp	r3, #128	; 0x80
 8008544:	d103      	bne.n	800854e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2209      	movs	r2, #9
 800854a:	761a      	strb	r2, [r3, #24]
      break;
 800854c:	e10a      	b.n	8008764 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2207      	movs	r2, #7
 8008552:	761a      	strb	r2, [r3, #24]
      break;
 8008554:	e106      	b.n	8008764 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008556:	7bbb      	ldrb	r3, [r7, #14]
 8008558:	2b04      	cmp	r3, #4
 800855a:	d003      	beq.n	8008564 <USBH_HandleControl+0xcc>
 800855c:	7bbb      	ldrb	r3, [r7, #14]
 800855e:	2b02      	cmp	r3, #2
 8008560:	f040 8100 	bne.w	8008764 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	220b      	movs	r2, #11
 8008568:	761a      	strb	r2, [r3, #24]
      break;
 800856a:	e0fb      	b.n	8008764 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008572:	b29a      	uxth	r2, r3
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6899      	ldr	r1, [r3, #8]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	899a      	ldrh	r2, [r3, #12]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	791b      	ldrb	r3, [r3, #4]
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 f93a 	bl	80087fe <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2204      	movs	r2, #4
 800858e:	761a      	strb	r2, [r3, #24]
      break;
 8008590:	e0f1      	b.n	8008776 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	791b      	ldrb	r3, [r3, #4]
 8008596:	4619      	mov	r1, r3
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f005 fb19 	bl	800dbd0 <USBH_LL_GetURBState>
 800859e:	4603      	mov	r3, r0
 80085a0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80085a2:	7bbb      	ldrb	r3, [r7, #14]
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d102      	bne.n	80085ae <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2209      	movs	r2, #9
 80085ac:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80085ae:	7bbb      	ldrb	r3, [r7, #14]
 80085b0:	2b05      	cmp	r3, #5
 80085b2:	d102      	bne.n	80085ba <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80085b4:	2303      	movs	r3, #3
 80085b6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80085b8:	e0d6      	b.n	8008768 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80085ba:	7bbb      	ldrb	r3, [r7, #14]
 80085bc:	2b04      	cmp	r3, #4
 80085be:	f040 80d3 	bne.w	8008768 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	220b      	movs	r2, #11
 80085c6:	761a      	strb	r2, [r3, #24]
      break;
 80085c8:	e0ce      	b.n	8008768 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6899      	ldr	r1, [r3, #8]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	899a      	ldrh	r2, [r3, #12]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	795b      	ldrb	r3, [r3, #5]
 80085d6:	2001      	movs	r0, #1
 80085d8:	9000      	str	r0, [sp, #0]
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 f8ea 	bl	80087b4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80085e6:	b29a      	uxth	r2, r3
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2206      	movs	r2, #6
 80085f0:	761a      	strb	r2, [r3, #24]
      break;
 80085f2:	e0c0      	b.n	8008776 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	795b      	ldrb	r3, [r3, #5]
 80085f8:	4619      	mov	r1, r3
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f005 fae8 	bl	800dbd0 <USBH_LL_GetURBState>
 8008600:	4603      	mov	r3, r0
 8008602:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008604:	7bbb      	ldrb	r3, [r7, #14]
 8008606:	2b01      	cmp	r3, #1
 8008608:	d103      	bne.n	8008612 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2207      	movs	r2, #7
 800860e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008610:	e0ac      	b.n	800876c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008612:	7bbb      	ldrb	r3, [r7, #14]
 8008614:	2b05      	cmp	r3, #5
 8008616:	d105      	bne.n	8008624 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	220c      	movs	r2, #12
 800861c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800861e:	2303      	movs	r3, #3
 8008620:	73fb      	strb	r3, [r7, #15]
      break;
 8008622:	e0a3      	b.n	800876c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008624:	7bbb      	ldrb	r3, [r7, #14]
 8008626:	2b02      	cmp	r3, #2
 8008628:	d103      	bne.n	8008632 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2205      	movs	r2, #5
 800862e:	761a      	strb	r2, [r3, #24]
      break;
 8008630:	e09c      	b.n	800876c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008632:	7bbb      	ldrb	r3, [r7, #14]
 8008634:	2b04      	cmp	r3, #4
 8008636:	f040 8099 	bne.w	800876c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	220b      	movs	r2, #11
 800863e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008640:	2302      	movs	r3, #2
 8008642:	73fb      	strb	r3, [r7, #15]
      break;
 8008644:	e092      	b.n	800876c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	791b      	ldrb	r3, [r3, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	2100      	movs	r1, #0
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 f8d5 	bl	80087fe <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800865a:	b29a      	uxth	r2, r3
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2208      	movs	r2, #8
 8008664:	761a      	strb	r2, [r3, #24]

      break;
 8008666:	e086      	b.n	8008776 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	791b      	ldrb	r3, [r3, #4]
 800866c:	4619      	mov	r1, r3
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f005 faae 	bl	800dbd0 <USBH_LL_GetURBState>
 8008674:	4603      	mov	r3, r0
 8008676:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008678:	7bbb      	ldrb	r3, [r7, #14]
 800867a:	2b01      	cmp	r3, #1
 800867c:	d105      	bne.n	800868a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	220d      	movs	r2, #13
 8008682:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008684:	2300      	movs	r3, #0
 8008686:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008688:	e072      	b.n	8008770 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800868a:	7bbb      	ldrb	r3, [r7, #14]
 800868c:	2b04      	cmp	r3, #4
 800868e:	d103      	bne.n	8008698 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	220b      	movs	r2, #11
 8008694:	761a      	strb	r2, [r3, #24]
      break;
 8008696:	e06b      	b.n	8008770 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008698:	7bbb      	ldrb	r3, [r7, #14]
 800869a:	2b05      	cmp	r3, #5
 800869c:	d168      	bne.n	8008770 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800869e:	2303      	movs	r3, #3
 80086a0:	73fb      	strb	r3, [r7, #15]
      break;
 80086a2:	e065      	b.n	8008770 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	795b      	ldrb	r3, [r3, #5]
 80086a8:	2201      	movs	r2, #1
 80086aa:	9200      	str	r2, [sp, #0]
 80086ac:	2200      	movs	r2, #0
 80086ae:	2100      	movs	r1, #0
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 f87f 	bl	80087b4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80086bc:	b29a      	uxth	r2, r3
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	220a      	movs	r2, #10
 80086c6:	761a      	strb	r2, [r3, #24]
      break;
 80086c8:	e055      	b.n	8008776 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	795b      	ldrb	r3, [r3, #5]
 80086ce:	4619      	mov	r1, r3
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f005 fa7d 	bl	800dbd0 <USBH_LL_GetURBState>
 80086d6:	4603      	mov	r3, r0
 80086d8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80086da:	7bbb      	ldrb	r3, [r7, #14]
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d105      	bne.n	80086ec <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80086e0:	2300      	movs	r3, #0
 80086e2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	220d      	movs	r2, #13
 80086e8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80086ea:	e043      	b.n	8008774 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80086ec:	7bbb      	ldrb	r3, [r7, #14]
 80086ee:	2b02      	cmp	r3, #2
 80086f0:	d103      	bne.n	80086fa <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2209      	movs	r2, #9
 80086f6:	761a      	strb	r2, [r3, #24]
      break;
 80086f8:	e03c      	b.n	8008774 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80086fa:	7bbb      	ldrb	r3, [r7, #14]
 80086fc:	2b04      	cmp	r3, #4
 80086fe:	d139      	bne.n	8008774 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	220b      	movs	r2, #11
 8008704:	761a      	strb	r2, [r3, #24]
      break;
 8008706:	e035      	b.n	8008774 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	7e5b      	ldrb	r3, [r3, #25]
 800870c:	3301      	adds	r3, #1
 800870e:	b2da      	uxtb	r2, r3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	765a      	strb	r2, [r3, #25]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	7e5b      	ldrb	r3, [r3, #25]
 8008718:	2b02      	cmp	r3, #2
 800871a:	d806      	bhi.n	800872a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2201      	movs	r2, #1
 8008720:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2201      	movs	r2, #1
 8008726:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008728:	e025      	b.n	8008776 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008730:	2106      	movs	r1, #6
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2200      	movs	r2, #0
 800873a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	795b      	ldrb	r3, [r3, #5]
 8008740:	4619      	mov	r1, r3
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 f90c 	bl	8008960 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	791b      	ldrb	r3, [r3, #4]
 800874c:	4619      	mov	r1, r3
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 f906 	bl	8008960 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800875a:	2302      	movs	r3, #2
 800875c:	73fb      	strb	r3, [r7, #15]
      break;
 800875e:	e00a      	b.n	8008776 <USBH_HandleControl+0x2de>

    default:
      break;
 8008760:	bf00      	nop
 8008762:	e008      	b.n	8008776 <USBH_HandleControl+0x2de>
      break;
 8008764:	bf00      	nop
 8008766:	e006      	b.n	8008776 <USBH_HandleControl+0x2de>
      break;
 8008768:	bf00      	nop
 800876a:	e004      	b.n	8008776 <USBH_HandleControl+0x2de>
      break;
 800876c:	bf00      	nop
 800876e:	e002      	b.n	8008776 <USBH_HandleControl+0x2de>
      break;
 8008770:	bf00      	nop
 8008772:	e000      	b.n	8008776 <USBH_HandleControl+0x2de>
      break;
 8008774:	bf00      	nop
  }

  return status;
 8008776:	7bfb      	ldrb	r3, [r7, #15]
}
 8008778:	4618      	mov	r0, r3
 800877a:	3710      	adds	r7, #16
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b088      	sub	sp, #32
 8008784:	af04      	add	r7, sp, #16
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	60b9      	str	r1, [r7, #8]
 800878a:	4613      	mov	r3, r2
 800878c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800878e:	79f9      	ldrb	r1, [r7, #7]
 8008790:	2300      	movs	r3, #0
 8008792:	9303      	str	r3, [sp, #12]
 8008794:	2308      	movs	r3, #8
 8008796:	9302      	str	r3, [sp, #8]
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	9301      	str	r3, [sp, #4]
 800879c:	2300      	movs	r3, #0
 800879e:	9300      	str	r3, [sp, #0]
 80087a0:	2300      	movs	r3, #0
 80087a2:	2200      	movs	r2, #0
 80087a4:	68f8      	ldr	r0, [r7, #12]
 80087a6:	f005 f9e2 	bl	800db6e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80087aa:	2300      	movs	r3, #0
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3710      	adds	r7, #16
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b088      	sub	sp, #32
 80087b8:	af04      	add	r7, sp, #16
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	4611      	mov	r1, r2
 80087c0:	461a      	mov	r2, r3
 80087c2:	460b      	mov	r3, r1
 80087c4:	80fb      	strh	r3, [r7, #6]
 80087c6:	4613      	mov	r3, r2
 80087c8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d001      	beq.n	80087d8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80087d4:	2300      	movs	r3, #0
 80087d6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80087d8:	7979      	ldrb	r1, [r7, #5]
 80087da:	7e3b      	ldrb	r3, [r7, #24]
 80087dc:	9303      	str	r3, [sp, #12]
 80087de:	88fb      	ldrh	r3, [r7, #6]
 80087e0:	9302      	str	r3, [sp, #8]
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	9301      	str	r3, [sp, #4]
 80087e6:	2301      	movs	r3, #1
 80087e8:	9300      	str	r3, [sp, #0]
 80087ea:	2300      	movs	r3, #0
 80087ec:	2200      	movs	r2, #0
 80087ee:	68f8      	ldr	r0, [r7, #12]
 80087f0:	f005 f9bd 	bl	800db6e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80087f4:	2300      	movs	r3, #0
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3710      	adds	r7, #16
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}

080087fe <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80087fe:	b580      	push	{r7, lr}
 8008800:	b088      	sub	sp, #32
 8008802:	af04      	add	r7, sp, #16
 8008804:	60f8      	str	r0, [r7, #12]
 8008806:	60b9      	str	r1, [r7, #8]
 8008808:	4611      	mov	r1, r2
 800880a:	461a      	mov	r2, r3
 800880c:	460b      	mov	r3, r1
 800880e:	80fb      	strh	r3, [r7, #6]
 8008810:	4613      	mov	r3, r2
 8008812:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008814:	7979      	ldrb	r1, [r7, #5]
 8008816:	2300      	movs	r3, #0
 8008818:	9303      	str	r3, [sp, #12]
 800881a:	88fb      	ldrh	r3, [r7, #6]
 800881c:	9302      	str	r3, [sp, #8]
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	9301      	str	r3, [sp, #4]
 8008822:	2301      	movs	r3, #1
 8008824:	9300      	str	r3, [sp, #0]
 8008826:	2300      	movs	r3, #0
 8008828:	2201      	movs	r2, #1
 800882a:	68f8      	ldr	r0, [r7, #12]
 800882c:	f005 f99f 	bl	800db6e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008830:	2300      	movs	r3, #0

}
 8008832:	4618      	mov	r0, r3
 8008834:	3710      	adds	r7, #16
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}

0800883a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800883a:	b580      	push	{r7, lr}
 800883c:	b088      	sub	sp, #32
 800883e:	af04      	add	r7, sp, #16
 8008840:	60f8      	str	r0, [r7, #12]
 8008842:	60b9      	str	r1, [r7, #8]
 8008844:	4611      	mov	r1, r2
 8008846:	461a      	mov	r2, r3
 8008848:	460b      	mov	r3, r1
 800884a:	80fb      	strh	r3, [r7, #6]
 800884c:	4613      	mov	r3, r2
 800884e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008856:	2b00      	cmp	r3, #0
 8008858:	d001      	beq.n	800885e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800885a:	2300      	movs	r3, #0
 800885c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800885e:	7979      	ldrb	r1, [r7, #5]
 8008860:	7e3b      	ldrb	r3, [r7, #24]
 8008862:	9303      	str	r3, [sp, #12]
 8008864:	88fb      	ldrh	r3, [r7, #6]
 8008866:	9302      	str	r3, [sp, #8]
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	9301      	str	r3, [sp, #4]
 800886c:	2301      	movs	r3, #1
 800886e:	9300      	str	r3, [sp, #0]
 8008870:	2302      	movs	r3, #2
 8008872:	2200      	movs	r2, #0
 8008874:	68f8      	ldr	r0, [r7, #12]
 8008876:	f005 f97a 	bl	800db6e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800887a:	2300      	movs	r3, #0
}
 800887c:	4618      	mov	r0, r3
 800887e:	3710      	adds	r7, #16
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b088      	sub	sp, #32
 8008888:	af04      	add	r7, sp, #16
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	60b9      	str	r1, [r7, #8]
 800888e:	4611      	mov	r1, r2
 8008890:	461a      	mov	r2, r3
 8008892:	460b      	mov	r3, r1
 8008894:	80fb      	strh	r3, [r7, #6]
 8008896:	4613      	mov	r3, r2
 8008898:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800889a:	7979      	ldrb	r1, [r7, #5]
 800889c:	2300      	movs	r3, #0
 800889e:	9303      	str	r3, [sp, #12]
 80088a0:	88fb      	ldrh	r3, [r7, #6]
 80088a2:	9302      	str	r3, [sp, #8]
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	9301      	str	r3, [sp, #4]
 80088a8:	2301      	movs	r3, #1
 80088aa:	9300      	str	r3, [sp, #0]
 80088ac:	2302      	movs	r3, #2
 80088ae:	2201      	movs	r2, #1
 80088b0:	68f8      	ldr	r0, [r7, #12]
 80088b2:	f005 f95c 	bl	800db6e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80088b6:	2300      	movs	r3, #0
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3710      	adds	r7, #16
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b086      	sub	sp, #24
 80088c4:	af04      	add	r7, sp, #16
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	4608      	mov	r0, r1
 80088ca:	4611      	mov	r1, r2
 80088cc:	461a      	mov	r2, r3
 80088ce:	4603      	mov	r3, r0
 80088d0:	70fb      	strb	r3, [r7, #3]
 80088d2:	460b      	mov	r3, r1
 80088d4:	70bb      	strb	r3, [r7, #2]
 80088d6:	4613      	mov	r3, r2
 80088d8:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80088da:	7878      	ldrb	r0, [r7, #1]
 80088dc:	78ba      	ldrb	r2, [r7, #2]
 80088de:	78f9      	ldrb	r1, [r7, #3]
 80088e0:	8b3b      	ldrh	r3, [r7, #24]
 80088e2:	9302      	str	r3, [sp, #8]
 80088e4:	7d3b      	ldrb	r3, [r7, #20]
 80088e6:	9301      	str	r3, [sp, #4]
 80088e8:	7c3b      	ldrb	r3, [r7, #16]
 80088ea:	9300      	str	r3, [sp, #0]
 80088ec:	4603      	mov	r3, r0
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f005 f8ef 	bl	800dad2 <USBH_LL_OpenPipe>

  return USBH_OK;
 80088f4:	2300      	movs	r3, #0
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3708      	adds	r7, #8
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}

080088fe <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80088fe:	b580      	push	{r7, lr}
 8008900:	b082      	sub	sp, #8
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
 8008906:	460b      	mov	r3, r1
 8008908:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800890a:	78fb      	ldrb	r3, [r7, #3]
 800890c:	4619      	mov	r1, r3
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f005 f90e 	bl	800db30 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008914:	2300      	movs	r3, #0
}
 8008916:	4618      	mov	r0, r3
 8008918:	3708      	adds	r7, #8
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}

0800891e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800891e:	b580      	push	{r7, lr}
 8008920:	b084      	sub	sp, #16
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
 8008926:	460b      	mov	r3, r1
 8008928:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 f836 	bl	800899c <USBH_GetFreePipe>
 8008930:	4603      	mov	r3, r0
 8008932:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008934:	89fb      	ldrh	r3, [r7, #14]
 8008936:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800893a:	4293      	cmp	r3, r2
 800893c:	d00a      	beq.n	8008954 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800893e:	78fa      	ldrb	r2, [r7, #3]
 8008940:	89fb      	ldrh	r3, [r7, #14]
 8008942:	f003 030f 	and.w	r3, r3, #15
 8008946:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800894a:	6879      	ldr	r1, [r7, #4]
 800894c:	33e0      	adds	r3, #224	; 0xe0
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	440b      	add	r3, r1
 8008952:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008954:	89fb      	ldrh	r3, [r7, #14]
 8008956:	b2db      	uxtb	r3, r3
}
 8008958:	4618      	mov	r0, r3
 800895a:	3710      	adds	r7, #16
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}

08008960 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	460b      	mov	r3, r1
 800896a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800896c:	78fb      	ldrb	r3, [r7, #3]
 800896e:	2b0a      	cmp	r3, #10
 8008970:	d80d      	bhi.n	800898e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008972:	78fb      	ldrb	r3, [r7, #3]
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	33e0      	adds	r3, #224	; 0xe0
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	4413      	add	r3, r2
 800897c:	685a      	ldr	r2, [r3, #4]
 800897e:	78fb      	ldrb	r3, [r7, #3]
 8008980:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008984:	6879      	ldr	r1, [r7, #4]
 8008986:	33e0      	adds	r3, #224	; 0xe0
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	440b      	add	r3, r1
 800898c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800898e:	2300      	movs	r3, #0
}
 8008990:	4618      	mov	r0, r3
 8008992:	370c      	adds	r7, #12
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr

0800899c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800899c:	b480      	push	{r7}
 800899e:	b085      	sub	sp, #20
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80089a4:	2300      	movs	r3, #0
 80089a6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80089a8:	2300      	movs	r3, #0
 80089aa:	73fb      	strb	r3, [r7, #15]
 80089ac:	e00f      	b.n	80089ce <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80089ae:	7bfb      	ldrb	r3, [r7, #15]
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	33e0      	adds	r3, #224	; 0xe0
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	4413      	add	r3, r2
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d102      	bne.n	80089c8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80089c2:	7bfb      	ldrb	r3, [r7, #15]
 80089c4:	b29b      	uxth	r3, r3
 80089c6:	e007      	b.n	80089d8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80089c8:	7bfb      	ldrb	r3, [r7, #15]
 80089ca:	3301      	adds	r3, #1
 80089cc:	73fb      	strb	r3, [r7, #15]
 80089ce:	7bfb      	ldrb	r3, [r7, #15]
 80089d0:	2b0a      	cmp	r3, #10
 80089d2:	d9ec      	bls.n	80089ae <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80089d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3714      	adds	r7, #20
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	4603      	mov	r3, r0
 80089ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80089ee:	79fb      	ldrb	r3, [r7, #7]
 80089f0:	4a08      	ldr	r2, [pc, #32]	; (8008a14 <disk_status+0x30>)
 80089f2:	009b      	lsls	r3, r3, #2
 80089f4:	4413      	add	r3, r2
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	79fa      	ldrb	r2, [r7, #7]
 80089fc:	4905      	ldr	r1, [pc, #20]	; (8008a14 <disk_status+0x30>)
 80089fe:	440a      	add	r2, r1
 8008a00:	7a12      	ldrb	r2, [r2, #8]
 8008a02:	4610      	mov	r0, r2
 8008a04:	4798      	blx	r3
 8008a06:	4603      	mov	r3, r0
 8008a08:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3710      	adds	r7, #16
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}
 8008a14:	20000538 	.word	0x20000538

08008a18 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b084      	sub	sp, #16
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	4603      	mov	r3, r0
 8008a20:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008a22:	2300      	movs	r3, #0
 8008a24:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008a26:	79fb      	ldrb	r3, [r7, #7]
 8008a28:	4a0d      	ldr	r2, [pc, #52]	; (8008a60 <disk_initialize+0x48>)
 8008a2a:	5cd3      	ldrb	r3, [r2, r3]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d111      	bne.n	8008a54 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008a30:	79fb      	ldrb	r3, [r7, #7]
 8008a32:	4a0b      	ldr	r2, [pc, #44]	; (8008a60 <disk_initialize+0x48>)
 8008a34:	2101      	movs	r1, #1
 8008a36:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008a38:	79fb      	ldrb	r3, [r7, #7]
 8008a3a:	4a09      	ldr	r2, [pc, #36]	; (8008a60 <disk_initialize+0x48>)
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	4413      	add	r3, r2
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	79fa      	ldrb	r2, [r7, #7]
 8008a46:	4906      	ldr	r1, [pc, #24]	; (8008a60 <disk_initialize+0x48>)
 8008a48:	440a      	add	r2, r1
 8008a4a:	7a12      	ldrb	r2, [r2, #8]
 8008a4c:	4610      	mov	r0, r2
 8008a4e:	4798      	blx	r3
 8008a50:	4603      	mov	r3, r0
 8008a52:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3710      	adds	r7, #16
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop
 8008a60:	20000538 	.word	0x20000538

08008a64 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008a64:	b590      	push	{r4, r7, lr}
 8008a66:	b087      	sub	sp, #28
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	60b9      	str	r1, [r7, #8]
 8008a6c:	607a      	str	r2, [r7, #4]
 8008a6e:	603b      	str	r3, [r7, #0]
 8008a70:	4603      	mov	r3, r0
 8008a72:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008a74:	7bfb      	ldrb	r3, [r7, #15]
 8008a76:	4a0a      	ldr	r2, [pc, #40]	; (8008aa0 <disk_read+0x3c>)
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	4413      	add	r3, r2
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	689c      	ldr	r4, [r3, #8]
 8008a80:	7bfb      	ldrb	r3, [r7, #15]
 8008a82:	4a07      	ldr	r2, [pc, #28]	; (8008aa0 <disk_read+0x3c>)
 8008a84:	4413      	add	r3, r2
 8008a86:	7a18      	ldrb	r0, [r3, #8]
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	68b9      	ldr	r1, [r7, #8]
 8008a8e:	47a0      	blx	r4
 8008a90:	4603      	mov	r3, r0
 8008a92:	75fb      	strb	r3, [r7, #23]
  return res;
 8008a94:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	371c      	adds	r7, #28
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd90      	pop	{r4, r7, pc}
 8008a9e:	bf00      	nop
 8008aa0:	20000538 	.word	0x20000538

08008aa4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008aa4:	b590      	push	{r4, r7, lr}
 8008aa6:	b087      	sub	sp, #28
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	60b9      	str	r1, [r7, #8]
 8008aac:	607a      	str	r2, [r7, #4]
 8008aae:	603b      	str	r3, [r7, #0]
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008ab4:	7bfb      	ldrb	r3, [r7, #15]
 8008ab6:	4a0a      	ldr	r2, [pc, #40]	; (8008ae0 <disk_write+0x3c>)
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	4413      	add	r3, r2
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	68dc      	ldr	r4, [r3, #12]
 8008ac0:	7bfb      	ldrb	r3, [r7, #15]
 8008ac2:	4a07      	ldr	r2, [pc, #28]	; (8008ae0 <disk_write+0x3c>)
 8008ac4:	4413      	add	r3, r2
 8008ac6:	7a18      	ldrb	r0, [r3, #8]
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	68b9      	ldr	r1, [r7, #8]
 8008ace:	47a0      	blx	r4
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	75fb      	strb	r3, [r7, #23]
  return res;
 8008ad4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	371c      	adds	r7, #28
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd90      	pop	{r4, r7, pc}
 8008ade:	bf00      	nop
 8008ae0:	20000538 	.word	0x20000538

08008ae4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	4603      	mov	r3, r0
 8008aec:	603a      	str	r2, [r7, #0]
 8008aee:	71fb      	strb	r3, [r7, #7]
 8008af0:	460b      	mov	r3, r1
 8008af2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008af4:	79fb      	ldrb	r3, [r7, #7]
 8008af6:	4a09      	ldr	r2, [pc, #36]	; (8008b1c <disk_ioctl+0x38>)
 8008af8:	009b      	lsls	r3, r3, #2
 8008afa:	4413      	add	r3, r2
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	691b      	ldr	r3, [r3, #16]
 8008b00:	79fa      	ldrb	r2, [r7, #7]
 8008b02:	4906      	ldr	r1, [pc, #24]	; (8008b1c <disk_ioctl+0x38>)
 8008b04:	440a      	add	r2, r1
 8008b06:	7a10      	ldrb	r0, [r2, #8]
 8008b08:	79b9      	ldrb	r1, [r7, #6]
 8008b0a:	683a      	ldr	r2, [r7, #0]
 8008b0c:	4798      	blx	r3
 8008b0e:	4603      	mov	r3, r0
 8008b10:	73fb      	strb	r3, [r7, #15]
  return res;
 8008b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3710      	adds	r7, #16
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}
 8008b1c:	20000538 	.word	0x20000538

08008b20 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008b20:	b480      	push	{r7}
 8008b22:	b085      	sub	sp, #20
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008b30:	89fb      	ldrh	r3, [r7, #14]
 8008b32:	021b      	lsls	r3, r3, #8
 8008b34:	b21a      	sxth	r2, r3
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	b21b      	sxth	r3, r3
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	b21b      	sxth	r3, r3
 8008b40:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008b42:	89fb      	ldrh	r3, [r7, #14]
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3714      	adds	r7, #20
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008b50:	b480      	push	{r7}
 8008b52:	b085      	sub	sp, #20
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	3303      	adds	r3, #3
 8008b5c:	781b      	ldrb	r3, [r3, #0]
 8008b5e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	021b      	lsls	r3, r3, #8
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	3202      	adds	r2, #2
 8008b68:	7812      	ldrb	r2, [r2, #0]
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	021b      	lsls	r3, r3, #8
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	3201      	adds	r2, #1
 8008b76:	7812      	ldrb	r2, [r2, #0]
 8008b78:	4313      	orrs	r3, r2
 8008b7a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	021b      	lsls	r3, r3, #8
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	7812      	ldrb	r2, [r2, #0]
 8008b84:	4313      	orrs	r3, r2
 8008b86:	60fb      	str	r3, [r7, #12]
	return rv;
 8008b88:	68fb      	ldr	r3, [r7, #12]
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3714      	adds	r7, #20
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b94:	4770      	bx	lr

08008b96 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 8008b96:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008b9a:	b08d      	sub	sp, #52	; 0x34
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6278      	str	r0, [r7, #36]	; 0x24
	QWORD rv;

	rv = ptr[7];
 8008ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba2:	3307      	adds	r3, #7
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	b2da      	uxtb	r2, r3
 8008ba8:	f04f 0300 	mov.w	r3, #0
 8008bac:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[6];
 8008bb0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008bb4:	f04f 0000 	mov.w	r0, #0
 8008bb8:	f04f 0100 	mov.w	r1, #0
 8008bbc:	0219      	lsls	r1, r3, #8
 8008bbe:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8008bc2:	0210      	lsls	r0, r2, #8
 8008bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc6:	3306      	adds	r3, #6
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	b2da      	uxtb	r2, r3
 8008bcc:	f04f 0300 	mov.w	r3, #0
 8008bd0:	ea40 0402 	orr.w	r4, r0, r2
 8008bd4:	ea41 0503 	orr.w	r5, r1, r3
 8008bd8:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[5];
 8008bdc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008be0:	f04f 0000 	mov.w	r0, #0
 8008be4:	f04f 0100 	mov.w	r1, #0
 8008be8:	0219      	lsls	r1, r3, #8
 8008bea:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8008bee:	0210      	lsls	r0, r2, #8
 8008bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf2:	3305      	adds	r3, #5
 8008bf4:	781b      	ldrb	r3, [r3, #0]
 8008bf6:	b2da      	uxtb	r2, r3
 8008bf8:	f04f 0300 	mov.w	r3, #0
 8008bfc:	ea40 0802 	orr.w	r8, r0, r2
 8008c00:	ea41 0903 	orr.w	r9, r1, r3
 8008c04:	e9c7 890a 	strd	r8, r9, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[4];
 8008c08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008c0c:	f04f 0000 	mov.w	r0, #0
 8008c10:	f04f 0100 	mov.w	r1, #0
 8008c14:	0219      	lsls	r1, r3, #8
 8008c16:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8008c1a:	0210      	lsls	r0, r2, #8
 8008c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1e:	3304      	adds	r3, #4
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	b2da      	uxtb	r2, r3
 8008c24:	f04f 0300 	mov.w	r3, #0
 8008c28:	ea40 0402 	orr.w	r4, r0, r2
 8008c2c:	61bc      	str	r4, [r7, #24]
 8008c2e:	430b      	orrs	r3, r1
 8008c30:	61fb      	str	r3, [r7, #28]
 8008c32:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8008c36:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[3];
 8008c3a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008c3e:	f04f 0200 	mov.w	r2, #0
 8008c42:	f04f 0300 	mov.w	r3, #0
 8008c46:	020b      	lsls	r3, r1, #8
 8008c48:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008c4c:	0202      	lsls	r2, r0, #8
 8008c4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008c50:	3103      	adds	r1, #3
 8008c52:	7809      	ldrb	r1, [r1, #0]
 8008c54:	b2c8      	uxtb	r0, r1
 8008c56:	f04f 0100 	mov.w	r1, #0
 8008c5a:	ea42 0400 	orr.w	r4, r2, r0
 8008c5e:	613c      	str	r4, [r7, #16]
 8008c60:	430b      	orrs	r3, r1
 8008c62:	617b      	str	r3, [r7, #20]
 8008c64:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8008c68:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[2];
 8008c6c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008c70:	f04f 0200 	mov.w	r2, #0
 8008c74:	f04f 0300 	mov.w	r3, #0
 8008c78:	020b      	lsls	r3, r1, #8
 8008c7a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008c7e:	0202      	lsls	r2, r0, #8
 8008c80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008c82:	3102      	adds	r1, #2
 8008c84:	7809      	ldrb	r1, [r1, #0]
 8008c86:	b2c8      	uxtb	r0, r1
 8008c88:	f04f 0100 	mov.w	r1, #0
 8008c8c:	ea42 0400 	orr.w	r4, r2, r0
 8008c90:	60bc      	str	r4, [r7, #8]
 8008c92:	430b      	orrs	r3, r1
 8008c94:	60fb      	str	r3, [r7, #12]
 8008c96:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8008c9a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[1];
 8008c9e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008ca2:	f04f 0200 	mov.w	r2, #0
 8008ca6:	f04f 0300 	mov.w	r3, #0
 8008caa:	020b      	lsls	r3, r1, #8
 8008cac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008cb0:	0202      	lsls	r2, r0, #8
 8008cb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008cb4:	3101      	adds	r1, #1
 8008cb6:	7809      	ldrb	r1, [r1, #0]
 8008cb8:	b2c8      	uxtb	r0, r1
 8008cba:	f04f 0100 	mov.w	r1, #0
 8008cbe:	ea42 0400 	orr.w	r4, r2, r0
 8008cc2:	603c      	str	r4, [r7, #0]
 8008cc4:	430b      	orrs	r3, r1
 8008cc6:	607b      	str	r3, [r7, #4]
 8008cc8:	e9d7 3400 	ldrd	r3, r4, [r7]
 8008ccc:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[0];
 8008cd0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008cd4:	f04f 0200 	mov.w	r2, #0
 8008cd8:	f04f 0300 	mov.w	r3, #0
 8008cdc:	020b      	lsls	r3, r1, #8
 8008cde:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008ce2:	0202      	lsls	r2, r0, #8
 8008ce4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008ce6:	7809      	ldrb	r1, [r1, #0]
 8008ce8:	b2c8      	uxtb	r0, r1
 8008cea:	f04f 0100 	mov.w	r1, #0
 8008cee:	ea42 0a00 	orr.w	sl, r2, r0
 8008cf2:	ea43 0b01 	orr.w	fp, r3, r1
 8008cf6:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
	return rv;
 8008cfa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
}
 8008cfe:	4610      	mov	r0, r2
 8008d00:	4619      	mov	r1, r3
 8008d02:	3734      	adds	r7, #52	; 0x34
 8008d04:	46bd      	mov	sp, r7
 8008d06:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008d0a:	4770      	bx	lr

08008d0c <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b083      	sub	sp, #12
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	460b      	mov	r3, r1
 8008d16:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	1c5a      	adds	r2, r3, #1
 8008d1c:	607a      	str	r2, [r7, #4]
 8008d1e:	887a      	ldrh	r2, [r7, #2]
 8008d20:	b2d2      	uxtb	r2, r2
 8008d22:	701a      	strb	r2, [r3, #0]
 8008d24:	887b      	ldrh	r3, [r7, #2]
 8008d26:	0a1b      	lsrs	r3, r3, #8
 8008d28:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	1c5a      	adds	r2, r3, #1
 8008d2e:	607a      	str	r2, [r7, #4]
 8008d30:	887a      	ldrh	r2, [r7, #2]
 8008d32:	b2d2      	uxtb	r2, r2
 8008d34:	701a      	strb	r2, [r3, #0]
}
 8008d36:	bf00      	nop
 8008d38:	370c      	adds	r7, #12
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d40:	4770      	bx	lr

08008d42 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008d42:	b480      	push	{r7}
 8008d44:	b083      	sub	sp, #12
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	6078      	str	r0, [r7, #4]
 8008d4a:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	1c5a      	adds	r2, r3, #1
 8008d50:	607a      	str	r2, [r7, #4]
 8008d52:	683a      	ldr	r2, [r7, #0]
 8008d54:	b2d2      	uxtb	r2, r2
 8008d56:	701a      	strb	r2, [r3, #0]
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	0a1b      	lsrs	r3, r3, #8
 8008d5c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	1c5a      	adds	r2, r3, #1
 8008d62:	607a      	str	r2, [r7, #4]
 8008d64:	683a      	ldr	r2, [r7, #0]
 8008d66:	b2d2      	uxtb	r2, r2
 8008d68:	701a      	strb	r2, [r3, #0]
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	0a1b      	lsrs	r3, r3, #8
 8008d6e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	1c5a      	adds	r2, r3, #1
 8008d74:	607a      	str	r2, [r7, #4]
 8008d76:	683a      	ldr	r2, [r7, #0]
 8008d78:	b2d2      	uxtb	r2, r2
 8008d7a:	701a      	strb	r2, [r3, #0]
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	0a1b      	lsrs	r3, r3, #8
 8008d80:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	1c5a      	adds	r2, r3, #1
 8008d86:	607a      	str	r2, [r7, #4]
 8008d88:	683a      	ldr	r2, [r7, #0]
 8008d8a:	b2d2      	uxtb	r2, r2
 8008d8c:	701a      	strb	r2, [r3, #0]
}
 8008d8e:	bf00      	nop
 8008d90:	370c      	adds	r7, #12
 8008d92:	46bd      	mov	sp, r7
 8008d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d98:	4770      	bx	lr

08008d9a <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 8008d9a:	b480      	push	{r7}
 8008d9c:	b085      	sub	sp, #20
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	60f8      	str	r0, [r7, #12]
 8008da2:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	1c5a      	adds	r2, r3, #1
 8008daa:	60fa      	str	r2, [r7, #12]
 8008dac:	783a      	ldrb	r2, [r7, #0]
 8008dae:	701a      	strb	r2, [r3, #0]
 8008db0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008db4:	f04f 0200 	mov.w	r2, #0
 8008db8:	f04f 0300 	mov.w	r3, #0
 8008dbc:	0a02      	lsrs	r2, r0, #8
 8008dbe:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008dc2:	0a0b      	lsrs	r3, r1, #8
 8008dc4:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	1c5a      	adds	r2, r3, #1
 8008dcc:	60fa      	str	r2, [r7, #12]
 8008dce:	783a      	ldrb	r2, [r7, #0]
 8008dd0:	701a      	strb	r2, [r3, #0]
 8008dd2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008dd6:	f04f 0200 	mov.w	r2, #0
 8008dda:	f04f 0300 	mov.w	r3, #0
 8008dde:	0a02      	lsrs	r2, r0, #8
 8008de0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008de4:	0a0b      	lsrs	r3, r1, #8
 8008de6:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	1c5a      	adds	r2, r3, #1
 8008dee:	60fa      	str	r2, [r7, #12]
 8008df0:	783a      	ldrb	r2, [r7, #0]
 8008df2:	701a      	strb	r2, [r3, #0]
 8008df4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008df8:	f04f 0200 	mov.w	r2, #0
 8008dfc:	f04f 0300 	mov.w	r3, #0
 8008e00:	0a02      	lsrs	r2, r0, #8
 8008e02:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008e06:	0a0b      	lsrs	r3, r1, #8
 8008e08:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	1c5a      	adds	r2, r3, #1
 8008e10:	60fa      	str	r2, [r7, #12]
 8008e12:	783a      	ldrb	r2, [r7, #0]
 8008e14:	701a      	strb	r2, [r3, #0]
 8008e16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e1a:	f04f 0200 	mov.w	r2, #0
 8008e1e:	f04f 0300 	mov.w	r3, #0
 8008e22:	0a02      	lsrs	r2, r0, #8
 8008e24:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008e28:	0a0b      	lsrs	r3, r1, #8
 8008e2a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	1c5a      	adds	r2, r3, #1
 8008e32:	60fa      	str	r2, [r7, #12]
 8008e34:	783a      	ldrb	r2, [r7, #0]
 8008e36:	701a      	strb	r2, [r3, #0]
 8008e38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e3c:	f04f 0200 	mov.w	r2, #0
 8008e40:	f04f 0300 	mov.w	r3, #0
 8008e44:	0a02      	lsrs	r2, r0, #8
 8008e46:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008e4a:	0a0b      	lsrs	r3, r1, #8
 8008e4c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	1c5a      	adds	r2, r3, #1
 8008e54:	60fa      	str	r2, [r7, #12]
 8008e56:	783a      	ldrb	r2, [r7, #0]
 8008e58:	701a      	strb	r2, [r3, #0]
 8008e5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e5e:	f04f 0200 	mov.w	r2, #0
 8008e62:	f04f 0300 	mov.w	r3, #0
 8008e66:	0a02      	lsrs	r2, r0, #8
 8008e68:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008e6c:	0a0b      	lsrs	r3, r1, #8
 8008e6e:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	1c5a      	adds	r2, r3, #1
 8008e76:	60fa      	str	r2, [r7, #12]
 8008e78:	783a      	ldrb	r2, [r7, #0]
 8008e7a:	701a      	strb	r2, [r3, #0]
 8008e7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e80:	f04f 0200 	mov.w	r2, #0
 8008e84:	f04f 0300 	mov.w	r3, #0
 8008e88:	0a02      	lsrs	r2, r0, #8
 8008e8a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008e8e:	0a0b      	lsrs	r3, r1, #8
 8008e90:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	1c5a      	adds	r2, r3, #1
 8008e98:	60fa      	str	r2, [r7, #12]
 8008e9a:	783a      	ldrb	r2, [r7, #0]
 8008e9c:	701a      	strb	r2, [r3, #0]
}
 8008e9e:	bf00      	nop
 8008ea0:	3714      	adds	r7, #20
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea8:	4770      	bx	lr

08008eaa <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008eaa:	b480      	push	{r7}
 8008eac:	b087      	sub	sp, #28
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	60f8      	str	r0, [r7, #12]
 8008eb2:	60b9      	str	r1, [r7, #8]
 8008eb4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d00d      	beq.n	8008ee0 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008ec4:	693a      	ldr	r2, [r7, #16]
 8008ec6:	1c53      	adds	r3, r2, #1
 8008ec8:	613b      	str	r3, [r7, #16]
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	1c59      	adds	r1, r3, #1
 8008ece:	6179      	str	r1, [r7, #20]
 8008ed0:	7812      	ldrb	r2, [r2, #0]
 8008ed2:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	3b01      	subs	r3, #1
 8008ed8:	607b      	str	r3, [r7, #4]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d1f1      	bne.n	8008ec4 <mem_cpy+0x1a>
	}
}
 8008ee0:	bf00      	nop
 8008ee2:	371c      	adds	r7, #28
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr

08008eec <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008eec:	b480      	push	{r7}
 8008eee:	b087      	sub	sp, #28
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	60f8      	str	r0, [r7, #12]
 8008ef4:	60b9      	str	r1, [r7, #8]
 8008ef6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	1c5a      	adds	r2, r3, #1
 8008f00:	617a      	str	r2, [r7, #20]
 8008f02:	68ba      	ldr	r2, [r7, #8]
 8008f04:	b2d2      	uxtb	r2, r2
 8008f06:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	3b01      	subs	r3, #1
 8008f0c:	607b      	str	r3, [r7, #4]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d1f3      	bne.n	8008efc <mem_set+0x10>
}
 8008f14:	bf00      	nop
 8008f16:	bf00      	nop
 8008f18:	371c      	adds	r7, #28
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr

08008f22 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008f22:	b480      	push	{r7}
 8008f24:	b089      	sub	sp, #36	; 0x24
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	60f8      	str	r0, [r7, #12]
 8008f2a:	60b9      	str	r1, [r7, #8]
 8008f2c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	61fb      	str	r3, [r7, #28]
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008f36:	2300      	movs	r3, #0
 8008f38:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008f3a:	69fb      	ldr	r3, [r7, #28]
 8008f3c:	1c5a      	adds	r2, r3, #1
 8008f3e:	61fa      	str	r2, [r7, #28]
 8008f40:	781b      	ldrb	r3, [r3, #0]
 8008f42:	4619      	mov	r1, r3
 8008f44:	69bb      	ldr	r3, [r7, #24]
 8008f46:	1c5a      	adds	r2, r3, #1
 8008f48:	61ba      	str	r2, [r7, #24]
 8008f4a:	781b      	ldrb	r3, [r3, #0]
 8008f4c:	1acb      	subs	r3, r1, r3
 8008f4e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	3b01      	subs	r3, #1
 8008f54:	607b      	str	r3, [r7, #4]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d002      	beq.n	8008f62 <mem_cmp+0x40>
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d0eb      	beq.n	8008f3a <mem_cmp+0x18>

	return r;
 8008f62:	697b      	ldr	r3, [r7, #20]
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3724      	adds	r7, #36	; 0x24
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr

08008f70 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008f70:	b480      	push	{r7}
 8008f72:	b083      	sub	sp, #12
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008f7a:	e002      	b.n	8008f82 <chk_chr+0x12>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	3301      	adds	r3, #1
 8008f80:	607b      	str	r3, [r7, #4]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	781b      	ldrb	r3, [r3, #0]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d005      	beq.n	8008f96 <chk_chr+0x26>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	461a      	mov	r2, r3
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d1f2      	bne.n	8008f7c <chk_chr+0xc>
	return *str;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	781b      	ldrb	r3, [r3, #0]
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	370c      	adds	r7, #12
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa4:	4770      	bx	lr
	...

08008fa8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b085      	sub	sp, #20
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	60bb      	str	r3, [r7, #8]
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	60fb      	str	r3, [r7, #12]
 8008fba:	e029      	b.n	8009010 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008fbc:	4a27      	ldr	r2, [pc, #156]	; (800905c <chk_lock+0xb4>)
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	011b      	lsls	r3, r3, #4
 8008fc2:	4413      	add	r3, r2
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d01d      	beq.n	8009006 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008fca:	4a24      	ldr	r2, [pc, #144]	; (800905c <chk_lock+0xb4>)
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	011b      	lsls	r3, r3, #4
 8008fd0:	4413      	add	r3, r2
 8008fd2:	681a      	ldr	r2, [r3, #0]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d116      	bne.n	800900a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008fdc:	4a1f      	ldr	r2, [pc, #124]	; (800905c <chk_lock+0xb4>)
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	011b      	lsls	r3, r3, #4
 8008fe2:	4413      	add	r3, r2
 8008fe4:	3304      	adds	r3, #4
 8008fe6:	681a      	ldr	r2, [r3, #0]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d10c      	bne.n	800900a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008ff0:	4a1a      	ldr	r2, [pc, #104]	; (800905c <chk_lock+0xb4>)
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	011b      	lsls	r3, r3, #4
 8008ff6:	4413      	add	r3, r2
 8008ff8:	3308      	adds	r3, #8
 8008ffa:	681a      	ldr	r2, [r3, #0]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 8009000:	429a      	cmp	r2, r3
 8009002:	d102      	bne.n	800900a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009004:	e007      	b.n	8009016 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009006:	2301      	movs	r3, #1
 8009008:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	3301      	adds	r3, #1
 800900e:	60fb      	str	r3, [r7, #12]
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	2b01      	cmp	r3, #1
 8009014:	d9d2      	bls.n	8008fbc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2b02      	cmp	r3, #2
 800901a:	d109      	bne.n	8009030 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d102      	bne.n	8009028 <chk_lock+0x80>
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	2b02      	cmp	r3, #2
 8009026:	d101      	bne.n	800902c <chk_lock+0x84>
 8009028:	2300      	movs	r3, #0
 800902a:	e010      	b.n	800904e <chk_lock+0xa6>
 800902c:	2312      	movs	r3, #18
 800902e:	e00e      	b.n	800904e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d108      	bne.n	8009048 <chk_lock+0xa0>
 8009036:	4a09      	ldr	r2, [pc, #36]	; (800905c <chk_lock+0xb4>)
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	011b      	lsls	r3, r3, #4
 800903c:	4413      	add	r3, r2
 800903e:	330c      	adds	r3, #12
 8009040:	881b      	ldrh	r3, [r3, #0]
 8009042:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009046:	d101      	bne.n	800904c <chk_lock+0xa4>
 8009048:	2310      	movs	r3, #16
 800904a:	e000      	b.n	800904e <chk_lock+0xa6>
 800904c:	2300      	movs	r3, #0
}
 800904e:	4618      	mov	r0, r3
 8009050:	3714      	adds	r7, #20
 8009052:	46bd      	mov	sp, r7
 8009054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009058:	4770      	bx	lr
 800905a:	bf00      	nop
 800905c:	200000b8 	.word	0x200000b8

08009060 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009060:	b480      	push	{r7}
 8009062:	b083      	sub	sp, #12
 8009064:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009066:	2300      	movs	r3, #0
 8009068:	607b      	str	r3, [r7, #4]
 800906a:	e002      	b.n	8009072 <enq_lock+0x12>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	3301      	adds	r3, #1
 8009070:	607b      	str	r3, [r7, #4]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2b01      	cmp	r3, #1
 8009076:	d806      	bhi.n	8009086 <enq_lock+0x26>
 8009078:	4a09      	ldr	r2, [pc, #36]	; (80090a0 <enq_lock+0x40>)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	011b      	lsls	r3, r3, #4
 800907e:	4413      	add	r3, r2
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d1f2      	bne.n	800906c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2b02      	cmp	r3, #2
 800908a:	bf14      	ite	ne
 800908c:	2301      	movne	r3, #1
 800908e:	2300      	moveq	r3, #0
 8009090:	b2db      	uxtb	r3, r3
}
 8009092:	4618      	mov	r0, r3
 8009094:	370c      	adds	r7, #12
 8009096:	46bd      	mov	sp, r7
 8009098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909c:	4770      	bx	lr
 800909e:	bf00      	nop
 80090a0:	200000b8 	.word	0x200000b8

080090a4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b085      	sub	sp, #20
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80090ae:	2300      	movs	r3, #0
 80090b0:	60fb      	str	r3, [r7, #12]
 80090b2:	e01f      	b.n	80090f4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80090b4:	4a41      	ldr	r2, [pc, #260]	; (80091bc <inc_lock+0x118>)
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	011b      	lsls	r3, r3, #4
 80090ba:	4413      	add	r3, r2
 80090bc:	681a      	ldr	r2, [r3, #0]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d113      	bne.n	80090ee <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80090c6:	4a3d      	ldr	r2, [pc, #244]	; (80091bc <inc_lock+0x118>)
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	011b      	lsls	r3, r3, #4
 80090cc:	4413      	add	r3, r2
 80090ce:	3304      	adds	r3, #4
 80090d0:	681a      	ldr	r2, [r3, #0]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d109      	bne.n	80090ee <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80090da:	4a38      	ldr	r2, [pc, #224]	; (80091bc <inc_lock+0x118>)
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	011b      	lsls	r3, r3, #4
 80090e0:	4413      	add	r3, r2
 80090e2:	3308      	adds	r3, #8
 80090e4:	681a      	ldr	r2, [r3, #0]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d006      	beq.n	80090fc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	3301      	adds	r3, #1
 80090f2:	60fb      	str	r3, [r7, #12]
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d9dc      	bls.n	80090b4 <inc_lock+0x10>
 80090fa:	e000      	b.n	80090fe <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80090fc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2b02      	cmp	r3, #2
 8009102:	d132      	bne.n	800916a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009104:	2300      	movs	r3, #0
 8009106:	60fb      	str	r3, [r7, #12]
 8009108:	e002      	b.n	8009110 <inc_lock+0x6c>
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	3301      	adds	r3, #1
 800910e:	60fb      	str	r3, [r7, #12]
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2b01      	cmp	r3, #1
 8009114:	d806      	bhi.n	8009124 <inc_lock+0x80>
 8009116:	4a29      	ldr	r2, [pc, #164]	; (80091bc <inc_lock+0x118>)
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	011b      	lsls	r3, r3, #4
 800911c:	4413      	add	r3, r2
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d1f2      	bne.n	800910a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2b02      	cmp	r3, #2
 8009128:	d101      	bne.n	800912e <inc_lock+0x8a>
 800912a:	2300      	movs	r3, #0
 800912c:	e040      	b.n	80091b0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681a      	ldr	r2, [r3, #0]
 8009132:	4922      	ldr	r1, [pc, #136]	; (80091bc <inc_lock+0x118>)
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	011b      	lsls	r3, r3, #4
 8009138:	440b      	add	r3, r1
 800913a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	689a      	ldr	r2, [r3, #8]
 8009140:	491e      	ldr	r1, [pc, #120]	; (80091bc <inc_lock+0x118>)
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	011b      	lsls	r3, r3, #4
 8009146:	440b      	add	r3, r1
 8009148:	3304      	adds	r3, #4
 800914a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009150:	491a      	ldr	r1, [pc, #104]	; (80091bc <inc_lock+0x118>)
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	011b      	lsls	r3, r3, #4
 8009156:	440b      	add	r3, r1
 8009158:	3308      	adds	r3, #8
 800915a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800915c:	4a17      	ldr	r2, [pc, #92]	; (80091bc <inc_lock+0x118>)
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	011b      	lsls	r3, r3, #4
 8009162:	4413      	add	r3, r2
 8009164:	330c      	adds	r3, #12
 8009166:	2200      	movs	r2, #0
 8009168:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d009      	beq.n	8009184 <inc_lock+0xe0>
 8009170:	4a12      	ldr	r2, [pc, #72]	; (80091bc <inc_lock+0x118>)
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	011b      	lsls	r3, r3, #4
 8009176:	4413      	add	r3, r2
 8009178:	330c      	adds	r3, #12
 800917a:	881b      	ldrh	r3, [r3, #0]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d001      	beq.n	8009184 <inc_lock+0xe0>
 8009180:	2300      	movs	r3, #0
 8009182:	e015      	b.n	80091b0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d108      	bne.n	800919c <inc_lock+0xf8>
 800918a:	4a0c      	ldr	r2, [pc, #48]	; (80091bc <inc_lock+0x118>)
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	011b      	lsls	r3, r3, #4
 8009190:	4413      	add	r3, r2
 8009192:	330c      	adds	r3, #12
 8009194:	881b      	ldrh	r3, [r3, #0]
 8009196:	3301      	adds	r3, #1
 8009198:	b29a      	uxth	r2, r3
 800919a:	e001      	b.n	80091a0 <inc_lock+0xfc>
 800919c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80091a0:	4906      	ldr	r1, [pc, #24]	; (80091bc <inc_lock+0x118>)
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	011b      	lsls	r3, r3, #4
 80091a6:	440b      	add	r3, r1
 80091a8:	330c      	adds	r3, #12
 80091aa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	3301      	adds	r3, #1
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3714      	adds	r7, #20
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr
 80091bc:	200000b8 	.word	0x200000b8

080091c0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b085      	sub	sp, #20
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	3b01      	subs	r3, #1
 80091cc:	607b      	str	r3, [r7, #4]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d825      	bhi.n	8009220 <dec_lock+0x60>
		n = Files[i].ctr;
 80091d4:	4a17      	ldr	r2, [pc, #92]	; (8009234 <dec_lock+0x74>)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	011b      	lsls	r3, r3, #4
 80091da:	4413      	add	r3, r2
 80091dc:	330c      	adds	r3, #12
 80091de:	881b      	ldrh	r3, [r3, #0]
 80091e0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80091e2:	89fb      	ldrh	r3, [r7, #14]
 80091e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091e8:	d101      	bne.n	80091ee <dec_lock+0x2e>
 80091ea:	2300      	movs	r3, #0
 80091ec:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80091ee:	89fb      	ldrh	r3, [r7, #14]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d002      	beq.n	80091fa <dec_lock+0x3a>
 80091f4:	89fb      	ldrh	r3, [r7, #14]
 80091f6:	3b01      	subs	r3, #1
 80091f8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80091fa:	4a0e      	ldr	r2, [pc, #56]	; (8009234 <dec_lock+0x74>)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	011b      	lsls	r3, r3, #4
 8009200:	4413      	add	r3, r2
 8009202:	330c      	adds	r3, #12
 8009204:	89fa      	ldrh	r2, [r7, #14]
 8009206:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009208:	89fb      	ldrh	r3, [r7, #14]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d105      	bne.n	800921a <dec_lock+0x5a>
 800920e:	4a09      	ldr	r2, [pc, #36]	; (8009234 <dec_lock+0x74>)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	011b      	lsls	r3, r3, #4
 8009214:	4413      	add	r3, r2
 8009216:	2200      	movs	r2, #0
 8009218:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800921a:	2300      	movs	r3, #0
 800921c:	737b      	strb	r3, [r7, #13]
 800921e:	e001      	b.n	8009224 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009220:	2302      	movs	r3, #2
 8009222:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009224:	7b7b      	ldrb	r3, [r7, #13]
}
 8009226:	4618      	mov	r0, r3
 8009228:	3714      	adds	r7, #20
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr
 8009232:	bf00      	nop
 8009234:	200000b8 	.word	0x200000b8

08009238 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009238:	b480      	push	{r7}
 800923a:	b085      	sub	sp, #20
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009240:	2300      	movs	r3, #0
 8009242:	60fb      	str	r3, [r7, #12]
 8009244:	e010      	b.n	8009268 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009246:	4a0d      	ldr	r2, [pc, #52]	; (800927c <clear_lock+0x44>)
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	011b      	lsls	r3, r3, #4
 800924c:	4413      	add	r3, r2
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	687a      	ldr	r2, [r7, #4]
 8009252:	429a      	cmp	r2, r3
 8009254:	d105      	bne.n	8009262 <clear_lock+0x2a>
 8009256:	4a09      	ldr	r2, [pc, #36]	; (800927c <clear_lock+0x44>)
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	011b      	lsls	r3, r3, #4
 800925c:	4413      	add	r3, r2
 800925e:	2200      	movs	r2, #0
 8009260:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	3301      	adds	r3, #1
 8009266:	60fb      	str	r3, [r7, #12]
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2b01      	cmp	r3, #1
 800926c:	d9eb      	bls.n	8009246 <clear_lock+0xe>
	}
}
 800926e:	bf00      	nop
 8009270:	bf00      	nop
 8009272:	3714      	adds	r7, #20
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr
 800927c:	200000b8 	.word	0x200000b8

08009280 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b086      	sub	sp, #24
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009288:	2300      	movs	r3, #0
 800928a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	78db      	ldrb	r3, [r3, #3]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d034      	beq.n	80092fe <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009298:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	7858      	ldrb	r0, [r3, #1]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80092a4:	2301      	movs	r3, #1
 80092a6:	697a      	ldr	r2, [r7, #20]
 80092a8:	f7ff fbfc 	bl	8008aa4 <disk_write>
 80092ac:	4603      	mov	r3, r0
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d002      	beq.n	80092b8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80092b2:	2301      	movs	r3, #1
 80092b4:	73fb      	strb	r3, [r7, #15]
 80092b6:	e022      	b.n	80092fe <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2200      	movs	r2, #0
 80092bc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c2:	697a      	ldr	r2, [r7, #20]
 80092c4:	1ad2      	subs	r2, r2, r3
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d217      	bcs.n	80092fe <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	789b      	ldrb	r3, [r3, #2]
 80092d2:	613b      	str	r3, [r7, #16]
 80092d4:	e010      	b.n	80092f8 <sync_window+0x78>
					wsect += fs->fsize;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092da:	697a      	ldr	r2, [r7, #20]
 80092dc:	4413      	add	r3, r2
 80092de:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	7858      	ldrb	r0, [r3, #1]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80092ea:	2301      	movs	r3, #1
 80092ec:	697a      	ldr	r2, [r7, #20]
 80092ee:	f7ff fbd9 	bl	8008aa4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	3b01      	subs	r3, #1
 80092f6:	613b      	str	r3, [r7, #16]
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	2b01      	cmp	r3, #1
 80092fc:	d8eb      	bhi.n	80092d6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80092fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009300:	4618      	mov	r0, r3
 8009302:	3718      	adds	r7, #24
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b084      	sub	sp, #16
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
 8009310:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009312:	2300      	movs	r3, #0
 8009314:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800931a:	683a      	ldr	r2, [r7, #0]
 800931c:	429a      	cmp	r2, r3
 800931e:	d01b      	beq.n	8009358 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f7ff ffad 	bl	8009280 <sync_window>
 8009326:	4603      	mov	r3, r0
 8009328:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800932a:	7bfb      	ldrb	r3, [r7, #15]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d113      	bne.n	8009358 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	7858      	ldrb	r0, [r3, #1]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800933a:	2301      	movs	r3, #1
 800933c:	683a      	ldr	r2, [r7, #0]
 800933e:	f7ff fb91 	bl	8008a64 <disk_read>
 8009342:	4603      	mov	r3, r0
 8009344:	2b00      	cmp	r3, #0
 8009346:	d004      	beq.n	8009352 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009348:	f04f 33ff 	mov.w	r3, #4294967295
 800934c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800934e:	2301      	movs	r3, #1
 8009350:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	683a      	ldr	r2, [r7, #0]
 8009356:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 8009358:	7bfb      	ldrb	r3, [r7, #15]
}
 800935a:	4618      	mov	r0, r3
 800935c:	3710      	adds	r7, #16
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
	...

08009364 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b084      	sub	sp, #16
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f7ff ff87 	bl	8009280 <sync_window>
 8009372:	4603      	mov	r3, r0
 8009374:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009376:	7bfb      	ldrb	r3, [r7, #15]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d159      	bne.n	8009430 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	781b      	ldrb	r3, [r3, #0]
 8009380:	2b03      	cmp	r3, #3
 8009382:	d149      	bne.n	8009418 <sync_fs+0xb4>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	791b      	ldrb	r3, [r3, #4]
 8009388:	2b01      	cmp	r3, #1
 800938a:	d145      	bne.n	8009418 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	899b      	ldrh	r3, [r3, #12]
 8009396:	461a      	mov	r2, r3
 8009398:	2100      	movs	r1, #0
 800939a:	f7ff fda7 	bl	8008eec <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	333c      	adds	r3, #60	; 0x3c
 80093a2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80093a6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80093aa:	4618      	mov	r0, r3
 80093ac:	f7ff fcae 	bl	8008d0c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	333c      	adds	r3, #60	; 0x3c
 80093b4:	4921      	ldr	r1, [pc, #132]	; (800943c <sync_fs+0xd8>)
 80093b6:	4618      	mov	r0, r3
 80093b8:	f7ff fcc3 	bl	8008d42 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	333c      	adds	r3, #60	; 0x3c
 80093c0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80093c4:	491e      	ldr	r1, [pc, #120]	; (8009440 <sync_fs+0xdc>)
 80093c6:	4618      	mov	r0, r3
 80093c8:	f7ff fcbb 	bl	8008d42 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	333c      	adds	r3, #60	; 0x3c
 80093d0:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	69db      	ldr	r3, [r3, #28]
 80093d8:	4619      	mov	r1, r3
 80093da:	4610      	mov	r0, r2
 80093dc:	f7ff fcb1 	bl	8008d42 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	333c      	adds	r3, #60	; 0x3c
 80093e4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	699b      	ldr	r3, [r3, #24]
 80093ec:	4619      	mov	r1, r3
 80093ee:	4610      	mov	r0, r2
 80093f0:	f7ff fca7 	bl	8008d42 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093f8:	1c5a      	adds	r2, r3, #1
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	7858      	ldrb	r0, [r3, #1]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800940c:	2301      	movs	r3, #1
 800940e:	f7ff fb49 	bl	8008aa4 <disk_write>
			fs->fsi_flag = 0;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2200      	movs	r2, #0
 8009416:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	785b      	ldrb	r3, [r3, #1]
 800941c:	2200      	movs	r2, #0
 800941e:	2100      	movs	r1, #0
 8009420:	4618      	mov	r0, r3
 8009422:	f7ff fb5f 	bl	8008ae4 <disk_ioctl>
 8009426:	4603      	mov	r3, r0
 8009428:	2b00      	cmp	r3, #0
 800942a:	d001      	beq.n	8009430 <sync_fs+0xcc>
 800942c:	2301      	movs	r3, #1
 800942e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009430:	7bfb      	ldrb	r3, [r7, #15]
}
 8009432:	4618      	mov	r0, r3
 8009434:	3710      	adds	r7, #16
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
 800943a:	bf00      	nop
 800943c:	41615252 	.word	0x41615252
 8009440:	61417272 	.word	0x61417272

08009444 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009444:	b480      	push	{r7}
 8009446:	b083      	sub	sp, #12
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
 800944c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	3b02      	subs	r3, #2
 8009452:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6a1b      	ldr	r3, [r3, #32]
 8009458:	3b02      	subs	r3, #2
 800945a:	683a      	ldr	r2, [r7, #0]
 800945c:	429a      	cmp	r2, r3
 800945e:	d301      	bcc.n	8009464 <clust2sect+0x20>
 8009460:	2300      	movs	r3, #0
 8009462:	e008      	b.n	8009476 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	895b      	ldrh	r3, [r3, #10]
 8009468:	461a      	mov	r2, r3
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	fb03 f202 	mul.w	r2, r3, r2
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009474:	4413      	add	r3, r2
}
 8009476:	4618      	mov	r0, r3
 8009478:	370c      	adds	r7, #12
 800947a:	46bd      	mov	sp, r7
 800947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009480:	4770      	bx	lr
	...

08009484 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009484:	b5b0      	push	{r4, r5, r7, lr}
 8009486:	b088      	sub	sp, #32
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	2b01      	cmp	r3, #1
 8009498:	d904      	bls.n	80094a4 <get_fat+0x20>
 800949a:	69bb      	ldr	r3, [r7, #24]
 800949c:	6a1b      	ldr	r3, [r3, #32]
 800949e:	683a      	ldr	r2, [r7, #0]
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d302      	bcc.n	80094aa <get_fat+0x26>
		val = 1;	/* Internal error */
 80094a4:	2301      	movs	r3, #1
 80094a6:	61fb      	str	r3, [r7, #28]
 80094a8:	e139      	b.n	800971e <get_fat+0x29a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80094aa:	f04f 33ff 	mov.w	r3, #4294967295
 80094ae:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 80094b0:	69bb      	ldr	r3, [r7, #24]
 80094b2:	781b      	ldrb	r3, [r3, #0]
 80094b4:	3b01      	subs	r3, #1
 80094b6:	2b03      	cmp	r3, #3
 80094b8:	f200 8125 	bhi.w	8009706 <get_fat+0x282>
 80094bc:	a201      	add	r2, pc, #4	; (adr r2, 80094c4 <get_fat+0x40>)
 80094be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c2:	bf00      	nop
 80094c4:	080094d5 	.word	0x080094d5
 80094c8:	08009583 	.word	0x08009583
 80094cc:	080095cf 	.word	0x080095cf
 80094d0:	0800961f 	.word	0x0800961f
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	60fb      	str	r3, [r7, #12]
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	085b      	lsrs	r3, r3, #1
 80094dc:	68fa      	ldr	r2, [r7, #12]
 80094de:	4413      	add	r3, r2
 80094e0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80094e2:	69bb      	ldr	r3, [r7, #24]
 80094e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094e6:	69bb      	ldr	r3, [r7, #24]
 80094e8:	899b      	ldrh	r3, [r3, #12]
 80094ea:	4619      	mov	r1, r3
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80094f2:	4413      	add	r3, r2
 80094f4:	4619      	mov	r1, r3
 80094f6:	69b8      	ldr	r0, [r7, #24]
 80094f8:	f7ff ff06 	bl	8009308 <move_window>
 80094fc:	4603      	mov	r3, r0
 80094fe:	2b00      	cmp	r3, #0
 8009500:	f040 8104 	bne.w	800970c <get_fat+0x288>
			wc = fs->win[bc++ % SS(fs)];
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	1c5a      	adds	r2, r3, #1
 8009508:	60fa      	str	r2, [r7, #12]
 800950a:	69ba      	ldr	r2, [r7, #24]
 800950c:	8992      	ldrh	r2, [r2, #12]
 800950e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009512:	fb02 f201 	mul.w	r2, r2, r1
 8009516:	1a9b      	subs	r3, r3, r2
 8009518:	69ba      	ldr	r2, [r7, #24]
 800951a:	4413      	add	r3, r2
 800951c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009520:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009522:	69bb      	ldr	r3, [r7, #24]
 8009524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009526:	69bb      	ldr	r3, [r7, #24]
 8009528:	899b      	ldrh	r3, [r3, #12]
 800952a:	4619      	mov	r1, r3
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009532:	4413      	add	r3, r2
 8009534:	4619      	mov	r1, r3
 8009536:	69b8      	ldr	r0, [r7, #24]
 8009538:	f7ff fee6 	bl	8009308 <move_window>
 800953c:	4603      	mov	r3, r0
 800953e:	2b00      	cmp	r3, #0
 8009540:	f040 80e6 	bne.w	8009710 <get_fat+0x28c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009544:	69bb      	ldr	r3, [r7, #24]
 8009546:	899b      	ldrh	r3, [r3, #12]
 8009548:	461a      	mov	r2, r3
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009550:	fb02 f201 	mul.w	r2, r2, r1
 8009554:	1a9b      	subs	r3, r3, r2
 8009556:	69ba      	ldr	r2, [r7, #24]
 8009558:	4413      	add	r3, r2
 800955a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800955e:	021b      	lsls	r3, r3, #8
 8009560:	461a      	mov	r2, r3
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	4313      	orrs	r3, r2
 8009566:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	f003 0301 	and.w	r3, r3, #1
 800956e:	2b00      	cmp	r3, #0
 8009570:	d002      	beq.n	8009578 <get_fat+0xf4>
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	091b      	lsrs	r3, r3, #4
 8009576:	e002      	b.n	800957e <get_fat+0xfa>
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800957e:	61fb      	str	r3, [r7, #28]
			break;
 8009580:	e0cd      	b.n	800971e <get_fat+0x29a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009582:	69bb      	ldr	r3, [r7, #24]
 8009584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009586:	69bb      	ldr	r3, [r7, #24]
 8009588:	899b      	ldrh	r3, [r3, #12]
 800958a:	085b      	lsrs	r3, r3, #1
 800958c:	b29b      	uxth	r3, r3
 800958e:	4619      	mov	r1, r3
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	fbb3 f3f1 	udiv	r3, r3, r1
 8009596:	4413      	add	r3, r2
 8009598:	4619      	mov	r1, r3
 800959a:	69b8      	ldr	r0, [r7, #24]
 800959c:	f7ff feb4 	bl	8009308 <move_window>
 80095a0:	4603      	mov	r3, r0
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	f040 80b6 	bne.w	8009714 <get_fat+0x290>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80095a8:	69bb      	ldr	r3, [r7, #24]
 80095aa:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	005b      	lsls	r3, r3, #1
 80095b2:	69ba      	ldr	r2, [r7, #24]
 80095b4:	8992      	ldrh	r2, [r2, #12]
 80095b6:	fbb3 f0f2 	udiv	r0, r3, r2
 80095ba:	fb02 f200 	mul.w	r2, r2, r0
 80095be:	1a9b      	subs	r3, r3, r2
 80095c0:	440b      	add	r3, r1
 80095c2:	4618      	mov	r0, r3
 80095c4:	f7ff faac 	bl	8008b20 <ld_word>
 80095c8:	4603      	mov	r3, r0
 80095ca:	61fb      	str	r3, [r7, #28]
			break;
 80095cc:	e0a7      	b.n	800971e <get_fat+0x29a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80095ce:	69bb      	ldr	r3, [r7, #24]
 80095d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095d2:	69bb      	ldr	r3, [r7, #24]
 80095d4:	899b      	ldrh	r3, [r3, #12]
 80095d6:	089b      	lsrs	r3, r3, #2
 80095d8:	b29b      	uxth	r3, r3
 80095da:	4619      	mov	r1, r3
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	fbb3 f3f1 	udiv	r3, r3, r1
 80095e2:	4413      	add	r3, r2
 80095e4:	4619      	mov	r1, r3
 80095e6:	69b8      	ldr	r0, [r7, #24]
 80095e8:	f7ff fe8e 	bl	8009308 <move_window>
 80095ec:	4603      	mov	r3, r0
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	f040 8092 	bne.w	8009718 <get_fat+0x294>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80095f4:	69bb      	ldr	r3, [r7, #24]
 80095f6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	69ba      	ldr	r2, [r7, #24]
 8009600:	8992      	ldrh	r2, [r2, #12]
 8009602:	fbb3 f0f2 	udiv	r0, r3, r2
 8009606:	fb02 f200 	mul.w	r2, r2, r0
 800960a:	1a9b      	subs	r3, r3, r2
 800960c:	440b      	add	r3, r1
 800960e:	4618      	mov	r0, r3
 8009610:	f7ff fa9e 	bl	8008b50 <ld_dword>
 8009614:	4603      	mov	r3, r0
 8009616:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800961a:	61fb      	str	r3, [r7, #28]
			break;
 800961c:	e07f      	b.n	800971e <get_fat+0x29a>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8009624:	4313      	orrs	r3, r2
 8009626:	d06e      	beq.n	8009706 <get_fat+0x282>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	689b      	ldr	r3, [r3, #8]
 800962c:	683a      	ldr	r2, [r7, #0]
 800962e:	1ad3      	subs	r3, r2, r3
 8009630:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8009638:	f112 34ff 	adds.w	r4, r2, #4294967295
 800963c:	f143 35ff 	adc.w	r5, r3, #4294967295
 8009640:	69bb      	ldr	r3, [r7, #24]
 8009642:	899b      	ldrh	r3, [r3, #12]
 8009644:	b29a      	uxth	r2, r3
 8009646:	f04f 0300 	mov.w	r3, #0
 800964a:	4620      	mov	r0, r4
 800964c:	4629      	mov	r1, r5
 800964e:	f7f7 f92d 	bl	80008ac <__aeabi_uldivmod>
 8009652:	4602      	mov	r2, r0
 8009654:	460b      	mov	r3, r1
 8009656:	69bb      	ldr	r3, [r7, #24]
 8009658:	895b      	ldrh	r3, [r3, #10]
 800965a:	fbb2 f3f3 	udiv	r3, r2, r3
 800965e:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	79db      	ldrb	r3, [r3, #7]
 8009664:	2b02      	cmp	r3, #2
 8009666:	d10e      	bne.n	8009686 <get_fat+0x202>
					if (cofs <= clen) {
 8009668:	697a      	ldr	r2, [r7, #20]
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	429a      	cmp	r2, r3
 800966e:	d80a      	bhi.n	8009686 <get_fat+0x202>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 8009670:	697a      	ldr	r2, [r7, #20]
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	429a      	cmp	r2, r3
 8009676:	d002      	beq.n	800967e <get_fat+0x1fa>
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	3301      	adds	r3, #1
 800967c:	e001      	b.n	8009682 <get_fat+0x1fe>
 800967e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8009682:	61fb      	str	r3, [r7, #28]
						break;
 8009684:	e04b      	b.n	800971e <get_fat+0x29a>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	79db      	ldrb	r3, [r3, #7]
 800968a:	2b03      	cmp	r3, #3
 800968c:	d108      	bne.n	80096a0 <get_fat+0x21c>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	699b      	ldr	r3, [r3, #24]
 8009692:	697a      	ldr	r2, [r7, #20]
 8009694:	429a      	cmp	r2, r3
 8009696:	d203      	bcs.n	80096a0 <get_fat+0x21c>
					val = clst + 1; 	/* Generate the value */
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	3301      	adds	r3, #1
 800969c:	61fb      	str	r3, [r7, #28]
					break;
 800969e:	e03e      	b.n	800971e <get_fat+0x29a>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	79db      	ldrb	r3, [r3, #7]
 80096a4:	2b02      	cmp	r3, #2
 80096a6:	d02e      	beq.n	8009706 <get_fat+0x282>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	69db      	ldr	r3, [r3, #28]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d003      	beq.n	80096b8 <get_fat+0x234>
						val = 0x7FFFFFFF;	/* Generate EOC */
 80096b0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80096b4:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 80096b6:	e032      	b.n	800971e <get_fat+0x29a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80096b8:	69bb      	ldr	r3, [r7, #24]
 80096ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096bc:	69bb      	ldr	r3, [r7, #24]
 80096be:	899b      	ldrh	r3, [r3, #12]
 80096c0:	089b      	lsrs	r3, r3, #2
 80096c2:	b29b      	uxth	r3, r3
 80096c4:	4619      	mov	r1, r3
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	fbb3 f3f1 	udiv	r3, r3, r1
 80096cc:	4413      	add	r3, r2
 80096ce:	4619      	mov	r1, r3
 80096d0:	69b8      	ldr	r0, [r7, #24]
 80096d2:	f7ff fe19 	bl	8009308 <move_window>
 80096d6:	4603      	mov	r3, r0
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d11f      	bne.n	800971c <get_fat+0x298>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 80096dc:	69bb      	ldr	r3, [r7, #24]
 80096de:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	69ba      	ldr	r2, [r7, #24]
 80096e8:	8992      	ldrh	r2, [r2, #12]
 80096ea:	fbb3 f0f2 	udiv	r0, r3, r2
 80096ee:	fb02 f200 	mul.w	r2, r2, r0
 80096f2:	1a9b      	subs	r3, r3, r2
 80096f4:	440b      	add	r3, r1
 80096f6:	4618      	mov	r0, r3
 80096f8:	f7ff fa2a 	bl	8008b50 <ld_dword>
 80096fc:	4603      	mov	r3, r0
 80096fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009702:	61fb      	str	r3, [r7, #28]
					break;
 8009704:	e00b      	b.n	800971e <get_fat+0x29a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009706:	2301      	movs	r3, #1
 8009708:	61fb      	str	r3, [r7, #28]
 800970a:	e008      	b.n	800971e <get_fat+0x29a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800970c:	bf00      	nop
 800970e:	e006      	b.n	800971e <get_fat+0x29a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009710:	bf00      	nop
 8009712:	e004      	b.n	800971e <get_fat+0x29a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009714:	bf00      	nop
 8009716:	e002      	b.n	800971e <get_fat+0x29a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009718:	bf00      	nop
 800971a:	e000      	b.n	800971e <get_fat+0x29a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800971c:	bf00      	nop
		}
	}

	return val;
 800971e:	69fb      	ldr	r3, [r7, #28]
}
 8009720:	4618      	mov	r0, r3
 8009722:	3720      	adds	r7, #32
 8009724:	46bd      	mov	sp, r7
 8009726:	bdb0      	pop	{r4, r5, r7, pc}

08009728 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009728:	b590      	push	{r4, r7, lr}
 800972a:	b089      	sub	sp, #36	; 0x24
 800972c:	af00      	add	r7, sp, #0
 800972e:	60f8      	str	r0, [r7, #12]
 8009730:	60b9      	str	r1, [r7, #8]
 8009732:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009734:	2302      	movs	r3, #2
 8009736:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	2b01      	cmp	r3, #1
 800973c:	f240 8106 	bls.w	800994c <put_fat+0x224>
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	6a1b      	ldr	r3, [r3, #32]
 8009744:	68ba      	ldr	r2, [r7, #8]
 8009746:	429a      	cmp	r2, r3
 8009748:	f080 8100 	bcs.w	800994c <put_fat+0x224>
		switch (fs->fs_type) {
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	781b      	ldrb	r3, [r3, #0]
 8009750:	2b04      	cmp	r3, #4
 8009752:	f300 8104 	bgt.w	800995e <put_fat+0x236>
 8009756:	2b03      	cmp	r3, #3
 8009758:	f280 80b3 	bge.w	80098c2 <put_fat+0x19a>
 800975c:	2b01      	cmp	r3, #1
 800975e:	d003      	beq.n	8009768 <put_fat+0x40>
 8009760:	2b02      	cmp	r3, #2
 8009762:	f000 8083 	beq.w	800986c <put_fat+0x144>
 8009766:	e0fa      	b.n	800995e <put_fat+0x236>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	61bb      	str	r3, [r7, #24]
 800976c:	69bb      	ldr	r3, [r7, #24]
 800976e:	085b      	lsrs	r3, r3, #1
 8009770:	69ba      	ldr	r2, [r7, #24]
 8009772:	4413      	add	r3, r2
 8009774:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	899b      	ldrh	r3, [r3, #12]
 800977e:	4619      	mov	r1, r3
 8009780:	69bb      	ldr	r3, [r7, #24]
 8009782:	fbb3 f3f1 	udiv	r3, r3, r1
 8009786:	4413      	add	r3, r2
 8009788:	4619      	mov	r1, r3
 800978a:	68f8      	ldr	r0, [r7, #12]
 800978c:	f7ff fdbc 	bl	8009308 <move_window>
 8009790:	4603      	mov	r3, r0
 8009792:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009794:	7ffb      	ldrb	r3, [r7, #31]
 8009796:	2b00      	cmp	r3, #0
 8009798:	f040 80da 	bne.w	8009950 <put_fat+0x228>
			p = fs->win + bc++ % SS(fs);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80097a2:	69bb      	ldr	r3, [r7, #24]
 80097a4:	1c5a      	adds	r2, r3, #1
 80097a6:	61ba      	str	r2, [r7, #24]
 80097a8:	68fa      	ldr	r2, [r7, #12]
 80097aa:	8992      	ldrh	r2, [r2, #12]
 80097ac:	fbb3 f0f2 	udiv	r0, r3, r2
 80097b0:	fb02 f200 	mul.w	r2, r2, r0
 80097b4:	1a9b      	subs	r3, r3, r2
 80097b6:	440b      	add	r3, r1
 80097b8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	f003 0301 	and.w	r3, r3, #1
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d00d      	beq.n	80097e0 <put_fat+0xb8>
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	b25b      	sxtb	r3, r3
 80097ca:	f003 030f 	and.w	r3, r3, #15
 80097ce:	b25a      	sxtb	r2, r3
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	011b      	lsls	r3, r3, #4
 80097d6:	b25b      	sxtb	r3, r3
 80097d8:	4313      	orrs	r3, r2
 80097da:	b25b      	sxtb	r3, r3
 80097dc:	b2db      	uxtb	r3, r3
 80097de:	e001      	b.n	80097e4 <put_fat+0xbc>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	b2db      	uxtb	r3, r3
 80097e4:	697a      	ldr	r2, [r7, #20]
 80097e6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2201      	movs	r2, #1
 80097ec:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	899b      	ldrh	r3, [r3, #12]
 80097f6:	4619      	mov	r1, r3
 80097f8:	69bb      	ldr	r3, [r7, #24]
 80097fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80097fe:	4413      	add	r3, r2
 8009800:	4619      	mov	r1, r3
 8009802:	68f8      	ldr	r0, [r7, #12]
 8009804:	f7ff fd80 	bl	8009308 <move_window>
 8009808:	4603      	mov	r3, r0
 800980a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800980c:	7ffb      	ldrb	r3, [r7, #31]
 800980e:	2b00      	cmp	r3, #0
 8009810:	f040 80a0 	bne.w	8009954 <put_fat+0x22c>
			p = fs->win + bc % SS(fs);
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	899b      	ldrh	r3, [r3, #12]
 800981e:	461a      	mov	r2, r3
 8009820:	69bb      	ldr	r3, [r7, #24]
 8009822:	fbb3 f0f2 	udiv	r0, r3, r2
 8009826:	fb02 f200 	mul.w	r2, r2, r0
 800982a:	1a9b      	subs	r3, r3, r2
 800982c:	440b      	add	r3, r1
 800982e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	f003 0301 	and.w	r3, r3, #1
 8009836:	2b00      	cmp	r3, #0
 8009838:	d003      	beq.n	8009842 <put_fat+0x11a>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	091b      	lsrs	r3, r3, #4
 800983e:	b2db      	uxtb	r3, r3
 8009840:	e00e      	b.n	8009860 <put_fat+0x138>
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	b25b      	sxtb	r3, r3
 8009848:	f023 030f 	bic.w	r3, r3, #15
 800984c:	b25a      	sxtb	r2, r3
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	0a1b      	lsrs	r3, r3, #8
 8009852:	b25b      	sxtb	r3, r3
 8009854:	f003 030f 	and.w	r3, r3, #15
 8009858:	b25b      	sxtb	r3, r3
 800985a:	4313      	orrs	r3, r2
 800985c:	b25b      	sxtb	r3, r3
 800985e:	b2db      	uxtb	r3, r3
 8009860:	697a      	ldr	r2, [r7, #20]
 8009862:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	2201      	movs	r2, #1
 8009868:	70da      	strb	r2, [r3, #3]
			break;
 800986a:	e078      	b.n	800995e <put_fat+0x236>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	899b      	ldrh	r3, [r3, #12]
 8009874:	085b      	lsrs	r3, r3, #1
 8009876:	b29b      	uxth	r3, r3
 8009878:	4619      	mov	r1, r3
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	fbb3 f3f1 	udiv	r3, r3, r1
 8009880:	4413      	add	r3, r2
 8009882:	4619      	mov	r1, r3
 8009884:	68f8      	ldr	r0, [r7, #12]
 8009886:	f7ff fd3f 	bl	8009308 <move_window>
 800988a:	4603      	mov	r3, r0
 800988c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800988e:	7ffb      	ldrb	r3, [r7, #31]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d161      	bne.n	8009958 <put_fat+0x230>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	005b      	lsls	r3, r3, #1
 800989e:	68fa      	ldr	r2, [r7, #12]
 80098a0:	8992      	ldrh	r2, [r2, #12]
 80098a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80098a6:	fb02 f200 	mul.w	r2, r2, r0
 80098aa:	1a9b      	subs	r3, r3, r2
 80098ac:	440b      	add	r3, r1
 80098ae:	687a      	ldr	r2, [r7, #4]
 80098b0:	b292      	uxth	r2, r2
 80098b2:	4611      	mov	r1, r2
 80098b4:	4618      	mov	r0, r3
 80098b6:	f7ff fa29 	bl	8008d0c <st_word>
			fs->wflag = 1;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2201      	movs	r2, #1
 80098be:	70da      	strb	r2, [r3, #3]
			break;
 80098c0:	e04d      	b.n	800995e <put_fat+0x236>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	899b      	ldrh	r3, [r3, #12]
 80098ca:	089b      	lsrs	r3, r3, #2
 80098cc:	b29b      	uxth	r3, r3
 80098ce:	4619      	mov	r1, r3
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80098d6:	4413      	add	r3, r2
 80098d8:	4619      	mov	r1, r3
 80098da:	68f8      	ldr	r0, [r7, #12]
 80098dc:	f7ff fd14 	bl	8009308 <move_window>
 80098e0:	4603      	mov	r3, r0
 80098e2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80098e4:	7ffb      	ldrb	r3, [r7, #31]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d138      	bne.n	800995c <put_fat+0x234>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	2b04      	cmp	r3, #4
 80098f0:	d017      	beq.n	8009922 <put_fat+0x1fa>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	68fa      	ldr	r2, [r7, #12]
 8009904:	8992      	ldrh	r2, [r2, #12]
 8009906:	fbb3 f0f2 	udiv	r0, r3, r2
 800990a:	fb02 f200 	mul.w	r2, r2, r0
 800990e:	1a9b      	subs	r3, r3, r2
 8009910:	440b      	add	r3, r1
 8009912:	4618      	mov	r0, r3
 8009914:	f7ff f91c 	bl	8008b50 <ld_dword>
 8009918:	4603      	mov	r3, r0
 800991a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800991e:	4323      	orrs	r3, r4
 8009920:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	009b      	lsls	r3, r3, #2
 800992c:	68fa      	ldr	r2, [r7, #12]
 800992e:	8992      	ldrh	r2, [r2, #12]
 8009930:	fbb3 f0f2 	udiv	r0, r3, r2
 8009934:	fb02 f200 	mul.w	r2, r2, r0
 8009938:	1a9b      	subs	r3, r3, r2
 800993a:	440b      	add	r3, r1
 800993c:	6879      	ldr	r1, [r7, #4]
 800993e:	4618      	mov	r0, r3
 8009940:	f7ff f9ff 	bl	8008d42 <st_dword>
			fs->wflag = 1;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2201      	movs	r2, #1
 8009948:	70da      	strb	r2, [r3, #3]
			break;
 800994a:	e008      	b.n	800995e <put_fat+0x236>
		}
	}
 800994c:	bf00      	nop
 800994e:	e006      	b.n	800995e <put_fat+0x236>
			if (res != FR_OK) break;
 8009950:	bf00      	nop
 8009952:	e004      	b.n	800995e <put_fat+0x236>
			if (res != FR_OK) break;
 8009954:	bf00      	nop
 8009956:	e002      	b.n	800995e <put_fat+0x236>
			if (res != FR_OK) break;
 8009958:	bf00      	nop
 800995a:	e000      	b.n	800995e <put_fat+0x236>
			if (res != FR_OK) break;
 800995c:	bf00      	nop
	return res;
 800995e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009960:	4618      	mov	r0, r3
 8009962:	3724      	adds	r7, #36	; 0x24
 8009964:	46bd      	mov	sp, r7
 8009966:	bd90      	pop	{r4, r7, pc}

08009968 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b08a      	sub	sp, #40	; 0x28
 800996c:	af00      	add	r7, sp, #0
 800996e:	60f8      	str	r0, [r7, #12]
 8009970:	60b9      	str	r1, [r7, #8]
 8009972:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	3b02      	subs	r3, #2
 8009978:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	6a1b      	ldr	r3, [r3, #32]
 800997e:	3b02      	subs	r3, #2
 8009980:	68ba      	ldr	r2, [r7, #8]
 8009982:	429a      	cmp	r2, r3
 8009984:	d301      	bcc.n	800998a <find_bitmap+0x22>
 8009986:	2300      	movs	r3, #0
 8009988:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	61fb      	str	r3, [r7, #28]
 800998e:	69fb      	ldr	r3, [r7, #28]
 8009990:	61bb      	str	r3, [r7, #24]
 8009992:	2300      	movs	r3, #0
 8009994:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800999a:	69fb      	ldr	r3, [r7, #28]
 800999c:	08db      	lsrs	r3, r3, #3
 800999e:	68f9      	ldr	r1, [r7, #12]
 80099a0:	8989      	ldrh	r1, [r1, #12]
 80099a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80099a6:	4413      	add	r3, r2
 80099a8:	4619      	mov	r1, r3
 80099aa:	68f8      	ldr	r0, [r7, #12]
 80099ac:	f7ff fcac 	bl	8009308 <move_window>
 80099b0:	4603      	mov	r3, r0
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d002      	beq.n	80099bc <find_bitmap+0x54>
 80099b6:	f04f 33ff 	mov.w	r3, #4294967295
 80099ba:	e058      	b.n	8009a6e <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 80099bc:	69fb      	ldr	r3, [r7, #28]
 80099be:	08db      	lsrs	r3, r3, #3
 80099c0:	68fa      	ldr	r2, [r7, #12]
 80099c2:	8992      	ldrh	r2, [r2, #12]
 80099c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80099c8:	fb02 f201 	mul.w	r2, r2, r1
 80099cc:	1a9b      	subs	r3, r3, r2
 80099ce:	623b      	str	r3, [r7, #32]
 80099d0:	69fb      	ldr	r3, [r7, #28]
 80099d2:	f003 0307 	and.w	r3, r3, #7
 80099d6:	2201      	movs	r2, #1
 80099d8:	fa02 f303 	lsl.w	r3, r2, r3
 80099dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 80099e0:	68fa      	ldr	r2, [r7, #12]
 80099e2:	6a3b      	ldr	r3, [r7, #32]
 80099e4:	4413      	add	r3, r2
 80099e6:	333c      	adds	r3, #60	; 0x3c
 80099e8:	781a      	ldrb	r2, [r3, #0]
 80099ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099ee:	4013      	ands	r3, r2
 80099f0:	74fb      	strb	r3, [r7, #19]
 80099f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099f6:	005b      	lsls	r3, r3, #1
 80099f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 80099fc:	69fb      	ldr	r3, [r7, #28]
 80099fe:	3301      	adds	r3, #1
 8009a00:	61fb      	str	r3, [r7, #28]
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	6a1b      	ldr	r3, [r3, #32]
 8009a06:	3b02      	subs	r3, #2
 8009a08:	69fa      	ldr	r2, [r7, #28]
 8009a0a:	429a      	cmp	r2, r3
 8009a0c:	d307      	bcc.n	8009a1e <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 8009a0e:	2300      	movs	r3, #0
 8009a10:	61fb      	str	r3, [r7, #28]
 8009a12:	2300      	movs	r3, #0
 8009a14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	899b      	ldrh	r3, [r3, #12]
 8009a1c:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 8009a1e:	7cfb      	ldrb	r3, [r7, #19]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d109      	bne.n	8009a38 <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	3301      	adds	r3, #1
 8009a28:	617b      	str	r3, [r7, #20]
 8009a2a:	697a      	ldr	r2, [r7, #20]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	d106      	bne.n	8009a40 <find_bitmap+0xd8>
 8009a32:	69bb      	ldr	r3, [r7, #24]
 8009a34:	3302      	adds	r3, #2
 8009a36:	e01a      	b.n	8009a6e <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 8009a38:	69fb      	ldr	r3, [r7, #28]
 8009a3a:	61bb      	str	r3, [r7, #24]
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 8009a40:	69fa      	ldr	r2, [r7, #28]
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	429a      	cmp	r2, r3
 8009a46:	d101      	bne.n	8009a4c <find_bitmap+0xe4>
 8009a48:	2300      	movs	r3, #0
 8009a4a:	e010      	b.n	8009a6e <find_bitmap+0x106>
			} while (bm);
 8009a4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d1c5      	bne.n	80099e0 <find_bitmap+0x78>
			bm = 1;
 8009a54:	2301      	movs	r3, #1
 8009a56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 8009a5a:	6a3b      	ldr	r3, [r7, #32]
 8009a5c:	3301      	adds	r3, #1
 8009a5e:	623b      	str	r3, [r7, #32]
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	899b      	ldrh	r3, [r3, #12]
 8009a64:	461a      	mov	r2, r3
 8009a66:	6a3b      	ldr	r3, [r7, #32]
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d3b9      	bcc.n	80099e0 <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8009a6c:	e793      	b.n	8009996 <find_bitmap+0x2e>
	}
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3728      	adds	r7, #40	; 0x28
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}

08009a76 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 8009a76:	b580      	push	{r7, lr}
 8009a78:	b088      	sub	sp, #32
 8009a7a:	af00      	add	r7, sp, #0
 8009a7c:	60f8      	str	r0, [r7, #12]
 8009a7e:	60b9      	str	r1, [r7, #8]
 8009a80:	607a      	str	r2, [r7, #4]
 8009a82:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	3b02      	subs	r3, #2
 8009a88:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	08db      	lsrs	r3, r3, #3
 8009a92:	68f9      	ldr	r1, [r7, #12]
 8009a94:	8989      	ldrh	r1, [r1, #12]
 8009a96:	fbb3 f3f1 	udiv	r3, r3, r1
 8009a9a:	4413      	add	r3, r2
 8009a9c:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	08db      	lsrs	r3, r3, #3
 8009aa2:	68fa      	ldr	r2, [r7, #12]
 8009aa4:	8992      	ldrh	r2, [r2, #12]
 8009aa6:	fbb3 f1f2 	udiv	r1, r3, r2
 8009aaa:	fb02 f201 	mul.w	r2, r2, r1
 8009aae:	1a9b      	subs	r3, r3, r2
 8009ab0:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	f003 0307 	and.w	r3, r3, #7
 8009ab8:	2201      	movs	r2, #1
 8009aba:	fa02 f303 	lsl.w	r3, r2, r3
 8009abe:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	1c5a      	adds	r2, r3, #1
 8009ac4:	617a      	str	r2, [r7, #20]
 8009ac6:	4619      	mov	r1, r3
 8009ac8:	68f8      	ldr	r0, [r7, #12]
 8009aca:	f7ff fc1d 	bl	8009308 <move_window>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d001      	beq.n	8009ad8 <change_bitmap+0x62>
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	e03f      	b.n	8009b58 <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8009ad8:	68fa      	ldr	r2, [r7, #12]
 8009ada:	69bb      	ldr	r3, [r7, #24]
 8009adc:	4413      	add	r3, r2
 8009ade:	333c      	adds	r3, #60	; 0x3c
 8009ae0:	781a      	ldrb	r2, [r3, #0]
 8009ae2:	7ffb      	ldrb	r3, [r7, #31]
 8009ae4:	4013      	ands	r3, r2
 8009ae6:	b2db      	uxtb	r3, r3
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	bf14      	ite	ne
 8009aec:	2301      	movne	r3, #1
 8009aee:	2300      	moveq	r3, #0
 8009af0:	b2db      	uxtb	r3, r3
 8009af2:	461a      	mov	r2, r3
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d101      	bne.n	8009afe <change_bitmap+0x88>
 8009afa:	2302      	movs	r3, #2
 8009afc:	e02c      	b.n	8009b58 <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 8009afe:	68fa      	ldr	r2, [r7, #12]
 8009b00:	69bb      	ldr	r3, [r7, #24]
 8009b02:	4413      	add	r3, r2
 8009b04:	333c      	adds	r3, #60	; 0x3c
 8009b06:	781a      	ldrb	r2, [r3, #0]
 8009b08:	7ffb      	ldrb	r3, [r7, #31]
 8009b0a:	4053      	eors	r3, r2
 8009b0c:	b2d9      	uxtb	r1, r3
 8009b0e:	68fa      	ldr	r2, [r7, #12]
 8009b10:	69bb      	ldr	r3, [r7, #24]
 8009b12:	4413      	add	r3, r2
 8009b14:	333c      	adds	r3, #60	; 0x3c
 8009b16:	460a      	mov	r2, r1
 8009b18:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	3b01      	subs	r3, #1
 8009b24:	607b      	str	r3, [r7, #4]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d101      	bne.n	8009b30 <change_bitmap+0xba>
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	e013      	b.n	8009b58 <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 8009b30:	7ffb      	ldrb	r3, [r7, #31]
 8009b32:	005b      	lsls	r3, r3, #1
 8009b34:	77fb      	strb	r3, [r7, #31]
 8009b36:	7ffb      	ldrb	r3, [r7, #31]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d1cd      	bne.n	8009ad8 <change_bitmap+0x62>
			bm = 1;
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 8009b40:	69bb      	ldr	r3, [r7, #24]
 8009b42:	3301      	adds	r3, #1
 8009b44:	61bb      	str	r3, [r7, #24]
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	899b      	ldrh	r3, [r3, #12]
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	69bb      	ldr	r3, [r7, #24]
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d3c2      	bcc.n	8009ad8 <change_bitmap+0x62>
		i = 0;
 8009b52:	2300      	movs	r3, #0
 8009b54:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8009b56:	e7b3      	b.n	8009ac0 <change_bitmap+0x4a>
	}
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3720      	adds	r7, #32
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b086      	sub	sp, #24
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	79db      	ldrb	r3, [r3, #7]
 8009b6c:	2b03      	cmp	r3, #3
 8009b6e:	d121      	bne.n	8009bb4 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	689b      	ldr	r3, [r3, #8]
 8009b74:	617b      	str	r3, [r7, #20]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	699b      	ldr	r3, [r3, #24]
 8009b7a:	613b      	str	r3, [r7, #16]
 8009b7c:	e014      	b.n	8009ba8 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6818      	ldr	r0, [r3, #0]
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	3301      	adds	r3, #1
 8009b86:	461a      	mov	r2, r3
 8009b88:	6979      	ldr	r1, [r7, #20]
 8009b8a:	f7ff fdcd 	bl	8009728 <put_fat>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 8009b92:	7bfb      	ldrb	r3, [r7, #15]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d001      	beq.n	8009b9c <fill_first_frag+0x3c>
 8009b98:	7bfb      	ldrb	r3, [r7, #15]
 8009b9a:	e00c      	b.n	8009bb6 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	617b      	str	r3, [r7, #20]
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	3b01      	subs	r3, #1
 8009ba6:	613b      	str	r3, [r7, #16]
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d1e7      	bne.n	8009b7e <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 8009bb4:	2300      	movs	r3, #0
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3718      	adds	r7, #24
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}

08009bbe <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 8009bbe:	b580      	push	{r7, lr}
 8009bc0:	b086      	sub	sp, #24
 8009bc2:	af00      	add	r7, sp, #0
 8009bc4:	60f8      	str	r0, [r7, #12]
 8009bc6:	60b9      	str	r1, [r7, #8]
 8009bc8:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8009bca:	e020      	b.n	8009c0e <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	6818      	ldr	r0, [r3, #0]
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	69db      	ldr	r3, [r3, #28]
 8009bd4:	68ba      	ldr	r2, [r7, #8]
 8009bd6:	1ad3      	subs	r3, r2, r3
 8009bd8:	1c59      	adds	r1, r3, #1
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	69db      	ldr	r3, [r3, #28]
 8009bde:	2b01      	cmp	r3, #1
 8009be0:	d905      	bls.n	8009bee <fill_last_frag+0x30>
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	69db      	ldr	r3, [r3, #28]
 8009be6:	68ba      	ldr	r2, [r7, #8]
 8009be8:	1ad3      	subs	r3, r2, r3
 8009bea:	3302      	adds	r3, #2
 8009bec:	e000      	b.n	8009bf0 <fill_last_frag+0x32>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	f7ff fd99 	bl	8009728 <put_fat>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 8009bfa:	7dfb      	ldrb	r3, [r7, #23]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d001      	beq.n	8009c04 <fill_last_frag+0x46>
 8009c00:	7dfb      	ldrb	r3, [r7, #23]
 8009c02:	e009      	b.n	8009c18 <fill_last_frag+0x5a>
		obj->n_frag--;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	69db      	ldr	r3, [r3, #28]
 8009c08:	1e5a      	subs	r2, r3, #1
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	69db      	ldr	r3, [r3, #28]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d1da      	bne.n	8009bcc <fill_last_frag+0xe>
	}
	return FR_OK;
 8009c16:	2300      	movs	r3, #0
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3718      	adds	r7, #24
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b08a      	sub	sp, #40	; 0x28
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	60f8      	str	r0, [r7, #12]
 8009c28:	60b9      	str	r1, [r7, #8]
 8009c2a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	627b      	str	r3, [r7, #36]	; 0x24
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	d904      	bls.n	8009c4e <remove_chain+0x2e>
 8009c44:	69bb      	ldr	r3, [r7, #24]
 8009c46:	6a1b      	ldr	r3, [r3, #32]
 8009c48:	68ba      	ldr	r2, [r7, #8]
 8009c4a:	429a      	cmp	r2, r3
 8009c4c:	d301      	bcc.n	8009c52 <remove_chain+0x32>
 8009c4e:	2302      	movs	r3, #2
 8009c50:	e096      	b.n	8009d80 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d014      	beq.n	8009c82 <remove_chain+0x62>
 8009c58:	69bb      	ldr	r3, [r7, #24]
 8009c5a:	781b      	ldrb	r3, [r3, #0]
 8009c5c:	2b04      	cmp	r3, #4
 8009c5e:	d103      	bne.n	8009c68 <remove_chain+0x48>
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	79db      	ldrb	r3, [r3, #7]
 8009c64:	2b02      	cmp	r3, #2
 8009c66:	d00c      	beq.n	8009c82 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009c68:	f04f 32ff 	mov.w	r2, #4294967295
 8009c6c:	6879      	ldr	r1, [r7, #4]
 8009c6e:	69b8      	ldr	r0, [r7, #24]
 8009c70:	f7ff fd5a 	bl	8009728 <put_fat>
 8009c74:	4603      	mov	r3, r0
 8009c76:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009c78:	7ffb      	ldrb	r3, [r7, #31]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d001      	beq.n	8009c82 <remove_chain+0x62>
 8009c7e:	7ffb      	ldrb	r3, [r7, #31]
 8009c80:	e07e      	b.n	8009d80 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009c82:	68b9      	ldr	r1, [r7, #8]
 8009c84:	68f8      	ldr	r0, [r7, #12]
 8009c86:	f7ff fbfd 	bl	8009484 <get_fat>
 8009c8a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d055      	beq.n	8009d3e <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d101      	bne.n	8009c9c <remove_chain+0x7c>
 8009c98:	2302      	movs	r3, #2
 8009c9a:	e071      	b.n	8009d80 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009c9c:	697b      	ldr	r3, [r7, #20]
 8009c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ca2:	d101      	bne.n	8009ca8 <remove_chain+0x88>
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	e06b      	b.n	8009d80 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8009ca8:	69bb      	ldr	r3, [r7, #24]
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	2b04      	cmp	r3, #4
 8009cae:	d00b      	beq.n	8009cc8 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	68b9      	ldr	r1, [r7, #8]
 8009cb4:	69b8      	ldr	r0, [r7, #24]
 8009cb6:	f7ff fd37 	bl	8009728 <put_fat>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009cbe:	7ffb      	ldrb	r3, [r7, #31]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d001      	beq.n	8009cc8 <remove_chain+0xa8>
 8009cc4:	7ffb      	ldrb	r3, [r7, #31]
 8009cc6:	e05b      	b.n	8009d80 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009cc8:	69bb      	ldr	r3, [r7, #24]
 8009cca:	69da      	ldr	r2, [r3, #28]
 8009ccc:	69bb      	ldr	r3, [r7, #24]
 8009cce:	6a1b      	ldr	r3, [r3, #32]
 8009cd0:	3b02      	subs	r3, #2
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d20b      	bcs.n	8009cee <remove_chain+0xce>
			fs->free_clst++;
 8009cd6:	69bb      	ldr	r3, [r7, #24]
 8009cd8:	69db      	ldr	r3, [r3, #28]
 8009cda:	1c5a      	adds	r2, r3, #1
 8009cdc:	69bb      	ldr	r3, [r7, #24]
 8009cde:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 8009ce0:	69bb      	ldr	r3, [r7, #24]
 8009ce2:	791b      	ldrb	r3, [r3, #4]
 8009ce4:	f043 0301 	orr.w	r3, r3, #1
 8009ce8:	b2da      	uxtb	r2, r3
 8009cea:	69bb      	ldr	r3, [r7, #24]
 8009cec:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 8009cee:	6a3b      	ldr	r3, [r7, #32]
 8009cf0:	3301      	adds	r3, #1
 8009cf2:	697a      	ldr	r2, [r7, #20]
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	d102      	bne.n	8009cfe <remove_chain+0xde>
			ecl = nxt;
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	623b      	str	r3, [r7, #32]
 8009cfc:	e017      	b.n	8009d2e <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8009cfe:	69bb      	ldr	r3, [r7, #24]
 8009d00:	781b      	ldrb	r3, [r3, #0]
 8009d02:	2b04      	cmp	r3, #4
 8009d04:	d10f      	bne.n	8009d26 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 8009d06:	6a3a      	ldr	r2, [r7, #32]
 8009d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0a:	1ad3      	subs	r3, r2, r3
 8009d0c:	1c5a      	adds	r2, r3, #1
 8009d0e:	2300      	movs	r3, #0
 8009d10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009d12:	69b8      	ldr	r0, [r7, #24]
 8009d14:	f7ff feaf 	bl	8009a76 <change_bitmap>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 8009d1c:	7ffb      	ldrb	r3, [r7, #31]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d001      	beq.n	8009d26 <remove_chain+0x106>
 8009d22:	7ffb      	ldrb	r3, [r7, #31]
 8009d24:	e02c      	b.n	8009d80 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	623b      	str	r3, [r7, #32]
 8009d2a:	6a3b      	ldr	r3, [r7, #32]
 8009d2c:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009d32:	69bb      	ldr	r3, [r7, #24]
 8009d34:	6a1b      	ldr	r3, [r3, #32]
 8009d36:	68ba      	ldr	r2, [r7, #8]
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	d3a2      	bcc.n	8009c82 <remove_chain+0x62>
 8009d3c:	e000      	b.n	8009d40 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 8009d3e:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 8009d40:	69bb      	ldr	r3, [r7, #24]
 8009d42:	781b      	ldrb	r3, [r3, #0]
 8009d44:	2b04      	cmp	r3, #4
 8009d46:	d11a      	bne.n	8009d7e <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d103      	bne.n	8009d56 <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2200      	movs	r2, #0
 8009d52:	71da      	strb	r2, [r3, #7]
 8009d54:	e013      	b.n	8009d7e <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	79db      	ldrb	r3, [r3, #7]
 8009d5a:	2b03      	cmp	r3, #3
 8009d5c:	d10f      	bne.n	8009d7e <remove_chain+0x15e>
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	689b      	ldr	r3, [r3, #8]
 8009d62:	687a      	ldr	r2, [r7, #4]
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d30a      	bcc.n	8009d7e <remove_chain+0x15e>
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	689a      	ldr	r2, [r3, #8]
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	699b      	ldr	r3, [r3, #24]
 8009d70:	4413      	add	r3, r2
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	429a      	cmp	r2, r3
 8009d76:	d802      	bhi.n	8009d7e <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	2202      	movs	r2, #2
 8009d7c:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 8009d7e:	2300      	movs	r3, #0
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3728      	adds	r7, #40	; 0x28
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b088      	sub	sp, #32
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d10d      	bne.n	8009dba <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	699b      	ldr	r3, [r3, #24]
 8009da2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009da4:	69bb      	ldr	r3, [r7, #24]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d004      	beq.n	8009db4 <create_chain+0x2c>
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	6a1b      	ldr	r3, [r3, #32]
 8009dae:	69ba      	ldr	r2, [r7, #24]
 8009db0:	429a      	cmp	r2, r3
 8009db2:	d31b      	bcc.n	8009dec <create_chain+0x64>
 8009db4:	2301      	movs	r3, #1
 8009db6:	61bb      	str	r3, [r7, #24]
 8009db8:	e018      	b.n	8009dec <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009dba:	6839      	ldr	r1, [r7, #0]
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f7ff fb61 	bl	8009484 <get_fat>
 8009dc2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2b01      	cmp	r3, #1
 8009dc8:	d801      	bhi.n	8009dce <create_chain+0x46>
 8009dca:	2301      	movs	r3, #1
 8009dcc:	e0d9      	b.n	8009f82 <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dd4:	d101      	bne.n	8009dda <create_chain+0x52>
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	e0d3      	b.n	8009f82 <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	6a1b      	ldr	r3, [r3, #32]
 8009dde:	68fa      	ldr	r2, [r7, #12]
 8009de0:	429a      	cmp	r2, r3
 8009de2:	d201      	bcs.n	8009de8 <create_chain+0x60>
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	e0cc      	b.n	8009f82 <create_chain+0x1fa>
		scl = clst;
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	2b04      	cmp	r3, #4
 8009df2:	d164      	bne.n	8009ebe <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 8009df4:	2201      	movs	r2, #1
 8009df6:	69b9      	ldr	r1, [r7, #24]
 8009df8:	6938      	ldr	r0, [r7, #16]
 8009dfa:	f7ff fdb5 	bl	8009968 <find_bitmap>
 8009dfe:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 8009e00:	69fb      	ldr	r3, [r7, #28]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d003      	beq.n	8009e0e <create_chain+0x86>
 8009e06:	69fb      	ldr	r3, [r7, #28]
 8009e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e0c:	d101      	bne.n	8009e12 <create_chain+0x8a>
 8009e0e:	69fb      	ldr	r3, [r7, #28]
 8009e10:	e0b7      	b.n	8009f82 <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 8009e12:	2301      	movs	r3, #1
 8009e14:	2201      	movs	r2, #1
 8009e16:	69f9      	ldr	r1, [r7, #28]
 8009e18:	6938      	ldr	r0, [r7, #16]
 8009e1a:	f7ff fe2c 	bl	8009a76 <change_bitmap>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 8009e22:	7dfb      	ldrb	r3, [r7, #23]
 8009e24:	2b02      	cmp	r3, #2
 8009e26:	d101      	bne.n	8009e2c <create_chain+0xa4>
 8009e28:	2301      	movs	r3, #1
 8009e2a:	e0aa      	b.n	8009f82 <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 8009e2c:	7dfb      	ldrb	r3, [r7, #23]
 8009e2e:	2b01      	cmp	r3, #1
 8009e30:	d102      	bne.n	8009e38 <create_chain+0xb0>
 8009e32:	f04f 33ff 	mov.w	r3, #4294967295
 8009e36:	e0a4      	b.n	8009f82 <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d103      	bne.n	8009e46 <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2202      	movs	r2, #2
 8009e42:	71da      	strb	r2, [r3, #7]
 8009e44:	e011      	b.n	8009e6a <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	79db      	ldrb	r3, [r3, #7]
 8009e4a:	2b02      	cmp	r3, #2
 8009e4c:	d10d      	bne.n	8009e6a <create_chain+0xe2>
 8009e4e:	69bb      	ldr	r3, [r7, #24]
 8009e50:	3301      	adds	r3, #1
 8009e52:	69fa      	ldr	r2, [r7, #28]
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d008      	beq.n	8009e6a <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	689b      	ldr	r3, [r3, #8]
 8009e5c:	69ba      	ldr	r2, [r7, #24]
 8009e5e:	1ad2      	subs	r2, r2, r3
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2203      	movs	r2, #3
 8009e68:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	79db      	ldrb	r3, [r3, #7]
 8009e6e:	2b02      	cmp	r3, #2
 8009e70:	d064      	beq.n	8009f3c <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	3301      	adds	r3, #1
 8009e76:	69fa      	ldr	r2, [r7, #28]
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d10b      	bne.n	8009e94 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	69db      	ldr	r3, [r3, #28]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d003      	beq.n	8009e8c <create_chain+0x104>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	69db      	ldr	r3, [r3, #28]
 8009e88:	3301      	adds	r3, #1
 8009e8a:	e000      	b.n	8009e8e <create_chain+0x106>
 8009e8c:	2302      	movs	r3, #2
 8009e8e:	687a      	ldr	r2, [r7, #4]
 8009e90:	61d3      	str	r3, [r2, #28]
 8009e92:	e053      	b.n	8009f3c <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	69db      	ldr	r3, [r3, #28]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d102      	bne.n	8009ea2 <create_chain+0x11a>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 8009ea2:	69fa      	ldr	r2, [r7, #28]
 8009ea4:	6839      	ldr	r1, [r7, #0]
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f7ff fe89 	bl	8009bbe <fill_last_frag>
 8009eac:	4603      	mov	r3, r0
 8009eae:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 8009eb0:	7dfb      	ldrb	r3, [r7, #23]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d142      	bne.n	8009f3c <create_chain+0x1b4>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2201      	movs	r2, #1
 8009eba:	61da      	str	r2, [r3, #28]
 8009ebc:	e03e      	b.n	8009f3c <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009ebe:	69bb      	ldr	r3, [r7, #24]
 8009ec0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009ec2:	69fb      	ldr	r3, [r7, #28]
 8009ec4:	3301      	adds	r3, #1
 8009ec6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	6a1b      	ldr	r3, [r3, #32]
 8009ecc:	69fa      	ldr	r2, [r7, #28]
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d307      	bcc.n	8009ee2 <create_chain+0x15a>
				ncl = 2;
 8009ed2:	2302      	movs	r3, #2
 8009ed4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009ed6:	69fa      	ldr	r2, [r7, #28]
 8009ed8:	69bb      	ldr	r3, [r7, #24]
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d901      	bls.n	8009ee2 <create_chain+0x15a>
 8009ede:	2300      	movs	r3, #0
 8009ee0:	e04f      	b.n	8009f82 <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009ee2:	69f9      	ldr	r1, [r7, #28]
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f7ff facd 	bl	8009484 <get_fat>
 8009eea:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d00e      	beq.n	8009f10 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	2b01      	cmp	r3, #1
 8009ef6:	d003      	beq.n	8009f00 <create_chain+0x178>
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009efe:	d101      	bne.n	8009f04 <create_chain+0x17c>
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	e03e      	b.n	8009f82 <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 8009f04:	69fa      	ldr	r2, [r7, #28]
 8009f06:	69bb      	ldr	r3, [r7, #24]
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d1da      	bne.n	8009ec2 <create_chain+0x13a>
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	e038      	b.n	8009f82 <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 8009f10:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009f12:	f04f 32ff 	mov.w	r2, #4294967295
 8009f16:	69f9      	ldr	r1, [r7, #28]
 8009f18:	6938      	ldr	r0, [r7, #16]
 8009f1a:	f7ff fc05 	bl	8009728 <put_fat>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009f22:	7dfb      	ldrb	r3, [r7, #23]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d109      	bne.n	8009f3c <create_chain+0x1b4>
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d006      	beq.n	8009f3c <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009f2e:	69fa      	ldr	r2, [r7, #28]
 8009f30:	6839      	ldr	r1, [r7, #0]
 8009f32:	6938      	ldr	r0, [r7, #16]
 8009f34:	f7ff fbf8 	bl	8009728 <put_fat>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009f3c:	7dfb      	ldrb	r3, [r7, #23]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d116      	bne.n	8009f70 <create_chain+0x1e8>
		fs->last_clst = ncl;
 8009f42:	693b      	ldr	r3, [r7, #16]
 8009f44:	69fa      	ldr	r2, [r7, #28]
 8009f46:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	69da      	ldr	r2, [r3, #28]
 8009f4c:	693b      	ldr	r3, [r7, #16]
 8009f4e:	6a1b      	ldr	r3, [r3, #32]
 8009f50:	3b02      	subs	r3, #2
 8009f52:	429a      	cmp	r2, r3
 8009f54:	d804      	bhi.n	8009f60 <create_chain+0x1d8>
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	69db      	ldr	r3, [r3, #28]
 8009f5a:	1e5a      	subs	r2, r3, #1
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	791b      	ldrb	r3, [r3, #4]
 8009f64:	f043 0301 	orr.w	r3, r3, #1
 8009f68:	b2da      	uxtb	r2, r3
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	711a      	strb	r2, [r3, #4]
 8009f6e:	e007      	b.n	8009f80 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009f70:	7dfb      	ldrb	r3, [r7, #23]
 8009f72:	2b01      	cmp	r3, #1
 8009f74:	d102      	bne.n	8009f7c <create_chain+0x1f4>
 8009f76:	f04f 33ff 	mov.w	r3, #4294967295
 8009f7a:	e000      	b.n	8009f7e <create_chain+0x1f6>
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009f80:	69fb      	ldr	r3, [r7, #28]
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3720      	adds	r7, #32
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}

08009f8a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009f8a:	b580      	push	{r7, lr}
 8009f8c:	b088      	sub	sp, #32
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	60f8      	str	r0, [r7, #12]
 8009f92:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fa0:	3304      	adds	r3, #4
 8009fa2:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	899b      	ldrh	r3, [r3, #12]
 8009fa8:	b29a      	uxth	r2, r3
 8009faa:	f04f 0300 	mov.w	r3, #0
 8009fae:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009fb2:	f7f6 fc7b 	bl	80008ac <__aeabi_uldivmod>
 8009fb6:	4602      	mov	r2, r0
 8009fb8:	460b      	mov	r3, r1
 8009fba:	4610      	mov	r0, r2
 8009fbc:	4619      	mov	r1, r3
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	895b      	ldrh	r3, [r3, #10]
 8009fc2:	b29a      	uxth	r2, r3
 8009fc4:	f04f 0300 	mov.w	r3, #0
 8009fc8:	f7f6 fc70 	bl	80008ac <__aeabi_uldivmod>
 8009fcc:	4602      	mov	r2, r0
 8009fce:	460b      	mov	r3, r1
 8009fd0:	4613      	mov	r3, r2
 8009fd2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009fd4:	69bb      	ldr	r3, [r7, #24]
 8009fd6:	1d1a      	adds	r2, r3, #4
 8009fd8:	61ba      	str	r2, [r7, #24]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d101      	bne.n	8009fe8 <clmt_clust+0x5e>
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	e010      	b.n	800a00a <clmt_clust+0x80>
		if (cl < ncl) break;	/* In this fragment? */
 8009fe8:	69fa      	ldr	r2, [r7, #28]
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d307      	bcc.n	800a000 <clmt_clust+0x76>
		cl -= ncl; tbl++;		/* Next fragment */
 8009ff0:	69fa      	ldr	r2, [r7, #28]
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	1ad3      	subs	r3, r2, r3
 8009ff6:	61fb      	str	r3, [r7, #28]
 8009ff8:	69bb      	ldr	r3, [r7, #24]
 8009ffa:	3304      	adds	r3, #4
 8009ffc:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009ffe:	e7e9      	b.n	8009fd4 <clmt_clust+0x4a>
		if (cl < ncl) break;	/* In this fragment? */
 800a000:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a002:	69bb      	ldr	r3, [r7, #24]
 800a004:	681a      	ldr	r2, [r3, #0]
 800a006:	69fb      	ldr	r3, [r7, #28]
 800a008:	4413      	add	r3, r2
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3720      	adds	r7, #32
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}

0800a012 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a012:	b580      	push	{r7, lr}
 800a014:	b086      	sub	sp, #24
 800a016:	af00      	add	r7, sp, #0
 800a018:	6078      	str	r0, [r7, #4]
 800a01a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a022:	693b      	ldr	r3, [r7, #16]
 800a024:	781b      	ldrb	r3, [r3, #0]
 800a026:	2b04      	cmp	r3, #4
 800a028:	d102      	bne.n	800a030 <dir_sdi+0x1e>
 800a02a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a02e:	e001      	b.n	800a034 <dir_sdi+0x22>
 800a030:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	429a      	cmp	r2, r3
 800a038:	d904      	bls.n	800a044 <dir_sdi+0x32>
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	f003 031f 	and.w	r3, r3, #31
 800a040:	2b00      	cmp	r3, #0
 800a042:	d001      	beq.n	800a048 <dir_sdi+0x36>
		return FR_INT_ERR;
 800a044:	2302      	movs	r3, #2
 800a046:	e074      	b.n	800a132 <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	683a      	ldr	r2, [r7, #0]
 800a04c:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	689b      	ldr	r3, [r3, #8]
 800a052:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d109      	bne.n	800a06e <dir_sdi+0x5c>
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	781b      	ldrb	r3, [r3, #0]
 800a05e:	2b02      	cmp	r3, #2
 800a060:	d905      	bls.n	800a06e <dir_sdi+0x5c>
		clst = fs->dirbase;
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a066:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2200      	movs	r2, #0
 800a06c:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d10c      	bne.n	800a08e <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	095b      	lsrs	r3, r3, #5
 800a078:	693a      	ldr	r2, [r7, #16]
 800a07a:	8912      	ldrh	r2, [r2, #8]
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d301      	bcc.n	800a084 <dir_sdi+0x72>
 800a080:	2302      	movs	r3, #2
 800a082:	e056      	b.n	800a132 <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	639a      	str	r2, [r3, #56]	; 0x38
 800a08c:	e02d      	b.n	800a0ea <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	895b      	ldrh	r3, [r3, #10]
 800a092:	461a      	mov	r2, r3
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	899b      	ldrh	r3, [r3, #12]
 800a098:	fb03 f302 	mul.w	r3, r3, r2
 800a09c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a09e:	e019      	b.n	800a0d4 <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6979      	ldr	r1, [r7, #20]
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f7ff f9ed 	bl	8009484 <get_fat>
 800a0aa:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0b2:	d101      	bne.n	800a0b8 <dir_sdi+0xa6>
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	e03c      	b.n	800a132 <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	2b01      	cmp	r3, #1
 800a0bc:	d904      	bls.n	800a0c8 <dir_sdi+0xb6>
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	6a1b      	ldr	r3, [r3, #32]
 800a0c2:	697a      	ldr	r2, [r7, #20]
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d301      	bcc.n	800a0cc <dir_sdi+0xba>
 800a0c8:	2302      	movs	r3, #2
 800a0ca:	e032      	b.n	800a132 <dir_sdi+0x120>
			ofs -= csz;
 800a0cc:	683a      	ldr	r2, [r7, #0]
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	1ad3      	subs	r3, r2, r3
 800a0d2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a0d4:	683a      	ldr	r2, [r7, #0]
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	429a      	cmp	r2, r3
 800a0da:	d2e1      	bcs.n	800a0a0 <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 800a0dc:	6979      	ldr	r1, [r7, #20]
 800a0de:	6938      	ldr	r0, [r7, #16]
 800a0e0:	f7ff f9b0 	bl	8009444 <clust2sect>
 800a0e4:	4602      	mov	r2, r0
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	697a      	ldr	r2, [r7, #20]
 800a0ee:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d101      	bne.n	800a0fc <dir_sdi+0xea>
 800a0f8:	2302      	movs	r3, #2
 800a0fa:	e01a      	b.n	800a132 <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	899b      	ldrh	r3, [r3, #12]
 800a104:	4619      	mov	r1, r3
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	fbb3 f3f1 	udiv	r3, r3, r1
 800a10c:	441a      	add	r2, r3
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	899b      	ldrh	r3, [r3, #12]
 800a11c:	461a      	mov	r2, r3
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	fbb3 f0f2 	udiv	r0, r3, r2
 800a124:	fb02 f200 	mul.w	r2, r2, r0
 800a128:	1a9b      	subs	r3, r3, r2
 800a12a:	18ca      	adds	r2, r1, r3
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800a130:	2300      	movs	r3, #0
}
 800a132:	4618      	mov	r0, r3
 800a134:	3718      	adds	r7, #24
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}

0800a13a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a13a:	b580      	push	{r7, lr}
 800a13c:	b086      	sub	sp, #24
 800a13e:	af00      	add	r7, sp, #0
 800a140:	6078      	str	r0, [r7, #4]
 800a142:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a14e:	3320      	adds	r3, #32
 800a150:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a156:	2b00      	cmp	r3, #0
 800a158:	d00b      	beq.n	800a172 <dir_next+0x38>
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	2b04      	cmp	r3, #4
 800a160:	d102      	bne.n	800a168 <dir_next+0x2e>
 800a162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a166:	e001      	b.n	800a16c <dir_next+0x32>
 800a168:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	429a      	cmp	r2, r3
 800a170:	d801      	bhi.n	800a176 <dir_next+0x3c>
 800a172:	2304      	movs	r3, #4
 800a174:	e0c3      	b.n	800a2fe <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	899b      	ldrh	r3, [r3, #12]
 800a17a:	461a      	mov	r2, r3
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	fbb3 f1f2 	udiv	r1, r3, r2
 800a182:	fb02 f201 	mul.w	r2, r2, r1
 800a186:	1a9b      	subs	r3, r3, r2
 800a188:	2b00      	cmp	r3, #0
 800a18a:	f040 80a5 	bne.w	800a2d8 <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a192:	1c5a      	adds	r2, r3, #1
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d10b      	bne.n	800a1b8 <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	095b      	lsrs	r3, r3, #5
 800a1a4:	68fa      	ldr	r2, [r7, #12]
 800a1a6:	8912      	ldrh	r2, [r2, #8]
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	f0c0 8095 	bcc.w	800a2d8 <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	639a      	str	r2, [r3, #56]	; 0x38
 800a1b4:	2304      	movs	r3, #4
 800a1b6:	e0a2      	b.n	800a2fe <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	899b      	ldrh	r3, [r3, #12]
 800a1bc:	461a      	mov	r2, r3
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1c4:	68fa      	ldr	r2, [r7, #12]
 800a1c6:	8952      	ldrh	r2, [r2, #10]
 800a1c8:	3a01      	subs	r2, #1
 800a1ca:	4013      	ands	r3, r2
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	f040 8083 	bne.w	800a2d8 <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a1d2:	687a      	ldr	r2, [r7, #4]
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1d8:	4619      	mov	r1, r3
 800a1da:	4610      	mov	r0, r2
 800a1dc:	f7ff f952 	bl	8009484 <get_fat>
 800a1e0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	2b01      	cmp	r3, #1
 800a1e6:	d801      	bhi.n	800a1ec <dir_next+0xb2>
 800a1e8:	2302      	movs	r3, #2
 800a1ea:	e088      	b.n	800a2fe <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a1ec:	697b      	ldr	r3, [r7, #20]
 800a1ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1f2:	d101      	bne.n	800a1f8 <dir_next+0xbe>
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	e082      	b.n	800a2fe <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	6a1b      	ldr	r3, [r3, #32]
 800a1fc:	697a      	ldr	r2, [r7, #20]
 800a1fe:	429a      	cmp	r2, r3
 800a200:	d360      	bcc.n	800a2c4 <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d104      	bne.n	800a212 <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2200      	movs	r2, #0
 800a20c:	639a      	str	r2, [r3, #56]	; 0x38
 800a20e:	2304      	movs	r3, #4
 800a210:	e075      	b.n	800a2fe <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a212:	687a      	ldr	r2, [r7, #4]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a218:	4619      	mov	r1, r3
 800a21a:	4610      	mov	r0, r2
 800a21c:	f7ff fdb4 	bl	8009d88 <create_chain>
 800a220:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d101      	bne.n	800a22c <dir_next+0xf2>
 800a228:	2307      	movs	r3, #7
 800a22a:	e068      	b.n	800a2fe <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	2b01      	cmp	r3, #1
 800a230:	d101      	bne.n	800a236 <dir_next+0xfc>
 800a232:	2302      	movs	r3, #2
 800a234:	e063      	b.n	800a2fe <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a23c:	d101      	bne.n	800a242 <dir_next+0x108>
 800a23e:	2301      	movs	r3, #1
 800a240:	e05d      	b.n	800a2fe <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	79db      	ldrb	r3, [r3, #7]
 800a246:	f043 0304 	orr.w	r3, r3, #4
 800a24a:	b2da      	uxtb	r2, r3
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a250:	68f8      	ldr	r0, [r7, #12]
 800a252:	f7ff f815 	bl	8009280 <sync_window>
 800a256:	4603      	mov	r3, r0
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d001      	beq.n	800a260 <dir_next+0x126>
 800a25c:	2301      	movs	r3, #1
 800a25e:	e04e      	b.n	800a2fe <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	899b      	ldrh	r3, [r3, #12]
 800a26a:	461a      	mov	r2, r3
 800a26c:	2100      	movs	r1, #0
 800a26e:	f7fe fe3d 	bl	8008eec <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a272:	2300      	movs	r3, #0
 800a274:	613b      	str	r3, [r7, #16]
 800a276:	6979      	ldr	r1, [r7, #20]
 800a278:	68f8      	ldr	r0, [r7, #12]
 800a27a:	f7ff f8e3 	bl	8009444 <clust2sect>
 800a27e:	4602      	mov	r2, r0
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	639a      	str	r2, [r3, #56]	; 0x38
 800a284:	e012      	b.n	800a2ac <dir_next+0x172>
						fs->wflag = 1;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	2201      	movs	r2, #1
 800a28a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a28c:	68f8      	ldr	r0, [r7, #12]
 800a28e:	f7fe fff7 	bl	8009280 <sync_window>
 800a292:	4603      	mov	r3, r0
 800a294:	2b00      	cmp	r3, #0
 800a296:	d001      	beq.n	800a29c <dir_next+0x162>
 800a298:	2301      	movs	r3, #1
 800a29a:	e030      	b.n	800a2fe <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	3301      	adds	r3, #1
 800a2a0:	613b      	str	r3, [r7, #16]
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2a6:	1c5a      	adds	r2, r3, #1
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	639a      	str	r2, [r3, #56]	; 0x38
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	895b      	ldrh	r3, [r3, #10]
 800a2b0:	461a      	mov	r2, r3
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d3e6      	bcc.n	800a286 <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	1ad2      	subs	r2, r2, r3
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	697a      	ldr	r2, [r7, #20]
 800a2c8:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 800a2ca:	6979      	ldr	r1, [r7, #20]
 800a2cc:	68f8      	ldr	r0, [r7, #12]
 800a2ce:	f7ff f8b9 	bl	8009444 <clust2sect>
 800a2d2:	4602      	mov	r2, r0
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	68ba      	ldr	r2, [r7, #8]
 800a2dc:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	899b      	ldrh	r3, [r3, #12]
 800a2e8:	461a      	mov	r2, r3
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	fbb3 f0f2 	udiv	r0, r3, r2
 800a2f0:	fb02 f200 	mul.w	r2, r2, r0
 800a2f4:	1a9b      	subs	r3, r3, r2
 800a2f6:	18ca      	adds	r2, r1, r3
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800a2fc:	2300      	movs	r3, #0
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	3718      	adds	r7, #24
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}

0800a306 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a306:	b580      	push	{r7, lr}
 800a308:	b086      	sub	sp, #24
 800a30a:	af00      	add	r7, sp, #0
 800a30c:	6078      	str	r0, [r7, #4]
 800a30e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a316:	2100      	movs	r1, #0
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f7ff fe7a 	bl	800a012 <dir_sdi>
 800a31e:	4603      	mov	r3, r0
 800a320:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a322:	7dfb      	ldrb	r3, [r7, #23]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d140      	bne.n	800a3aa <dir_alloc+0xa4>
		n = 0;
 800a328:	2300      	movs	r3, #0
 800a32a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a330:	4619      	mov	r1, r3
 800a332:	68f8      	ldr	r0, [r7, #12]
 800a334:	f7fe ffe8 	bl	8009308 <move_window>
 800a338:	4603      	mov	r3, r0
 800a33a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a33c:	7dfb      	ldrb	r3, [r7, #23]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d132      	bne.n	800a3a8 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	781b      	ldrb	r3, [r3, #0]
 800a346:	2b04      	cmp	r3, #4
 800a348:	d108      	bne.n	800a35c <dir_alloc+0x56>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a34e:	781b      	ldrb	r3, [r3, #0]
 800a350:	b25b      	sxtb	r3, r3
 800a352:	43db      	mvns	r3, r3
 800a354:	b2db      	uxtb	r3, r3
 800a356:	09db      	lsrs	r3, r3, #7
 800a358:	b2db      	uxtb	r3, r3
 800a35a:	e00f      	b.n	800a37c <dir_alloc+0x76>
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a360:	781b      	ldrb	r3, [r3, #0]
 800a362:	2be5      	cmp	r3, #229	; 0xe5
 800a364:	d004      	beq.n	800a370 <dir_alloc+0x6a>
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a36a:	781b      	ldrb	r3, [r3, #0]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d101      	bne.n	800a374 <dir_alloc+0x6e>
 800a370:	2301      	movs	r3, #1
 800a372:	e000      	b.n	800a376 <dir_alloc+0x70>
 800a374:	2300      	movs	r3, #0
 800a376:	f003 0301 	and.w	r3, r3, #1
 800a37a:	b2db      	uxtb	r3, r3
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d007      	beq.n	800a390 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	3301      	adds	r3, #1
 800a384:	613b      	str	r3, [r7, #16]
 800a386:	693a      	ldr	r2, [r7, #16]
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	429a      	cmp	r2, r3
 800a38c:	d102      	bne.n	800a394 <dir_alloc+0x8e>
 800a38e:	e00c      	b.n	800a3aa <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a390:	2300      	movs	r3, #0
 800a392:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a394:	2101      	movs	r1, #1
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f7ff fecf 	bl	800a13a <dir_next>
 800a39c:	4603      	mov	r3, r0
 800a39e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a3a0:	7dfb      	ldrb	r3, [r7, #23]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d0c2      	beq.n	800a32c <dir_alloc+0x26>
 800a3a6:	e000      	b.n	800a3aa <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800a3a8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a3aa:	7dfb      	ldrb	r3, [r7, #23]
 800a3ac:	2b04      	cmp	r3, #4
 800a3ae:	d101      	bne.n	800a3b4 <dir_alloc+0xae>
 800a3b0:	2307      	movs	r3, #7
 800a3b2:	75fb      	strb	r3, [r7, #23]
	return res;
 800a3b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3718      	adds	r7, #24
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}

0800a3be <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a3be:	b580      	push	{r7, lr}
 800a3c0:	b084      	sub	sp, #16
 800a3c2:	af00      	add	r7, sp, #0
 800a3c4:	6078      	str	r0, [r7, #4]
 800a3c6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	331a      	adds	r3, #26
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f7fe fba7 	bl	8008b20 <ld_word>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	781b      	ldrb	r3, [r3, #0]
 800a3da:	2b03      	cmp	r3, #3
 800a3dc:	d109      	bne.n	800a3f2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	3314      	adds	r3, #20
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f7fe fb9c 	bl	8008b20 <ld_word>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	041b      	lsls	r3, r3, #16
 800a3ec:	68fa      	ldr	r2, [r7, #12]
 800a3ee:	4313      	orrs	r3, r2
 800a3f0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
}
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	3710      	adds	r7, #16
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}

0800a3fc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b084      	sub	sp, #16
 800a400:	af00      	add	r7, sp, #0
 800a402:	60f8      	str	r0, [r7, #12]
 800a404:	60b9      	str	r1, [r7, #8]
 800a406:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	331a      	adds	r3, #26
 800a40c:	687a      	ldr	r2, [r7, #4]
 800a40e:	b292      	uxth	r2, r2
 800a410:	4611      	mov	r1, r2
 800a412:	4618      	mov	r0, r3
 800a414:	f7fe fc7a 	bl	8008d0c <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	781b      	ldrb	r3, [r3, #0]
 800a41c:	2b03      	cmp	r3, #3
 800a41e:	d109      	bne.n	800a434 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	f103 0214 	add.w	r2, r3, #20
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	0c1b      	lsrs	r3, r3, #16
 800a42a:	b29b      	uxth	r3, r3
 800a42c:	4619      	mov	r1, r3
 800a42e:	4610      	mov	r0, r2
 800a430:	f7fe fc6c 	bl	8008d0c <st_word>
	}
}
 800a434:	bf00      	nop
 800a436:	3710      	adds	r7, #16
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800a43c:	b590      	push	{r4, r7, lr}
 800a43e:	b087      	sub	sp, #28
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
 800a444:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	331a      	adds	r3, #26
 800a44a:	4618      	mov	r0, r3
 800a44c:	f7fe fb68 	bl	8008b20 <ld_word>
 800a450:	4603      	mov	r3, r0
 800a452:	2b00      	cmp	r3, #0
 800a454:	d001      	beq.n	800a45a <cmp_lfn+0x1e>
 800a456:	2300      	movs	r3, #0
 800a458:	e059      	b.n	800a50e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a462:	1e5a      	subs	r2, r3, #1
 800a464:	4613      	mov	r3, r2
 800a466:	005b      	lsls	r3, r3, #1
 800a468:	4413      	add	r3, r2
 800a46a:	009b      	lsls	r3, r3, #2
 800a46c:	4413      	add	r3, r2
 800a46e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a470:	2301      	movs	r3, #1
 800a472:	81fb      	strh	r3, [r7, #14]
 800a474:	2300      	movs	r3, #0
 800a476:	613b      	str	r3, [r7, #16]
 800a478:	e033      	b.n	800a4e2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a47a:	4a27      	ldr	r2, [pc, #156]	; (800a518 <cmp_lfn+0xdc>)
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	4413      	add	r3, r2
 800a480:	781b      	ldrb	r3, [r3, #0]
 800a482:	461a      	mov	r2, r3
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	4413      	add	r3, r2
 800a488:	4618      	mov	r0, r3
 800a48a:	f7fe fb49 	bl	8008b20 <ld_word>
 800a48e:	4603      	mov	r3, r0
 800a490:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800a492:	89fb      	ldrh	r3, [r7, #14]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d01a      	beq.n	800a4ce <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	2bfe      	cmp	r3, #254	; 0xfe
 800a49c:	d812      	bhi.n	800a4c4 <cmp_lfn+0x88>
 800a49e:	89bb      	ldrh	r3, [r7, #12]
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f003 f863 	bl	800d56c <ff_wtoupper>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	461c      	mov	r4, r3
 800a4aa:	697b      	ldr	r3, [r7, #20]
 800a4ac:	1c5a      	adds	r2, r3, #1
 800a4ae:	617a      	str	r2, [r7, #20]
 800a4b0:	005b      	lsls	r3, r3, #1
 800a4b2:	687a      	ldr	r2, [r7, #4]
 800a4b4:	4413      	add	r3, r2
 800a4b6:	881b      	ldrh	r3, [r3, #0]
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f003 f857 	bl	800d56c <ff_wtoupper>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	429c      	cmp	r4, r3
 800a4c2:	d001      	beq.n	800a4c8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	e022      	b.n	800a50e <cmp_lfn+0xd2>
			}
			wc = uc;
 800a4c8:	89bb      	ldrh	r3, [r7, #12]
 800a4ca:	81fb      	strh	r3, [r7, #14]
 800a4cc:	e006      	b.n	800a4dc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a4ce:	89bb      	ldrh	r3, [r7, #12]
 800a4d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d001      	beq.n	800a4dc <cmp_lfn+0xa0>
 800a4d8:	2300      	movs	r3, #0
 800a4da:	e018      	b.n	800a50e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	3301      	adds	r3, #1
 800a4e0:	613b      	str	r3, [r7, #16]
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	2b0c      	cmp	r3, #12
 800a4e6:	d9c8      	bls.n	800a47a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	781b      	ldrb	r3, [r3, #0]
 800a4ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d00b      	beq.n	800a50c <cmp_lfn+0xd0>
 800a4f4:	89fb      	ldrh	r3, [r7, #14]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d008      	beq.n	800a50c <cmp_lfn+0xd0>
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	005b      	lsls	r3, r3, #1
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	4413      	add	r3, r2
 800a502:	881b      	ldrh	r3, [r3, #0]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d001      	beq.n	800a50c <cmp_lfn+0xd0>
 800a508:	2300      	movs	r3, #0
 800a50a:	e000      	b.n	800a50e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800a50c:	2301      	movs	r3, #1
}
 800a50e:	4618      	mov	r0, r3
 800a510:	371c      	adds	r7, #28
 800a512:	46bd      	mov	sp, r7
 800a514:	bd90      	pop	{r4, r7, pc}
 800a516:	bf00      	nop
 800a518:	080105bc 	.word	0x080105bc

0800a51c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b086      	sub	sp, #24
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
 800a524:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	331a      	adds	r3, #26
 800a52a:	4618      	mov	r0, r3
 800a52c:	f7fe faf8 	bl	8008b20 <ld_word>
 800a530:	4603      	mov	r3, r0
 800a532:	2b00      	cmp	r3, #0
 800a534:	d001      	beq.n	800a53a <pick_lfn+0x1e>
 800a536:	2300      	movs	r3, #0
 800a538:	e04d      	b.n	800a5d6 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	781b      	ldrb	r3, [r3, #0]
 800a53e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a542:	1e5a      	subs	r2, r3, #1
 800a544:	4613      	mov	r3, r2
 800a546:	005b      	lsls	r3, r3, #1
 800a548:	4413      	add	r3, r2
 800a54a:	009b      	lsls	r3, r3, #2
 800a54c:	4413      	add	r3, r2
 800a54e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a550:	2301      	movs	r3, #1
 800a552:	81fb      	strh	r3, [r7, #14]
 800a554:	2300      	movs	r3, #0
 800a556:	613b      	str	r3, [r7, #16]
 800a558:	e028      	b.n	800a5ac <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a55a:	4a21      	ldr	r2, [pc, #132]	; (800a5e0 <pick_lfn+0xc4>)
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	4413      	add	r3, r2
 800a560:	781b      	ldrb	r3, [r3, #0]
 800a562:	461a      	mov	r2, r3
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	4413      	add	r3, r2
 800a568:	4618      	mov	r0, r3
 800a56a:	f7fe fad9 	bl	8008b20 <ld_word>
 800a56e:	4603      	mov	r3, r0
 800a570:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800a572:	89fb      	ldrh	r3, [r7, #14]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d00f      	beq.n	800a598 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	2bfe      	cmp	r3, #254	; 0xfe
 800a57c:	d901      	bls.n	800a582 <pick_lfn+0x66>
 800a57e:	2300      	movs	r3, #0
 800a580:	e029      	b.n	800a5d6 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800a582:	89bb      	ldrh	r3, [r7, #12]
 800a584:	81fb      	strh	r3, [r7, #14]
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	1c5a      	adds	r2, r3, #1
 800a58a:	617a      	str	r2, [r7, #20]
 800a58c:	005b      	lsls	r3, r3, #1
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	4413      	add	r3, r2
 800a592:	89fa      	ldrh	r2, [r7, #14]
 800a594:	801a      	strh	r2, [r3, #0]
 800a596:	e006      	b.n	800a5a6 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a598:	89bb      	ldrh	r3, [r7, #12]
 800a59a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d001      	beq.n	800a5a6 <pick_lfn+0x8a>
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	e017      	b.n	800a5d6 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	3301      	adds	r3, #1
 800a5aa:	613b      	str	r3, [r7, #16]
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	2b0c      	cmp	r3, #12
 800a5b0:	d9d3      	bls.n	800a55a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	781b      	ldrb	r3, [r3, #0]
 800a5b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d00a      	beq.n	800a5d4 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	2bfe      	cmp	r3, #254	; 0xfe
 800a5c2:	d901      	bls.n	800a5c8 <pick_lfn+0xac>
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	e006      	b.n	800a5d6 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	005b      	lsls	r3, r3, #1
 800a5cc:	687a      	ldr	r2, [r7, #4]
 800a5ce:	4413      	add	r3, r2
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800a5d4:	2301      	movs	r3, #1
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3718      	adds	r7, #24
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}
 800a5de:	bf00      	nop
 800a5e0:	080105bc 	.word	0x080105bc

0800a5e4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b088      	sub	sp, #32
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	60f8      	str	r0, [r7, #12]
 800a5ec:	60b9      	str	r1, [r7, #8]
 800a5ee:	4611      	mov	r1, r2
 800a5f0:	461a      	mov	r2, r3
 800a5f2:	460b      	mov	r3, r1
 800a5f4:	71fb      	strb	r3, [r7, #7]
 800a5f6:	4613      	mov	r3, r2
 800a5f8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	330d      	adds	r3, #13
 800a5fe:	79ba      	ldrb	r2, [r7, #6]
 800a600:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	330b      	adds	r3, #11
 800a606:	220f      	movs	r2, #15
 800a608:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	330c      	adds	r3, #12
 800a60e:	2200      	movs	r2, #0
 800a610:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	331a      	adds	r3, #26
 800a616:	2100      	movs	r1, #0
 800a618:	4618      	mov	r0, r3
 800a61a:	f7fe fb77 	bl	8008d0c <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800a61e:	79fb      	ldrb	r3, [r7, #7]
 800a620:	1e5a      	subs	r2, r3, #1
 800a622:	4613      	mov	r3, r2
 800a624:	005b      	lsls	r3, r3, #1
 800a626:	4413      	add	r3, r2
 800a628:	009b      	lsls	r3, r3, #2
 800a62a:	4413      	add	r3, r2
 800a62c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800a62e:	2300      	movs	r3, #0
 800a630:	82fb      	strh	r3, [r7, #22]
 800a632:	2300      	movs	r3, #0
 800a634:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800a636:	8afb      	ldrh	r3, [r7, #22]
 800a638:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d007      	beq.n	800a650 <put_lfn+0x6c>
 800a640:	69fb      	ldr	r3, [r7, #28]
 800a642:	1c5a      	adds	r2, r3, #1
 800a644:	61fa      	str	r2, [r7, #28]
 800a646:	005b      	lsls	r3, r3, #1
 800a648:	68fa      	ldr	r2, [r7, #12]
 800a64a:	4413      	add	r3, r2
 800a64c:	881b      	ldrh	r3, [r3, #0]
 800a64e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800a650:	4a17      	ldr	r2, [pc, #92]	; (800a6b0 <put_lfn+0xcc>)
 800a652:	69bb      	ldr	r3, [r7, #24]
 800a654:	4413      	add	r3, r2
 800a656:	781b      	ldrb	r3, [r3, #0]
 800a658:	461a      	mov	r2, r3
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	4413      	add	r3, r2
 800a65e:	8afa      	ldrh	r2, [r7, #22]
 800a660:	4611      	mov	r1, r2
 800a662:	4618      	mov	r0, r3
 800a664:	f7fe fb52 	bl	8008d0c <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800a668:	8afb      	ldrh	r3, [r7, #22]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d102      	bne.n	800a674 <put_lfn+0x90>
 800a66e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a672:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800a674:	69bb      	ldr	r3, [r7, #24]
 800a676:	3301      	adds	r3, #1
 800a678:	61bb      	str	r3, [r7, #24]
 800a67a:	69bb      	ldr	r3, [r7, #24]
 800a67c:	2b0c      	cmp	r3, #12
 800a67e:	d9da      	bls.n	800a636 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800a680:	8afb      	ldrh	r3, [r7, #22]
 800a682:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a686:	4293      	cmp	r3, r2
 800a688:	d006      	beq.n	800a698 <put_lfn+0xb4>
 800a68a:	69fb      	ldr	r3, [r7, #28]
 800a68c:	005b      	lsls	r3, r3, #1
 800a68e:	68fa      	ldr	r2, [r7, #12]
 800a690:	4413      	add	r3, r2
 800a692:	881b      	ldrh	r3, [r3, #0]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d103      	bne.n	800a6a0 <put_lfn+0xbc>
 800a698:	79fb      	ldrb	r3, [r7, #7]
 800a69a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a69e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	79fa      	ldrb	r2, [r7, #7]
 800a6a4:	701a      	strb	r2, [r3, #0]
}
 800a6a6:	bf00      	nop
 800a6a8:	3720      	adds	r7, #32
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}
 800a6ae:	bf00      	nop
 800a6b0:	080105bc 	.word	0x080105bc

0800a6b4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b08c      	sub	sp, #48	; 0x30
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	60f8      	str	r0, [r7, #12]
 800a6bc:	60b9      	str	r1, [r7, #8]
 800a6be:	607a      	str	r2, [r7, #4]
 800a6c0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800a6c2:	220b      	movs	r2, #11
 800a6c4:	68b9      	ldr	r1, [r7, #8]
 800a6c6:	68f8      	ldr	r0, [r7, #12]
 800a6c8:	f7fe fbef 	bl	8008eaa <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	2b05      	cmp	r3, #5
 800a6d0:	d92b      	bls.n	800a72a <gen_numname+0x76>
		sr = seq;
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800a6d6:	e022      	b.n	800a71e <gen_numname+0x6a>
			wc = *lfn++;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	1c9a      	adds	r2, r3, #2
 800a6dc:	607a      	str	r2, [r7, #4]
 800a6de:	881b      	ldrh	r3, [r3, #0]
 800a6e0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a6e6:	e017      	b.n	800a718 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800a6e8:	69fb      	ldr	r3, [r7, #28]
 800a6ea:	005a      	lsls	r2, r3, #1
 800a6ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a6ee:	f003 0301 	and.w	r3, r3, #1
 800a6f2:	4413      	add	r3, r2
 800a6f4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800a6f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a6f8:	085b      	lsrs	r3, r3, #1
 800a6fa:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800a6fc:	69fb      	ldr	r3, [r7, #28]
 800a6fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a702:	2b00      	cmp	r3, #0
 800a704:	d005      	beq.n	800a712 <gen_numname+0x5e>
 800a706:	69fb      	ldr	r3, [r7, #28]
 800a708:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800a70c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800a710:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800a712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a714:	3301      	adds	r3, #1
 800a716:	62bb      	str	r3, [r7, #40]	; 0x28
 800a718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a71a:	2b0f      	cmp	r3, #15
 800a71c:	d9e4      	bls.n	800a6e8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	881b      	ldrh	r3, [r3, #0]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d1d8      	bne.n	800a6d8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800a726:	69fb      	ldr	r3, [r7, #28]
 800a728:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800a72a:	2307      	movs	r3, #7
 800a72c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	b2db      	uxtb	r3, r3
 800a732:	f003 030f 	and.w	r3, r3, #15
 800a736:	b2db      	uxtb	r3, r3
 800a738:	3330      	adds	r3, #48	; 0x30
 800a73a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800a73e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a742:	2b39      	cmp	r3, #57	; 0x39
 800a744:	d904      	bls.n	800a750 <gen_numname+0x9c>
 800a746:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a74a:	3307      	adds	r3, #7
 800a74c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800a750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a752:	1e5a      	subs	r2, r3, #1
 800a754:	62ba      	str	r2, [r7, #40]	; 0x28
 800a756:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800a75a:	4413      	add	r3, r2
 800a75c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a760:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	091b      	lsrs	r3, r3, #4
 800a768:	603b      	str	r3, [r7, #0]
	} while (seq);
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d1de      	bne.n	800a72e <gen_numname+0x7a>
	ns[i] = '~';
 800a770:	f107 0214 	add.w	r2, r7, #20
 800a774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a776:	4413      	add	r3, r2
 800a778:	227e      	movs	r2, #126	; 0x7e
 800a77a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800a77c:	2300      	movs	r3, #0
 800a77e:	627b      	str	r3, [r7, #36]	; 0x24
 800a780:	e002      	b.n	800a788 <gen_numname+0xd4>
 800a782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a784:	3301      	adds	r3, #1
 800a786:	627b      	str	r3, [r7, #36]	; 0x24
 800a788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d205      	bcs.n	800a79c <gen_numname+0xe8>
 800a790:	68fa      	ldr	r2, [r7, #12]
 800a792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a794:	4413      	add	r3, r2
 800a796:	781b      	ldrb	r3, [r3, #0]
 800a798:	2b20      	cmp	r3, #32
 800a79a:	d1f2      	bne.n	800a782 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800a79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a79e:	2b07      	cmp	r3, #7
 800a7a0:	d808      	bhi.n	800a7b4 <gen_numname+0x100>
 800a7a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7a4:	1c5a      	adds	r2, r3, #1
 800a7a6:	62ba      	str	r2, [r7, #40]	; 0x28
 800a7a8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800a7ac:	4413      	add	r3, r2
 800a7ae:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800a7b2:	e000      	b.n	800a7b6 <gen_numname+0x102>
 800a7b4:	2120      	movs	r1, #32
 800a7b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b8:	1c5a      	adds	r2, r3, #1
 800a7ba:	627a      	str	r2, [r7, #36]	; 0x24
 800a7bc:	68fa      	ldr	r2, [r7, #12]
 800a7be:	4413      	add	r3, r2
 800a7c0:	460a      	mov	r2, r1
 800a7c2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800a7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c6:	2b07      	cmp	r3, #7
 800a7c8:	d9e8      	bls.n	800a79c <gen_numname+0xe8>
}
 800a7ca:	bf00      	nop
 800a7cc:	bf00      	nop
 800a7ce:	3730      	adds	r7, #48	; 0x30
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}

0800a7d4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b085      	sub	sp, #20
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800a7e0:	230b      	movs	r3, #11
 800a7e2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800a7e4:	7bfb      	ldrb	r3, [r7, #15]
 800a7e6:	b2da      	uxtb	r2, r3
 800a7e8:	0852      	lsrs	r2, r2, #1
 800a7ea:	01db      	lsls	r3, r3, #7
 800a7ec:	4313      	orrs	r3, r2
 800a7ee:	b2da      	uxtb	r2, r3
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	1c59      	adds	r1, r3, #1
 800a7f4:	6079      	str	r1, [r7, #4]
 800a7f6:	781b      	ldrb	r3, [r3, #0]
 800a7f8:	4413      	add	r3, r2
 800a7fa:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	3b01      	subs	r3, #1
 800a800:	60bb      	str	r3, [r7, #8]
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d1ed      	bne.n	800a7e4 <sum_sfn+0x10>
	return sum;
 800a808:	7bfb      	ldrb	r3, [r7, #15]
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3714      	adds	r7, #20
 800a80e:	46bd      	mov	sp, r7
 800a810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a814:	4770      	bx	lr

0800a816 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800a816:	b480      	push	{r7}
 800a818:	b087      	sub	sp, #28
 800a81a:	af00      	add	r7, sp, #0
 800a81c:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	3301      	adds	r3, #1
 800a822:	781b      	ldrb	r3, [r3, #0]
 800a824:	3301      	adds	r3, #1
 800a826:	015b      	lsls	r3, r3, #5
 800a828:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800a82a:	2300      	movs	r3, #0
 800a82c:	827b      	strh	r3, [r7, #18]
 800a82e:	2300      	movs	r3, #0
 800a830:	617b      	str	r3, [r7, #20]
 800a832:	e018      	b.n	800a866 <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	2b02      	cmp	r3, #2
 800a838:	d103      	bne.n	800a842 <xdir_sum+0x2c>
			i++;
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	3301      	adds	r3, #1
 800a83e:	617b      	str	r3, [r7, #20]
 800a840:	e00e      	b.n	800a860 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800a842:	8a7b      	ldrh	r3, [r7, #18]
 800a844:	03db      	lsls	r3, r3, #15
 800a846:	b29a      	uxth	r2, r3
 800a848:	8a7b      	ldrh	r3, [r7, #18]
 800a84a:	085b      	lsrs	r3, r3, #1
 800a84c:	b29b      	uxth	r3, r3
 800a84e:	4413      	add	r3, r2
 800a850:	b29a      	uxth	r2, r3
 800a852:	6879      	ldr	r1, [r7, #4]
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	440b      	add	r3, r1
 800a858:	781b      	ldrb	r3, [r3, #0]
 800a85a:	b29b      	uxth	r3, r3
 800a85c:	4413      	add	r3, r2
 800a85e:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	3301      	adds	r3, #1
 800a864:	617b      	str	r3, [r7, #20]
 800a866:	697a      	ldr	r2, [r7, #20]
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d3e2      	bcc.n	800a834 <xdir_sum+0x1e>
		}
	}
	return sum;
 800a86e:	8a7b      	ldrh	r3, [r7, #18]
}
 800a870:	4618      	mov	r0, r3
 800a872:	371c      	adds	r7, #28
 800a874:	46bd      	mov	sp, r7
 800a876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87a:	4770      	bx	lr

0800a87c <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b084      	sub	sp, #16
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800a884:	2300      	movs	r3, #0
 800a886:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800a888:	e01f      	b.n	800a8ca <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800a88a:	89bb      	ldrh	r3, [r7, #12]
 800a88c:	4618      	mov	r0, r3
 800a88e:	f002 fe6d 	bl	800d56c <ff_wtoupper>
 800a892:	4603      	mov	r3, r0
 800a894:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800a896:	89fb      	ldrh	r3, [r7, #14]
 800a898:	03db      	lsls	r3, r3, #15
 800a89a:	b29a      	uxth	r2, r3
 800a89c:	89fb      	ldrh	r3, [r7, #14]
 800a89e:	085b      	lsrs	r3, r3, #1
 800a8a0:	b29b      	uxth	r3, r3
 800a8a2:	4413      	add	r3, r2
 800a8a4:	b29a      	uxth	r2, r3
 800a8a6:	89bb      	ldrh	r3, [r7, #12]
 800a8a8:	b2db      	uxtb	r3, r3
 800a8aa:	b29b      	uxth	r3, r3
 800a8ac:	4413      	add	r3, r2
 800a8ae:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800a8b0:	89fb      	ldrh	r3, [r7, #14]
 800a8b2:	03db      	lsls	r3, r3, #15
 800a8b4:	b29a      	uxth	r2, r3
 800a8b6:	89fb      	ldrh	r3, [r7, #14]
 800a8b8:	085b      	lsrs	r3, r3, #1
 800a8ba:	b29b      	uxth	r3, r3
 800a8bc:	4413      	add	r3, r2
 800a8be:	b29a      	uxth	r2, r3
 800a8c0:	89bb      	ldrh	r3, [r7, #12]
 800a8c2:	0a1b      	lsrs	r3, r3, #8
 800a8c4:	b29b      	uxth	r3, r3
 800a8c6:	4413      	add	r3, r2
 800a8c8:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	1c9a      	adds	r2, r3, #2
 800a8ce:	607a      	str	r2, [r7, #4]
 800a8d0:	881b      	ldrh	r3, [r3, #0]
 800a8d2:	81bb      	strh	r3, [r7, #12]
 800a8d4:	89bb      	ldrh	r3, [r7, #12]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d1d7      	bne.n	800a88a <xname_sum+0xe>
	}
	return sum;
 800a8da:	89fb      	ldrh	r3, [r7, #14]
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3710      	adds	r7, #16
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}

0800a8e4 <get_xdir_info>:
static
void get_xdir_info (
	BYTE* dirb,			/* Pointer to the direcotry entry block 85+C0+C1s */
	FILINFO* fno		/* Buffer to store the extracted file information */
)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b086      	sub	sp, #24
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	6039      	str	r1, [r7, #0]
#if !_LFN_UNICODE
	UINT nc;
#endif

	/* Get file name */
	di = 0;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	617b      	str	r3, [r7, #20]
		w = ld_word(dirb + si);					/* Get a character */
		if (di >= _MAX_LFN) { di = 0; break; }	/* Buffer overflow --> inaccessible object name */
		fno->fname[di] = w;						/* Store it */
	}
#else
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800a8f2:	2340      	movs	r3, #64	; 0x40
 800a8f4:	613b      	str	r3, [r7, #16]
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	60fb      	str	r3, [r7, #12]
 800a8fa:	e02c      	b.n	800a956 <get_xdir_info+0x72>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	f003 031f 	and.w	r3, r3, #31
 800a902:	2b00      	cmp	r3, #0
 800a904:	d102      	bne.n	800a90c <get_xdir_info+0x28>
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	3302      	adds	r3, #2
 800a90a:	613b      	str	r3, [r7, #16]
		w = ff_convert(ld_word(dirb + si), 0);	/* Get a character and Unicode -> OEM */
 800a90c:	687a      	ldr	r2, [r7, #4]
 800a90e:	693b      	ldr	r3, [r7, #16]
 800a910:	4413      	add	r3, r2
 800a912:	4618      	mov	r0, r3
 800a914:	f7fe f904 	bl	8008b20 <ld_word>
 800a918:	4603      	mov	r3, r0
 800a91a:	2100      	movs	r1, #0
 800a91c:	4618      	mov	r0, r3
 800a91e:	f002 fde9 	bl	800d4f4 <ff_convert>
 800a922:	4603      	mov	r3, r0
 800a924:	817b      	strh	r3, [r7, #10]
		if (_DF1S && w >= 0x100) {				/* Is it a double byte char? (always false at SBCS cfg) */
			fno->fname[di++] = (char)(w >> 8);	/* Put 1st byte of the DBC */
		}
		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 800a926:	897b      	ldrh	r3, [r7, #10]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d002      	beq.n	800a932 <get_xdir_info+0x4e>
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	2bfe      	cmp	r3, #254	; 0xfe
 800a930:	d902      	bls.n	800a938 <get_xdir_info+0x54>
 800a932:	2300      	movs	r3, #0
 800a934:	617b      	str	r3, [r7, #20]
 800a936:	e015      	b.n	800a964 <get_xdir_info+0x80>
		fno->fname[di++] = (char)w;
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	1c5a      	adds	r2, r3, #1
 800a93c:	617a      	str	r2, [r7, #20]
 800a93e:	897a      	ldrh	r2, [r7, #10]
 800a940:	b2d1      	uxtb	r1, r2
 800a942:	683a      	ldr	r2, [r7, #0]
 800a944:	4413      	add	r3, r2
 800a946:	460a      	mov	r2, r1
 800a948:	769a      	strb	r2, [r3, #26]
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	3302      	adds	r3, #2
 800a94e:	613b      	str	r3, [r7, #16]
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	3301      	adds	r3, #1
 800a954:	60fb      	str	r3, [r7, #12]
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	3323      	adds	r3, #35	; 0x23
 800a95a:	781b      	ldrb	r3, [r3, #0]
 800a95c:	461a      	mov	r2, r3
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	4293      	cmp	r3, r2
 800a962:	d3cb      	bcc.n	800a8fc <get_xdir_info+0x18>
	}
#endif
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d106      	bne.n	800a978 <get_xdir_info+0x94>
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	1c5a      	adds	r2, r3, #1
 800a96e:	617a      	str	r2, [r7, #20]
 800a970:	683a      	ldr	r2, [r7, #0]
 800a972:	4413      	add	r3, r2
 800a974:	223f      	movs	r2, #63	; 0x3f
 800a976:	769a      	strb	r2, [r3, #26]
	fno->fname[di] = 0;						/* Terminate file name */
 800a978:	683a      	ldr	r2, [r7, #0]
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	4413      	add	r3, r2
 800a97e:	331a      	adds	r3, #26
 800a980:	2200      	movs	r2, #0
 800a982:	701a      	strb	r2, [r3, #0]

	fno->altname[0] = 0;							/* No SFN */
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	2200      	movs	r2, #0
 800a988:	735a      	strb	r2, [r3, #13]
	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	791a      	ldrb	r2, [r3, #4]
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	731a      	strb	r2, [r3, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	7b1b      	ldrb	r3, [r3, #12]
 800a996:	f003 0310 	and.w	r3, r3, #16
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d107      	bne.n	800a9ae <get_xdir_info+0xca>
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	3338      	adds	r3, #56	; 0x38
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f7fe f8f7 	bl	8008b96 <ld_qword>
 800a9a8:	4602      	mov	r2, r0
 800a9aa:	460b      	mov	r3, r1
 800a9ac:	e003      	b.n	800a9b6 <get_xdir_info+0xd2>
 800a9ae:	f04f 0200 	mov.w	r2, #0
 800a9b2:	f04f 0300 	mov.w	r3, #0
 800a9b6:	6839      	ldr	r1, [r7, #0]
 800a9b8:	e9c1 2300 	strd	r2, r3, [r1]
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	330c      	adds	r3, #12
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f7fe f8ad 	bl	8008b20 <ld_word>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	461a      	mov	r2, r3
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	815a      	strh	r2, [r3, #10]
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	330e      	adds	r3, #14
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f7fe f8a4 	bl	8008b20 <ld_word>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	461a      	mov	r2, r3
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	811a      	strh	r2, [r3, #8]
}
 800a9e0:	bf00      	nop
 800a9e2:	3718      	adds	r7, #24
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}

0800a9e8 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800a9e8:	b590      	push	{r4, r7, lr}
 800a9ea:	b087      	sub	sp, #28
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	695b      	ldr	r3, [r3, #20]
 800a9f6:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681a      	ldr	r2, [r3, #0]
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa00:	4619      	mov	r1, r3
 800aa02:	4610      	mov	r0, r2
 800aa04:	f7fe fc80 	bl	8009308 <move_window>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800aa0c:	7bfb      	ldrb	r3, [r7, #15]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d001      	beq.n	800aa16 <load_xdir+0x2e>
 800aa12:	7bfb      	ldrb	r3, [r7, #15]
 800aa14:	e09f      	b.n	800ab56 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa1a:	781b      	ldrb	r3, [r3, #0]
 800aa1c:	2b85      	cmp	r3, #133	; 0x85
 800aa1e:	d001      	beq.n	800aa24 <load_xdir+0x3c>
 800aa20:	2302      	movs	r3, #2
 800aa22:	e098      	b.n	800ab56 <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa28:	2220      	movs	r2, #32
 800aa2a:	4619      	mov	r1, r3
 800aa2c:	6938      	ldr	r0, [r7, #16]
 800aa2e:	f7fe fa3c 	bl	8008eaa <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	3301      	adds	r3, #1
 800aa36:	781b      	ldrb	r3, [r3, #0]
 800aa38:	3301      	adds	r3, #1
 800aa3a:	015b      	lsls	r3, r3, #5
 800aa3c:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	2b5f      	cmp	r3, #95	; 0x5f
 800aa42:	d903      	bls.n	800aa4c <load_xdir+0x64>
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800aa4a:	d901      	bls.n	800aa50 <load_xdir+0x68>
 800aa4c:	2302      	movs	r3, #2
 800aa4e:	e082      	b.n	800ab56 <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800aa50:	2100      	movs	r1, #0
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f7ff fb71 	bl	800a13a <dir_next>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800aa5c:	7bfb      	ldrb	r3, [r7, #15]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d001      	beq.n	800aa66 <load_xdir+0x7e>
 800aa62:	7bfb      	ldrb	r3, [r7, #15]
 800aa64:	e077      	b.n	800ab56 <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681a      	ldr	r2, [r3, #0]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa6e:	4619      	mov	r1, r3
 800aa70:	4610      	mov	r0, r2
 800aa72:	f7fe fc49 	bl	8009308 <move_window>
 800aa76:	4603      	mov	r3, r0
 800aa78:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800aa7a:	7bfb      	ldrb	r3, [r7, #15]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d001      	beq.n	800aa84 <load_xdir+0x9c>
 800aa80:	7bfb      	ldrb	r3, [r7, #15]
 800aa82:	e068      	b.n	800ab56 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa88:	781b      	ldrb	r3, [r3, #0]
 800aa8a:	2bc0      	cmp	r3, #192	; 0xc0
 800aa8c:	d001      	beq.n	800aa92 <load_xdir+0xaa>
 800aa8e:	2302      	movs	r3, #2
 800aa90:	e061      	b.n	800ab56 <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	f103 0020 	add.w	r0, r3, #32
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa9c:	2220      	movs	r2, #32
 800aa9e:	4619      	mov	r1, r3
 800aaa0:	f7fe fa03 	bl	8008eaa <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	3323      	adds	r3, #35	; 0x23
 800aaa8:	781b      	ldrb	r3, [r3, #0]
 800aaaa:	332c      	adds	r3, #44	; 0x2c
 800aaac:	4a2c      	ldr	r2, [pc, #176]	; (800ab60 <load_xdir+0x178>)
 800aaae:	fba2 2303 	umull	r2, r3, r2, r3
 800aab2:	08db      	lsrs	r3, r3, #3
 800aab4:	015b      	lsls	r3, r3, #5
 800aab6:	68ba      	ldr	r2, [r7, #8]
 800aab8:	429a      	cmp	r2, r3
 800aaba:	d201      	bcs.n	800aac0 <load_xdir+0xd8>
 800aabc:	2302      	movs	r3, #2
 800aabe:	e04a      	b.n	800ab56 <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800aac0:	2340      	movs	r3, #64	; 0x40
 800aac2:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800aac4:	2100      	movs	r1, #0
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f7ff fb37 	bl	800a13a <dir_next>
 800aacc:	4603      	mov	r3, r0
 800aace:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800aad0:	7bfb      	ldrb	r3, [r7, #15]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d001      	beq.n	800aada <load_xdir+0xf2>
 800aad6:	7bfb      	ldrb	r3, [r7, #15]
 800aad8:	e03d      	b.n	800ab56 <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681a      	ldr	r2, [r3, #0]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aae2:	4619      	mov	r1, r3
 800aae4:	4610      	mov	r0, r2
 800aae6:	f7fe fc0f 	bl	8009308 <move_window>
 800aaea:	4603      	mov	r3, r0
 800aaec:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800aaee:	7bfb      	ldrb	r3, [r7, #15]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d001      	beq.n	800aaf8 <load_xdir+0x110>
 800aaf4:	7bfb      	ldrb	r3, [r7, #15]
 800aaf6:	e02e      	b.n	800ab56 <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aafc:	781b      	ldrb	r3, [r3, #0]
 800aafe:	2bc1      	cmp	r3, #193	; 0xc1
 800ab00:	d001      	beq.n	800ab06 <load_xdir+0x11e>
 800ab02:	2302      	movs	r3, #2
 800ab04:	e027      	b.n	800ab56 <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800ab06:	697b      	ldr	r3, [r7, #20]
 800ab08:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800ab0c:	d208      	bcs.n	800ab20 <load_xdir+0x138>
 800ab0e:	693a      	ldr	r2, [r7, #16]
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	18d0      	adds	r0, r2, r3
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab18:	2220      	movs	r2, #32
 800ab1a:	4619      	mov	r1, r3
 800ab1c:	f7fe f9c5 	bl	8008eaa <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	3320      	adds	r3, #32
 800ab24:	617b      	str	r3, [r7, #20]
 800ab26:	697a      	ldr	r2, [r7, #20]
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	429a      	cmp	r2, r3
 800ab2c:	d3ca      	bcc.n	800aac4 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800ab34:	d80e      	bhi.n	800ab54 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800ab36:	6938      	ldr	r0, [r7, #16]
 800ab38:	f7ff fe6d 	bl	800a816 <xdir_sum>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	461c      	mov	r4, r3
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	3302      	adds	r3, #2
 800ab44:	4618      	mov	r0, r3
 800ab46:	f7fd ffeb 	bl	8008b20 <ld_word>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	429c      	cmp	r4, r3
 800ab4e:	d001      	beq.n	800ab54 <load_xdir+0x16c>
 800ab50:	2302      	movs	r3, #2
 800ab52:	e000      	b.n	800ab56 <load_xdir+0x16e>
	}
	return FR_OK;
 800ab54:	2300      	movs	r3, #0
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	371c      	adds	r7, #28
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd90      	pop	{r4, r7, pc}
 800ab5e:	bf00      	nop
 800ab60:	88888889 	.word	0x88888889

0800ab64 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800ab64:	b5b0      	push	{r4, r5, r7, lr}
 800ab66:	b084      	sub	sp, #16
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
 800ab6c:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800ab6e:	6839      	ldr	r1, [r7, #0]
 800ab70:	6808      	ldr	r0, [r1, #0]
 800ab72:	6879      	ldr	r1, [r7, #4]
 800ab74:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800ab76:	6839      	ldr	r1, [r7, #0]
 800ab78:	6a08      	ldr	r0, [r1, #32]
 800ab7a:	6879      	ldr	r1, [r7, #4]
 800ab7c:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800ab7e:	6839      	ldr	r1, [r7, #0]
 800ab80:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800ab82:	b2c8      	uxtb	r0, r1
 800ab84:	6879      	ldr	r1, [r7, #4]
 800ab86:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800ab88:	6839      	ldr	r1, [r7, #0]
 800ab8a:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800ab8c:	4608      	mov	r0, r1
 800ab8e:	f04f 0100 	mov.w	r1, #0
 800ab92:	f06f 04ff 	mvn.w	r4, #255	; 0xff
 800ab96:	f04f 0500 	mov.w	r5, #0
 800ab9a:	ea00 0204 	and.w	r2, r0, r4
 800ab9e:	ea01 0305 	and.w	r3, r1, r5
 800aba2:	6879      	ldr	r1, [r7, #4]
 800aba4:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abb4:	4619      	mov	r1, r3
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f7ff fa2b 	bl	800a012 <dir_sdi>
 800abbc:	4603      	mov	r3, r0
 800abbe:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800abc0:	7bfb      	ldrb	r3, [r7, #15]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d104      	bne.n	800abd0 <load_obj_dir+0x6c>
		res = load_xdir(dp);		/* Load the object's entry block */
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f7ff ff0e 	bl	800a9e8 <load_xdir>
 800abcc:	4603      	mov	r3, r0
 800abce:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800abd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3710      	adds	r7, #16
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bdb0      	pop	{r4, r5, r7, pc}

0800abda <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800abda:	b590      	push	{r4, r7, lr}
 800abdc:	b087      	sub	sp, #28
 800abde:	af00      	add	r7, sp, #0
 800abe0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	695b      	ldr	r3, [r3, #20]
 800abe8:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	1c9c      	adds	r4, r3, #2
 800abee:	68f8      	ldr	r0, [r7, #12]
 800abf0:	f7ff fe11 	bl	800a816 <xdir_sum>
 800abf4:	4603      	mov	r3, r0
 800abf6:	4619      	mov	r1, r3
 800abf8:	4620      	mov	r0, r4
 800abfa:	f7fe f887 	bl	8008d0c <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	3301      	adds	r3, #1
 800ac02:	781b      	ldrb	r3, [r3, #0]
 800ac04:	3301      	adds	r3, #1
 800ac06:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac0c:	4619      	mov	r1, r3
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f7ff f9ff 	bl	800a012 <dir_sdi>
 800ac14:	4603      	mov	r3, r0
 800ac16:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800ac18:	e026      	b.n	800ac68 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681a      	ldr	r2, [r3, #0]
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac22:	4619      	mov	r1, r3
 800ac24:	4610      	mov	r0, r2
 800ac26:	f7fe fb6f 	bl	8009308 <move_window>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ac2e:	7dfb      	ldrb	r3, [r7, #23]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d11d      	bne.n	800ac70 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac38:	2220      	movs	r2, #32
 800ac3a:	68f9      	ldr	r1, [r7, #12]
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f7fe f934 	bl	8008eaa <mem_cpy>
		dp->obj.fs->wflag = 1;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	2201      	movs	r2, #1
 800ac48:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	3b01      	subs	r3, #1
 800ac4e:	613b      	str	r3, [r7, #16]
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d00e      	beq.n	800ac74 <store_xdir+0x9a>
		dirb += SZDIRE;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	3320      	adds	r3, #32
 800ac5a:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800ac5c:	2100      	movs	r1, #0
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f7ff fa6b 	bl	800a13a <dir_next>
 800ac64:	4603      	mov	r3, r0
 800ac66:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800ac68:	7dfb      	ldrb	r3, [r7, #23]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d0d5      	beq.n	800ac1a <store_xdir+0x40>
 800ac6e:	e002      	b.n	800ac76 <store_xdir+0x9c>
		if (res != FR_OK) break;
 800ac70:	bf00      	nop
 800ac72:	e000      	b.n	800ac76 <store_xdir+0x9c>
		if (--nent == 0) break;
 800ac74:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800ac76:	7dfb      	ldrb	r3, [r7, #23]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d002      	beq.n	800ac82 <store_xdir+0xa8>
 800ac7c:	7dfb      	ldrb	r3, [r7, #23]
 800ac7e:	2b01      	cmp	r3, #1
 800ac80:	d101      	bne.n	800ac86 <store_xdir+0xac>
 800ac82:	7dfb      	ldrb	r3, [r7, #23]
 800ac84:	e000      	b.n	800ac88 <store_xdir+0xae>
 800ac86:	2302      	movs	r3, #2
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	371c      	adds	r7, #28
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd90      	pop	{r4, r7, pc}

0800ac90 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800ac90:	b590      	push	{r4, r7, lr}
 800ac92:	b085      	sub	sp, #20
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
 800ac98:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800ac9a:	2240      	movs	r2, #64	; 0x40
 800ac9c:	2100      	movs	r1, #0
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f7fe f924 	bl	8008eec <mem_set>
	dirb[XDIR_Type] = 0x85;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2285      	movs	r2, #133	; 0x85
 800aca8:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	3320      	adds	r3, #32
 800acae:	22c0      	movs	r2, #192	; 0xc0
 800acb0:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800acb2:	2300      	movs	r3, #0
 800acb4:	72bb      	strb	r3, [r7, #10]
 800acb6:	2301      	movs	r3, #1
 800acb8:	72fb      	strb	r3, [r7, #11]
 800acba:	2301      	movs	r3, #1
 800acbc:	813b      	strh	r3, [r7, #8]
 800acbe:	2340      	movs	r3, #64	; 0x40
 800acc0:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	1c5a      	adds	r2, r3, #1
 800acc6:	60fa      	str	r2, [r7, #12]
 800acc8:	687a      	ldr	r2, [r7, #4]
 800acca:	4413      	add	r3, r2
 800accc:	22c1      	movs	r2, #193	; 0xc1
 800acce:	701a      	strb	r2, [r3, #0]
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	1c5a      	adds	r2, r3, #1
 800acd4:	60fa      	str	r2, [r7, #12]
 800acd6:	687a      	ldr	r2, [r7, #4]
 800acd8:	4413      	add	r3, r2
 800acda:	2200      	movs	r2, #0
 800acdc:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800acde:	893b      	ldrh	r3, [r7, #8]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d00b      	beq.n	800acfc <create_xdir+0x6c>
 800ace4:	7abb      	ldrb	r3, [r7, #10]
 800ace6:	005b      	lsls	r3, r3, #1
 800ace8:	683a      	ldr	r2, [r7, #0]
 800acea:	4413      	add	r3, r2
 800acec:	881b      	ldrh	r3, [r3, #0]
 800acee:	813b      	strh	r3, [r7, #8]
 800acf0:	893b      	ldrh	r3, [r7, #8]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d002      	beq.n	800acfc <create_xdir+0x6c>
 800acf6:	7abb      	ldrb	r3, [r7, #10]
 800acf8:	3301      	adds	r3, #1
 800acfa:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800acfc:	687a      	ldr	r2, [r7, #4]
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	4413      	add	r3, r2
 800ad02:	893a      	ldrh	r2, [r7, #8]
 800ad04:	4611      	mov	r1, r2
 800ad06:	4618      	mov	r0, r3
 800ad08:	f7fe f800 	bl	8008d0c <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	3302      	adds	r3, #2
 800ad10:	60fb      	str	r3, [r7, #12]
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	f003 031f 	and.w	r3, r3, #31
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d1e0      	bne.n	800acde <create_xdir+0x4e>
		nb++;
 800ad1c:	7afb      	ldrb	r3, [r7, #11]
 800ad1e:	3301      	adds	r3, #1
 800ad20:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800ad22:	7abb      	ldrb	r3, [r7, #10]
 800ad24:	005b      	lsls	r3, r3, #1
 800ad26:	683a      	ldr	r2, [r7, #0]
 800ad28:	4413      	add	r3, r2
 800ad2a:	881b      	ldrh	r3, [r3, #0]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d1c8      	bne.n	800acc2 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	3323      	adds	r3, #35	; 0x23
 800ad34:	7aba      	ldrb	r2, [r7, #10]
 800ad36:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	3301      	adds	r3, #1
 800ad3c:	7afa      	ldrb	r2, [r7, #11]
 800ad3e:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800ad46:	6838      	ldr	r0, [r7, #0]
 800ad48:	f7ff fd98 	bl	800a87c <xname_sum>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	4619      	mov	r1, r3
 800ad50:	4620      	mov	r0, r4
 800ad52:	f7fd ffdb 	bl	8008d0c <st_word>
}
 800ad56:	bf00      	nop
 800ad58:	3714      	adds	r7, #20
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd90      	pop	{r4, r7, pc}

0800ad5e <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800ad5e:	b580      	push	{r7, lr}
 800ad60:	b086      	sub	sp, #24
 800ad62:	af00      	add	r7, sp, #0
 800ad64:	6078      	str	r0, [r7, #4]
 800ad66:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800ad68:	2304      	movs	r3, #4
 800ad6a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800ad72:	23ff      	movs	r3, #255	; 0xff
 800ad74:	757b      	strb	r3, [r7, #21]
 800ad76:	23ff      	movs	r3, #255	; 0xff
 800ad78:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800ad7a:	e09f      	b.n	800aebc <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad80:	4619      	mov	r1, r3
 800ad82:	6938      	ldr	r0, [r7, #16]
 800ad84:	f7fe fac0 	bl	8009308 <move_window>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ad8c:	7dfb      	ldrb	r3, [r7, #23]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	f040 809a 	bne.w	800aec8 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad98:	781b      	ldrb	r3, [r3, #0]
 800ad9a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800ad9c:	7dbb      	ldrb	r3, [r7, #22]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d102      	bne.n	800ada8 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800ada2:	2304      	movs	r3, #4
 800ada4:	75fb      	strb	r3, [r7, #23]
 800ada6:	e096      	b.n	800aed6 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800ada8:	693b      	ldr	r3, [r7, #16]
 800adaa:	781b      	ldrb	r3, [r3, #0]
 800adac:	2b04      	cmp	r3, #4
 800adae:	d118      	bne.n	800ade2 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800adb0:	7dbb      	ldrb	r3, [r7, #22]
 800adb2:	2b85      	cmp	r3, #133	; 0x85
 800adb4:	d179      	bne.n	800aeaa <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f7ff fe12 	bl	800a9e8 <load_xdir>
 800adc4:	4603      	mov	r3, r0
 800adc6:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800adc8:	7dfb      	ldrb	r3, [r7, #23]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d17e      	bne.n	800aecc <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	695b      	ldr	r3, [r3, #20]
 800add2:	3304      	adds	r3, #4
 800add4:	781b      	ldrb	r3, [r3, #0]
 800add6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800adda:	b2da      	uxtb	r2, r3
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	719a      	strb	r2, [r3, #6]
					}
					break;
 800ade0:	e074      	b.n	800aecc <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ade6:	330b      	adds	r3, #11
 800ade8:	781b      	ldrb	r3, [r3, #0]
 800adea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800adee:	73fb      	strb	r3, [r7, #15]
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	7bfa      	ldrb	r2, [r7, #15]
 800adf4:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800adf6:	7dbb      	ldrb	r3, [r7, #22]
 800adf8:	2be5      	cmp	r3, #229	; 0xe5
 800adfa:	d00e      	beq.n	800ae1a <dir_read+0xbc>
 800adfc:	7dbb      	ldrb	r3, [r7, #22]
 800adfe:	2b2e      	cmp	r3, #46	; 0x2e
 800ae00:	d00b      	beq.n	800ae1a <dir_read+0xbc>
 800ae02:	7bfb      	ldrb	r3, [r7, #15]
 800ae04:	f023 0320 	bic.w	r3, r3, #32
 800ae08:	2b08      	cmp	r3, #8
 800ae0a:	bf0c      	ite	eq
 800ae0c:	2301      	moveq	r3, #1
 800ae0e:	2300      	movne	r3, #0
 800ae10:	b2db      	uxtb	r3, r3
 800ae12:	461a      	mov	r2, r3
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	4293      	cmp	r3, r2
 800ae18:	d002      	beq.n	800ae20 <dir_read+0xc2>
				ord = 0xFF;
 800ae1a:	23ff      	movs	r3, #255	; 0xff
 800ae1c:	757b      	strb	r3, [r7, #21]
 800ae1e:	e044      	b.n	800aeaa <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800ae20:	7bfb      	ldrb	r3, [r7, #15]
 800ae22:	2b0f      	cmp	r3, #15
 800ae24:	d12f      	bne.n	800ae86 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800ae26:	7dbb      	ldrb	r3, [r7, #22]
 800ae28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d00d      	beq.n	800ae4c <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae34:	7b5b      	ldrb	r3, [r3, #13]
 800ae36:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800ae38:	7dbb      	ldrb	r3, [r7, #22]
 800ae3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae3e:	75bb      	strb	r3, [r7, #22]
 800ae40:	7dbb      	ldrb	r3, [r7, #22]
 800ae42:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ae4c:	7dba      	ldrb	r2, [r7, #22]
 800ae4e:	7d7b      	ldrb	r3, [r7, #21]
 800ae50:	429a      	cmp	r2, r3
 800ae52:	d115      	bne.n	800ae80 <dir_read+0x122>
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae58:	330d      	adds	r3, #13
 800ae5a:	781b      	ldrb	r3, [r3, #0]
 800ae5c:	7d3a      	ldrb	r2, [r7, #20]
 800ae5e:	429a      	cmp	r2, r3
 800ae60:	d10e      	bne.n	800ae80 <dir_read+0x122>
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	691a      	ldr	r2, [r3, #16]
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae6a:	4619      	mov	r1, r3
 800ae6c:	4610      	mov	r0, r2
 800ae6e:	f7ff fb55 	bl	800a51c <pick_lfn>
 800ae72:	4603      	mov	r3, r0
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d003      	beq.n	800ae80 <dir_read+0x122>
 800ae78:	7d7b      	ldrb	r3, [r7, #21]
 800ae7a:	3b01      	subs	r3, #1
 800ae7c:	b2db      	uxtb	r3, r3
 800ae7e:	e000      	b.n	800ae82 <dir_read+0x124>
 800ae80:	23ff      	movs	r3, #255	; 0xff
 800ae82:	757b      	strb	r3, [r7, #21]
 800ae84:	e011      	b.n	800aeaa <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800ae86:	7d7b      	ldrb	r3, [r7, #21]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d109      	bne.n	800aea0 <dir_read+0x142>
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae90:	4618      	mov	r0, r3
 800ae92:	f7ff fc9f 	bl	800a7d4 <sum_sfn>
 800ae96:	4603      	mov	r3, r0
 800ae98:	461a      	mov	r2, r3
 800ae9a:	7d3b      	ldrb	r3, [r7, #20]
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	d017      	beq.n	800aed0 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f04f 32ff 	mov.w	r2, #4294967295
 800aea6:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 800aea8:	e012      	b.n	800aed0 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800aeaa:	2100      	movs	r1, #0
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f7ff f944 	bl	800a13a <dir_next>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800aeb6:	7dfb      	ldrb	r3, [r7, #23]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d10b      	bne.n	800aed4 <dir_read+0x176>
	while (dp->sect) {
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	f47f af5b 	bne.w	800ad7c <dir_read+0x1e>
 800aec6:	e006      	b.n	800aed6 <dir_read+0x178>
		if (res != FR_OK) break;
 800aec8:	bf00      	nop
 800aeca:	e004      	b.n	800aed6 <dir_read+0x178>
					break;
 800aecc:	bf00      	nop
 800aece:	e002      	b.n	800aed6 <dir_read+0x178>
					break;
 800aed0:	bf00      	nop
 800aed2:	e000      	b.n	800aed6 <dir_read+0x178>
		if (res != FR_OK) break;
 800aed4:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800aed6:	7dfb      	ldrb	r3, [r7, #23]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d002      	beq.n	800aee2 <dir_read+0x184>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2200      	movs	r2, #0
 800aee0:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 800aee2:	7dfb      	ldrb	r3, [r7, #23]
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	3718      	adds	r7, #24
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}

0800aeec <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800aeec:	b590      	push	{r4, r7, lr}
 800aeee:	b089      	sub	sp, #36	; 0x24
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800aefa:	2100      	movs	r1, #0
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f7ff f888 	bl	800a012 <dir_sdi>
 800af02:	4603      	mov	r3, r0
 800af04:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800af06:	7ffb      	ldrb	r3, [r7, #31]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d001      	beq.n	800af10 <dir_find+0x24>
 800af0c:	7ffb      	ldrb	r3, [r7, #31]
 800af0e:	e112      	b.n	800b136 <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	781b      	ldrb	r3, [r3, #0]
 800af14:	2b04      	cmp	r3, #4
 800af16:	d164      	bne.n	800afe2 <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	691b      	ldr	r3, [r3, #16]
 800af1c:	4618      	mov	r0, r3
 800af1e:	f7ff fcad 	bl	800a87c <xname_sum>
 800af22:	4603      	mov	r3, r0
 800af24:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800af26:	e04f      	b.n	800afc8 <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	695b      	ldr	r3, [r3, #20]
 800af2c:	3324      	adds	r3, #36	; 0x24
 800af2e:	4618      	mov	r0, r3
 800af30:	f7fd fdf6 	bl	8008b20 <ld_word>
 800af34:	4603      	mov	r3, r0
 800af36:	461a      	mov	r2, r3
 800af38:	893b      	ldrh	r3, [r7, #8]
 800af3a:	4293      	cmp	r3, r2
 800af3c:	d000      	beq.n	800af40 <dir_find+0x54>
 800af3e:	e043      	b.n	800afc8 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	695b      	ldr	r3, [r3, #20]
 800af44:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800af48:	76fb      	strb	r3, [r7, #27]
 800af4a:	2340      	movs	r3, #64	; 0x40
 800af4c:	617b      	str	r3, [r7, #20]
 800af4e:	2300      	movs	r3, #0
 800af50:	613b      	str	r3, [r7, #16]
 800af52:	e029      	b.n	800afa8 <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	f003 031f 	and.w	r3, r3, #31
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d102      	bne.n	800af64 <dir_find+0x78>
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	3302      	adds	r3, #2
 800af62:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	695a      	ldr	r2, [r3, #20]
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	4413      	add	r3, r2
 800af6c:	4618      	mov	r0, r3
 800af6e:	f7fd fdd7 	bl	8008b20 <ld_word>
 800af72:	4603      	mov	r3, r0
 800af74:	4618      	mov	r0, r3
 800af76:	f002 faf9 	bl	800d56c <ff_wtoupper>
 800af7a:	4603      	mov	r3, r0
 800af7c:	461c      	mov	r4, r3
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	691a      	ldr	r2, [r3, #16]
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	005b      	lsls	r3, r3, #1
 800af86:	4413      	add	r3, r2
 800af88:	881b      	ldrh	r3, [r3, #0]
 800af8a:	4618      	mov	r0, r3
 800af8c:	f002 faee 	bl	800d56c <ff_wtoupper>
 800af90:	4603      	mov	r3, r0
 800af92:	429c      	cmp	r4, r3
 800af94:	d10c      	bne.n	800afb0 <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800af96:	7efb      	ldrb	r3, [r7, #27]
 800af98:	3b01      	subs	r3, #1
 800af9a:	76fb      	strb	r3, [r7, #27]
 800af9c:	697b      	ldr	r3, [r7, #20]
 800af9e:	3302      	adds	r3, #2
 800afa0:	617b      	str	r3, [r7, #20]
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	3301      	adds	r3, #1
 800afa6:	613b      	str	r3, [r7, #16]
 800afa8:	7efb      	ldrb	r3, [r7, #27]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d1d2      	bne.n	800af54 <dir_find+0x68>
 800afae:	e000      	b.n	800afb2 <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800afb0:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800afb2:	7efb      	ldrb	r3, [r7, #27]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d107      	bne.n	800afc8 <dir_find+0xdc>
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	691a      	ldr	r2, [r3, #16]
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	005b      	lsls	r3, r3, #1
 800afc0:	4413      	add	r3, r2
 800afc2:	881b      	ldrh	r3, [r3, #0]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d009      	beq.n	800afdc <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800afc8:	2100      	movs	r1, #0
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f7ff fec7 	bl	800ad5e <dir_read>
 800afd0:	4603      	mov	r3, r0
 800afd2:	77fb      	strb	r3, [r7, #31]
 800afd4:	7ffb      	ldrb	r3, [r7, #31]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d0a6      	beq.n	800af28 <dir_find+0x3c>
 800afda:	e000      	b.n	800afde <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800afdc:	bf00      	nop
		}
		return res;
 800afde:	7ffb      	ldrb	r3, [r7, #31]
 800afe0:	e0a9      	b.n	800b136 <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800afe2:	23ff      	movs	r3, #255	; 0xff
 800afe4:	773b      	strb	r3, [r7, #28]
 800afe6:	7f3b      	ldrb	r3, [r7, #28]
 800afe8:	777b      	strb	r3, [r7, #29]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f04f 32ff 	mov.w	r2, #4294967295
 800aff0:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aff6:	4619      	mov	r1, r3
 800aff8:	68f8      	ldr	r0, [r7, #12]
 800affa:	f7fe f985 	bl	8009308 <move_window>
 800affe:	4603      	mov	r3, r0
 800b000:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800b002:	7ffb      	ldrb	r3, [r7, #31]
 800b004:	2b00      	cmp	r3, #0
 800b006:	f040 8090 	bne.w	800b12a <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b00e:	781b      	ldrb	r3, [r3, #0]
 800b010:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b012:	7fbb      	ldrb	r3, [r7, #30]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d102      	bne.n	800b01e <dir_find+0x132>
 800b018:	2304      	movs	r3, #4
 800b01a:	77fb      	strb	r3, [r7, #31]
 800b01c:	e08a      	b.n	800b134 <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b022:	330b      	adds	r3, #11
 800b024:	781b      	ldrb	r3, [r3, #0]
 800b026:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b02a:	72fb      	strb	r3, [r7, #11]
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	7afa      	ldrb	r2, [r7, #11]
 800b030:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800b032:	7fbb      	ldrb	r3, [r7, #30]
 800b034:	2be5      	cmp	r3, #229	; 0xe5
 800b036:	d007      	beq.n	800b048 <dir_find+0x15c>
 800b038:	7afb      	ldrb	r3, [r7, #11]
 800b03a:	f003 0308 	and.w	r3, r3, #8
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d009      	beq.n	800b056 <dir_find+0x16a>
 800b042:	7afb      	ldrb	r3, [r7, #11]
 800b044:	2b0f      	cmp	r3, #15
 800b046:	d006      	beq.n	800b056 <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b048:	23ff      	movs	r3, #255	; 0xff
 800b04a:	777b      	strb	r3, [r7, #29]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f04f 32ff 	mov.w	r2, #4294967295
 800b052:	64da      	str	r2, [r3, #76]	; 0x4c
 800b054:	e05e      	b.n	800b114 <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800b056:	7afb      	ldrb	r3, [r7, #11]
 800b058:	2b0f      	cmp	r3, #15
 800b05a:	d136      	bne.n	800b0ca <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800b062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b066:	2b00      	cmp	r3, #0
 800b068:	d154      	bne.n	800b114 <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800b06a:	7fbb      	ldrb	r3, [r7, #30]
 800b06c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b070:	2b00      	cmp	r3, #0
 800b072:	d00d      	beq.n	800b090 <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b078:	7b5b      	ldrb	r3, [r3, #13]
 800b07a:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800b07c:	7fbb      	ldrb	r3, [r7, #30]
 800b07e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b082:	77bb      	strb	r3, [r7, #30]
 800b084:	7fbb      	ldrb	r3, [r7, #30]
 800b086:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b090:	7fba      	ldrb	r2, [r7, #30]
 800b092:	7f7b      	ldrb	r3, [r7, #29]
 800b094:	429a      	cmp	r2, r3
 800b096:	d115      	bne.n	800b0c4 <dir_find+0x1d8>
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b09c:	330d      	adds	r3, #13
 800b09e:	781b      	ldrb	r3, [r3, #0]
 800b0a0:	7f3a      	ldrb	r2, [r7, #28]
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	d10e      	bne.n	800b0c4 <dir_find+0x1d8>
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	691a      	ldr	r2, [r3, #16]
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0ae:	4619      	mov	r1, r3
 800b0b0:	4610      	mov	r0, r2
 800b0b2:	f7ff f9c3 	bl	800a43c <cmp_lfn>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d003      	beq.n	800b0c4 <dir_find+0x1d8>
 800b0bc:	7f7b      	ldrb	r3, [r7, #29]
 800b0be:	3b01      	subs	r3, #1
 800b0c0:	b2db      	uxtb	r3, r3
 800b0c2:	e000      	b.n	800b0c6 <dir_find+0x1da>
 800b0c4:	23ff      	movs	r3, #255	; 0xff
 800b0c6:	777b      	strb	r3, [r7, #29]
 800b0c8:	e024      	b.n	800b114 <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b0ca:	7f7b      	ldrb	r3, [r7, #29]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d109      	bne.n	800b0e4 <dir_find+0x1f8>
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f7ff fb7d 	bl	800a7d4 <sum_sfn>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	461a      	mov	r2, r3
 800b0de:	7f3b      	ldrb	r3, [r7, #28]
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	d024      	beq.n	800b12e <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800b0ea:	f003 0301 	and.w	r3, r3, #1
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d10a      	bne.n	800b108 <dir_find+0x21c>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	3340      	adds	r3, #64	; 0x40
 800b0fa:	220b      	movs	r2, #11
 800b0fc:	4619      	mov	r1, r3
 800b0fe:	f7fd ff10 	bl	8008f22 <mem_cmp>
 800b102:	4603      	mov	r3, r0
 800b104:	2b00      	cmp	r3, #0
 800b106:	d014      	beq.n	800b132 <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b108:	23ff      	movs	r3, #255	; 0xff
 800b10a:	777b      	strb	r3, [r7, #29]
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f04f 32ff 	mov.w	r2, #4294967295
 800b112:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b114:	2100      	movs	r1, #0
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f7ff f80f 	bl	800a13a <dir_next>
 800b11c:	4603      	mov	r3, r0
 800b11e:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800b120:	7ffb      	ldrb	r3, [r7, #31]
 800b122:	2b00      	cmp	r3, #0
 800b124:	f43f af65 	beq.w	800aff2 <dir_find+0x106>
 800b128:	e004      	b.n	800b134 <dir_find+0x248>
		if (res != FR_OK) break;
 800b12a:	bf00      	nop
 800b12c:	e002      	b.n	800b134 <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b12e:	bf00      	nop
 800b130:	e000      	b.n	800b134 <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b132:	bf00      	nop

	return res;
 800b134:	7ffb      	ldrb	r3, [r7, #31]
}
 800b136:	4618      	mov	r0, r3
 800b138:	3724      	adds	r7, #36	; 0x24
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd90      	pop	{r4, r7, pc}
	...

0800b140 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b140:	b5b0      	push	{r4, r5, r7, lr}
 800b142:	b0a0      	sub	sp, #128	; 0x80
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800b154:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d001      	beq.n	800b160 <dir_register+0x20>
 800b15c:	2306      	movs	r3, #6
 800b15e:	e18c      	b.n	800b47a <dir_register+0x33a>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800b160:	2300      	movs	r3, #0
 800b162:	677b      	str	r3, [r7, #116]	; 0x74
 800b164:	e002      	b.n	800b16c <dir_register+0x2c>
 800b166:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b168:	3301      	adds	r3, #1
 800b16a:	677b      	str	r3, [r7, #116]	; 0x74
 800b16c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b16e:	691a      	ldr	r2, [r3, #16]
 800b170:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b172:	005b      	lsls	r3, r3, #1
 800b174:	4413      	add	r3, r2
 800b176:	881b      	ldrh	r3, [r3, #0]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d1f4      	bne.n	800b166 <dir_register+0x26>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800b17c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b17e:	781b      	ldrb	r3, [r3, #0]
 800b180:	2b04      	cmp	r3, #4
 800b182:	f040 80a2 	bne.w	800b2ca <dir_register+0x18a>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800b186:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b188:	330e      	adds	r3, #14
 800b18a:	4abe      	ldr	r2, [pc, #760]	; (800b484 <dir_register+0x344>)
 800b18c:	fba2 2303 	umull	r2, r3, r2, r3
 800b190:	08db      	lsrs	r3, r3, #3
 800b192:	3302      	adds	r3, #2
 800b194:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800b196:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f7ff f8b4 	bl	800a306 <dir_alloc>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 800b1a4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d002      	beq.n	800b1b2 <dir_register+0x72>
 800b1ac:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b1b0:	e163      	b.n	800b47a <dir_register+0x33a>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b1b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b1b8:	3b01      	subs	r3, #1
 800b1ba:	015b      	lsls	r3, r3, #5
 800b1bc:	1ad2      	subs	r2, r2, r3
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	689b      	ldr	r3, [r3, #8]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d075      	beq.n	800b2b6 <dir_register+0x176>
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	79db      	ldrb	r3, [r3, #7]
 800b1ce:	f003 0304 	and.w	r3, r3, #4
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d06f      	beq.n	800b2b6 <dir_register+0x176>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800b1dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1de:	895b      	ldrh	r3, [r3, #10]
 800b1e0:	461a      	mov	r2, r3
 800b1e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1e4:	899b      	ldrh	r3, [r3, #12]
 800b1e6:	fb03 f302 	mul.w	r3, r3, r2
 800b1ea:	461a      	mov	r2, r3
 800b1ec:	f04f 0300 	mov.w	r3, #0
 800b1f0:	1884      	adds	r4, r0, r2
 800b1f2:	eb41 0503 	adc.w	r5, r1, r3
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	e9c3 4504 	strd	r4, r5, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	4618      	mov	r0, r3
 800b200:	f7fe fcae 	bl	8009b60 <fill_first_frag>
 800b204:	4603      	mov	r3, r0
 800b206:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800b20a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d002      	beq.n	800b218 <dir_register+0xd8>
 800b212:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b216:	e130      	b.n	800b47a <dir_register+0x33a>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b21e:	f04f 32ff 	mov.w	r2, #4294967295
 800b222:	4619      	mov	r1, r3
 800b224:	f7fe fccb 	bl	8009bbe <fill_last_frag>
 800b228:	4603      	mov	r3, r0
 800b22a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800b22e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b232:	2b00      	cmp	r3, #0
 800b234:	d002      	beq.n	800b23c <dir_register+0xfc>
 800b236:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b23a:	e11e      	b.n	800b47a <dir_register+0x33a>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800b23c:	687a      	ldr	r2, [r7, #4]
 800b23e:	f107 0308 	add.w	r3, r7, #8
 800b242:	4611      	mov	r1, r2
 800b244:	4618      	mov	r0, r3
 800b246:	f7ff fc8d 	bl	800ab64 <load_obj_dir>
 800b24a:	4603      	mov	r3, r0
 800b24c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800b250:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b254:	2b00      	cmp	r3, #0
 800b256:	d002      	beq.n	800b25e <dir_register+0x11e>
 800b258:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b25c:	e10d      	b.n	800b47a <dir_register+0x33a>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800b25e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b260:	695b      	ldr	r3, [r3, #20]
 800b262:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b26c:	4608      	mov	r0, r1
 800b26e:	f7fd fd94 	bl	8008d9a <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800b272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b274:	695b      	ldr	r3, [r3, #20]
 800b276:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b280:	4608      	mov	r0, r1
 800b282:	f7fd fd8a 	bl	8008d9a <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	79da      	ldrb	r2, [r3, #7]
 800b28a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b28c:	695b      	ldr	r3, [r3, #20]
 800b28e:	3321      	adds	r3, #33	; 0x21
 800b290:	f042 0201 	orr.w	r2, r2, #1
 800b294:	b2d2      	uxtb	r2, r2
 800b296:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800b298:	f107 0308 	add.w	r3, r7, #8
 800b29c:	4618      	mov	r0, r3
 800b29e:	f7ff fc9c 	bl	800abda <store_xdir>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800b2a8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d002      	beq.n	800b2b6 <dir_register+0x176>
 800b2b0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b2b4:	e0e1      	b.n	800b47a <dir_register+0x33a>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800b2b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2b8:	695a      	ldr	r2, [r3, #20]
 800b2ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2bc:	691b      	ldr	r3, [r3, #16]
 800b2be:	4619      	mov	r1, r3
 800b2c0:	4610      	mov	r0, r2
 800b2c2:	f7ff fce5 	bl	800ac90 <create_xdir>
		return FR_OK;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	e0d7      	b.n	800b47a <dir_register+0x33a>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800b2d0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800b2d4:	220c      	movs	r2, #12
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f7fd fde7 	bl	8008eaa <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800b2dc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b2e0:	f003 0301 	and.w	r3, r3, #1
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d033      	beq.n	800b350 <dir_register+0x210>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2240      	movs	r2, #64	; 0x40
 800b2ec:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	67bb      	str	r3, [r7, #120]	; 0x78
 800b2f4:	e016      	b.n	800b324 <dir_register+0x1e4>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800b2fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2fe:	691a      	ldr	r2, [r3, #16]
 800b300:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800b304:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b306:	f7ff f9d5 	bl	800a6b4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f7ff fdee 	bl	800aeec <dir_find>
 800b310:	4603      	mov	r3, r0
 800b312:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 800b316:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d106      	bne.n	800b32c <dir_register+0x1ec>
		for (n = 1; n < 100; n++) {
 800b31e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b320:	3301      	adds	r3, #1
 800b322:	67bb      	str	r3, [r7, #120]	; 0x78
 800b324:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b326:	2b63      	cmp	r3, #99	; 0x63
 800b328:	d9e5      	bls.n	800b2f6 <dir_register+0x1b6>
 800b32a:	e000      	b.n	800b32e <dir_register+0x1ee>
			if (res != FR_OK) break;
 800b32c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800b32e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b330:	2b64      	cmp	r3, #100	; 0x64
 800b332:	d101      	bne.n	800b338 <dir_register+0x1f8>
 800b334:	2307      	movs	r3, #7
 800b336:	e0a0      	b.n	800b47a <dir_register+0x33a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800b338:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b33c:	2b04      	cmp	r3, #4
 800b33e:	d002      	beq.n	800b346 <dir_register+0x206>
 800b340:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b344:	e099      	b.n	800b47a <dir_register+0x33a>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800b346:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800b350:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b354:	f003 0302 	and.w	r3, r3, #2
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d007      	beq.n	800b36c <dir_register+0x22c>
 800b35c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b35e:	330c      	adds	r3, #12
 800b360:	4a49      	ldr	r2, [pc, #292]	; (800b488 <dir_register+0x348>)
 800b362:	fba2 2303 	umull	r2, r3, r2, r3
 800b366:	089b      	lsrs	r3, r3, #2
 800b368:	3301      	adds	r3, #1
 800b36a:	e000      	b.n	800b36e <dir_register+0x22e>
 800b36c:	2301      	movs	r3, #1
 800b36e:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800b370:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f7fe ffc7 	bl	800a306 <dir_alloc>
 800b378:	4603      	mov	r3, r0
 800b37a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800b37e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b382:	2b00      	cmp	r3, #0
 800b384:	d14a      	bne.n	800b41c <dir_register+0x2dc>
 800b386:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b388:	3b01      	subs	r3, #1
 800b38a:	673b      	str	r3, [r7, #112]	; 0x70
 800b38c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d044      	beq.n	800b41c <dir_register+0x2dc>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b396:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b398:	015b      	lsls	r3, r3, #5
 800b39a:	1ad3      	subs	r3, r2, r3
 800b39c:	4619      	mov	r1, r3
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	f7fe fe37 	bl	800a012 <dir_sdi>
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800b3aa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d134      	bne.n	800b41c <dir_register+0x2dc>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	3340      	adds	r3, #64	; 0x40
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	f7ff fa0c 	bl	800a7d4 <sum_sfn>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3c6:	4619      	mov	r1, r3
 800b3c8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b3ca:	f7fd ff9d 	bl	8009308 <move_window>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 800b3d4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d11e      	bne.n	800b41a <dir_register+0x2da>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800b3dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3de:	6918      	ldr	r0, [r3, #16]
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800b3e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b3e6:	b2da      	uxtb	r2, r3
 800b3e8:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800b3ec:	f7ff f8fa 	bl	800a5e4 <put_lfn>
				fs->wflag = 1;
 800b3f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3f2:	2201      	movs	r2, #1
 800b3f4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800b3f6:	2100      	movs	r1, #0
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f7fe fe9e 	bl	800a13a <dir_next>
 800b3fe:	4603      	mov	r3, r0
 800b400:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 800b404:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d107      	bne.n	800b41c <dir_register+0x2dc>
 800b40c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b40e:	3b01      	subs	r3, #1
 800b410:	673b      	str	r3, [r7, #112]	; 0x70
 800b412:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b414:	2b00      	cmp	r3, #0
 800b416:	d1d4      	bne.n	800b3c2 <dir_register+0x282>
 800b418:	e000      	b.n	800b41c <dir_register+0x2dc>
				if (res != FR_OK) break;
 800b41a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b41c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b420:	2b00      	cmp	r3, #0
 800b422:	d128      	bne.n	800b476 <dir_register+0x336>
		res = move_window(fs, dp->sect);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b428:	4619      	mov	r1, r3
 800b42a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b42c:	f7fd ff6c 	bl	8009308 <move_window>
 800b430:	4603      	mov	r3, r0
 800b432:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800b436:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d11b      	bne.n	800b476 <dir_register+0x336>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b442:	2220      	movs	r2, #32
 800b444:	2100      	movs	r1, #0
 800b446:	4618      	mov	r0, r3
 800b448:	f7fd fd50 	bl	8008eec <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	3340      	adds	r3, #64	; 0x40
 800b454:	220b      	movs	r2, #11
 800b456:	4619      	mov	r1, r3
 800b458:	f7fd fd27 	bl	8008eaa <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b466:	330c      	adds	r3, #12
 800b468:	f002 0218 	and.w	r2, r2, #24
 800b46c:	b2d2      	uxtb	r2, r2
 800b46e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800b470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b472:	2201      	movs	r2, #1
 800b474:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b476:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800b47a:	4618      	mov	r0, r3
 800b47c:	3780      	adds	r7, #128	; 0x80
 800b47e:	46bd      	mov	sp, r7
 800b480:	bdb0      	pop	{r4, r5, r7, pc}
 800b482:	bf00      	nop
 800b484:	88888889 	.word	0x88888889
 800b488:	4ec4ec4f 	.word	0x4ec4ec4f

0800b48c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b088      	sub	sp, #32
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
 800b494:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	2200      	movs	r2, #0
 800b4a0:	769a      	strb	r2, [r3, #26]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	f000 80d8 	beq.w	800b65c <get_fileinfo+0x1d0>

#if _USE_LFN != 0	/* LFN configuration */
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800b4ac:	693b      	ldr	r3, [r7, #16]
 800b4ae:	781b      	ldrb	r3, [r3, #0]
 800b4b0:	2b04      	cmp	r3, #4
 800b4b2:	d106      	bne.n	800b4c2 <get_fileinfo+0x36>
		get_xdir_info(fs->dirbuf, fno);
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	695b      	ldr	r3, [r3, #20]
 800b4b8:	6839      	ldr	r1, [r7, #0]
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f7ff fa12 	bl	800a8e4 <get_xdir_info>
		return;
 800b4c0:	e0cd      	b.n	800b65e <get_fileinfo+0x1d2>
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4ca:	d032      	beq.n	800b532 <get_fileinfo+0xa6>
			i = j = 0;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	61bb      	str	r3, [r7, #24]
 800b4d0:	69bb      	ldr	r3, [r7, #24]
 800b4d2:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800b4d4:	e01b      	b.n	800b50e <get_fileinfo+0x82>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800b4d6:	89fb      	ldrh	r3, [r7, #14]
 800b4d8:	2100      	movs	r1, #0
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f002 f80a 	bl	800d4f4 <ff_convert>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800b4e4:	89fb      	ldrh	r3, [r7, #14]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d102      	bne.n	800b4f0 <get_fileinfo+0x64>
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	61fb      	str	r3, [r7, #28]
 800b4ee:	e01a      	b.n	800b526 <get_fileinfo+0x9a>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800b4f0:	69fb      	ldr	r3, [r7, #28]
 800b4f2:	2bfe      	cmp	r3, #254	; 0xfe
 800b4f4:	d902      	bls.n	800b4fc <get_fileinfo+0x70>
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	61fb      	str	r3, [r7, #28]
 800b4fa:	e014      	b.n	800b526 <get_fileinfo+0x9a>
				fno->fname[i++] = (TCHAR)w;
 800b4fc:	69fb      	ldr	r3, [r7, #28]
 800b4fe:	1c5a      	adds	r2, r3, #1
 800b500:	61fa      	str	r2, [r7, #28]
 800b502:	89fa      	ldrh	r2, [r7, #14]
 800b504:	b2d1      	uxtb	r1, r2
 800b506:	683a      	ldr	r2, [r7, #0]
 800b508:	4413      	add	r3, r2
 800b50a:	460a      	mov	r2, r1
 800b50c:	769a      	strb	r2, [r3, #26]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800b50e:	693b      	ldr	r3, [r7, #16]
 800b510:	691a      	ldr	r2, [r3, #16]
 800b512:	69bb      	ldr	r3, [r7, #24]
 800b514:	1c59      	adds	r1, r3, #1
 800b516:	61b9      	str	r1, [r7, #24]
 800b518:	005b      	lsls	r3, r3, #1
 800b51a:	4413      	add	r3, r2
 800b51c:	881b      	ldrh	r3, [r3, #0]
 800b51e:	81fb      	strh	r3, [r7, #14]
 800b520:	89fb      	ldrh	r3, [r7, #14]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d1d7      	bne.n	800b4d6 <get_fileinfo+0x4a>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800b526:	683a      	ldr	r2, [r7, #0]
 800b528:	69fb      	ldr	r3, [r7, #28]
 800b52a:	4413      	add	r3, r2
 800b52c:	331a      	adds	r3, #26
 800b52e:	2200      	movs	r2, #0
 800b530:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800b532:	2300      	movs	r3, #0
 800b534:	61bb      	str	r3, [r7, #24]
 800b536:	69bb      	ldr	r3, [r7, #24]
 800b538:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800b53a:	683a      	ldr	r2, [r7, #0]
 800b53c:	69fb      	ldr	r3, [r7, #28]
 800b53e:	4413      	add	r3, r2
 800b540:	331a      	adds	r3, #26
 800b542:	781b      	ldrb	r3, [r3, #0]
 800b544:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800b546:	e04c      	b.n	800b5e2 <get_fileinfo+0x156>
		c = (TCHAR)dp->dir[i++];
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b54c:	69fb      	ldr	r3, [r7, #28]
 800b54e:	1c59      	adds	r1, r3, #1
 800b550:	61f9      	str	r1, [r7, #28]
 800b552:	4413      	add	r3, r2
 800b554:	781b      	ldrb	r3, [r3, #0]
 800b556:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800b558:	7dfb      	ldrb	r3, [r7, #23]
 800b55a:	2b20      	cmp	r3, #32
 800b55c:	d100      	bne.n	800b560 <get_fileinfo+0xd4>
 800b55e:	e040      	b.n	800b5e2 <get_fileinfo+0x156>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800b560:	7dfb      	ldrb	r3, [r7, #23]
 800b562:	2b05      	cmp	r3, #5
 800b564:	d101      	bne.n	800b56a <get_fileinfo+0xde>
 800b566:	23e5      	movs	r3, #229	; 0xe5
 800b568:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800b56a:	69fb      	ldr	r3, [r7, #28]
 800b56c:	2b09      	cmp	r3, #9
 800b56e:	d10f      	bne.n	800b590 <get_fileinfo+0x104>
			if (!lfv) fno->fname[j] = '.';
 800b570:	89bb      	ldrh	r3, [r7, #12]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d105      	bne.n	800b582 <get_fileinfo+0xf6>
 800b576:	683a      	ldr	r2, [r7, #0]
 800b578:	69bb      	ldr	r3, [r7, #24]
 800b57a:	4413      	add	r3, r2
 800b57c:	331a      	adds	r3, #26
 800b57e:	222e      	movs	r2, #46	; 0x2e
 800b580:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800b582:	69bb      	ldr	r3, [r7, #24]
 800b584:	1c5a      	adds	r2, r3, #1
 800b586:	61ba      	str	r2, [r7, #24]
 800b588:	683a      	ldr	r2, [r7, #0]
 800b58a:	4413      	add	r3, r2
 800b58c:	222e      	movs	r2, #46	; 0x2e
 800b58e:	735a      	strb	r2, [r3, #13]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800b590:	683a      	ldr	r2, [r7, #0]
 800b592:	69bb      	ldr	r3, [r7, #24]
 800b594:	4413      	add	r3, r2
 800b596:	330d      	adds	r3, #13
 800b598:	7dfa      	ldrb	r2, [r7, #23]
 800b59a:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800b59c:	89bb      	ldrh	r3, [r7, #12]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d11c      	bne.n	800b5dc <get_fileinfo+0x150>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800b5a2:	7dfb      	ldrb	r3, [r7, #23]
 800b5a4:	2b40      	cmp	r3, #64	; 0x40
 800b5a6:	d913      	bls.n	800b5d0 <get_fileinfo+0x144>
 800b5a8:	7dfb      	ldrb	r3, [r7, #23]
 800b5aa:	2b5a      	cmp	r3, #90	; 0x5a
 800b5ac:	d810      	bhi.n	800b5d0 <get_fileinfo+0x144>
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5b2:	330c      	adds	r3, #12
 800b5b4:	781b      	ldrb	r3, [r3, #0]
 800b5b6:	461a      	mov	r2, r3
 800b5b8:	69fb      	ldr	r3, [r7, #28]
 800b5ba:	2b08      	cmp	r3, #8
 800b5bc:	d901      	bls.n	800b5c2 <get_fileinfo+0x136>
 800b5be:	2310      	movs	r3, #16
 800b5c0:	e000      	b.n	800b5c4 <get_fileinfo+0x138>
 800b5c2:	2308      	movs	r3, #8
 800b5c4:	4013      	ands	r3, r2
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d002      	beq.n	800b5d0 <get_fileinfo+0x144>
				c += 0x20;			/* To lower */
 800b5ca:	7dfb      	ldrb	r3, [r7, #23]
 800b5cc:	3320      	adds	r3, #32
 800b5ce:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800b5d0:	683a      	ldr	r2, [r7, #0]
 800b5d2:	69bb      	ldr	r3, [r7, #24]
 800b5d4:	4413      	add	r3, r2
 800b5d6:	331a      	adds	r3, #26
 800b5d8:	7dfa      	ldrb	r2, [r7, #23]
 800b5da:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800b5dc:	69bb      	ldr	r3, [r7, #24]
 800b5de:	3301      	adds	r3, #1
 800b5e0:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800b5e2:	69fb      	ldr	r3, [r7, #28]
 800b5e4:	2b0a      	cmp	r3, #10
 800b5e6:	d9af      	bls.n	800b548 <get_fileinfo+0xbc>
	}
	if (!lfv) {
 800b5e8:	89bb      	ldrh	r3, [r7, #12]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d10d      	bne.n	800b60a <get_fileinfo+0x17e>
		fno->fname[j] = 0;
 800b5ee:	683a      	ldr	r2, [r7, #0]
 800b5f0:	69bb      	ldr	r3, [r7, #24]
 800b5f2:	4413      	add	r3, r2
 800b5f4:	331a      	adds	r3, #26
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5fe:	330c      	adds	r3, #12
 800b600:	781b      	ldrb	r3, [r3, #0]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d101      	bne.n	800b60a <get_fileinfo+0x17e>
 800b606:	2300      	movs	r3, #0
 800b608:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800b60a:	683a      	ldr	r2, [r7, #0]
 800b60c:	69bb      	ldr	r3, [r7, #24]
 800b60e:	4413      	add	r3, r2
 800b610:	330d      	adds	r3, #13
 800b612:	2200      	movs	r2, #0
 800b614:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b61a:	7ada      	ldrb	r2, [r3, #11]
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	731a      	strb	r2, [r3, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b624:	331c      	adds	r3, #28
 800b626:	4618      	mov	r0, r3
 800b628:	f7fd fa92 	bl	8008b50 <ld_dword>
 800b62c:	4603      	mov	r3, r0
 800b62e:	461a      	mov	r2, r3
 800b630:	f04f 0300 	mov.w	r3, #0
 800b634:	6839      	ldr	r1, [r7, #0]
 800b636:	e9c1 2300 	strd	r2, r3, [r1]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b63e:	3316      	adds	r3, #22
 800b640:	4618      	mov	r0, r3
 800b642:	f7fd fa85 	bl	8008b50 <ld_dword>
 800b646:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	b29a      	uxth	r2, r3
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	815a      	strh	r2, [r3, #10]
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	0c1b      	lsrs	r3, r3, #16
 800b654:	b29a      	uxth	r2, r3
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	811a      	strh	r2, [r3, #8]
 800b65a:	e000      	b.n	800b65e <get_fileinfo+0x1d2>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b65c:	bf00      	nop
}
 800b65e:	3720      	adds	r7, #32
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}

0800b664 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b08a      	sub	sp, #40	; 0x28
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
 800b66c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	613b      	str	r3, [r7, #16]
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	691b      	ldr	r3, [r3, #16]
 800b67a:	60fb      	str	r3, [r7, #12]
 800b67c:	2300      	movs	r3, #0
 800b67e:	617b      	str	r3, [r7, #20]
 800b680:	697b      	ldr	r3, [r7, #20]
 800b682:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800b684:	69bb      	ldr	r3, [r7, #24]
 800b686:	1c5a      	adds	r2, r3, #1
 800b688:	61ba      	str	r2, [r7, #24]
 800b68a:	693a      	ldr	r2, [r7, #16]
 800b68c:	4413      	add	r3, r2
 800b68e:	781b      	ldrb	r3, [r3, #0]
 800b690:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800b692:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b694:	2b1f      	cmp	r3, #31
 800b696:	d940      	bls.n	800b71a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800b698:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b69a:	2b2f      	cmp	r3, #47	; 0x2f
 800b69c:	d006      	beq.n	800b6ac <create_name+0x48>
 800b69e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b6a0:	2b5c      	cmp	r3, #92	; 0x5c
 800b6a2:	d110      	bne.n	800b6c6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b6a4:	e002      	b.n	800b6ac <create_name+0x48>
 800b6a6:	69bb      	ldr	r3, [r7, #24]
 800b6a8:	3301      	adds	r3, #1
 800b6aa:	61bb      	str	r3, [r7, #24]
 800b6ac:	693a      	ldr	r2, [r7, #16]
 800b6ae:	69bb      	ldr	r3, [r7, #24]
 800b6b0:	4413      	add	r3, r2
 800b6b2:	781b      	ldrb	r3, [r3, #0]
 800b6b4:	2b2f      	cmp	r3, #47	; 0x2f
 800b6b6:	d0f6      	beq.n	800b6a6 <create_name+0x42>
 800b6b8:	693a      	ldr	r2, [r7, #16]
 800b6ba:	69bb      	ldr	r3, [r7, #24]
 800b6bc:	4413      	add	r3, r2
 800b6be:	781b      	ldrb	r3, [r3, #0]
 800b6c0:	2b5c      	cmp	r3, #92	; 0x5c
 800b6c2:	d0f0      	beq.n	800b6a6 <create_name+0x42>
			break;
 800b6c4:	e02a      	b.n	800b71c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	2bfe      	cmp	r3, #254	; 0xfe
 800b6ca:	d901      	bls.n	800b6d0 <create_name+0x6c>
 800b6cc:	2306      	movs	r3, #6
 800b6ce:	e177      	b.n	800b9c0 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800b6d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b6d2:	b2db      	uxtb	r3, r3
 800b6d4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800b6d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b6d8:	2101      	movs	r1, #1
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f001 ff0a 	bl	800d4f4 <ff_convert>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800b6e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d101      	bne.n	800b6ee <create_name+0x8a>
 800b6ea:	2306      	movs	r3, #6
 800b6ec:	e168      	b.n	800b9c0 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800b6ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b6f0:	2b7f      	cmp	r3, #127	; 0x7f
 800b6f2:	d809      	bhi.n	800b708 <create_name+0xa4>
 800b6f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b6f6:	4619      	mov	r1, r3
 800b6f8:	48b3      	ldr	r0, [pc, #716]	; (800b9c8 <create_name+0x364>)
 800b6fa:	f7fd fc39 	bl	8008f70 <chk_chr>
 800b6fe:	4603      	mov	r3, r0
 800b700:	2b00      	cmp	r3, #0
 800b702:	d001      	beq.n	800b708 <create_name+0xa4>
 800b704:	2306      	movs	r3, #6
 800b706:	e15b      	b.n	800b9c0 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800b708:	697b      	ldr	r3, [r7, #20]
 800b70a:	1c5a      	adds	r2, r3, #1
 800b70c:	617a      	str	r2, [r7, #20]
 800b70e:	005b      	lsls	r3, r3, #1
 800b710:	68fa      	ldr	r2, [r7, #12]
 800b712:	4413      	add	r3, r2
 800b714:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b716:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800b718:	e7b4      	b.n	800b684 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800b71a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800b71c:	693a      	ldr	r2, [r7, #16]
 800b71e:	69bb      	ldr	r3, [r7, #24]
 800b720:	441a      	add	r2, r3
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b726:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b728:	2b1f      	cmp	r3, #31
 800b72a:	d801      	bhi.n	800b730 <create_name+0xcc>
 800b72c:	2304      	movs	r3, #4
 800b72e:	e000      	b.n	800b732 <create_name+0xce>
 800b730:	2300      	movs	r3, #0
 800b732:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b736:	e011      	b.n	800b75c <create_name+0xf8>
		w = lfn[di - 1];
 800b738:	697b      	ldr	r3, [r7, #20]
 800b73a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b73e:	3b01      	subs	r3, #1
 800b740:	005b      	lsls	r3, r3, #1
 800b742:	68fa      	ldr	r2, [r7, #12]
 800b744:	4413      	add	r3, r2
 800b746:	881b      	ldrh	r3, [r3, #0]
 800b748:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800b74a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b74c:	2b20      	cmp	r3, #32
 800b74e:	d002      	beq.n	800b756 <create_name+0xf2>
 800b750:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b752:	2b2e      	cmp	r3, #46	; 0x2e
 800b754:	d106      	bne.n	800b764 <create_name+0x100>
		di--;
 800b756:	697b      	ldr	r3, [r7, #20]
 800b758:	3b01      	subs	r3, #1
 800b75a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b75c:	697b      	ldr	r3, [r7, #20]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d1ea      	bne.n	800b738 <create_name+0xd4>
 800b762:	e000      	b.n	800b766 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800b764:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	005b      	lsls	r3, r3, #1
 800b76a:	68fa      	ldr	r2, [r7, #12]
 800b76c:	4413      	add	r3, r2
 800b76e:	2200      	movs	r2, #0
 800b770:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800b772:	697b      	ldr	r3, [r7, #20]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d101      	bne.n	800b77c <create_name+0x118>
 800b778:	2306      	movs	r3, #6
 800b77a:	e121      	b.n	800b9c0 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	3340      	adds	r3, #64	; 0x40
 800b780:	220b      	movs	r2, #11
 800b782:	2120      	movs	r1, #32
 800b784:	4618      	mov	r0, r3
 800b786:	f7fd fbb1 	bl	8008eec <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800b78a:	2300      	movs	r3, #0
 800b78c:	61bb      	str	r3, [r7, #24]
 800b78e:	e002      	b.n	800b796 <create_name+0x132>
 800b790:	69bb      	ldr	r3, [r7, #24]
 800b792:	3301      	adds	r3, #1
 800b794:	61bb      	str	r3, [r7, #24]
 800b796:	69bb      	ldr	r3, [r7, #24]
 800b798:	005b      	lsls	r3, r3, #1
 800b79a:	68fa      	ldr	r2, [r7, #12]
 800b79c:	4413      	add	r3, r2
 800b79e:	881b      	ldrh	r3, [r3, #0]
 800b7a0:	2b20      	cmp	r3, #32
 800b7a2:	d0f5      	beq.n	800b790 <create_name+0x12c>
 800b7a4:	69bb      	ldr	r3, [r7, #24]
 800b7a6:	005b      	lsls	r3, r3, #1
 800b7a8:	68fa      	ldr	r2, [r7, #12]
 800b7aa:	4413      	add	r3, r2
 800b7ac:	881b      	ldrh	r3, [r3, #0]
 800b7ae:	2b2e      	cmp	r3, #46	; 0x2e
 800b7b0:	d0ee      	beq.n	800b790 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800b7b2:	69bb      	ldr	r3, [r7, #24]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d009      	beq.n	800b7cc <create_name+0x168>
 800b7b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7bc:	f043 0303 	orr.w	r3, r3, #3
 800b7c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800b7c4:	e002      	b.n	800b7cc <create_name+0x168>
 800b7c6:	697b      	ldr	r3, [r7, #20]
 800b7c8:	3b01      	subs	r3, #1
 800b7ca:	617b      	str	r3, [r7, #20]
 800b7cc:	697b      	ldr	r3, [r7, #20]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d009      	beq.n	800b7e6 <create_name+0x182>
 800b7d2:	697b      	ldr	r3, [r7, #20]
 800b7d4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b7d8:	3b01      	subs	r3, #1
 800b7da:	005b      	lsls	r3, r3, #1
 800b7dc:	68fa      	ldr	r2, [r7, #12]
 800b7de:	4413      	add	r3, r2
 800b7e0:	881b      	ldrh	r3, [r3, #0]
 800b7e2:	2b2e      	cmp	r3, #46	; 0x2e
 800b7e4:	d1ef      	bne.n	800b7c6 <create_name+0x162>

	i = b = 0; ni = 8;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	623b      	str	r3, [r7, #32]
 800b7f0:	2308      	movs	r3, #8
 800b7f2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800b7f4:	69bb      	ldr	r3, [r7, #24]
 800b7f6:	1c5a      	adds	r2, r3, #1
 800b7f8:	61ba      	str	r2, [r7, #24]
 800b7fa:	005b      	lsls	r3, r3, #1
 800b7fc:	68fa      	ldr	r2, [r7, #12]
 800b7fe:	4413      	add	r3, r2
 800b800:	881b      	ldrh	r3, [r3, #0]
 800b802:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800b804:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b806:	2b00      	cmp	r3, #0
 800b808:	f000 8090 	beq.w	800b92c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800b80c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b80e:	2b20      	cmp	r3, #32
 800b810:	d006      	beq.n	800b820 <create_name+0x1bc>
 800b812:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b814:	2b2e      	cmp	r3, #46	; 0x2e
 800b816:	d10a      	bne.n	800b82e <create_name+0x1ca>
 800b818:	69ba      	ldr	r2, [r7, #24]
 800b81a:	697b      	ldr	r3, [r7, #20]
 800b81c:	429a      	cmp	r2, r3
 800b81e:	d006      	beq.n	800b82e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800b820:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b824:	f043 0303 	orr.w	r3, r3, #3
 800b828:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b82c:	e07d      	b.n	800b92a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800b82e:	6a3a      	ldr	r2, [r7, #32]
 800b830:	69fb      	ldr	r3, [r7, #28]
 800b832:	429a      	cmp	r2, r3
 800b834:	d203      	bcs.n	800b83e <create_name+0x1da>
 800b836:	69ba      	ldr	r2, [r7, #24]
 800b838:	697b      	ldr	r3, [r7, #20]
 800b83a:	429a      	cmp	r2, r3
 800b83c:	d123      	bne.n	800b886 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800b83e:	69fb      	ldr	r3, [r7, #28]
 800b840:	2b0b      	cmp	r3, #11
 800b842:	d106      	bne.n	800b852 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800b844:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b848:	f043 0303 	orr.w	r3, r3, #3
 800b84c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b850:	e06f      	b.n	800b932 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800b852:	69ba      	ldr	r2, [r7, #24]
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	429a      	cmp	r2, r3
 800b858:	d005      	beq.n	800b866 <create_name+0x202>
 800b85a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b85e:	f043 0303 	orr.w	r3, r3, #3
 800b862:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800b866:	69ba      	ldr	r2, [r7, #24]
 800b868:	697b      	ldr	r3, [r7, #20]
 800b86a:	429a      	cmp	r2, r3
 800b86c:	d860      	bhi.n	800b930 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	61bb      	str	r3, [r7, #24]
 800b872:	2308      	movs	r3, #8
 800b874:	623b      	str	r3, [r7, #32]
 800b876:	230b      	movs	r3, #11
 800b878:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800b87a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b87e:	009b      	lsls	r3, r3, #2
 800b880:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b884:	e051      	b.n	800b92a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800b886:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b888:	2b7f      	cmp	r3, #127	; 0x7f
 800b88a:	d914      	bls.n	800b8b6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800b88c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b88e:	2100      	movs	r1, #0
 800b890:	4618      	mov	r0, r3
 800b892:	f001 fe2f 	bl	800d4f4 <ff_convert>
 800b896:	4603      	mov	r3, r0
 800b898:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800b89a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d004      	beq.n	800b8aa <create_name+0x246>
 800b8a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b8a2:	3b80      	subs	r3, #128	; 0x80
 800b8a4:	4a49      	ldr	r2, [pc, #292]	; (800b9cc <create_name+0x368>)
 800b8a6:	5cd3      	ldrb	r3, [r2, r3]
 800b8a8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800b8aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8ae:	f043 0302 	orr.w	r3, r3, #2
 800b8b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800b8b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d007      	beq.n	800b8cc <create_name+0x268>
 800b8bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b8be:	4619      	mov	r1, r3
 800b8c0:	4843      	ldr	r0, [pc, #268]	; (800b9d0 <create_name+0x36c>)
 800b8c2:	f7fd fb55 	bl	8008f70 <chk_chr>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d008      	beq.n	800b8de <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800b8cc:	235f      	movs	r3, #95	; 0x5f
 800b8ce:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b8d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8d4:	f043 0303 	orr.w	r3, r3, #3
 800b8d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b8dc:	e01b      	b.n	800b916 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800b8de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b8e0:	2b40      	cmp	r3, #64	; 0x40
 800b8e2:	d909      	bls.n	800b8f8 <create_name+0x294>
 800b8e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b8e6:	2b5a      	cmp	r3, #90	; 0x5a
 800b8e8:	d806      	bhi.n	800b8f8 <create_name+0x294>
					b |= 2;
 800b8ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b8ee:	f043 0302 	orr.w	r3, r3, #2
 800b8f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b8f6:	e00e      	b.n	800b916 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800b8f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b8fa:	2b60      	cmp	r3, #96	; 0x60
 800b8fc:	d90b      	bls.n	800b916 <create_name+0x2b2>
 800b8fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b900:	2b7a      	cmp	r3, #122	; 0x7a
 800b902:	d808      	bhi.n	800b916 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800b904:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b908:	f043 0301 	orr.w	r3, r3, #1
 800b90c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b910:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b912:	3b20      	subs	r3, #32
 800b914:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800b916:	6a3b      	ldr	r3, [r7, #32]
 800b918:	1c5a      	adds	r2, r3, #1
 800b91a:	623a      	str	r2, [r7, #32]
 800b91c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b91e:	b2d1      	uxtb	r1, r2
 800b920:	687a      	ldr	r2, [r7, #4]
 800b922:	4413      	add	r3, r2
 800b924:	460a      	mov	r2, r1
 800b926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 800b92a:	e763      	b.n	800b7f4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800b92c:	bf00      	nop
 800b92e:	e000      	b.n	800b932 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800b930:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b938:	2be5      	cmp	r3, #229	; 0xe5
 800b93a:	d103      	bne.n	800b944 <create_name+0x2e0>
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2205      	movs	r2, #5
 800b940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 800b944:	69fb      	ldr	r3, [r7, #28]
 800b946:	2b08      	cmp	r3, #8
 800b948:	d104      	bne.n	800b954 <create_name+0x2f0>
 800b94a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b94e:	009b      	lsls	r3, r3, #2
 800b950:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800b954:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b958:	f003 030c 	and.w	r3, r3, #12
 800b95c:	2b0c      	cmp	r3, #12
 800b95e:	d005      	beq.n	800b96c <create_name+0x308>
 800b960:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b964:	f003 0303 	and.w	r3, r3, #3
 800b968:	2b03      	cmp	r3, #3
 800b96a:	d105      	bne.n	800b978 <create_name+0x314>
 800b96c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b970:	f043 0302 	orr.w	r3, r3, #2
 800b974:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800b978:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b97c:	f003 0302 	and.w	r3, r3, #2
 800b980:	2b00      	cmp	r3, #0
 800b982:	d117      	bne.n	800b9b4 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800b984:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b988:	f003 0303 	and.w	r3, r3, #3
 800b98c:	2b01      	cmp	r3, #1
 800b98e:	d105      	bne.n	800b99c <create_name+0x338>
 800b990:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b994:	f043 0310 	orr.w	r3, r3, #16
 800b998:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800b99c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b9a0:	f003 030c 	and.w	r3, r3, #12
 800b9a4:	2b04      	cmp	r3, #4
 800b9a6:	d105      	bne.n	800b9b4 <create_name+0x350>
 800b9a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9ac:	f043 0308 	orr.w	r3, r3, #8
 800b9b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b9ba:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 800b9be:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	3728      	adds	r7, #40	; 0x28
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}
 800b9c8:	08010428 	.word	0x08010428
 800b9cc:	0801053c 	.word	0x0801053c
 800b9d0:	08010434 	.word	0x08010434

0800b9d4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b086      	sub	sp, #24
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
 800b9dc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b9e2:	693b      	ldr	r3, [r7, #16]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b9e8:	e002      	b.n	800b9f0 <follow_path+0x1c>
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	3301      	adds	r3, #1
 800b9ee:	603b      	str	r3, [r7, #0]
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	781b      	ldrb	r3, [r3, #0]
 800b9f4:	2b2f      	cmp	r3, #47	; 0x2f
 800b9f6:	d0f8      	beq.n	800b9ea <follow_path+0x16>
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	781b      	ldrb	r3, [r3, #0]
 800b9fc:	2b5c      	cmp	r3, #92	; 0x5c
 800b9fe:	d0f4      	beq.n	800b9ea <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	2200      	movs	r2, #0
 800ba04:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	781b      	ldrb	r3, [r3, #0]
 800ba10:	2b1f      	cmp	r3, #31
 800ba12:	d80a      	bhi.n	800ba2a <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2280      	movs	r2, #128	; 0x80
 800ba18:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800ba1c:	2100      	movs	r1, #0
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f7fe faf7 	bl	800a012 <dir_sdi>
 800ba24:	4603      	mov	r3, r0
 800ba26:	75fb      	strb	r3, [r7, #23]
 800ba28:	e07d      	b.n	800bb26 <follow_path+0x152>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ba2a:	463b      	mov	r3, r7
 800ba2c:	4619      	mov	r1, r3
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f7ff fe18 	bl	800b664 <create_name>
 800ba34:	4603      	mov	r3, r0
 800ba36:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ba38:	7dfb      	ldrb	r3, [r7, #23]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d16e      	bne.n	800bb1c <follow_path+0x148>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ba3e:	6878      	ldr	r0, [r7, #4]
 800ba40:	f7ff fa54 	bl	800aeec <dir_find>
 800ba44:	4603      	mov	r3, r0
 800ba46:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800ba4e:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ba50:	7dfb      	ldrb	r3, [r7, #23]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d00a      	beq.n	800ba6c <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ba56:	7dfb      	ldrb	r3, [r7, #23]
 800ba58:	2b04      	cmp	r3, #4
 800ba5a:	d161      	bne.n	800bb20 <follow_path+0x14c>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ba5c:	7afb      	ldrb	r3, [r7, #11]
 800ba5e:	f003 0304 	and.w	r3, r3, #4
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d15c      	bne.n	800bb20 <follow_path+0x14c>
 800ba66:	2305      	movs	r3, #5
 800ba68:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ba6a:	e059      	b.n	800bb20 <follow_path+0x14c>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ba6c:	7afb      	ldrb	r3, [r7, #11]
 800ba6e:	f003 0304 	and.w	r3, r3, #4
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d156      	bne.n	800bb24 <follow_path+0x150>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ba76:	693b      	ldr	r3, [r7, #16]
 800ba78:	799b      	ldrb	r3, [r3, #6]
 800ba7a:	f003 0310 	and.w	r3, r3, #16
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d102      	bne.n	800ba88 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800ba82:	2305      	movs	r3, #5
 800ba84:	75fb      	strb	r3, [r7, #23]
 800ba86:	e04e      	b.n	800bb26 <follow_path+0x152>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	781b      	ldrb	r3, [r3, #0]
 800ba8c:	2b04      	cmp	r3, #4
 800ba8e:	d130      	bne.n	800baf2 <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800ba90:	693b      	ldr	r3, [r7, #16]
 800ba92:	689a      	ldr	r2, [r3, #8]
 800ba94:	693b      	ldr	r3, [r7, #16]
 800ba96:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800ba98:	693b      	ldr	r3, [r7, #16]
 800ba9a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ba9e:	4613      	mov	r3, r2
 800baa0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800baa4:	693a      	ldr	r2, [r7, #16]
 800baa6:	79d2      	ldrb	r2, [r2, #7]
 800baa8:	431a      	orrs	r2, r3
 800baaa:	693b      	ldr	r3, [r7, #16]
 800baac:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bab2:	693b      	ldr	r3, [r7, #16]
 800bab4:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	695b      	ldr	r3, [r3, #20]
 800baba:	3334      	adds	r3, #52	; 0x34
 800babc:	4618      	mov	r0, r3
 800babe:	f7fd f847 	bl	8008b50 <ld_dword>
 800bac2:	4602      	mov	r2, r0
 800bac4:	693b      	ldr	r3, [r7, #16]
 800bac6:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	695b      	ldr	r3, [r3, #20]
 800bacc:	3321      	adds	r3, #33	; 0x21
 800bace:	781b      	ldrb	r3, [r3, #0]
 800bad0:	f003 0302 	and.w	r3, r3, #2
 800bad4:	b2da      	uxtb	r2, r3
 800bad6:	693b      	ldr	r3, [r7, #16]
 800bad8:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	695b      	ldr	r3, [r3, #20]
 800bade:	3338      	adds	r3, #56	; 0x38
 800bae0:	4618      	mov	r0, r3
 800bae2:	f7fd f858 	bl	8008b96 <ld_qword>
 800bae6:	4602      	mov	r2, r0
 800bae8:	460b      	mov	r3, r1
 800baea:	6939      	ldr	r1, [r7, #16]
 800baec:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800baf0:	e79b      	b.n	800ba2a <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bafc:	68fa      	ldr	r2, [r7, #12]
 800bafe:	8992      	ldrh	r2, [r2, #12]
 800bb00:	fbb3 f0f2 	udiv	r0, r3, r2
 800bb04:	fb02 f200 	mul.w	r2, r2, r0
 800bb08:	1a9b      	subs	r3, r3, r2
 800bb0a:	440b      	add	r3, r1
 800bb0c:	4619      	mov	r1, r3
 800bb0e:	68f8      	ldr	r0, [r7, #12]
 800bb10:	f7fe fc55 	bl	800a3be <ld_clust>
 800bb14:	4602      	mov	r2, r0
 800bb16:	693b      	ldr	r3, [r7, #16]
 800bb18:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bb1a:	e786      	b.n	800ba2a <follow_path+0x56>
			if (res != FR_OK) break;
 800bb1c:	bf00      	nop
 800bb1e:	e002      	b.n	800bb26 <follow_path+0x152>
				break;
 800bb20:	bf00      	nop
 800bb22:	e000      	b.n	800bb26 <follow_path+0x152>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bb24:	bf00      	nop
			}
		}
	}

	return res;
 800bb26:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	3718      	adds	r7, #24
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}

0800bb30 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800bb30:	b480      	push	{r7}
 800bb32:	b087      	sub	sp, #28
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800bb38:	f04f 33ff 	mov.w	r3, #4294967295
 800bb3c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d031      	beq.n	800bbaa <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	617b      	str	r3, [r7, #20]
 800bb4c:	e002      	b.n	800bb54 <get_ldnumber+0x24>
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	3301      	adds	r3, #1
 800bb52:	617b      	str	r3, [r7, #20]
 800bb54:	697b      	ldr	r3, [r7, #20]
 800bb56:	781b      	ldrb	r3, [r3, #0]
 800bb58:	2b1f      	cmp	r3, #31
 800bb5a:	d903      	bls.n	800bb64 <get_ldnumber+0x34>
 800bb5c:	697b      	ldr	r3, [r7, #20]
 800bb5e:	781b      	ldrb	r3, [r3, #0]
 800bb60:	2b3a      	cmp	r3, #58	; 0x3a
 800bb62:	d1f4      	bne.n	800bb4e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800bb64:	697b      	ldr	r3, [r7, #20]
 800bb66:	781b      	ldrb	r3, [r3, #0]
 800bb68:	2b3a      	cmp	r3, #58	; 0x3a
 800bb6a:	d11c      	bne.n	800bba6 <get_ldnumber+0x76>
			tp = *path;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	1c5a      	adds	r2, r3, #1
 800bb76:	60fa      	str	r2, [r7, #12]
 800bb78:	781b      	ldrb	r3, [r3, #0]
 800bb7a:	3b30      	subs	r3, #48	; 0x30
 800bb7c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800bb7e:	68bb      	ldr	r3, [r7, #8]
 800bb80:	2b09      	cmp	r3, #9
 800bb82:	d80e      	bhi.n	800bba2 <get_ldnumber+0x72>
 800bb84:	68fa      	ldr	r2, [r7, #12]
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	429a      	cmp	r2, r3
 800bb8a:	d10a      	bne.n	800bba2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d107      	bne.n	800bba2 <get_ldnumber+0x72>
					vol = (int)i;
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800bb96:	697b      	ldr	r3, [r7, #20]
 800bb98:	3301      	adds	r3, #1
 800bb9a:	617b      	str	r3, [r7, #20]
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	697a      	ldr	r2, [r7, #20]
 800bba0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800bba2:	693b      	ldr	r3, [r7, #16]
 800bba4:	e002      	b.n	800bbac <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800bba6:	2300      	movs	r3, #0
 800bba8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800bbaa:	693b      	ldr	r3, [r7, #16]
}
 800bbac:	4618      	mov	r0, r3
 800bbae:	371c      	adds	r7, #28
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb6:	4770      	bx	lr

0800bbb8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b082      	sub	sp, #8
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
 800bbc0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	70da      	strb	r2, [r3, #3]
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f04f 32ff 	mov.w	r2, #4294967295
 800bbce:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800bbd0:	6839      	ldr	r1, [r7, #0]
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f7fd fb98 	bl	8009308 <move_window>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d001      	beq.n	800bbe2 <check_fs+0x2a>
 800bbde:	2304      	movs	r3, #4
 800bbe0:	e044      	b.n	800bc6c <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	333c      	adds	r3, #60	; 0x3c
 800bbe6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bbea:	4618      	mov	r0, r3
 800bbec:	f7fc ff98 	bl	8008b20 <ld_word>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	461a      	mov	r2, r3
 800bbf4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bbf8:	429a      	cmp	r2, r3
 800bbfa:	d001      	beq.n	800bc00 <check_fs+0x48>
 800bbfc:	2303      	movs	r3, #3
 800bbfe:	e035      	b.n	800bc6c <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc06:	2be9      	cmp	r3, #233	; 0xe9
 800bc08:	d009      	beq.n	800bc1e <check_fs+0x66>
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc10:	2beb      	cmp	r3, #235	; 0xeb
 800bc12:	d11e      	bne.n	800bc52 <check_fs+0x9a>
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bc1a:	2b90      	cmp	r3, #144	; 0x90
 800bc1c:	d119      	bne.n	800bc52 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	333c      	adds	r3, #60	; 0x3c
 800bc22:	3336      	adds	r3, #54	; 0x36
 800bc24:	4618      	mov	r0, r3
 800bc26:	f7fc ff93 	bl	8008b50 <ld_dword>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800bc30:	4a10      	ldr	r2, [pc, #64]	; (800bc74 <check_fs+0xbc>)
 800bc32:	4293      	cmp	r3, r2
 800bc34:	d101      	bne.n	800bc3a <check_fs+0x82>
 800bc36:	2300      	movs	r3, #0
 800bc38:	e018      	b.n	800bc6c <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	333c      	adds	r3, #60	; 0x3c
 800bc3e:	3352      	adds	r3, #82	; 0x52
 800bc40:	4618      	mov	r0, r3
 800bc42:	f7fc ff85 	bl	8008b50 <ld_dword>
 800bc46:	4603      	mov	r3, r0
 800bc48:	4a0b      	ldr	r2, [pc, #44]	; (800bc78 <check_fs+0xc0>)
 800bc4a:	4293      	cmp	r3, r2
 800bc4c:	d101      	bne.n	800bc52 <check_fs+0x9a>
 800bc4e:	2300      	movs	r3, #0
 800bc50:	e00c      	b.n	800bc6c <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	333c      	adds	r3, #60	; 0x3c
 800bc56:	220b      	movs	r2, #11
 800bc58:	4908      	ldr	r1, [pc, #32]	; (800bc7c <check_fs+0xc4>)
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f7fd f961 	bl	8008f22 <mem_cmp>
 800bc60:	4603      	mov	r3, r0
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d101      	bne.n	800bc6a <check_fs+0xb2>
 800bc66:	2301      	movs	r3, #1
 800bc68:	e000      	b.n	800bc6c <check_fs+0xb4>
#endif
	return 2;
 800bc6a:	2302      	movs	r3, #2
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	3708      	adds	r7, #8
 800bc70:	46bd      	mov	sp, r7
 800bc72:	bd80      	pop	{r7, pc}
 800bc74:	00544146 	.word	0x00544146
 800bc78:	33544146 	.word	0x33544146
 800bc7c:	0801043c 	.word	0x0801043c

0800bc80 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800bc80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800bc84:	b098      	sub	sp, #96	; 0x60
 800bc86:	af00      	add	r7, sp, #0
 800bc88:	60f8      	str	r0, [r7, #12]
 800bc8a:	60b9      	str	r1, [r7, #8]
 800bc8c:	4613      	mov	r3, r2
 800bc8e:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	2200      	movs	r2, #0
 800bc94:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800bc96:	68f8      	ldr	r0, [r7, #12]
 800bc98:	f7ff ff4a 	bl	800bb30 <get_ldnumber>
 800bc9c:	6478      	str	r0, [r7, #68]	; 0x44
	if (vol < 0) return FR_INVALID_DRIVE;
 800bc9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	da01      	bge.n	800bca8 <find_volume+0x28>
 800bca4:	230b      	movs	r3, #11
 800bca6:	e36b      	b.n	800c380 <find_volume+0x700>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800bca8:	4aa9      	ldr	r2, [pc, #676]	; (800bf50 <find_volume+0x2d0>)
 800bcaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bcac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bcb0:	643b      	str	r3, [r7, #64]	; 0x40
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800bcb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d101      	bne.n	800bcbc <find_volume+0x3c>
 800bcb8:	230c      	movs	r3, #12
 800bcba:	e361      	b.n	800c380 <find_volume+0x700>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bcc0:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800bcc2:	79fb      	ldrb	r3, [r7, #7]
 800bcc4:	f023 0301 	bic.w	r3, r3, #1
 800bcc8:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800bcca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bccc:	781b      	ldrb	r3, [r3, #0]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d01a      	beq.n	800bd08 <find_volume+0x88>
		stat = disk_status(fs->drv);
 800bcd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcd4:	785b      	ldrb	r3, [r3, #1]
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f7fc fe84 	bl	80089e4 <disk_status>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800bce2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bce6:	f003 0301 	and.w	r3, r3, #1
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d10c      	bne.n	800bd08 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800bcee:	79fb      	ldrb	r3, [r7, #7]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d007      	beq.n	800bd04 <find_volume+0x84>
 800bcf4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bcf8:	f003 0304 	and.w	r3, r3, #4
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d001      	beq.n	800bd04 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800bd00:	230a      	movs	r3, #10
 800bd02:	e33d      	b.n	800c380 <find_volume+0x700>
			}
			return FR_OK;				/* The file system object is valid */
 800bd04:	2300      	movs	r3, #0
 800bd06:	e33b      	b.n	800c380 <find_volume+0x700>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800bd08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800bd0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd10:	b2da      	uxtb	r2, r3
 800bd12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd14:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800bd16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd18:	785b      	ldrb	r3, [r3, #1]
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f7fc fe7c 	bl	8008a18 <disk_initialize>
 800bd20:	4603      	mov	r3, r0
 800bd22:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800bd26:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bd2a:	f003 0301 	and.w	r3, r3, #1
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d001      	beq.n	800bd36 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800bd32:	2303      	movs	r3, #3
 800bd34:	e324      	b.n	800c380 <find_volume+0x700>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800bd36:	79fb      	ldrb	r3, [r7, #7]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d007      	beq.n	800bd4c <find_volume+0xcc>
 800bd3c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bd40:	f003 0304 	and.w	r3, r3, #4
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d001      	beq.n	800bd4c <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800bd48:	230a      	movs	r3, #10
 800bd4a:	e319      	b.n	800c380 <find_volume+0x700>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800bd4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd4e:	7858      	ldrb	r0, [r3, #1]
 800bd50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd52:	330c      	adds	r3, #12
 800bd54:	461a      	mov	r2, r3
 800bd56:	2102      	movs	r1, #2
 800bd58:	f7fc fec4 	bl	8008ae4 <disk_ioctl>
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d001      	beq.n	800bd66 <find_volume+0xe6>
 800bd62:	2301      	movs	r3, #1
 800bd64:	e30c      	b.n	800c380 <find_volume+0x700>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800bd66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd68:	899b      	ldrh	r3, [r3, #12]
 800bd6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd6e:	d80d      	bhi.n	800bd8c <find_volume+0x10c>
 800bd70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd72:	899b      	ldrh	r3, [r3, #12]
 800bd74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd78:	d308      	bcc.n	800bd8c <find_volume+0x10c>
 800bd7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd7c:	899b      	ldrh	r3, [r3, #12]
 800bd7e:	461a      	mov	r2, r3
 800bd80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd82:	899b      	ldrh	r3, [r3, #12]
 800bd84:	3b01      	subs	r3, #1
 800bd86:	4013      	ands	r3, r2
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d001      	beq.n	800bd90 <find_volume+0x110>
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	e2f7      	b.n	800c380 <find_volume+0x700>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800bd90:	2300      	movs	r3, #0
 800bd92:	65bb      	str	r3, [r7, #88]	; 0x58
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800bd94:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bd96:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800bd98:	f7ff ff0e 	bl	800bbb8 <check_fs>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800bda2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bda6:	2b02      	cmp	r3, #2
 800bda8:	d14b      	bne.n	800be42 <find_volume+0x1c2>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bdaa:	2300      	movs	r3, #0
 800bdac:	64bb      	str	r3, [r7, #72]	; 0x48
 800bdae:	e01f      	b.n	800bdf0 <find_volume+0x170>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800bdb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bdb2:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800bdb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bdb8:	011b      	lsls	r3, r3, #4
 800bdba:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800bdbe:	4413      	add	r3, r2
 800bdc0:	63bb      	str	r3, [r7, #56]	; 0x38
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800bdc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdc4:	3304      	adds	r3, #4
 800bdc6:	781b      	ldrb	r3, [r3, #0]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d006      	beq.n	800bdda <find_volume+0x15a>
 800bdcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdce:	3308      	adds	r3, #8
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f7fc febd 	bl	8008b50 <ld_dword>
 800bdd6:	4602      	mov	r2, r0
 800bdd8:	e000      	b.n	800bddc <find_volume+0x15c>
 800bdda:	2200      	movs	r2, #0
 800bddc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bdde:	009b      	lsls	r3, r3, #2
 800bde0:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800bde4:	440b      	add	r3, r1
 800bde6:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bdea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bdec:	3301      	adds	r3, #1
 800bdee:	64bb      	str	r3, [r7, #72]	; 0x48
 800bdf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bdf2:	2b03      	cmp	r3, #3
 800bdf4:	d9dc      	bls.n	800bdb0 <find_volume+0x130>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (i) i--;
 800bdfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d002      	beq.n	800be06 <find_volume+0x186>
 800be00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be02:	3b01      	subs	r3, #1
 800be04:	64bb      	str	r3, [r7, #72]	; 0x48
		do {							/* Find an FAT volume */
			bsect = br[i];
 800be06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be08:	009b      	lsls	r3, r3, #2
 800be0a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800be0e:	4413      	add	r3, r2
 800be10:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800be14:	65bb      	str	r3, [r7, #88]	; 0x58
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800be16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d005      	beq.n	800be28 <find_volume+0x1a8>
 800be1c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800be1e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800be20:	f7ff feca 	bl	800bbb8 <check_fs>
 800be24:	4603      	mov	r3, r0
 800be26:	e000      	b.n	800be2a <find_volume+0x1aa>
 800be28:	2303      	movs	r3, #3
 800be2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800be2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800be32:	2b01      	cmp	r3, #1
 800be34:	d905      	bls.n	800be42 <find_volume+0x1c2>
 800be36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be38:	3301      	adds	r3, #1
 800be3a:	64bb      	str	r3, [r7, #72]	; 0x48
 800be3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be3e:	2b03      	cmp	r3, #3
 800be40:	d9e1      	bls.n	800be06 <find_volume+0x186>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800be42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800be46:	2b04      	cmp	r3, #4
 800be48:	d101      	bne.n	800be4e <find_volume+0x1ce>
 800be4a:	2301      	movs	r3, #1
 800be4c:	e298      	b.n	800c380 <find_volume+0x700>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800be4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800be52:	2b01      	cmp	r3, #1
 800be54:	d901      	bls.n	800be5a <find_volume+0x1da>
 800be56:	230d      	movs	r3, #13
 800be58:	e292      	b.n	800c380 <find_volume+0x700>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800be5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800be5e:	2b01      	cmp	r3, #1
 800be60:	f040 80fe 	bne.w	800c060 <find_volume+0x3e0>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800be64:	230b      	movs	r3, #11
 800be66:	64bb      	str	r3, [r7, #72]	; 0x48
 800be68:	e002      	b.n	800be70 <find_volume+0x1f0>
 800be6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be6c:	3301      	adds	r3, #1
 800be6e:	64bb      	str	r3, [r7, #72]	; 0x48
 800be70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be72:	2b3f      	cmp	r3, #63	; 0x3f
 800be74:	d806      	bhi.n	800be84 <find_volume+0x204>
 800be76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800be78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be7a:	4413      	add	r3, r2
 800be7c:	333c      	adds	r3, #60	; 0x3c
 800be7e:	781b      	ldrb	r3, [r3, #0]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d0f2      	beq.n	800be6a <find_volume+0x1ea>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800be84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be86:	2b3f      	cmp	r3, #63	; 0x3f
 800be88:	d801      	bhi.n	800be8e <find_volume+0x20e>
 800be8a:	230d      	movs	r3, #13
 800be8c:	e278      	b.n	800c380 <find_volume+0x700>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800be8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be90:	333c      	adds	r3, #60	; 0x3c
 800be92:	3368      	adds	r3, #104	; 0x68
 800be94:	4618      	mov	r0, r3
 800be96:	f7fc fe43 	bl	8008b20 <ld_word>
 800be9a:	4603      	mov	r3, r0
 800be9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bea0:	d001      	beq.n	800bea6 <find_volume+0x226>
 800bea2:	230d      	movs	r3, #13
 800bea4:	e26c      	b.n	800c380 <find_volume+0x700>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800bea6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bea8:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800beac:	461a      	mov	r2, r3
 800beae:	2301      	movs	r3, #1
 800beb0:	4093      	lsls	r3, r2
 800beb2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800beb4:	8992      	ldrh	r2, [r2, #12]
 800beb6:	4293      	cmp	r3, r2
 800beb8:	d001      	beq.n	800bebe <find_volume+0x23e>
			return FR_NO_FILESYSTEM;
 800beba:	230d      	movs	r3, #13
 800bebc:	e260      	b.n	800c380 <find_volume+0x700>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800bebe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bec0:	333c      	adds	r3, #60	; 0x3c
 800bec2:	3348      	adds	r3, #72	; 0x48
 800bec4:	4618      	mov	r0, r3
 800bec6:	f7fc fe66 	bl	8008b96 <ld_qword>
 800beca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800becc:	461a      	mov	r2, r3
 800bece:	f04f 0300 	mov.w	r3, #0
 800bed2:	eb10 0802 	adds.w	r8, r0, r2
 800bed6:	eb41 0903 	adc.w	r9, r1, r3
 800beda:	e9c7 8908 	strd	r8, r9, [r7, #32]
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800bede:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bee2:	2b01      	cmp	r3, #1
 800bee4:	bf08      	it	eq
 800bee6:	2a00      	cmpeq	r2, #0
 800bee8:	d301      	bcc.n	800beee <find_volume+0x26e>
 800beea:	230d      	movs	r3, #13
 800beec:	e248      	b.n	800c380 <find_volume+0x700>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800beee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bef0:	333c      	adds	r3, #60	; 0x3c
 800bef2:	3354      	adds	r3, #84	; 0x54
 800bef4:	4618      	mov	r0, r3
 800bef6:	f7fc fe2b 	bl	8008b50 <ld_dword>
 800befa:	4602      	mov	r2, r0
 800befc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800befe:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800bf00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf02:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 800bf06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf08:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800bf0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf0c:	789b      	ldrb	r3, [r3, #2]
 800bf0e:	2b01      	cmp	r3, #1
 800bf10:	d001      	beq.n	800bf16 <find_volume+0x296>
 800bf12:	230d      	movs	r3, #13
 800bf14:	e234      	b.n	800c380 <find_volume+0x700>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800bf16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf18:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800bf1c:	461a      	mov	r2, r3
 800bf1e:	2301      	movs	r3, #1
 800bf20:	4093      	lsls	r3, r2
 800bf22:	b29a      	uxth	r2, r3
 800bf24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf26:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800bf28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf2a:	895b      	ldrh	r3, [r3, #10]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d101      	bne.n	800bf34 <find_volume+0x2b4>
 800bf30:	230d      	movs	r3, #13
 800bf32:	e225      	b.n	800c380 <find_volume+0x700>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800bf34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf36:	333c      	adds	r3, #60	; 0x3c
 800bf38:	335c      	adds	r3, #92	; 0x5c
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f7fc fe08 	bl	8008b50 <ld_dword>
 800bf40:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800bf42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf44:	4a03      	ldr	r2, [pc, #12]	; (800bf54 <find_volume+0x2d4>)
 800bf46:	4293      	cmp	r3, r2
 800bf48:	d906      	bls.n	800bf58 <find_volume+0x2d8>
 800bf4a:	230d      	movs	r3, #13
 800bf4c:	e218      	b.n	800c380 <find_volume+0x700>
 800bf4e:	bf00      	nop
 800bf50:	200000b0 	.word	0x200000b0
 800bf54:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 800bf58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf5a:	1c9a      	adds	r2, r3, #2
 800bf5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf5e:	621a      	str	r2, [r3, #32]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800bf60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bf64:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800bf66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf68:	333c      	adds	r3, #60	; 0x3c
 800bf6a:	3358      	adds	r3, #88	; 0x58
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f7fc fdef 	bl	8008b50 <ld_dword>
 800bf72:	4602      	mov	r2, r0
 800bf74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf76:	441a      	add	r2, r3
 800bf78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf7a:	635a      	str	r2, [r3, #52]	; 0x34
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800bf7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf7e:	333c      	adds	r3, #60	; 0x3c
 800bf80:	3350      	adds	r3, #80	; 0x50
 800bf82:	4618      	mov	r0, r3
 800bf84:	f7fc fde4 	bl	8008b50 <ld_dword>
 800bf88:	4602      	mov	r2, r0
 800bf8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf8c:	441a      	add	r2, r3
 800bf8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf90:	62da      	str	r2, [r3, #44]	; 0x2c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800bf92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf96:	4618      	mov	r0, r3
 800bf98:	f04f 0100 	mov.w	r1, #0
 800bf9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf9e:	895b      	ldrh	r3, [r3, #10]
 800bfa0:	461a      	mov	r2, r3
 800bfa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfa4:	fb03 f302 	mul.w	r3, r3, r2
 800bfa8:	461a      	mov	r2, r3
 800bfaa:	f04f 0300 	mov.w	r3, #0
 800bfae:	1884      	adds	r4, r0, r2
 800bfb0:	eb41 0503 	adc.w	r5, r1, r3
 800bfb4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bfb8:	42ab      	cmp	r3, r5
 800bfba:	bf08      	it	eq
 800bfbc:	42a2      	cmpeq	r2, r4
 800bfbe:	d201      	bcs.n	800bfc4 <find_volume+0x344>
 800bfc0:	230d      	movs	r3, #13
 800bfc2:	e1dd      	b.n	800c380 <find_volume+0x700>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800bfc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfc6:	333c      	adds	r3, #60	; 0x3c
 800bfc8:	3360      	adds	r3, #96	; 0x60
 800bfca:	4618      	mov	r0, r3
 800bfcc:	f7fc fdc0 	bl	8008b50 <ld_dword>
 800bfd0:	4602      	mov	r2, r0
 800bfd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfd4:	631a      	str	r2, [r3, #48]	; 0x30

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800bfd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfda:	4619      	mov	r1, r3
 800bfdc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800bfde:	f7fd fa31 	bl	8009444 <clust2sect>
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	4619      	mov	r1, r3
 800bfe6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800bfe8:	f7fd f98e 	bl	8009308 <move_window>
 800bfec:	4603      	mov	r3, r0
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d001      	beq.n	800bff6 <find_volume+0x376>
 800bff2:	2301      	movs	r3, #1
 800bff4:	e1c4      	b.n	800c380 <find_volume+0x700>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800bff6:	2300      	movs	r3, #0
 800bff8:	64bb      	str	r3, [r7, #72]	; 0x48
 800bffa:	e015      	b.n	800c028 <find_volume+0x3a8>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800bffc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bffe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c000:	4413      	add	r3, r2
 800c002:	333c      	adds	r3, #60	; 0x3c
 800c004:	781b      	ldrb	r3, [r3, #0]
 800c006:	2b81      	cmp	r3, #129	; 0x81
 800c008:	d10b      	bne.n	800c022 <find_volume+0x3a2>
 800c00a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c00c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800c010:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c012:	3314      	adds	r3, #20
 800c014:	4413      	add	r3, r2
 800c016:	4618      	mov	r0, r3
 800c018:	f7fc fd9a 	bl	8008b50 <ld_dword>
 800c01c:	4603      	mov	r3, r0
 800c01e:	2b02      	cmp	r3, #2
 800c020:	d009      	beq.n	800c036 <find_volume+0x3b6>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800c022:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c024:	3320      	adds	r3, #32
 800c026:	64bb      	str	r3, [r7, #72]	; 0x48
 800c028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c02a:	899b      	ldrh	r3, [r3, #12]
 800c02c:	461a      	mov	r2, r3
 800c02e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c030:	4293      	cmp	r3, r2
 800c032:	d3e3      	bcc.n	800bffc <find_volume+0x37c>
 800c034:	e000      	b.n	800c038 <find_volume+0x3b8>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800c036:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800c038:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c03a:	899b      	ldrh	r3, [r3, #12]
 800c03c:	461a      	mov	r2, r3
 800c03e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c040:	4293      	cmp	r3, r2
 800c042:	d101      	bne.n	800c048 <find_volume+0x3c8>
 800c044:	230d      	movs	r3, #13
 800c046:	e19b      	b.n	800c380 <find_volume+0x700>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c048:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c04a:	f04f 32ff 	mov.w	r2, #4294967295
 800c04e:	61da      	str	r2, [r3, #28]
 800c050:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c052:	69da      	ldr	r2, [r3, #28]
 800c054:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c056:	619a      	str	r2, [r3, #24]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800c058:	2304      	movs	r3, #4
 800c05a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c05e:	e177      	b.n	800c350 <find_volume+0x6d0>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c060:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c062:	333c      	adds	r3, #60	; 0x3c
 800c064:	330b      	adds	r3, #11
 800c066:	4618      	mov	r0, r3
 800c068:	f7fc fd5a 	bl	8008b20 <ld_word>
 800c06c:	4603      	mov	r3, r0
 800c06e:	461a      	mov	r2, r3
 800c070:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c072:	899b      	ldrh	r3, [r3, #12]
 800c074:	429a      	cmp	r2, r3
 800c076:	d001      	beq.n	800c07c <find_volume+0x3fc>
 800c078:	230d      	movs	r3, #13
 800c07a:	e181      	b.n	800c380 <find_volume+0x700>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c07c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c07e:	333c      	adds	r3, #60	; 0x3c
 800c080:	3316      	adds	r3, #22
 800c082:	4618      	mov	r0, r3
 800c084:	f7fc fd4c 	bl	8008b20 <ld_word>
 800c088:	4603      	mov	r3, r0
 800c08a:	657b      	str	r3, [r7, #84]	; 0x54
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c08c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d106      	bne.n	800c0a0 <find_volume+0x420>
 800c092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c094:	333c      	adds	r3, #60	; 0x3c
 800c096:	3324      	adds	r3, #36	; 0x24
 800c098:	4618      	mov	r0, r3
 800c09a:	f7fc fd59 	bl	8008b50 <ld_dword>
 800c09e:	6578      	str	r0, [r7, #84]	; 0x54
		fs->fsize = fasize;
 800c0a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c0a4:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c0a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0a8:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800c0ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0ae:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c0b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0b2:	789b      	ldrb	r3, [r3, #2]
 800c0b4:	2b01      	cmp	r3, #1
 800c0b6:	d005      	beq.n	800c0c4 <find_volume+0x444>
 800c0b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0ba:	789b      	ldrb	r3, [r3, #2]
 800c0bc:	2b02      	cmp	r3, #2
 800c0be:	d001      	beq.n	800c0c4 <find_volume+0x444>
 800c0c0:	230d      	movs	r3, #13
 800c0c2:	e15d      	b.n	800c380 <find_volume+0x700>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c0c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0c6:	789b      	ldrb	r3, [r3, #2]
 800c0c8:	461a      	mov	r2, r3
 800c0ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c0cc:	fb02 f303 	mul.w	r3, r2, r3
 800c0d0:	657b      	str	r3, [r7, #84]	; 0x54

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c0d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0d4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800c0d8:	b29a      	uxth	r2, r3
 800c0da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0dc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c0de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0e0:	895b      	ldrh	r3, [r3, #10]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d008      	beq.n	800c0f8 <find_volume+0x478>
 800c0e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0e8:	895b      	ldrh	r3, [r3, #10]
 800c0ea:	461a      	mov	r2, r3
 800c0ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0ee:	895b      	ldrh	r3, [r3, #10]
 800c0f0:	3b01      	subs	r3, #1
 800c0f2:	4013      	ands	r3, r2
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d001      	beq.n	800c0fc <find_volume+0x47c>
 800c0f8:	230d      	movs	r3, #13
 800c0fa:	e141      	b.n	800c380 <find_volume+0x700>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c0fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0fe:	333c      	adds	r3, #60	; 0x3c
 800c100:	3311      	adds	r3, #17
 800c102:	4618      	mov	r0, r3
 800c104:	f7fc fd0c 	bl	8008b20 <ld_word>
 800c108:	4603      	mov	r3, r0
 800c10a:	461a      	mov	r2, r3
 800c10c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c10e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c112:	891b      	ldrh	r3, [r3, #8]
 800c114:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c116:	8992      	ldrh	r2, [r2, #12]
 800c118:	0952      	lsrs	r2, r2, #5
 800c11a:	b292      	uxth	r2, r2
 800c11c:	fbb3 f1f2 	udiv	r1, r3, r2
 800c120:	fb02 f201 	mul.w	r2, r2, r1
 800c124:	1a9b      	subs	r3, r3, r2
 800c126:	b29b      	uxth	r3, r3
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d001      	beq.n	800c130 <find_volume+0x4b0>
 800c12c:	230d      	movs	r3, #13
 800c12e:	e127      	b.n	800c380 <find_volume+0x700>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c132:	333c      	adds	r3, #60	; 0x3c
 800c134:	3313      	adds	r3, #19
 800c136:	4618      	mov	r0, r3
 800c138:	f7fc fcf2 	bl	8008b20 <ld_word>
 800c13c:	4603      	mov	r3, r0
 800c13e:	653b      	str	r3, [r7, #80]	; 0x50
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c140:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c142:	2b00      	cmp	r3, #0
 800c144:	d106      	bne.n	800c154 <find_volume+0x4d4>
 800c146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c148:	333c      	adds	r3, #60	; 0x3c
 800c14a:	3320      	adds	r3, #32
 800c14c:	4618      	mov	r0, r3
 800c14e:	f7fc fcff 	bl	8008b50 <ld_dword>
 800c152:	6538      	str	r0, [r7, #80]	; 0x50

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c154:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c156:	333c      	adds	r3, #60	; 0x3c
 800c158:	330e      	adds	r3, #14
 800c15a:	4618      	mov	r0, r3
 800c15c:	f7fc fce0 	bl	8008b20 <ld_word>
 800c160:	4603      	mov	r3, r0
 800c162:	86fb      	strh	r3, [r7, #54]	; 0x36
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c164:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c166:	2b00      	cmp	r3, #0
 800c168:	d101      	bne.n	800c16e <find_volume+0x4ee>
 800c16a:	230d      	movs	r3, #13
 800c16c:	e108      	b.n	800c380 <find_volume+0x700>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c16e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c170:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c172:	4413      	add	r3, r2
 800c174:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c176:	8911      	ldrh	r1, [r2, #8]
 800c178:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c17a:	8992      	ldrh	r2, [r2, #12]
 800c17c:	0952      	lsrs	r2, r2, #5
 800c17e:	b292      	uxth	r2, r2
 800c180:	fbb1 f2f2 	udiv	r2, r1, r2
 800c184:	b292      	uxth	r2, r2
 800c186:	4413      	add	r3, r2
 800c188:	633b      	str	r3, [r7, #48]	; 0x30
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c18a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c18c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c18e:	429a      	cmp	r2, r3
 800c190:	d201      	bcs.n	800c196 <find_volume+0x516>
 800c192:	230d      	movs	r3, #13
 800c194:	e0f4      	b.n	800c380 <find_volume+0x700>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c196:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c19a:	1ad3      	subs	r3, r2, r3
 800c19c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c19e:	8952      	ldrh	r2, [r2, #10]
 800c1a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c1a4:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d101      	bne.n	800c1b0 <find_volume+0x530>
 800c1ac:	230d      	movs	r3, #13
 800c1ae:	e0e7      	b.n	800c380 <find_volume+0x700>
		fmt = FS_FAT32;
 800c1b0:	2303      	movs	r3, #3
 800c1b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1b8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c1bc:	4293      	cmp	r3, r2
 800c1be:	d802      	bhi.n	800c1c6 <find_volume+0x546>
 800c1c0:	2302      	movs	r3, #2
 800c1c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c1c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1c8:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c1cc:	4293      	cmp	r3, r2
 800c1ce:	d802      	bhi.n	800c1d6 <find_volume+0x556>
 800c1d0:	2301      	movs	r3, #1
 800c1d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c1d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1d8:	1c9a      	adds	r2, r3, #2
 800c1da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1dc:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800c1de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c1e2:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c1e4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c1e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c1e8:	441a      	add	r2, r3
 800c1ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1ec:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800c1ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f2:	441a      	add	r2, r3
 800c1f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1f6:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800c1f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c1fc:	2b03      	cmp	r3, #3
 800c1fe:	d11e      	bne.n	800c23e <find_volume+0x5be>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c202:	333c      	adds	r3, #60	; 0x3c
 800c204:	332a      	adds	r3, #42	; 0x2a
 800c206:	4618      	mov	r0, r3
 800c208:	f7fc fc8a 	bl	8008b20 <ld_word>
 800c20c:	4603      	mov	r3, r0
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d001      	beq.n	800c216 <find_volume+0x596>
 800c212:	230d      	movs	r3, #13
 800c214:	e0b4      	b.n	800c380 <find_volume+0x700>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c216:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c218:	891b      	ldrh	r3, [r3, #8]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d001      	beq.n	800c222 <find_volume+0x5a2>
 800c21e:	230d      	movs	r3, #13
 800c220:	e0ae      	b.n	800c380 <find_volume+0x700>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c222:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c224:	333c      	adds	r3, #60	; 0x3c
 800c226:	332c      	adds	r3, #44	; 0x2c
 800c228:	4618      	mov	r0, r3
 800c22a:	f7fc fc91 	bl	8008b50 <ld_dword>
 800c22e:	4602      	mov	r2, r0
 800c230:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c232:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c236:	6a1b      	ldr	r3, [r3, #32]
 800c238:	009b      	lsls	r3, r3, #2
 800c23a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c23c:	e01f      	b.n	800c27e <find_volume+0x5fe>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c23e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c240:	891b      	ldrh	r3, [r3, #8]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d101      	bne.n	800c24a <find_volume+0x5ca>
 800c246:	230d      	movs	r3, #13
 800c248:	e09a      	b.n	800c380 <find_volume+0x700>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c24a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c24c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c24e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c250:	441a      	add	r2, r3
 800c252:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c254:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c256:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c25a:	2b02      	cmp	r3, #2
 800c25c:	d103      	bne.n	800c266 <find_volume+0x5e6>
 800c25e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c260:	6a1b      	ldr	r3, [r3, #32]
 800c262:	005b      	lsls	r3, r3, #1
 800c264:	e00a      	b.n	800c27c <find_volume+0x5fc>
 800c266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c268:	6a1a      	ldr	r2, [r3, #32]
 800c26a:	4613      	mov	r3, r2
 800c26c:	005b      	lsls	r3, r3, #1
 800c26e:	4413      	add	r3, r2
 800c270:	085a      	lsrs	r2, r3, #1
 800c272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c274:	6a1b      	ldr	r3, [r3, #32]
 800c276:	f003 0301 	and.w	r3, r3, #1
 800c27a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c27c:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c27e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c280:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c282:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c284:	899b      	ldrh	r3, [r3, #12]
 800c286:	4619      	mov	r1, r3
 800c288:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c28a:	440b      	add	r3, r1
 800c28c:	3b01      	subs	r3, #1
 800c28e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c290:	8989      	ldrh	r1, [r1, #12]
 800c292:	fbb3 f3f1 	udiv	r3, r3, r1
 800c296:	429a      	cmp	r2, r3
 800c298:	d201      	bcs.n	800c29e <find_volume+0x61e>
 800c29a:	230d      	movs	r3, #13
 800c29c:	e070      	b.n	800c380 <find_volume+0x700>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c29e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2a0:	f04f 32ff 	mov.w	r2, #4294967295
 800c2a4:	61da      	str	r2, [r3, #28]
 800c2a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2a8:	69da      	ldr	r2, [r3, #28]
 800c2aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2ac:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 800c2ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2b0:	2280      	movs	r2, #128	; 0x80
 800c2b2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c2b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c2b8:	2b03      	cmp	r3, #3
 800c2ba:	d149      	bne.n	800c350 <find_volume+0x6d0>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c2bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2be:	333c      	adds	r3, #60	; 0x3c
 800c2c0:	3330      	adds	r3, #48	; 0x30
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	f7fc fc2c 	bl	8008b20 <ld_word>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	2b01      	cmp	r3, #1
 800c2cc:	d140      	bne.n	800c350 <find_volume+0x6d0>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c2ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c2d0:	3301      	adds	r3, #1
 800c2d2:	4619      	mov	r1, r3
 800c2d4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c2d6:	f7fd f817 	bl	8009308 <move_window>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d137      	bne.n	800c350 <find_volume+0x6d0>
		{
			fs->fsi_flag = 0;
 800c2e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c2e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2e8:	333c      	adds	r3, #60	; 0x3c
 800c2ea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f7fc fc16 	bl	8008b20 <ld_word>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	461a      	mov	r2, r3
 800c2f8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	d127      	bne.n	800c350 <find_volume+0x6d0>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c302:	333c      	adds	r3, #60	; 0x3c
 800c304:	4618      	mov	r0, r3
 800c306:	f7fc fc23 	bl	8008b50 <ld_dword>
 800c30a:	4603      	mov	r3, r0
 800c30c:	4a1f      	ldr	r2, [pc, #124]	; (800c38c <find_volume+0x70c>)
 800c30e:	4293      	cmp	r3, r2
 800c310:	d11e      	bne.n	800c350 <find_volume+0x6d0>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c312:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c314:	333c      	adds	r3, #60	; 0x3c
 800c316:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c31a:	4618      	mov	r0, r3
 800c31c:	f7fc fc18 	bl	8008b50 <ld_dword>
 800c320:	4603      	mov	r3, r0
 800c322:	4a1b      	ldr	r2, [pc, #108]	; (800c390 <find_volume+0x710>)
 800c324:	4293      	cmp	r3, r2
 800c326:	d113      	bne.n	800c350 <find_volume+0x6d0>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c328:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c32a:	333c      	adds	r3, #60	; 0x3c
 800c32c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c330:	4618      	mov	r0, r3
 800c332:	f7fc fc0d 	bl	8008b50 <ld_dword>
 800c336:	4602      	mov	r2, r0
 800c338:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c33a:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c33c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c33e:	333c      	adds	r3, #60	; 0x3c
 800c340:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c344:	4618      	mov	r0, r3
 800c346:	f7fc fc03 	bl	8008b50 <ld_dword>
 800c34a:	4602      	mov	r2, r0
 800c34c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c34e:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c350:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c352:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800c356:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c358:	4b0e      	ldr	r3, [pc, #56]	; (800c394 <find_volume+0x714>)
 800c35a:	881b      	ldrh	r3, [r3, #0]
 800c35c:	3301      	adds	r3, #1
 800c35e:	b29a      	uxth	r2, r3
 800c360:	4b0c      	ldr	r3, [pc, #48]	; (800c394 <find_volume+0x714>)
 800c362:	801a      	strh	r2, [r3, #0]
 800c364:	4b0b      	ldr	r3, [pc, #44]	; (800c394 <find_volume+0x714>)
 800c366:	881a      	ldrh	r2, [r3, #0]
 800c368:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c36a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800c36c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c36e:	4a0a      	ldr	r2, [pc, #40]	; (800c398 <find_volume+0x718>)
 800c370:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 800c372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c374:	4a09      	ldr	r2, [pc, #36]	; (800c39c <find_volume+0x71c>)
 800c376:	615a      	str	r2, [r3, #20]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c378:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c37a:	f7fc ff5d 	bl	8009238 <clear_lock>
#endif
	return FR_OK;
 800c37e:	2300      	movs	r3, #0
}
 800c380:	4618      	mov	r0, r3
 800c382:	3760      	adds	r7, #96	; 0x60
 800c384:	46bd      	mov	sp, r7
 800c386:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c38a:	bf00      	nop
 800c38c:	41615252 	.word	0x41615252
 800c390:	61417272 	.word	0x61417272
 800c394:	200000b4 	.word	0x200000b4
 800c398:	20000338 	.word	0x20000338
 800c39c:	200000d8 	.word	0x200000d8

0800c3a0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b084      	sub	sp, #16
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
 800c3a8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c3aa:	2309      	movs	r3, #9
 800c3ac:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d01c      	beq.n	800c3ee <validate+0x4e>
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d018      	beq.n	800c3ee <validate+0x4e>
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	781b      	ldrb	r3, [r3, #0]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d013      	beq.n	800c3ee <validate+0x4e>
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	889a      	ldrh	r2, [r3, #4]
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	88db      	ldrh	r3, [r3, #6]
 800c3d0:	429a      	cmp	r2, r3
 800c3d2:	d10c      	bne.n	800c3ee <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	785b      	ldrb	r3, [r3, #1]
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f7fc fb02 	bl	80089e4 <disk_status>
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	f003 0301 	and.w	r3, r3, #1
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d101      	bne.n	800c3ee <validate+0x4e>
			res = FR_OK;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c3ee:	7bfb      	ldrb	r3, [r7, #15]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d102      	bne.n	800c3fa <validate+0x5a>
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	e000      	b.n	800c3fc <validate+0x5c>
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	683a      	ldr	r2, [r7, #0]
 800c3fe:	6013      	str	r3, [r2, #0]
	return res;
 800c400:	7bfb      	ldrb	r3, [r7, #15]
}
 800c402:	4618      	mov	r0, r3
 800c404:	3710      	adds	r7, #16
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}
	...

0800c40c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b088      	sub	sp, #32
 800c410:	af00      	add	r7, sp, #0
 800c412:	60f8      	str	r0, [r7, #12]
 800c414:	60b9      	str	r1, [r7, #8]
 800c416:	4613      	mov	r3, r2
 800c418:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c41a:	68bb      	ldr	r3, [r7, #8]
 800c41c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c41e:	f107 0310 	add.w	r3, r7, #16
 800c422:	4618      	mov	r0, r3
 800c424:	f7ff fb84 	bl	800bb30 <get_ldnumber>
 800c428:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c42a:	69fb      	ldr	r3, [r7, #28]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	da01      	bge.n	800c434 <f_mount+0x28>
 800c430:	230b      	movs	r3, #11
 800c432:	e02b      	b.n	800c48c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c434:	4a17      	ldr	r2, [pc, #92]	; (800c494 <f_mount+0x88>)
 800c436:	69fb      	ldr	r3, [r7, #28]
 800c438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c43c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c43e:	69bb      	ldr	r3, [r7, #24]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d005      	beq.n	800c450 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c444:	69b8      	ldr	r0, [r7, #24]
 800c446:	f7fc fef7 	bl	8009238 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c44a:	69bb      	ldr	r3, [r7, #24]
 800c44c:	2200      	movs	r2, #0
 800c44e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d002      	beq.n	800c45c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	2200      	movs	r2, #0
 800c45a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c45c:	68fa      	ldr	r2, [r7, #12]
 800c45e:	490d      	ldr	r1, [pc, #52]	; (800c494 <f_mount+0x88>)
 800c460:	69fb      	ldr	r3, [r7, #28]
 800c462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d002      	beq.n	800c472 <f_mount+0x66>
 800c46c:	79fb      	ldrb	r3, [r7, #7]
 800c46e:	2b01      	cmp	r3, #1
 800c470:	d001      	beq.n	800c476 <f_mount+0x6a>
 800c472:	2300      	movs	r3, #0
 800c474:	e00a      	b.n	800c48c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c476:	f107 010c 	add.w	r1, r7, #12
 800c47a:	f107 0308 	add.w	r3, r7, #8
 800c47e:	2200      	movs	r2, #0
 800c480:	4618      	mov	r0, r3
 800c482:	f7ff fbfd 	bl	800bc80 <find_volume>
 800c486:	4603      	mov	r3, r0
 800c488:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c48a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c48c:	4618      	mov	r0, r3
 800c48e:	3720      	adds	r7, #32
 800c490:	46bd      	mov	sp, r7
 800c492:	bd80      	pop	{r7, pc}
 800c494:	200000b0 	.word	0x200000b0

0800c498 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c498:	b5b0      	push	{r4, r5, r7, lr}
 800c49a:	b0a2      	sub	sp, #136	; 0x88
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	60f8      	str	r0, [r7, #12]
 800c4a0:	60b9      	str	r1, [r7, #8]
 800c4a2:	4613      	mov	r3, r2
 800c4a4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d101      	bne.n	800c4b0 <f_open+0x18>
 800c4ac:	2309      	movs	r3, #9
 800c4ae:	e2a0      	b.n	800c9f2 <f_open+0x55a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c4b0:	79fb      	ldrb	r3, [r7, #7]
 800c4b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c4b6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c4b8:	79fa      	ldrb	r2, [r7, #7]
 800c4ba:	f107 0114 	add.w	r1, r7, #20
 800c4be:	f107 0308 	add.w	r3, r7, #8
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f7ff fbdc 	bl	800bc80 <find_volume>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	if (res == FR_OK) {
 800c4ce:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	f040 8284 	bne.w	800c9e0 <f_open+0x548>
		dj.obj.fs = fs;
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c4dc:	68ba      	ldr	r2, [r7, #8]
 800c4de:	f107 0318 	add.w	r3, r7, #24
 800c4e2:	4611      	mov	r1, r2
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	f7ff fa75 	bl	800b9d4 <follow_path>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c4f0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d11a      	bne.n	800c52e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c4f8:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800c4fc:	b25b      	sxtb	r3, r3
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	da03      	bge.n	800c50a <f_open+0x72>
				res = FR_INVALID_NAME;
 800c502:	2306      	movs	r3, #6
 800c504:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800c508:	e011      	b.n	800c52e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c50a:	79fb      	ldrb	r3, [r7, #7]
 800c50c:	f023 0301 	bic.w	r3, r3, #1
 800c510:	2b00      	cmp	r3, #0
 800c512:	bf14      	ite	ne
 800c514:	2301      	movne	r3, #1
 800c516:	2300      	moveq	r3, #0
 800c518:	b2db      	uxtb	r3, r3
 800c51a:	461a      	mov	r2, r3
 800c51c:	f107 0318 	add.w	r3, r7, #24
 800c520:	4611      	mov	r1, r2
 800c522:	4618      	mov	r0, r3
 800c524:	f7fc fd40 	bl	8008fa8 <chk_lock>
 800c528:	4603      	mov	r3, r0
 800c52a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c52e:	79fb      	ldrb	r3, [r7, #7]
 800c530:	f003 031c 	and.w	r3, r3, #28
 800c534:	2b00      	cmp	r3, #0
 800c536:	f000 8109 	beq.w	800c74c <f_open+0x2b4>
			if (res != FR_OK) {					/* No file, create new */
 800c53a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d017      	beq.n	800c572 <f_open+0xda>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c542:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c546:	2b04      	cmp	r3, #4
 800c548:	d10e      	bne.n	800c568 <f_open+0xd0>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c54a:	f7fc fd89 	bl	8009060 <enq_lock>
 800c54e:	4603      	mov	r3, r0
 800c550:	2b00      	cmp	r3, #0
 800c552:	d006      	beq.n	800c562 <f_open+0xca>
 800c554:	f107 0318 	add.w	r3, r7, #24
 800c558:	4618      	mov	r0, r3
 800c55a:	f7fe fdf1 	bl	800b140 <dir_register>
 800c55e:	4603      	mov	r3, r0
 800c560:	e000      	b.n	800c564 <f_open+0xcc>
 800c562:	2312      	movs	r3, #18
 800c564:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c568:	79fb      	ldrb	r3, [r7, #7]
 800c56a:	f043 0308 	orr.w	r3, r3, #8
 800c56e:	71fb      	strb	r3, [r7, #7]
 800c570:	e010      	b.n	800c594 <f_open+0xfc>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c572:	7fbb      	ldrb	r3, [r7, #30]
 800c574:	f003 0311 	and.w	r3, r3, #17
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d003      	beq.n	800c584 <f_open+0xec>
					res = FR_DENIED;
 800c57c:	2307      	movs	r3, #7
 800c57e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800c582:	e007      	b.n	800c594 <f_open+0xfc>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c584:	79fb      	ldrb	r3, [r7, #7]
 800c586:	f003 0304 	and.w	r3, r3, #4
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d002      	beq.n	800c594 <f_open+0xfc>
 800c58e:	2308      	movs	r3, #8
 800c590:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c594:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c598:	2b00      	cmp	r3, #0
 800c59a:	f040 80f1 	bne.w	800c780 <f_open+0x2e8>
 800c59e:	79fb      	ldrb	r3, [r7, #7]
 800c5a0:	f003 0308 	and.w	r3, r3, #8
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	f000 80eb 	beq.w	800c780 <f_open+0x2e8>
				dw = GET_FATTIME();
 800c5aa:	f7f9 fa1f 	bl	80059ec <get_fattime>
 800c5ae:	6778      	str	r0, [r7, #116]	; 0x74
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800c5b0:	697b      	ldr	r3, [r7, #20]
 800c5b2:	781b      	ldrb	r3, [r3, #0]
 800c5b4:	2b04      	cmp	r3, #4
 800c5b6:	f040 8082 	bne.w	800c6be <f_open+0x226>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800c5ba:	697a      	ldr	r2, [r7, #20]
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800c5c0:	697b      	ldr	r3, [r7, #20]
 800c5c2:	695b      	ldr	r3, [r3, #20]
 800c5c4:	3334      	adds	r3, #52	; 0x34
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f7fc fac2 	bl	8008b50 <ld_dword>
 800c5cc:	4602      	mov	r2, r0
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800c5d2:	697b      	ldr	r3, [r7, #20]
 800c5d4:	695b      	ldr	r3, [r3, #20]
 800c5d6:	3338      	adds	r3, #56	; 0x38
 800c5d8:	4618      	mov	r0, r3
 800c5da:	f7fc fadc 	bl	8008b96 <ld_qword>
 800c5de:	4602      	mov	r2, r0
 800c5e0:	460b      	mov	r3, r1
 800c5e2:	68f9      	ldr	r1, [r7, #12]
 800c5e4:	e9c1 2304 	strd	r2, r3, [r1, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800c5e8:	697b      	ldr	r3, [r7, #20]
 800c5ea:	695b      	ldr	r3, [r3, #20]
 800c5ec:	3321      	adds	r3, #33	; 0x21
 800c5ee:	781b      	ldrb	r3, [r3, #0]
 800c5f0:	f003 0302 	and.w	r3, r3, #2
 800c5f4:	b2da      	uxtb	r2, r3
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800c600:	697b      	ldr	r3, [r7, #20]
 800c602:	695b      	ldr	r3, [r3, #20]
 800c604:	3308      	adds	r3, #8
 800c606:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800c608:	4618      	mov	r0, r3
 800c60a:	f7fc fb9a 	bl	8008d42 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800c60e:	697b      	ldr	r3, [r7, #20]
 800c610:	695b      	ldr	r3, [r3, #20]
 800c612:	3314      	adds	r3, #20
 800c614:	2200      	movs	r2, #0
 800c616:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800c618:	697b      	ldr	r3, [r7, #20]
 800c61a:	695b      	ldr	r3, [r3, #20]
 800c61c:	330c      	adds	r3, #12
 800c61e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800c620:	4618      	mov	r0, r3
 800c622:	f7fc fb8e 	bl	8008d42 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800c626:	697b      	ldr	r3, [r7, #20]
 800c628:	695b      	ldr	r3, [r3, #20]
 800c62a:	3315      	adds	r3, #21
 800c62c:	2200      	movs	r2, #0
 800c62e:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800c630:	697b      	ldr	r3, [r7, #20]
 800c632:	695b      	ldr	r3, [r3, #20]
 800c634:	3304      	adds	r3, #4
 800c636:	2220      	movs	r2, #32
 800c638:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800c63a:	697b      	ldr	r3, [r7, #20]
 800c63c:	695b      	ldr	r3, [r3, #20]
 800c63e:	3334      	adds	r3, #52	; 0x34
 800c640:	2100      	movs	r1, #0
 800c642:	4618      	mov	r0, r3
 800c644:	f7fc fb7d 	bl	8008d42 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800c648:	697b      	ldr	r3, [r7, #20]
 800c64a:	695b      	ldr	r3, [r3, #20]
 800c64c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c650:	f04f 0200 	mov.w	r2, #0
 800c654:	f04f 0300 	mov.w	r3, #0
 800c658:	4608      	mov	r0, r1
 800c65a:	f7fc fb9e 	bl	8008d9a <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800c65e:	697b      	ldr	r3, [r7, #20]
 800c660:	695b      	ldr	r3, [r3, #20]
 800c662:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800c666:	f04f 0200 	mov.w	r2, #0
 800c66a:	f04f 0300 	mov.w	r3, #0
 800c66e:	4608      	mov	r0, r1
 800c670:	f7fc fb93 	bl	8008d9a <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800c674:	697b      	ldr	r3, [r7, #20]
 800c676:	695b      	ldr	r3, [r3, #20]
 800c678:	3321      	adds	r3, #33	; 0x21
 800c67a:	2201      	movs	r2, #1
 800c67c:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800c67e:	f107 0318 	add.w	r3, r7, #24
 800c682:	4618      	mov	r0, r3
 800c684:	f7fe faa9 	bl	800abda <store_xdir>
 800c688:	4603      	mov	r3, r0
 800c68a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800c68e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c692:	2b00      	cmp	r3, #0
 800c694:	d174      	bne.n	800c780 <f_open+0x2e8>
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	689b      	ldr	r3, [r3, #8]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d070      	beq.n	800c780 <f_open+0x2e8>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800c69e:	68f8      	ldr	r0, [r7, #12]
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	689b      	ldr	r3, [r3, #8]
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	4619      	mov	r1, r3
 800c6a8:	f7fd faba 	bl	8009c20 <remove_chain>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	689a      	ldr	r2, [r3, #8]
 800c6b6:	697b      	ldr	r3, [r7, #20]
 800c6b8:	3a01      	subs	r2, #1
 800c6ba:	619a      	str	r2, [r3, #24]
 800c6bc:	e060      	b.n	800c780 <f_open+0x2e8>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c6be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c6c0:	330e      	adds	r3, #14
 800c6c2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	f7fc fb3c 	bl	8008d42 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c6ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c6cc:	3316      	adds	r3, #22
 800c6ce:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	f7fc fb36 	bl	8008d42 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c6d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c6d8:	330b      	adds	r3, #11
 800c6da:	2220      	movs	r2, #32
 800c6dc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c6de:	697b      	ldr	r3, [r7, #20]
 800c6e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c6e2:	4611      	mov	r1, r2
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	f7fd fe6a 	bl	800a3be <ld_clust>
 800c6ea:	6738      	str	r0, [r7, #112]	; 0x70
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c6ec:	697b      	ldr	r3, [r7, #20]
 800c6ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f7fd fe82 	bl	800a3fc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c6f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c6fa:	331c      	adds	r3, #28
 800c6fc:	2100      	movs	r1, #0
 800c6fe:	4618      	mov	r0, r3
 800c700:	f7fc fb1f 	bl	8008d42 <st_dword>
					fs->wflag = 1;
 800c704:	697b      	ldr	r3, [r7, #20]
 800c706:	2201      	movs	r2, #1
 800c708:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c70a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d037      	beq.n	800c780 <f_open+0x2e8>
						dw = fs->winsect;
 800c710:	697b      	ldr	r3, [r7, #20]
 800c712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c714:	677b      	str	r3, [r7, #116]	; 0x74
						res = remove_chain(&dj.obj, cl, 0);
 800c716:	f107 0318 	add.w	r3, r7, #24
 800c71a:	2200      	movs	r2, #0
 800c71c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800c71e:	4618      	mov	r0, r3
 800c720:	f7fd fa7e 	bl	8009c20 <remove_chain>
 800c724:	4603      	mov	r3, r0
 800c726:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
						if (res == FR_OK) {
 800c72a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d126      	bne.n	800c780 <f_open+0x2e8>
							res = move_window(fs, dw);
 800c732:	697b      	ldr	r3, [r7, #20]
 800c734:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800c736:	4618      	mov	r0, r3
 800c738:	f7fc fde6 	bl	8009308 <move_window>
 800c73c:	4603      	mov	r3, r0
 800c73e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c742:	697b      	ldr	r3, [r7, #20]
 800c744:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c746:	3a01      	subs	r2, #1
 800c748:	619a      	str	r2, [r3, #24]
 800c74a:	e019      	b.n	800c780 <f_open+0x2e8>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c74c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c750:	2b00      	cmp	r3, #0
 800c752:	d115      	bne.n	800c780 <f_open+0x2e8>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c754:	7fbb      	ldrb	r3, [r7, #30]
 800c756:	f003 0310 	and.w	r3, r3, #16
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d003      	beq.n	800c766 <f_open+0x2ce>
					res = FR_NO_FILE;
 800c75e:	2304      	movs	r3, #4
 800c760:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800c764:	e00c      	b.n	800c780 <f_open+0x2e8>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c766:	79fb      	ldrb	r3, [r7, #7]
 800c768:	f003 0302 	and.w	r3, r3, #2
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d007      	beq.n	800c780 <f_open+0x2e8>
 800c770:	7fbb      	ldrb	r3, [r7, #30]
 800c772:	f003 0301 	and.w	r3, r3, #1
 800c776:	2b00      	cmp	r3, #0
 800c778:	d002      	beq.n	800c780 <f_open+0x2e8>
						res = FR_DENIED;
 800c77a:	2307      	movs	r3, #7
 800c77c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					}
				}
			}
		}
		if (res == FR_OK) {
 800c780:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c784:	2b00      	cmp	r3, #0
 800c786:	d128      	bne.n	800c7da <f_open+0x342>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c788:	79fb      	ldrb	r3, [r7, #7]
 800c78a:	f003 0308 	and.w	r3, r3, #8
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d003      	beq.n	800c79a <f_open+0x302>
				mode |= FA_MODIFIED;
 800c792:	79fb      	ldrb	r3, [r7, #7]
 800c794:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c798:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c79a:	697b      	ldr	r3, [r7, #20]
 800c79c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 800c7a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c7a8:	79fb      	ldrb	r3, [r7, #7]
 800c7aa:	f023 0301 	bic.w	r3, r3, #1
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	bf14      	ite	ne
 800c7b2:	2301      	movne	r3, #1
 800c7b4:	2300      	moveq	r3, #0
 800c7b6:	b2db      	uxtb	r3, r3
 800c7b8:	461a      	mov	r2, r3
 800c7ba:	f107 0318 	add.w	r3, r7, #24
 800c7be:	4611      	mov	r1, r2
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	f7fc fc6f 	bl	80090a4 <inc_lock>
 800c7c6:	4602      	mov	r2, r0
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d102      	bne.n	800c7da <f_open+0x342>
 800c7d4:	2302      	movs	r3, #2
 800c7d6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c7da:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	f040 80fe 	bne.w	800c9e0 <f_open+0x548>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800c7e4:	697b      	ldr	r3, [r7, #20]
 800c7e6:	781b      	ldrb	r3, [r3, #0]
 800c7e8:	2b04      	cmp	r3, #4
 800c7ea:	d12c      	bne.n	800c846 <f_open+0x3ae>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800c7ec:	6a3a      	ldr	r2, [r7, #32]
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800c7f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c7f6:	4613      	mov	r3, r2
 800c7f8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c7fc:	7ffa      	ldrb	r2, [r7, #31]
 800c7fe:	431a      	orrs	r2, r3
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800c804:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800c80a:	697b      	ldr	r3, [r7, #20]
 800c80c:	695b      	ldr	r3, [r3, #20]
 800c80e:	3334      	adds	r3, #52	; 0x34
 800c810:	4618      	mov	r0, r3
 800c812:	f7fc f99d 	bl	8008b50 <ld_dword>
 800c816:	4602      	mov	r2, r0
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800c81c:	697b      	ldr	r3, [r7, #20]
 800c81e:	695b      	ldr	r3, [r3, #20]
 800c820:	3338      	adds	r3, #56	; 0x38
 800c822:	4618      	mov	r0, r3
 800c824:	f7fc f9b7 	bl	8008b96 <ld_qword>
 800c828:	4602      	mov	r2, r0
 800c82a:	460b      	mov	r3, r1
 800c82c:	68f9      	ldr	r1, [r7, #12]
 800c82e:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800c832:	697b      	ldr	r3, [r7, #20]
 800c834:	695b      	ldr	r3, [r3, #20]
 800c836:	3321      	adds	r3, #33	; 0x21
 800c838:	781b      	ldrb	r3, [r3, #0]
 800c83a:	f003 0302 	and.w	r3, r3, #2
 800c83e:	b2da      	uxtb	r2, r3
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	71da      	strb	r2, [r3, #7]
 800c844:	e014      	b.n	800c870 <f_open+0x3d8>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c846:	697b      	ldr	r3, [r7, #20]
 800c848:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c84a:	4611      	mov	r1, r2
 800c84c:	4618      	mov	r0, r3
 800c84e:	f7fd fdb6 	bl	800a3be <ld_clust>
 800c852:	4602      	mov	r2, r0
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c85a:	331c      	adds	r3, #28
 800c85c:	4618      	mov	r0, r3
 800c85e:	f7fc f977 	bl	8008b50 <ld_dword>
 800c862:	4603      	mov	r3, r0
 800c864:	461a      	mov	r2, r3
 800c866:	f04f 0300 	mov.w	r3, #0
 800c86a:	68f9      	ldr	r1, [r7, #12]
 800c86c:	e9c1 2304 	strd	r2, r3, [r1, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	2200      	movs	r2, #0
 800c874:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c876:	697a      	ldr	r2, [r7, #20]
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c87c:	697b      	ldr	r3, [r7, #20]
 800c87e:	88da      	ldrh	r2, [r3, #6]
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	79fa      	ldrb	r2, [r7, #7]
 800c888:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	2200      	movs	r2, #0
 800c890:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	2200      	movs	r2, #0
 800c898:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c89a:	68f9      	ldr	r1, [r7, #12]
 800c89c:	f04f 0200 	mov.w	r2, #0
 800c8a0:	f04f 0300 	mov.w	r3, #0
 800c8a4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	3354      	adds	r3, #84	; 0x54
 800c8ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c8b0:	2100      	movs	r1, #0
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f7fc fb1a 	bl	8008eec <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c8b8:	79fb      	ldrb	r3, [r7, #7]
 800c8ba:	f003 0320 	and.w	r3, r3, #32
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	f000 808e 	beq.w	800c9e0 <f_open+0x548>
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c8ca:	4313      	orrs	r3, r2
 800c8cc:	f000 8088 	beq.w	800c9e0 <f_open+0x548>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c8d6:	68f9      	ldr	r1, [r7, #12]
 800c8d8:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c8dc:	697b      	ldr	r3, [r7, #20]
 800c8de:	895b      	ldrh	r3, [r3, #10]
 800c8e0:	461a      	mov	r2, r3
 800c8e2:	697b      	ldr	r3, [r7, #20]
 800c8e4:	899b      	ldrh	r3, [r3, #12]
 800c8e6:	fb03 f302 	mul.w	r3, r3, r2
 800c8ea:	66fb      	str	r3, [r7, #108]	; 0x6c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	689b      	ldr	r3, [r3, #8]
 800c8f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c8fa:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 800c8fe:	e021      	b.n	800c944 <f_open+0x4ac>
					clst = get_fat(&fp->obj, clst);
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800c906:	4618      	mov	r0, r3
 800c908:	f7fc fdbc 	bl	8009484 <get_fat>
 800c90c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
					if (clst <= 1) res = FR_INT_ERR;
 800c910:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c914:	2b01      	cmp	r3, #1
 800c916:	d802      	bhi.n	800c91e <f_open+0x486>
 800c918:	2302      	movs	r3, #2
 800c91a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c91e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c922:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c926:	d102      	bne.n	800c92e <f_open+0x496>
 800c928:	2301      	movs	r3, #1
 800c92a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c92e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c930:	461a      	mov	r2, r3
 800c932:	f04f 0300 	mov.w	r3, #0
 800c936:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800c93a:	1a84      	subs	r4, r0, r2
 800c93c:	eb61 0503 	sbc.w	r5, r1, r3
 800c940:	e9c7 451e 	strd	r4, r5, [r7, #120]	; 0x78
 800c944:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d109      	bne.n	800c960 <f_open+0x4c8>
 800c94c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c94e:	4618      	mov	r0, r3
 800c950:	f04f 0100 	mov.w	r1, #0
 800c954:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800c958:	4299      	cmp	r1, r3
 800c95a:	bf08      	it	eq
 800c95c:	4290      	cmpeq	r0, r2
 800c95e:	d3cf      	bcc.n	800c900 <f_open+0x468>
				}
				fp->clust = clst;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c966:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c968:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d137      	bne.n	800c9e0 <f_open+0x548>
 800c970:	697b      	ldr	r3, [r7, #20]
 800c972:	899b      	ldrh	r3, [r3, #12]
 800c974:	b29a      	uxth	r2, r3
 800c976:	f04f 0300 	mov.w	r3, #0
 800c97a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800c97e:	f7f3 ff95 	bl	80008ac <__aeabi_uldivmod>
 800c982:	4313      	orrs	r3, r2
 800c984:	d02c      	beq.n	800c9e0 <f_open+0x548>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c986:	697b      	ldr	r3, [r7, #20]
 800c988:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800c98c:	4618      	mov	r0, r3
 800c98e:	f7fc fd59 	bl	8009444 <clust2sect>
 800c992:	66b8      	str	r0, [r7, #104]	; 0x68
 800c994:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c996:	2b00      	cmp	r3, #0
 800c998:	d103      	bne.n	800c9a2 <f_open+0x50a>
						res = FR_INT_ERR;
 800c99a:	2302      	movs	r3, #2
 800c99c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800c9a0:	e01e      	b.n	800c9e0 <f_open+0x548>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c9a2:	697b      	ldr	r3, [r7, #20]
 800c9a4:	899b      	ldrh	r3, [r3, #12]
 800c9a6:	b29a      	uxth	r2, r3
 800c9a8:	f04f 0300 	mov.w	r3, #0
 800c9ac:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800c9b0:	f7f3 ff7c 	bl	80008ac <__aeabi_uldivmod>
 800c9b4:	4602      	mov	r2, r0
 800c9b6:	460b      	mov	r3, r1
 800c9b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c9ba:	441a      	add	r2, r3
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c9c0:	697b      	ldr	r3, [r7, #20]
 800c9c2:	7858      	ldrb	r0, [r3, #1]
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c9ce:	2301      	movs	r3, #1
 800c9d0:	f7fc f848 	bl	8008a64 <disk_read>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d002      	beq.n	800c9e0 <f_open+0x548>
 800c9da:	2301      	movs	r3, #1
 800c9dc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c9e0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d002      	beq.n	800c9ee <f_open+0x556>
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c9ee:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	3788      	adds	r7, #136	; 0x88
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	bdb0      	pop	{r4, r5, r7, pc}

0800c9fa <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c9fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c9fe:	b091      	sub	sp, #68	; 0x44
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	60f8      	str	r0, [r7, #12]
 800ca04:	60b9      	str	r1, [r7, #8]
 800ca06:	607a      	str	r2, [r7, #4]
 800ca08:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800ca0a:	68bb      	ldr	r3, [r7, #8]
 800ca0c:	62fb      	str	r3, [r7, #44]	; 0x2c


	*br = 0;	/* Clear read byte counter */
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	2200      	movs	r2, #0
 800ca12:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	f107 0214 	add.w	r2, r7, #20
 800ca1a:	4611      	mov	r1, r2
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	f7ff fcbf 	bl	800c3a0 <validate>
 800ca22:	4603      	mov	r3, r0
 800ca24:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ca28:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d108      	bne.n	800ca42 <f_read+0x48>
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ca36:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800ca3a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d002      	beq.n	800ca48 <f_read+0x4e>
 800ca42:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ca46:	e15f      	b.n	800cd08 <f_read+0x30e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ca4e:	f003 0301 	and.w	r3, r3, #1
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d101      	bne.n	800ca5a <f_read+0x60>
 800ca56:	2307      	movs	r3, #7
 800ca58:	e156      	b.n	800cd08 <f_read+0x30e>
	remain = fp->obj.objsize - fp->fptr;
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800ca66:	ebb0 0802 	subs.w	r8, r0, r2
 800ca6a:	eb61 0903 	sbc.w	r9, r1, r3
 800ca6e:	e9c7 8908 	strd	r8, r9, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	461a      	mov	r2, r3
 800ca76:	f04f 0300 	mov.w	r3, #0
 800ca7a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ca7e:	4299      	cmp	r1, r3
 800ca80:	bf08      	it	eq
 800ca82:	4290      	cmpeq	r0, r2
 800ca84:	f080 813b 	bcs.w	800ccfe <f_read+0x304>
 800ca88:	6a3b      	ldr	r3, [r7, #32]
 800ca8a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800ca8c:	e137      	b.n	800ccfe <f_read+0x304>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800ca94:	697b      	ldr	r3, [r7, #20]
 800ca96:	899b      	ldrh	r3, [r3, #12]
 800ca98:	b29a      	uxth	r2, r3
 800ca9a:	f04f 0300 	mov.w	r3, #0
 800ca9e:	f7f3 ff05 	bl	80008ac <__aeabi_uldivmod>
 800caa2:	4313      	orrs	r3, r2
 800caa4:	f040 80e6 	bne.w	800cc74 <f_read+0x27a>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800caae:	697b      	ldr	r3, [r7, #20]
 800cab0:	899b      	ldrh	r3, [r3, #12]
 800cab2:	b29a      	uxth	r2, r3
 800cab4:	f04f 0300 	mov.w	r3, #0
 800cab8:	f7f3 fef8 	bl	80008ac <__aeabi_uldivmod>
 800cabc:	4602      	mov	r2, r0
 800cabe:	460b      	mov	r3, r1
 800cac0:	697b      	ldr	r3, [r7, #20]
 800cac2:	895b      	ldrh	r3, [r3, #10]
 800cac4:	3b01      	subs	r3, #1
 800cac6:	4013      	ands	r3, r2
 800cac8:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800caca:	69fb      	ldr	r3, [r7, #28]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d132      	bne.n	800cb36 <f_read+0x13c>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800cad6:	4313      	orrs	r3, r2
 800cad8:	d103      	bne.n	800cae2 <f_read+0xe8>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	689b      	ldr	r3, [r3, #8]
 800cade:	63bb      	str	r3, [r7, #56]	; 0x38
 800cae0:	e013      	b.n	800cb0a <f_read+0x110>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d007      	beq.n	800cafa <f_read+0x100>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800caf0:	68f8      	ldr	r0, [r7, #12]
 800caf2:	f7fd fa4a 	bl	8009f8a <clmt_clust>
 800caf6:	63b8      	str	r0, [r7, #56]	; 0x38
 800caf8:	e007      	b.n	800cb0a <f_read+0x110>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800cafa:	68fa      	ldr	r2, [r7, #12]
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb00:	4619      	mov	r1, r3
 800cb02:	4610      	mov	r0, r2
 800cb04:	f7fc fcbe 	bl	8009484 <get_fat>
 800cb08:	63b8      	str	r0, [r7, #56]	; 0x38
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800cb0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb0c:	2b01      	cmp	r3, #1
 800cb0e:	d805      	bhi.n	800cb1c <f_read+0x122>
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	2202      	movs	r2, #2
 800cb14:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800cb18:	2302      	movs	r3, #2
 800cb1a:	e0f5      	b.n	800cd08 <f_read+0x30e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cb1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb22:	d105      	bne.n	800cb30 <f_read+0x136>
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	2201      	movs	r2, #1
 800cb28:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800cb2c:	2301      	movs	r3, #1
 800cb2e:	e0eb      	b.n	800cd08 <f_read+0x30e>
				fp->clust = clst;				/* Update current cluster */
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb34:	641a      	str	r2, [r3, #64]	; 0x40
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800cb36:	697a      	ldr	r2, [r7, #20]
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb3c:	4619      	mov	r1, r3
 800cb3e:	4610      	mov	r0, r2
 800cb40:	f7fc fc80 	bl	8009444 <clust2sect>
 800cb44:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800cb46:	69bb      	ldr	r3, [r7, #24]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d105      	bne.n	800cb58 <f_read+0x15e>
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	2202      	movs	r2, #2
 800cb50:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800cb54:	2302      	movs	r3, #2
 800cb56:	e0d7      	b.n	800cd08 <f_read+0x30e>
			sect += csect;
 800cb58:	69ba      	ldr	r2, [r7, #24]
 800cb5a:	69fb      	ldr	r3, [r7, #28]
 800cb5c:	4413      	add	r3, r2
 800cb5e:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800cb60:	697b      	ldr	r3, [r7, #20]
 800cb62:	899b      	ldrh	r3, [r3, #12]
 800cb64:	461a      	mov	r2, r3
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	fbb3 f3f2 	udiv	r3, r3, r2
 800cb6c:	633b      	str	r3, [r7, #48]	; 0x30
			if (cc) {							/* Read maximum contiguous sectors directly */
 800cb6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d043      	beq.n	800cbfc <f_read+0x202>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800cb74:	69fa      	ldr	r2, [r7, #28]
 800cb76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb78:	4413      	add	r3, r2
 800cb7a:	697a      	ldr	r2, [r7, #20]
 800cb7c:	8952      	ldrh	r2, [r2, #10]
 800cb7e:	4293      	cmp	r3, r2
 800cb80:	d905      	bls.n	800cb8e <f_read+0x194>
					cc = fs->csize - csect;
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	895b      	ldrh	r3, [r3, #10]
 800cb86:	461a      	mov	r2, r3
 800cb88:	69fb      	ldr	r3, [r7, #28]
 800cb8a:	1ad3      	subs	r3, r2, r3
 800cb8c:	633b      	str	r3, [r7, #48]	; 0x30
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cb8e:	697b      	ldr	r3, [r7, #20]
 800cb90:	7858      	ldrb	r0, [r3, #1]
 800cb92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb94:	69ba      	ldr	r2, [r7, #24]
 800cb96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cb98:	f7fb ff64 	bl	8008a64 <disk_read>
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d005      	beq.n	800cbae <f_read+0x1b4>
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	2201      	movs	r2, #1
 800cba6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800cbaa:	2301      	movs	r3, #1
 800cbac:	e0ac      	b.n	800cd08 <f_read+0x30e>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cbb4:	b25b      	sxtb	r3, r3
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	da18      	bge.n	800cbec <f_read+0x1f2>
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cbbe:	69bb      	ldr	r3, [r7, #24]
 800cbc0:	1ad3      	subs	r3, r2, r3
 800cbc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbc4:	429a      	cmp	r2, r3
 800cbc6:	d911      	bls.n	800cbec <f_read+0x1f2>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cbcc:	69bb      	ldr	r3, [r7, #24]
 800cbce:	1ad3      	subs	r3, r2, r3
 800cbd0:	697a      	ldr	r2, [r7, #20]
 800cbd2:	8992      	ldrh	r2, [r2, #12]
 800cbd4:	fb02 f303 	mul.w	r3, r2, r3
 800cbd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cbda:	18d0      	adds	r0, r2, r3
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800cbe2:	697b      	ldr	r3, [r7, #20]
 800cbe4:	899b      	ldrh	r3, [r3, #12]
 800cbe6:	461a      	mov	r2, r3
 800cbe8:	f7fc f95f 	bl	8008eaa <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800cbec:	697b      	ldr	r3, [r7, #20]
 800cbee:	899b      	ldrh	r3, [r3, #12]
 800cbf0:	461a      	mov	r2, r3
 800cbf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf4:	fb02 f303 	mul.w	r3, r2, r3
 800cbf8:	637b      	str	r3, [r7, #52]	; 0x34
				continue;
 800cbfa:	e065      	b.n	800ccc8 <f_read+0x2ce>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc00:	69ba      	ldr	r2, [r7, #24]
 800cc02:	429a      	cmp	r2, r3
 800cc04:	d033      	beq.n	800cc6e <f_read+0x274>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cc0c:	b25b      	sxtb	r3, r3
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	da1b      	bge.n	800cc4a <f_read+0x250>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cc12:	697b      	ldr	r3, [r7, #20]
 800cc14:	7858      	ldrb	r0, [r3, #1]
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cc20:	2301      	movs	r3, #1
 800cc22:	f7fb ff3f 	bl	8008aa4 <disk_write>
 800cc26:	4603      	mov	r3, r0
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d005      	beq.n	800cc38 <f_read+0x23e>
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	2201      	movs	r2, #1
 800cc30:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800cc34:	2301      	movs	r3, #1
 800cc36:	e067      	b.n	800cd08 <f_read+0x30e>
					fp->flag &= (BYTE)~FA_DIRTY;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cc3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc42:	b2da      	uxtb	r2, r3
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	7858      	ldrb	r0, [r3, #1]
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800cc54:	2301      	movs	r3, #1
 800cc56:	69ba      	ldr	r2, [r7, #24]
 800cc58:	f7fb ff04 	bl	8008a64 <disk_read>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d005      	beq.n	800cc6e <f_read+0x274>
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	2201      	movs	r2, #1
 800cc66:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800cc6a:	2301      	movs	r3, #1
 800cc6c:	e04c      	b.n	800cd08 <f_read+0x30e>
			}
#endif
			fp->sect = sect;
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	69ba      	ldr	r2, [r7, #24]
 800cc72:	645a      	str	r2, [r3, #68]	; 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cc74:	697b      	ldr	r3, [r7, #20]
 800cc76:	899b      	ldrh	r3, [r3, #12]
 800cc78:	4618      	mov	r0, r3
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800cc80:	4613      	mov	r3, r2
 800cc82:	697a      	ldr	r2, [r7, #20]
 800cc84:	8992      	ldrh	r2, [r2, #12]
 800cc86:	fbb3 f1f2 	udiv	r1, r3, r2
 800cc8a:	fb02 f201 	mul.w	r2, r2, r1
 800cc8e:	1a9b      	subs	r3, r3, r2
 800cc90:	1ac3      	subs	r3, r0, r3
 800cc92:	637b      	str	r3, [r7, #52]	; 0x34
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800cc94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	429a      	cmp	r2, r3
 800cc9a:	d901      	bls.n	800cca0 <f_read+0x2a6>
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	637b      	str	r3, [r7, #52]	; 0x34
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	f103 0654 	add.w	r6, r3, #84	; 0x54
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800ccac:	697b      	ldr	r3, [r7, #20]
 800ccae:	899b      	ldrh	r3, [r3, #12]
 800ccb0:	b29a      	uxth	r2, r3
 800ccb2:	f04f 0300 	mov.w	r3, #0
 800ccb6:	f7f3 fdf9 	bl	80008ac <__aeabi_uldivmod>
 800ccba:	4613      	mov	r3, r2
 800ccbc:	4433      	add	r3, r6
 800ccbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ccc0:	4619      	mov	r1, r3
 800ccc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ccc4:	f7fc f8f1 	bl	8008eaa <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ccc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ccca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cccc:	4413      	add	r3, r2
 800ccce:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800ccd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccd8:	461a      	mov	r2, r3
 800ccda:	f04f 0300 	mov.w	r3, #0
 800ccde:	1884      	adds	r4, r0, r2
 800cce0:	eb41 0503 	adc.w	r5, r1, r3
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	e9c3 450e 	strd	r4, r5, [r3, #56]	; 0x38
 800ccea:	683b      	ldr	r3, [r7, #0]
 800ccec:	681a      	ldr	r2, [r3, #0]
 800ccee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccf0:	441a      	add	r2, r3
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	601a      	str	r2, [r3, #0]
 800ccf6:	687a      	ldr	r2, [r7, #4]
 800ccf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccfa:	1ad3      	subs	r3, r2, r3
 800ccfc:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	f47f aec4 	bne.w	800ca8e <f_read+0x94>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800cd06:	2300      	movs	r3, #0
}
 800cd08:	4618      	mov	r0, r3
 800cd0a:	3744      	adds	r7, #68	; 0x44
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800cd12 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800cd12:	b580      	push	{r7, lr}
 800cd14:	b09a      	sub	sp, #104	; 0x68
 800cd16:	af00      	add	r7, sp, #0
 800cd18:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800cd20:	4611      	mov	r1, r2
 800cd22:	4618      	mov	r0, r3
 800cd24:	f7ff fb3c 	bl	800c3a0 <validate>
 800cd28:	4603      	mov	r3, r0
 800cd2a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800cd2e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	f040 8105 	bne.w	800cf42 <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cd3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	f000 80fd 	beq.w	800cf42 <f_sync+0x230>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cd4e:	b25b      	sxtb	r3, r3
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	da17      	bge.n	800cd84 <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800cd54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cd56:	7858      	ldrb	r0, [r3, #1]
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd62:	2301      	movs	r3, #1
 800cd64:	f7fb fe9e 	bl	8008aa4 <disk_write>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d001      	beq.n	800cd72 <f_sync+0x60>
 800cd6e:	2301      	movs	r3, #1
 800cd70:	e0e9      	b.n	800cf46 <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cd78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd7c:	b2da      	uxtb	r2, r3
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800cd84:	f7f8 fe32 	bl	80059ec <get_fattime>
 800cd88:	6638      	str	r0, [r7, #96]	; 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800cd8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cd8c:	781b      	ldrb	r3, [r3, #0]
 800cd8e:	2b04      	cmp	r3, #4
 800cd90:	f040 808c 	bne.w	800ceac <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	4618      	mov	r0, r3
 800cd98:	f7fc fee2 	bl	8009b60 <fill_first_frag>
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 800cda2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d10a      	bne.n	800cdc0 <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800cdaa:	6878      	ldr	r0, [r7, #4]
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdb0:	f04f 32ff 	mov.w	r2, #4294967295
 800cdb4:	4619      	mov	r1, r3
 800cdb6:	f7fc ff02 	bl	8009bbe <fill_last_frag>
 800cdba:	4603      	mov	r3, r0
 800cdbc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
				if (res == FR_OK) {
 800cdc0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	f040 80bc 	bne.w	800cf42 <f_sync+0x230>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800cdca:	687a      	ldr	r2, [r7, #4]
 800cdcc:	f107 0308 	add.w	r3, r7, #8
 800cdd0:	4611      	mov	r1, r2
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	f7fd fec6 	bl	800ab64 <load_obj_dir>
 800cdd8:	4603      	mov	r3, r0
 800cdda:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (res == FR_OK) {
 800cdde:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	f040 80ad 	bne.w	800cf42 <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800cde8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cdea:	695b      	ldr	r3, [r3, #20]
 800cdec:	3304      	adds	r3, #4
 800cdee:	781a      	ldrb	r2, [r3, #0]
 800cdf0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cdf2:	695b      	ldr	r3, [r3, #20]
 800cdf4:	3304      	adds	r3, #4
 800cdf6:	f042 0220 	orr.w	r2, r2, #32
 800cdfa:	b2d2      	uxtb	r2, r2
 800cdfc:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	79da      	ldrb	r2, [r3, #7]
 800ce02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce04:	695b      	ldr	r3, [r3, #20]
 800ce06:	3321      	adds	r3, #33	; 0x21
 800ce08:	f042 0201 	orr.w	r2, r2, #1
 800ce0c:	b2d2      	uxtb	r2, r2
 800ce0e:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800ce10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce12:	695b      	ldr	r3, [r3, #20]
 800ce14:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	689b      	ldr	r3, [r3, #8]
 800ce1c:	4619      	mov	r1, r3
 800ce1e:	4610      	mov	r0, r2
 800ce20:	f7fb ff8f 	bl	8008d42 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800ce24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce26:	695b      	ldr	r3, [r3, #20]
 800ce28:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ce32:	4608      	mov	r0, r1
 800ce34:	f7fb ffb1 	bl	8008d9a <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800ce38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce3a:	695b      	ldr	r3, [r3, #20]
 800ce3c:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ce46:	4608      	mov	r0, r1
 800ce48:	f7fb ffa7 	bl	8008d9a <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800ce4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce4e:	695b      	ldr	r3, [r3, #20]
 800ce50:	330c      	adds	r3, #12
 800ce52:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ce54:	4618      	mov	r0, r3
 800ce56:	f7fb ff74 	bl	8008d42 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800ce5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce5c:	695b      	ldr	r3, [r3, #20]
 800ce5e:	3315      	adds	r3, #21
 800ce60:	2200      	movs	r2, #0
 800ce62:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800ce64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce66:	695b      	ldr	r3, [r3, #20]
 800ce68:	3310      	adds	r3, #16
 800ce6a:	2100      	movs	r1, #0
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f7fb ff68 	bl	8008d42 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800ce72:	f107 0308 	add.w	r3, r7, #8
 800ce76:	4618      	mov	r0, r3
 800ce78:	f7fd feaf 	bl	800abda <store_xdir>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800ce82:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d15b      	bne.n	800cf42 <f_sync+0x230>
							res = sync_fs(fs);
 800ce8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f7fc fa69 	bl	8009364 <sync_fs>
 800ce92:	4603      	mov	r3, r0
 800ce94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ce9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cea2:	b2da      	uxtb	r2, r3
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800ceaa:	e04a      	b.n	800cf42 <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ceac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ceb2:	4619      	mov	r1, r3
 800ceb4:	4610      	mov	r0, r2
 800ceb6:	f7fc fa27 	bl	8009308 <move_window>
 800ceba:	4603      	mov	r3, r0
 800cebc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 800cec0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d13c      	bne.n	800cf42 <f_sync+0x230>
					dir = fp->dir_ptr;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cecc:	65fb      	str	r3, [r7, #92]	; 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800cece:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ced0:	330b      	adds	r3, #11
 800ced2:	781a      	ldrb	r2, [r3, #0]
 800ced4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ced6:	330b      	adds	r3, #11
 800ced8:	f042 0220 	orr.w	r2, r2, #32
 800cedc:	b2d2      	uxtb	r2, r2
 800cede:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	6818      	ldr	r0, [r3, #0]
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	689b      	ldr	r3, [r3, #8]
 800cee8:	461a      	mov	r2, r3
 800ceea:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800ceec:	f7fd fa86 	bl	800a3fc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800cef0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cef2:	f103 001c 	add.w	r0, r3, #28
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800cefc:	4613      	mov	r3, r2
 800cefe:	4619      	mov	r1, r3
 800cf00:	f7fb ff1f 	bl	8008d42 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800cf04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf06:	3316      	adds	r3, #22
 800cf08:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	f7fb ff19 	bl	8008d42 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800cf10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf12:	3312      	adds	r3, #18
 800cf14:	2100      	movs	r1, #0
 800cf16:	4618      	mov	r0, r3
 800cf18:	f7fb fef8 	bl	8008d0c <st_word>
					fs->wflag = 1;
 800cf1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf1e:	2201      	movs	r2, #1
 800cf20:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800cf22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf24:	4618      	mov	r0, r3
 800cf26:	f7fc fa1d 	bl	8009364 <sync_fs>
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cf36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cf3a:	b2da      	uxtb	r2, r3
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800cf42:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800cf46:	4618      	mov	r0, r3
 800cf48:	3768      	adds	r7, #104	; 0x68
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}

0800cf4e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800cf4e:	b580      	push	{r7, lr}
 800cf50:	b084      	sub	sp, #16
 800cf52:	af00      	add	r7, sp, #0
 800cf54:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800cf56:	6878      	ldr	r0, [r7, #4]
 800cf58:	f7ff fedb 	bl	800cd12 <f_sync>
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800cf60:	7bfb      	ldrb	r3, [r7, #15]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d118      	bne.n	800cf98 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	f107 0208 	add.w	r2, r7, #8
 800cf6c:	4611      	mov	r1, r2
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f7ff fa16 	bl	800c3a0 <validate>
 800cf74:	4603      	mov	r3, r0
 800cf76:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cf78:	7bfb      	ldrb	r3, [r7, #15]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d10c      	bne.n	800cf98 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf82:	4618      	mov	r0, r3
 800cf84:	f7fc f91c 	bl	80091c0 <dec_lock>
 800cf88:	4603      	mov	r3, r0
 800cf8a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800cf8c:	7bfb      	ldrb	r3, [r7, #15]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d102      	bne.n	800cf98 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2200      	movs	r2, #0
 800cf96:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800cf98:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	3710      	adds	r7, #16
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	bd80      	pop	{r7, pc}

0800cfa2 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800cfa2:	b580      	push	{r7, lr}
 800cfa4:	b086      	sub	sp, #24
 800cfa6:	af00      	add	r7, sp, #0
 800cfa8:	6078      	str	r0, [r7, #4]
 800cfaa:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d101      	bne.n	800cfb6 <f_opendir+0x14>
 800cfb2:	2309      	movs	r3, #9
 800cfb4:	e09a      	b.n	800d0ec <f_opendir+0x14a>

	/* Get logical drive */
	obj = &dp->obj;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800cfba:	f107 010c 	add.w	r1, r7, #12
 800cfbe:	463b      	mov	r3, r7
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	f7fe fe5c 	bl	800bc80 <find_volume>
 800cfc8:	4603      	mov	r3, r0
 800cfca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cfcc:	7dfb      	ldrb	r3, [r7, #23]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	f040 8085 	bne.w	800d0de <f_opendir+0x13c>
		obj->fs = fs;
 800cfd4:	68fa      	ldr	r2, [r7, #12]
 800cfd6:	693b      	ldr	r3, [r7, #16]
 800cfd8:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	4619      	mov	r1, r3
 800cfde:	6878      	ldr	r0, [r7, #4]
 800cfe0:	f7fe fcf8 	bl	800b9d4 <follow_path>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800cfe8:	7dfb      	ldrb	r3, [r7, #23]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d172      	bne.n	800d0d4 <f_opendir+0x132>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800cff4:	b25b      	sxtb	r3, r3
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	db47      	blt.n	800d08a <f_opendir+0xe8>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800cffa:	693b      	ldr	r3, [r7, #16]
 800cffc:	799b      	ldrb	r3, [r3, #6]
 800cffe:	f003 0310 	and.w	r3, r3, #16
 800d002:	2b00      	cmp	r3, #0
 800d004:	d03f      	beq.n	800d086 <f_opendir+0xe4>
#if _FS_EXFAT
					if (fs->fs_type == FS_EXFAT) {
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	781b      	ldrb	r3, [r3, #0]
 800d00a:	2b04      	cmp	r3, #4
 800d00c:	d130      	bne.n	800d070 <f_opendir+0xce>
						obj->c_scl = obj->sclust;							/* Get containing directory inforamation */
 800d00e:	693b      	ldr	r3, [r7, #16]
 800d010:	689a      	ldr	r2, [r3, #8]
 800d012:	693b      	ldr	r3, [r7, #16]
 800d014:	621a      	str	r2, [r3, #32]
						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800d016:	693b      	ldr	r3, [r7, #16]
 800d018:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d01c:	4613      	mov	r3, r2
 800d01e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d022:	693a      	ldr	r2, [r7, #16]
 800d024:	79d2      	ldrb	r2, [r2, #7]
 800d026:	431a      	orrs	r2, r3
 800d028:	693b      	ldr	r3, [r7, #16]
 800d02a:	625a      	str	r2, [r3, #36]	; 0x24
						obj->c_ofs = dp->blk_ofs;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d030:	693b      	ldr	r3, [r7, #16]
 800d032:	629a      	str	r2, [r3, #40]	; 0x28
						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	695b      	ldr	r3, [r3, #20]
 800d038:	3334      	adds	r3, #52	; 0x34
 800d03a:	4618      	mov	r0, r3
 800d03c:	f7fb fd88 	bl	8008b50 <ld_dword>
 800d040:	4602      	mov	r2, r0
 800d042:	693b      	ldr	r3, [r7, #16]
 800d044:	609a      	str	r2, [r3, #8]
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	695b      	ldr	r3, [r3, #20]
 800d04a:	3338      	adds	r3, #56	; 0x38
 800d04c:	4618      	mov	r0, r3
 800d04e:	f7fb fda2 	bl	8008b96 <ld_qword>
 800d052:	4602      	mov	r2, r0
 800d054:	460b      	mov	r3, r1
 800d056:	6939      	ldr	r1, [r7, #16]
 800d058:	e9c1 2304 	strd	r2, r3, [r1, #16]
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	695b      	ldr	r3, [r3, #20]
 800d060:	3321      	adds	r3, #33	; 0x21
 800d062:	781b      	ldrb	r3, [r3, #0]
 800d064:	f003 0302 	and.w	r3, r3, #2
 800d068:	b2da      	uxtb	r2, r3
 800d06a:	693b      	ldr	r3, [r7, #16]
 800d06c:	71da      	strb	r2, [r3, #7]
 800d06e:	e00c      	b.n	800d08a <f_opendir+0xe8>
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800d070:	68fa      	ldr	r2, [r7, #12]
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d076:	4619      	mov	r1, r3
 800d078:	4610      	mov	r0, r2
 800d07a:	f7fd f9a0 	bl	800a3be <ld_clust>
 800d07e:	4602      	mov	r2, r0
 800d080:	693b      	ldr	r3, [r7, #16]
 800d082:	609a      	str	r2, [r3, #8]
 800d084:	e001      	b.n	800d08a <f_opendir+0xe8>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800d086:	2305      	movs	r3, #5
 800d088:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800d08a:	7dfb      	ldrb	r3, [r7, #23]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d121      	bne.n	800d0d4 <f_opendir+0x132>
				obj->id = fs->id;
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	88da      	ldrh	r2, [r3, #6]
 800d094:	693b      	ldr	r3, [r7, #16]
 800d096:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800d098:	2100      	movs	r1, #0
 800d09a:	6878      	ldr	r0, [r7, #4]
 800d09c:	f7fc ffb9 	bl	800a012 <dir_sdi>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800d0a4:	7dfb      	ldrb	r3, [r7, #23]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d114      	bne.n	800d0d4 <f_opendir+0x132>
					if (obj->sclust) {
 800d0aa:	693b      	ldr	r3, [r7, #16]
 800d0ac:	689b      	ldr	r3, [r3, #8]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d00d      	beq.n	800d0ce <f_opendir+0x12c>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800d0b2:	2100      	movs	r1, #0
 800d0b4:	6878      	ldr	r0, [r7, #4]
 800d0b6:	f7fb fff5 	bl	80090a4 <inc_lock>
 800d0ba:	4602      	mov	r2, r0
 800d0bc:	693b      	ldr	r3, [r7, #16]
 800d0be:	62da      	str	r2, [r3, #44]	; 0x2c
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800d0c0:	693b      	ldr	r3, [r7, #16]
 800d0c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d105      	bne.n	800d0d4 <f_opendir+0x132>
 800d0c8:	2312      	movs	r3, #18
 800d0ca:	75fb      	strb	r3, [r7, #23]
 800d0cc:	e002      	b.n	800d0d4 <f_opendir+0x132>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800d0ce:	693b      	ldr	r3, [r7, #16]
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	62da      	str	r2, [r3, #44]	; 0x2c
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800d0d4:	7dfb      	ldrb	r3, [r7, #23]
 800d0d6:	2b04      	cmp	r3, #4
 800d0d8:	d101      	bne.n	800d0de <f_opendir+0x13c>
 800d0da:	2305      	movs	r3, #5
 800d0dc:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800d0de:	7dfb      	ldrb	r3, [r7, #23]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d002      	beq.n	800d0ea <f_opendir+0x148>
 800d0e4:	693b      	ldr	r3, [r7, #16]
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d0ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	3718      	adds	r7, #24
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	bd80      	pop	{r7, pc}

0800d0f4 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b084      	sub	sp, #16
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f107 0208 	add.w	r2, r7, #8
 800d102:	4611      	mov	r1, r2
 800d104:	4618      	mov	r0, r3
 800d106:	f7ff f94b 	bl	800c3a0 <validate>
 800d10a:	4603      	mov	r3, r0
 800d10c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d10e:	7bfb      	ldrb	r3, [r7, #15]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d110      	bne.n	800d136 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d006      	beq.n	800d12a <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d120:	4618      	mov	r0, r3
 800d122:	f7fc f84d 	bl	80091c0 <dec_lock>
 800d126:	4603      	mov	r3, r0
 800d128:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800d12a:	7bfb      	ldrb	r3, [r7, #15]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d102      	bne.n	800d136 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	2200      	movs	r2, #0
 800d134:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800d136:	7bfb      	ldrb	r3, [r7, #15]
}
 800d138:	4618      	mov	r0, r3
 800d13a:	3710      	adds	r7, #16
 800d13c:	46bd      	mov	sp, r7
 800d13e:	bd80      	pop	{r7, pc}

0800d140 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b084      	sub	sp, #16
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
 800d148:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	f107 0208 	add.w	r2, r7, #8
 800d150:	4611      	mov	r1, r2
 800d152:	4618      	mov	r0, r3
 800d154:	f7ff f924 	bl	800c3a0 <validate>
 800d158:	4603      	mov	r3, r0
 800d15a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d15c:	7bfb      	ldrb	r3, [r7, #15]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d126      	bne.n	800d1b0 <f_readdir+0x70>
		if (!fno) {
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d106      	bne.n	800d176 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800d168:	2100      	movs	r1, #0
 800d16a:	6878      	ldr	r0, [r7, #4]
 800d16c:	f7fc ff51 	bl	800a012 <dir_sdi>
 800d170:	4603      	mov	r3, r0
 800d172:	73fb      	strb	r3, [r7, #15]
 800d174:	e01c      	b.n	800d1b0 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800d176:	2100      	movs	r1, #0
 800d178:	6878      	ldr	r0, [r7, #4]
 800d17a:	f7fd fdf0 	bl	800ad5e <dir_read>
 800d17e:	4603      	mov	r3, r0
 800d180:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800d182:	7bfb      	ldrb	r3, [r7, #15]
 800d184:	2b04      	cmp	r3, #4
 800d186:	d101      	bne.n	800d18c <f_readdir+0x4c>
 800d188:	2300      	movs	r3, #0
 800d18a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800d18c:	7bfb      	ldrb	r3, [r7, #15]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d10e      	bne.n	800d1b0 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800d192:	6839      	ldr	r1, [r7, #0]
 800d194:	6878      	ldr	r0, [r7, #4]
 800d196:	f7fe f979 	bl	800b48c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800d19a:	2100      	movs	r1, #0
 800d19c:	6878      	ldr	r0, [r7, #4]
 800d19e:	f7fc ffcc 	bl	800a13a <dir_next>
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800d1a6:	7bfb      	ldrb	r3, [r7, #15]
 800d1a8:	2b04      	cmp	r3, #4
 800d1aa:	d101      	bne.n	800d1b0 <f_readdir+0x70>
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800d1b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	3710      	adds	r7, #16
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd80      	pop	{r7, pc}

0800d1ba <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800d1ba:	b580      	push	{r7, lr}
 800d1bc:	b098      	sub	sp, #96	; 0x60
 800d1be:	af00      	add	r7, sp, #0
 800d1c0:	6078      	str	r0, [r7, #4]
 800d1c2:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800d1c4:	f107 0108 	add.w	r1, r7, #8
 800d1c8:	1d3b      	adds	r3, r7, #4
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	f7fe fd57 	bl	800bc80 <find_volume>
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800d1d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d11f      	bne.n	800d220 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d1e0:	687a      	ldr	r2, [r7, #4]
 800d1e2:	f107 0308 	add.w	r3, r7, #8
 800d1e6:	4611      	mov	r1, r2
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	f7fe fbf3 	bl	800b9d4 <follow_path>
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) {				/* Follow completed */
 800d1f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d111      	bne.n	800d220 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800d1fc:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800d200:	b25b      	sxtb	r3, r3
 800d202:	2b00      	cmp	r3, #0
 800d204:	da03      	bge.n	800d20e <f_stat+0x54>
				res = FR_INVALID_NAME;
 800d206:	2306      	movs	r3, #6
 800d208:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d20c:	e008      	b.n	800d220 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d005      	beq.n	800d220 <f_stat+0x66>
 800d214:	f107 0308 	add.w	r3, r7, #8
 800d218:	6839      	ldr	r1, [r7, #0]
 800d21a:	4618      	mov	r0, r3
 800d21c:	f7fe f936 	bl	800b48c <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800d220:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800d224:	4618      	mov	r0, r3
 800d226:	3760      	adds	r7, #96	; 0x60
 800d228:	46bd      	mov	sp, r7
 800d22a:	bd80      	pop	{r7, pc}

0800d22c <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b09a      	sub	sp, #104	; 0x68
 800d230:	af00      	add	r7, sp, #0
 800d232:	60f8      	str	r0, [r7, #12]
 800d234:	60b9      	str	r1, [r7, #8]
 800d236:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800d238:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800d23c:	f107 030c 	add.w	r3, r7, #12
 800d240:	2200      	movs	r2, #0
 800d242:	4618      	mov	r0, r3
 800d244:	f7fe fd1c 	bl	800bc80 <find_volume>
 800d248:	4603      	mov	r3, r0
 800d24a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800d24e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d252:	2b00      	cmp	r3, #0
 800d254:	f040 80eb 	bne.w	800d42e <f_getfree+0x202>
		*fatfs = fs;				/* Return ptr to the fs object */
 800d258:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800d25e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d260:	69da      	ldr	r2, [r3, #28]
 800d262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d264:	6a1b      	ldr	r3, [r3, #32]
 800d266:	3b02      	subs	r3, #2
 800d268:	429a      	cmp	r2, r3
 800d26a:	d804      	bhi.n	800d276 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800d26c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d26e:	69da      	ldr	r2, [r3, #28]
 800d270:	68bb      	ldr	r3, [r7, #8]
 800d272:	601a      	str	r2, [r3, #0]
 800d274:	e0db      	b.n	800d42e <f_getfree+0x202>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800d276:	2300      	movs	r3, #0
 800d278:	663b      	str	r3, [r7, #96]	; 0x60
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800d27a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d27c:	781b      	ldrb	r3, [r3, #0]
 800d27e:	2b01      	cmp	r3, #1
 800d280:	d128      	bne.n	800d2d4 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800d282:	2302      	movs	r3, #2
 800d284:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d286:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d288:	613b      	str	r3, [r7, #16]
				do {
					stat = get_fat(&obj, clst);
 800d28a:	f107 0310 	add.w	r3, r7, #16
 800d28e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800d290:	4618      	mov	r0, r3
 800d292:	f7fc f8f7 	bl	8009484 <get_fat>
 800d296:	6478      	str	r0, [r7, #68]	; 0x44
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800d298:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d29a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d29e:	d103      	bne.n	800d2a8 <f_getfree+0x7c>
 800d2a0:	2301      	movs	r3, #1
 800d2a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d2a6:	e0b5      	b.n	800d414 <f_getfree+0x1e8>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800d2a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d2aa:	2b01      	cmp	r3, #1
 800d2ac:	d103      	bne.n	800d2b6 <f_getfree+0x8a>
 800d2ae:	2302      	movs	r3, #2
 800d2b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d2b4:	e0ae      	b.n	800d414 <f_getfree+0x1e8>
					if (stat == 0) nfree++;
 800d2b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d102      	bne.n	800d2c2 <f_getfree+0x96>
 800d2bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d2be:	3301      	adds	r3, #1
 800d2c0:	663b      	str	r3, [r7, #96]	; 0x60
				} while (++clst < fs->n_fatent);
 800d2c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d2c4:	3301      	adds	r3, #1
 800d2c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d2c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2ca:	6a1b      	ldr	r3, [r3, #32]
 800d2cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d2ce:	429a      	cmp	r2, r3
 800d2d0:	d3db      	bcc.n	800d28a <f_getfree+0x5e>
 800d2d2:	e09f      	b.n	800d414 <f_getfree+0x1e8>
			} else {
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan bitmap table */
 800d2d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2d6:	781b      	ldrb	r3, [r3, #0]
 800d2d8:	2b04      	cmp	r3, #4
 800d2da:	d14b      	bne.n	800d374 <f_getfree+0x148>
					BYTE bm;
					UINT b;

					clst = fs->n_fatent - 2;
 800d2dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2de:	6a1b      	ldr	r3, [r3, #32]
 800d2e0:	3b02      	subs	r3, #2
 800d2e2:	65fb      	str	r3, [r7, #92]	; 0x5c
					sect = fs->database;
 800d2e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2e8:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0;
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	657b      	str	r3, [r7, #84]	; 0x54
					do {
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 800d2ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d10d      	bne.n	800d310 <f_getfree+0xe4>
 800d2f4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d2f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d2f8:	1c5a      	adds	r2, r3, #1
 800d2fa:	65ba      	str	r2, [r7, #88]	; 0x58
 800d2fc:	4619      	mov	r1, r3
 800d2fe:	f7fc f803 	bl	8009308 <move_window>
 800d302:	4603      	mov	r3, r0
 800d304:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d308:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d17e      	bne.n	800d40e <f_getfree+0x1e2>
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800d310:	2308      	movs	r3, #8
 800d312:	64bb      	str	r3, [r7, #72]	; 0x48
 800d314:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d316:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d318:	4413      	add	r3, r2
 800d31a:	333c      	adds	r3, #60	; 0x3c
 800d31c:	781b      	ldrb	r3, [r3, #0]
 800d31e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800d322:	e013      	b.n	800d34c <f_getfree+0x120>
							if (!(bm & 1)) nfree++;
 800d324:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d328:	f003 0301 	and.w	r3, r3, #1
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d102      	bne.n	800d336 <f_getfree+0x10a>
 800d330:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d332:	3301      	adds	r3, #1
 800d334:	663b      	str	r3, [r7, #96]	; 0x60
							bm >>= 1;
 800d336:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d33a:	085b      	lsrs	r3, r3, #1
 800d33c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800d340:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d342:	3b01      	subs	r3, #1
 800d344:	64bb      	str	r3, [r7, #72]	; 0x48
 800d346:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d348:	3b01      	subs	r3, #1
 800d34a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d34c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d002      	beq.n	800d358 <f_getfree+0x12c>
 800d352:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d354:	2b00      	cmp	r3, #0
 800d356:	d1e5      	bne.n	800d324 <f_getfree+0xf8>
						}
						i = (i + 1) % SS(fs);
 800d358:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d35a:	3301      	adds	r3, #1
 800d35c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d35e:	8992      	ldrh	r2, [r2, #12]
 800d360:	fbb3 f1f2 	udiv	r1, r3, r2
 800d364:	fb02 f201 	mul.w	r2, r2, r1
 800d368:	1a9b      	subs	r3, r3, r2
 800d36a:	657b      	str	r3, [r7, #84]	; 0x54
					} while (clst);
 800d36c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d1bd      	bne.n	800d2ee <f_getfree+0xc2>
 800d372:	e04f      	b.n	800d414 <f_getfree+0x1e8>
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800d374:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d376:	6a1b      	ldr	r3, [r3, #32]
 800d378:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d37a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d37c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d37e:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0; p = 0;
 800d380:	2300      	movs	r3, #0
 800d382:	657b      	str	r3, [r7, #84]	; 0x54
 800d384:	2300      	movs	r3, #0
 800d386:	653b      	str	r3, [r7, #80]	; 0x50
					do {
						if (i == 0) {
 800d388:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d113      	bne.n	800d3b6 <f_getfree+0x18a>
							res = move_window(fs, sect++);
 800d38e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d390:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d392:	1c5a      	adds	r2, r3, #1
 800d394:	65ba      	str	r2, [r7, #88]	; 0x58
 800d396:	4619      	mov	r1, r3
 800d398:	f7fb ffb6 	bl	8009308 <move_window>
 800d39c:	4603      	mov	r3, r0
 800d39e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							if (res != FR_OK) break;
 800d3a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d133      	bne.n	800d412 <f_getfree+0x1e6>
							p = fs->win;
 800d3aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3ac:	333c      	adds	r3, #60	; 0x3c
 800d3ae:	653b      	str	r3, [r7, #80]	; 0x50
							i = SS(fs);
 800d3b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3b2:	899b      	ldrh	r3, [r3, #12]
 800d3b4:	657b      	str	r3, [r7, #84]	; 0x54
						}
						if (fs->fs_type == FS_FAT16) {
 800d3b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3b8:	781b      	ldrb	r3, [r3, #0]
 800d3ba:	2b02      	cmp	r3, #2
 800d3bc:	d10f      	bne.n	800d3de <f_getfree+0x1b2>
							if (ld_word(p) == 0) nfree++;
 800d3be:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d3c0:	f7fb fbae 	bl	8008b20 <ld_word>
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d102      	bne.n	800d3d0 <f_getfree+0x1a4>
 800d3ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d3cc:	3301      	adds	r3, #1
 800d3ce:	663b      	str	r3, [r7, #96]	; 0x60
							p += 2; i -= 2;
 800d3d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3d2:	3302      	adds	r3, #2
 800d3d4:	653b      	str	r3, [r7, #80]	; 0x50
 800d3d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d3d8:	3b02      	subs	r3, #2
 800d3da:	657b      	str	r3, [r7, #84]	; 0x54
 800d3dc:	e010      	b.n	800d400 <f_getfree+0x1d4>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800d3de:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d3e0:	f7fb fbb6 	bl	8008b50 <ld_dword>
 800d3e4:	4603      	mov	r3, r0
 800d3e6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d102      	bne.n	800d3f4 <f_getfree+0x1c8>
 800d3ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d3f0:	3301      	adds	r3, #1
 800d3f2:	663b      	str	r3, [r7, #96]	; 0x60
							p += 4; i -= 4;
 800d3f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3f6:	3304      	adds	r3, #4
 800d3f8:	653b      	str	r3, [r7, #80]	; 0x50
 800d3fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d3fc:	3b04      	subs	r3, #4
 800d3fe:	657b      	str	r3, [r7, #84]	; 0x54
						}
					} while (--clst);
 800d400:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d402:	3b01      	subs	r3, #1
 800d404:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d406:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d1bd      	bne.n	800d388 <f_getfree+0x15c>
 800d40c:	e002      	b.n	800d414 <f_getfree+0x1e8>
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 800d40e:	bf00      	nop
 800d410:	e000      	b.n	800d414 <f_getfree+0x1e8>
							if (res != FR_OK) break;
 800d412:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800d414:	68bb      	ldr	r3, [r7, #8]
 800d416:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d418:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800d41a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d41c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d41e:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800d420:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d422:	791a      	ldrb	r2, [r3, #4]
 800d424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d426:	f042 0201 	orr.w	r2, r2, #1
 800d42a:	b2d2      	uxtb	r2, r2
 800d42c:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800d42e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800d432:	4618      	mov	r0, r3
 800d434:	3768      	adds	r7, #104	; 0x68
 800d436:	46bd      	mov	sp, r7
 800d438:	bd80      	pop	{r7, pc}
	...

0800d43c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d43c:	b480      	push	{r7}
 800d43e:	b087      	sub	sp, #28
 800d440:	af00      	add	r7, sp, #0
 800d442:	60f8      	str	r0, [r7, #12]
 800d444:	60b9      	str	r1, [r7, #8]
 800d446:	4613      	mov	r3, r2
 800d448:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d44a:	2301      	movs	r3, #1
 800d44c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d44e:	2300      	movs	r3, #0
 800d450:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d452:	4b1f      	ldr	r3, [pc, #124]	; (800d4d0 <FATFS_LinkDriverEx+0x94>)
 800d454:	7a5b      	ldrb	r3, [r3, #9]
 800d456:	b2db      	uxtb	r3, r3
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d131      	bne.n	800d4c0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d45c:	4b1c      	ldr	r3, [pc, #112]	; (800d4d0 <FATFS_LinkDriverEx+0x94>)
 800d45e:	7a5b      	ldrb	r3, [r3, #9]
 800d460:	b2db      	uxtb	r3, r3
 800d462:	461a      	mov	r2, r3
 800d464:	4b1a      	ldr	r3, [pc, #104]	; (800d4d0 <FATFS_LinkDriverEx+0x94>)
 800d466:	2100      	movs	r1, #0
 800d468:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d46a:	4b19      	ldr	r3, [pc, #100]	; (800d4d0 <FATFS_LinkDriverEx+0x94>)
 800d46c:	7a5b      	ldrb	r3, [r3, #9]
 800d46e:	b2db      	uxtb	r3, r3
 800d470:	4a17      	ldr	r2, [pc, #92]	; (800d4d0 <FATFS_LinkDriverEx+0x94>)
 800d472:	009b      	lsls	r3, r3, #2
 800d474:	4413      	add	r3, r2
 800d476:	68fa      	ldr	r2, [r7, #12]
 800d478:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d47a:	4b15      	ldr	r3, [pc, #84]	; (800d4d0 <FATFS_LinkDriverEx+0x94>)
 800d47c:	7a5b      	ldrb	r3, [r3, #9]
 800d47e:	b2db      	uxtb	r3, r3
 800d480:	461a      	mov	r2, r3
 800d482:	4b13      	ldr	r3, [pc, #76]	; (800d4d0 <FATFS_LinkDriverEx+0x94>)
 800d484:	4413      	add	r3, r2
 800d486:	79fa      	ldrb	r2, [r7, #7]
 800d488:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d48a:	4b11      	ldr	r3, [pc, #68]	; (800d4d0 <FATFS_LinkDriverEx+0x94>)
 800d48c:	7a5b      	ldrb	r3, [r3, #9]
 800d48e:	b2db      	uxtb	r3, r3
 800d490:	1c5a      	adds	r2, r3, #1
 800d492:	b2d1      	uxtb	r1, r2
 800d494:	4a0e      	ldr	r2, [pc, #56]	; (800d4d0 <FATFS_LinkDriverEx+0x94>)
 800d496:	7251      	strb	r1, [r2, #9]
 800d498:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d49a:	7dbb      	ldrb	r3, [r7, #22]
 800d49c:	3330      	adds	r3, #48	; 0x30
 800d49e:	b2da      	uxtb	r2, r3
 800d4a0:	68bb      	ldr	r3, [r7, #8]
 800d4a2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d4a4:	68bb      	ldr	r3, [r7, #8]
 800d4a6:	3301      	adds	r3, #1
 800d4a8:	223a      	movs	r2, #58	; 0x3a
 800d4aa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d4ac:	68bb      	ldr	r3, [r7, #8]
 800d4ae:	3302      	adds	r3, #2
 800d4b0:	222f      	movs	r2, #47	; 0x2f
 800d4b2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d4b4:	68bb      	ldr	r3, [r7, #8]
 800d4b6:	3303      	adds	r3, #3
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d4bc:	2300      	movs	r3, #0
 800d4be:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d4c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	371c      	adds	r7, #28
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4cc:	4770      	bx	lr
 800d4ce:	bf00      	nop
 800d4d0:	20000538 	.word	0x20000538

0800d4d4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b082      	sub	sp, #8
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
 800d4dc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d4de:	2200      	movs	r2, #0
 800d4e0:	6839      	ldr	r1, [r7, #0]
 800d4e2:	6878      	ldr	r0, [r7, #4]
 800d4e4:	f7ff ffaa 	bl	800d43c <FATFS_LinkDriverEx>
 800d4e8:	4603      	mov	r3, r0
}
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	3708      	adds	r7, #8
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	bd80      	pop	{r7, pc}
	...

0800d4f4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800d4f4:	b480      	push	{r7}
 800d4f6:	b085      	sub	sp, #20
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	6039      	str	r1, [r7, #0]
 800d4fe:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800d500:	88fb      	ldrh	r3, [r7, #6]
 800d502:	2b7f      	cmp	r3, #127	; 0x7f
 800d504:	d802      	bhi.n	800d50c <ff_convert+0x18>
		c = chr;
 800d506:	88fb      	ldrh	r3, [r7, #6]
 800d508:	81fb      	strh	r3, [r7, #14]
 800d50a:	e025      	b.n	800d558 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d00b      	beq.n	800d52a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d512:	88fb      	ldrh	r3, [r7, #6]
 800d514:	2bff      	cmp	r3, #255	; 0xff
 800d516:	d805      	bhi.n	800d524 <ff_convert+0x30>
 800d518:	88fb      	ldrh	r3, [r7, #6]
 800d51a:	3b80      	subs	r3, #128	; 0x80
 800d51c:	4a12      	ldr	r2, [pc, #72]	; (800d568 <ff_convert+0x74>)
 800d51e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d522:	e000      	b.n	800d526 <ff_convert+0x32>
 800d524:	2300      	movs	r3, #0
 800d526:	81fb      	strh	r3, [r7, #14]
 800d528:	e016      	b.n	800d558 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800d52a:	2300      	movs	r3, #0
 800d52c:	81fb      	strh	r3, [r7, #14]
 800d52e:	e009      	b.n	800d544 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800d530:	89fb      	ldrh	r3, [r7, #14]
 800d532:	4a0d      	ldr	r2, [pc, #52]	; (800d568 <ff_convert+0x74>)
 800d534:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d538:	88fa      	ldrh	r2, [r7, #6]
 800d53a:	429a      	cmp	r2, r3
 800d53c:	d006      	beq.n	800d54c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800d53e:	89fb      	ldrh	r3, [r7, #14]
 800d540:	3301      	adds	r3, #1
 800d542:	81fb      	strh	r3, [r7, #14]
 800d544:	89fb      	ldrh	r3, [r7, #14]
 800d546:	2b7f      	cmp	r3, #127	; 0x7f
 800d548:	d9f2      	bls.n	800d530 <ff_convert+0x3c>
 800d54a:	e000      	b.n	800d54e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800d54c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800d54e:	89fb      	ldrh	r3, [r7, #14]
 800d550:	3380      	adds	r3, #128	; 0x80
 800d552:	b29b      	uxth	r3, r3
 800d554:	b2db      	uxtb	r3, r3
 800d556:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800d558:	89fb      	ldrh	r3, [r7, #14]
}
 800d55a:	4618      	mov	r0, r3
 800d55c:	3714      	adds	r7, #20
 800d55e:	46bd      	mov	sp, r7
 800d560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d564:	4770      	bx	lr
 800d566:	bf00      	nop
 800d568:	080105cc 	.word	0x080105cc

0800d56c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800d56c:	b480      	push	{r7}
 800d56e:	b087      	sub	sp, #28
 800d570:	af00      	add	r7, sp, #0
 800d572:	4603      	mov	r3, r0
 800d574:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800d576:	88fb      	ldrh	r3, [r7, #6]
 800d578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d57c:	d201      	bcs.n	800d582 <ff_wtoupper+0x16>
 800d57e:	4b3e      	ldr	r3, [pc, #248]	; (800d678 <ff_wtoupper+0x10c>)
 800d580:	e000      	b.n	800d584 <ff_wtoupper+0x18>
 800d582:	4b3e      	ldr	r3, [pc, #248]	; (800d67c <ff_wtoupper+0x110>)
 800d584:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800d586:	697b      	ldr	r3, [r7, #20]
 800d588:	1c9a      	adds	r2, r3, #2
 800d58a:	617a      	str	r2, [r7, #20]
 800d58c:	881b      	ldrh	r3, [r3, #0]
 800d58e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800d590:	8a7b      	ldrh	r3, [r7, #18]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d068      	beq.n	800d668 <ff_wtoupper+0xfc>
 800d596:	88fa      	ldrh	r2, [r7, #6]
 800d598:	8a7b      	ldrh	r3, [r7, #18]
 800d59a:	429a      	cmp	r2, r3
 800d59c:	d364      	bcc.n	800d668 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800d59e:	697b      	ldr	r3, [r7, #20]
 800d5a0:	1c9a      	adds	r2, r3, #2
 800d5a2:	617a      	str	r2, [r7, #20]
 800d5a4:	881b      	ldrh	r3, [r3, #0]
 800d5a6:	823b      	strh	r3, [r7, #16]
 800d5a8:	8a3b      	ldrh	r3, [r7, #16]
 800d5aa:	0a1b      	lsrs	r3, r3, #8
 800d5ac:	81fb      	strh	r3, [r7, #14]
 800d5ae:	8a3b      	ldrh	r3, [r7, #16]
 800d5b0:	b2db      	uxtb	r3, r3
 800d5b2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800d5b4:	88fa      	ldrh	r2, [r7, #6]
 800d5b6:	8a79      	ldrh	r1, [r7, #18]
 800d5b8:	8a3b      	ldrh	r3, [r7, #16]
 800d5ba:	440b      	add	r3, r1
 800d5bc:	429a      	cmp	r2, r3
 800d5be:	da49      	bge.n	800d654 <ff_wtoupper+0xe8>
			switch (cmd) {
 800d5c0:	89fb      	ldrh	r3, [r7, #14]
 800d5c2:	2b08      	cmp	r3, #8
 800d5c4:	d84f      	bhi.n	800d666 <ff_wtoupper+0xfa>
 800d5c6:	a201      	add	r2, pc, #4	; (adr r2, 800d5cc <ff_wtoupper+0x60>)
 800d5c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5cc:	0800d5f1 	.word	0x0800d5f1
 800d5d0:	0800d603 	.word	0x0800d603
 800d5d4:	0800d619 	.word	0x0800d619
 800d5d8:	0800d621 	.word	0x0800d621
 800d5dc:	0800d629 	.word	0x0800d629
 800d5e0:	0800d631 	.word	0x0800d631
 800d5e4:	0800d639 	.word	0x0800d639
 800d5e8:	0800d641 	.word	0x0800d641
 800d5ec:	0800d649 	.word	0x0800d649
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800d5f0:	88fa      	ldrh	r2, [r7, #6]
 800d5f2:	8a7b      	ldrh	r3, [r7, #18]
 800d5f4:	1ad3      	subs	r3, r2, r3
 800d5f6:	005b      	lsls	r3, r3, #1
 800d5f8:	697a      	ldr	r2, [r7, #20]
 800d5fa:	4413      	add	r3, r2
 800d5fc:	881b      	ldrh	r3, [r3, #0]
 800d5fe:	80fb      	strh	r3, [r7, #6]
 800d600:	e027      	b.n	800d652 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800d602:	88fa      	ldrh	r2, [r7, #6]
 800d604:	8a7b      	ldrh	r3, [r7, #18]
 800d606:	1ad3      	subs	r3, r2, r3
 800d608:	b29b      	uxth	r3, r3
 800d60a:	f003 0301 	and.w	r3, r3, #1
 800d60e:	b29b      	uxth	r3, r3
 800d610:	88fa      	ldrh	r2, [r7, #6]
 800d612:	1ad3      	subs	r3, r2, r3
 800d614:	80fb      	strh	r3, [r7, #6]
 800d616:	e01c      	b.n	800d652 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800d618:	88fb      	ldrh	r3, [r7, #6]
 800d61a:	3b10      	subs	r3, #16
 800d61c:	80fb      	strh	r3, [r7, #6]
 800d61e:	e018      	b.n	800d652 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800d620:	88fb      	ldrh	r3, [r7, #6]
 800d622:	3b20      	subs	r3, #32
 800d624:	80fb      	strh	r3, [r7, #6]
 800d626:	e014      	b.n	800d652 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800d628:	88fb      	ldrh	r3, [r7, #6]
 800d62a:	3b30      	subs	r3, #48	; 0x30
 800d62c:	80fb      	strh	r3, [r7, #6]
 800d62e:	e010      	b.n	800d652 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800d630:	88fb      	ldrh	r3, [r7, #6]
 800d632:	3b1a      	subs	r3, #26
 800d634:	80fb      	strh	r3, [r7, #6]
 800d636:	e00c      	b.n	800d652 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800d638:	88fb      	ldrh	r3, [r7, #6]
 800d63a:	3308      	adds	r3, #8
 800d63c:	80fb      	strh	r3, [r7, #6]
 800d63e:	e008      	b.n	800d652 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800d640:	88fb      	ldrh	r3, [r7, #6]
 800d642:	3b50      	subs	r3, #80	; 0x50
 800d644:	80fb      	strh	r3, [r7, #6]
 800d646:	e004      	b.n	800d652 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800d648:	88fb      	ldrh	r3, [r7, #6]
 800d64a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800d64e:	80fb      	strh	r3, [r7, #6]
 800d650:	bf00      	nop
			}
			break;
 800d652:	e008      	b.n	800d666 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800d654:	89fb      	ldrh	r3, [r7, #14]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d195      	bne.n	800d586 <ff_wtoupper+0x1a>
 800d65a:	8a3b      	ldrh	r3, [r7, #16]
 800d65c:	005b      	lsls	r3, r3, #1
 800d65e:	697a      	ldr	r2, [r7, #20]
 800d660:	4413      	add	r3, r2
 800d662:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800d664:	e78f      	b.n	800d586 <ff_wtoupper+0x1a>
			break;
 800d666:	bf00      	nop
	}

	return chr;
 800d668:	88fb      	ldrh	r3, [r7, #6]
}
 800d66a:	4618      	mov	r0, r3
 800d66c:	371c      	adds	r7, #28
 800d66e:	46bd      	mov	sp, r7
 800d670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d674:	4770      	bx	lr
 800d676:	bf00      	nop
 800d678:	080106cc 	.word	0x080106cc
 800d67c:	080108c0 	.word	0x080108c0

0800d680 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800d680:	b580      	push	{r7, lr}
 800d682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800d684:	2201      	movs	r2, #1
 800d686:	490e      	ldr	r1, [pc, #56]	; (800d6c0 <MX_USB_HOST_Init+0x40>)
 800d688:	480e      	ldr	r0, [pc, #56]	; (800d6c4 <MX_USB_HOST_Init+0x44>)
 800d68a:	f7f9 fe53 	bl	8007334 <USBH_Init>
 800d68e:	4603      	mov	r3, r0
 800d690:	2b00      	cmp	r3, #0
 800d692:	d001      	beq.n	800d698 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800d694:	f7f3 ff04 	bl	80014a0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800d698:	490b      	ldr	r1, [pc, #44]	; (800d6c8 <MX_USB_HOST_Init+0x48>)
 800d69a:	480a      	ldr	r0, [pc, #40]	; (800d6c4 <MX_USB_HOST_Init+0x44>)
 800d69c:	f7f9 fed8 	bl	8007450 <USBH_RegisterClass>
 800d6a0:	4603      	mov	r3, r0
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d001      	beq.n	800d6aa <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800d6a6:	f7f3 fefb 	bl	80014a0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800d6aa:	4806      	ldr	r0, [pc, #24]	; (800d6c4 <MX_USB_HOST_Init+0x44>)
 800d6ac:	f7f9 ff5c 	bl	8007568 <USBH_Start>
 800d6b0:	4603      	mov	r3, r0
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d001      	beq.n	800d6ba <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800d6b6:	f7f3 fef3 	bl	80014a0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800d6ba:	bf00      	nop
 800d6bc:	bd80      	pop	{r7, pc}
 800d6be:	bf00      	nop
 800d6c0:	0800d6e1 	.word	0x0800d6e1
 800d6c4:	20002be0 	.word	0x20002be0
 800d6c8:	2000000c 	.word	0x2000000c

0800d6cc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800d6d0:	4802      	ldr	r0, [pc, #8]	; (800d6dc <MX_USB_HOST_Process+0x10>)
 800d6d2:	f7f9 ff59 	bl	8007588 <USBH_Process>
}
 800d6d6:	bf00      	nop
 800d6d8:	bd80      	pop	{r7, pc}
 800d6da:	bf00      	nop
 800d6dc:	20002be0 	.word	0x20002be0

0800d6e0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id){
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b082      	sub	sp, #8
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
 800d6e8:	460b      	mov	r3, r1
 800d6ea:	70fb      	strb	r3, [r7, #3]


  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id){
 800d6ec:	78fb      	ldrb	r3, [r7, #3]
 800d6ee:	3b01      	subs	r3, #1
 800d6f0:	2b04      	cmp	r3, #4
 800d6f2:	d859      	bhi.n	800d7a8 <USBH_UserProcess+0xc8>
 800d6f4:	a201      	add	r2, pc, #4	; (adr r2, 800d6fc <USBH_UserProcess+0x1c>)
 800d6f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6fa:	bf00      	nop
 800d6fc:	0800d7a9 	.word	0x0800d7a9
 800d700:	0800d72f 	.word	0x0800d72f
 800d704:	0800d7a9 	.word	0x0800d7a9
 800d708:	0800d781 	.word	0x0800d781
 800d70c:	0800d711 	.word	0x0800d711
  	  case HOST_USER_SELECT_CONFIGURATION:
  		  break;

  	  case HOST_USER_DISCONNECTION:
			Appli_state = APPLICATION_DISCONNECT;
 800d710:	4b28      	ldr	r3, [pc, #160]	; (800d7b4 <USBH_UserProcess+0xd4>)
 800d712:	2203      	movs	r2, #3
 800d714:	701a      	strb	r2, [r3, #0]
			Unmount_USB();
 800d716:	f7f3 fa7f 	bl	8000c18 <Unmount_USB>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800d71a:	2201      	movs	r2, #1
 800d71c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d720:	4825      	ldr	r0, [pc, #148]	; (800d7b8 <USBH_UserProcess+0xd8>)
 800d722:	f7f4 fbe3 	bl	8001eec <HAL_GPIO_WritePin>
			Send_Uart("There is no any FlashDisk\n");
 800d726:	4825      	ldr	r0, [pc, #148]	; (800d7bc <USBH_UserProcess+0xdc>)
 800d728:	f7f3 fa3c 	bl	8000ba4 <Send_Uart>

  		  break;
 800d72c:	e03d      	b.n	800d7aa <USBH_UserProcess+0xca>

  	  case HOST_USER_CLASS_ACTIVE:
  		  Appli_state = APPLICATION_READY;
 800d72e:	4b21      	ldr	r3, [pc, #132]	; (800d7b4 <USBH_UserProcess+0xd4>)
 800d730:	2202      	movs	r2, #2
 800d732:	701a      	strb	r2, [r3, #0]
			 Mount_USB();
 800d734:	f7f3 fa4c 	bl	8000bd0 <Mount_USB>
			 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800d738:	2200      	movs	r2, #0
 800d73a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d73e:	481e      	ldr	r0, [pc, #120]	; (800d7b8 <USBH_UserProcess+0xd8>)
 800d740:	f7f4 fbd4 	bl	8001eec <HAL_GPIO_WritePin>
			 Check_USB_Details();   // check space details
 800d744:	f7f3 fd08 	bl	8001158 <Check_USB_Details>
			 while(1){
				 Scan_USB("/");
 800d748:	481d      	ldr	r0, [pc, #116]	; (800d7c0 <USBH_UserProcess+0xe0>)
 800d74a:	f7f3 fa87 	bl	8000c5c <Scan_USB>
				 printf("-----------------------------\n");
 800d74e:	481d      	ldr	r0, [pc, #116]	; (800d7c4 <USBH_UserProcess+0xe4>)
 800d750:	f000 fc9c 	bl	800e08c <puts>
				 printf("Enter a any file name to read from exist files:");
 800d754:	481c      	ldr	r0, [pc, #112]	; (800d7c8 <USBH_UserProcess+0xe8>)
 800d756:	f000 fc13 	bl	800df80 <iprintf>
				 scanf("%s", path);
 800d75a:	491c      	ldr	r1, [pc, #112]	; (800d7cc <USBH_UserProcess+0xec>)
 800d75c:	481c      	ldr	r0, [pc, #112]	; (800d7d0 <USBH_UserProcess+0xf0>)
 800d75e:	f000 fcad 	bl	800e0bc <iscanf>
				 printf("Enterence is : %s", path);
 800d762:	491a      	ldr	r1, [pc, #104]	; (800d7cc <USBH_UserProcess+0xec>)
 800d764:	481b      	ldr	r0, [pc, #108]	; (800d7d4 <USBH_UserProcess+0xf4>)
 800d766:	f000 fc0b 	bl	800df80 <iprintf>
				 HAL_Delay(300);
 800d76a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800d76e:	f7f4 f8eb 	bl	8001948 <HAL_Delay>
				 Read_File(path);
 800d772:	4816      	ldr	r0, [pc, #88]	; (800d7cc <USBH_UserProcess+0xec>)
 800d774:	f7f3 fb22 	bl	8000dbc <Read_File>
				 printf("-----------------------------\n");
 800d778:	4812      	ldr	r0, [pc, #72]	; (800d7c4 <USBH_UserProcess+0xe4>)
 800d77a:	f000 fc87 	bl	800e08c <puts>
				 Scan_USB("/");
 800d77e:	e7e3      	b.n	800d748 <USBH_UserProcess+0x68>
			 }

  		  break;

  	  case HOST_USER_CONNECTION:
  		  Appli_state = APPLICATION_START;
 800d780:	4b0c      	ldr	r3, [pc, #48]	; (800d7b4 <USBH_UserProcess+0xd4>)
 800d782:	2201      	movs	r2, #1
 800d784:	701a      	strb	r2, [r3, #0]

  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET); // app ready
 800d786:	2201      	movs	r2, #1
 800d788:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d78c:	480a      	ldr	r0, [pc, #40]	; (800d7b8 <USBH_UserProcess+0xd8>)
 800d78e:	f7f4 fbad 	bl	8001eec <HAL_GPIO_WritePin>
  		  HAL_Delay(500);
 800d792:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d796:	f7f4 f8d7 	bl	8001948 <HAL_Delay>
  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800d79a:	2200      	movs	r2, #0
 800d79c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d7a0:	4805      	ldr	r0, [pc, #20]	; (800d7b8 <USBH_UserProcess+0xd8>)
 800d7a2:	f7f4 fba3 	bl	8001eec <HAL_GPIO_WritePin>

  		  break;
 800d7a6:	e000      	b.n	800d7aa <USBH_UserProcess+0xca>

  	  default:
  		  break;
 800d7a8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800d7aa:	bf00      	nop
 800d7ac:	3708      	adds	r7, #8
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}
 800d7b2:	bf00      	nop
 800d7b4:	20000544 	.word	0x20000544
 800d7b8:	40020c00 	.word	0x40020c00
 800d7bc:	0801047c 	.word	0x0801047c
 800d7c0:	08010498 	.word	0x08010498
 800d7c4:	0801049c 	.word	0x0801049c
 800d7c8:	080104bc 	.word	0x080104bc
 800d7cc:	20002b50 	.word	0x20002b50
 800d7d0:	080104ec 	.word	0x080104ec
 800d7d4:	080104f0 	.word	0x080104f0

0800d7d8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b08a      	sub	sp, #40	; 0x28
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d7e0:	f107 0314 	add.w	r3, r7, #20
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	601a      	str	r2, [r3, #0]
 800d7e8:	605a      	str	r2, [r3, #4]
 800d7ea:	609a      	str	r2, [r3, #8]
 800d7ec:	60da      	str	r2, [r3, #12]
 800d7ee:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d7f8:	d147      	bne.n	800d88a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	613b      	str	r3, [r7, #16]
 800d7fe:	4b25      	ldr	r3, [pc, #148]	; (800d894 <HAL_HCD_MspInit+0xbc>)
 800d800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d802:	4a24      	ldr	r2, [pc, #144]	; (800d894 <HAL_HCD_MspInit+0xbc>)
 800d804:	f043 0301 	orr.w	r3, r3, #1
 800d808:	6313      	str	r3, [r2, #48]	; 0x30
 800d80a:	4b22      	ldr	r3, [pc, #136]	; (800d894 <HAL_HCD_MspInit+0xbc>)
 800d80c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d80e:	f003 0301 	and.w	r3, r3, #1
 800d812:	613b      	str	r3, [r7, #16]
 800d814:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800d816:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d81a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d81c:	2300      	movs	r3, #0
 800d81e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d820:	2300      	movs	r3, #0
 800d822:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d824:	f107 0314 	add.w	r3, r7, #20
 800d828:	4619      	mov	r1, r3
 800d82a:	481b      	ldr	r0, [pc, #108]	; (800d898 <HAL_HCD_MspInit+0xc0>)
 800d82c:	f7f4 f9c2 	bl	8001bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d830:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d836:	2302      	movs	r3, #2
 800d838:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d83a:	2300      	movs	r3, #0
 800d83c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d83e:	2303      	movs	r3, #3
 800d840:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d842:	230a      	movs	r3, #10
 800d844:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d846:	f107 0314 	add.w	r3, r7, #20
 800d84a:	4619      	mov	r1, r3
 800d84c:	4812      	ldr	r0, [pc, #72]	; (800d898 <HAL_HCD_MspInit+0xc0>)
 800d84e:	f7f4 f9b1 	bl	8001bb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d852:	4b10      	ldr	r3, [pc, #64]	; (800d894 <HAL_HCD_MspInit+0xbc>)
 800d854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d856:	4a0f      	ldr	r2, [pc, #60]	; (800d894 <HAL_HCD_MspInit+0xbc>)
 800d858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d85c:	6353      	str	r3, [r2, #52]	; 0x34
 800d85e:	2300      	movs	r3, #0
 800d860:	60fb      	str	r3, [r7, #12]
 800d862:	4b0c      	ldr	r3, [pc, #48]	; (800d894 <HAL_HCD_MspInit+0xbc>)
 800d864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d866:	4a0b      	ldr	r2, [pc, #44]	; (800d894 <HAL_HCD_MspInit+0xbc>)
 800d868:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d86c:	6453      	str	r3, [r2, #68]	; 0x44
 800d86e:	4b09      	ldr	r3, [pc, #36]	; (800d894 <HAL_HCD_MspInit+0xbc>)
 800d870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d876:	60fb      	str	r3, [r7, #12]
 800d878:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d87a:	2200      	movs	r2, #0
 800d87c:	2100      	movs	r1, #0
 800d87e:	2043      	movs	r0, #67	; 0x43
 800d880:	f7f4 f961 	bl	8001b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d884:	2043      	movs	r0, #67	; 0x43
 800d886:	f7f4 f97a 	bl	8001b7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d88a:	bf00      	nop
 800d88c:	3728      	adds	r7, #40	; 0x28
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}
 800d892:	bf00      	nop
 800d894:	40023800 	.word	0x40023800
 800d898:	40020000 	.word	0x40020000

0800d89c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b082      	sub	sp, #8
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	f7fa fa3f 	bl	8007d2e <USBH_LL_IncTimer>
}
 800d8b0:	bf00      	nop
 800d8b2:	3708      	adds	r7, #8
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}

0800d8b8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b082      	sub	sp, #8
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f7fa fa77 	bl	8007dba <USBH_LL_Connect>
}
 800d8cc:	bf00      	nop
 800d8ce:	3708      	adds	r7, #8
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bd80      	pop	{r7, pc}

0800d8d4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b082      	sub	sp, #8
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f7fa fa80 	bl	8007de8 <USBH_LL_Disconnect>
}
 800d8e8:	bf00      	nop
 800d8ea:	3708      	adds	r7, #8
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	bd80      	pop	{r7, pc}

0800d8f0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800d8f0:	b480      	push	{r7}
 800d8f2:	b083      	sub	sp, #12
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
 800d8f8:	460b      	mov	r3, r1
 800d8fa:	70fb      	strb	r3, [r7, #3]
 800d8fc:	4613      	mov	r3, r2
 800d8fe:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800d900:	bf00      	nop
 800d902:	370c      	adds	r7, #12
 800d904:	46bd      	mov	sp, r7
 800d906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90a:	4770      	bx	lr

0800d90c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b082      	sub	sp, #8
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d91a:	4618      	mov	r0, r3
 800d91c:	f7fa fa31 	bl	8007d82 <USBH_LL_PortEnabled>
}
 800d920:	bf00      	nop
 800d922:	3708      	adds	r7, #8
 800d924:	46bd      	mov	sp, r7
 800d926:	bd80      	pop	{r7, pc}

0800d928 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b082      	sub	sp, #8
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d936:	4618      	mov	r0, r3
 800d938:	f7fa fa31 	bl	8007d9e <USBH_LL_PortDisabled>
}
 800d93c:	bf00      	nop
 800d93e:	3708      	adds	r7, #8
 800d940:	46bd      	mov	sp, r7
 800d942:	bd80      	pop	{r7, pc}

0800d944 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b082      	sub	sp, #8
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800d952:	2b01      	cmp	r3, #1
 800d954:	d12a      	bne.n	800d9ac <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800d956:	4a18      	ldr	r2, [pc, #96]	; (800d9b8 <USBH_LL_Init+0x74>)
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	4a15      	ldr	r2, [pc, #84]	; (800d9b8 <USBH_LL_Init+0x74>)
 800d962:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d966:	4b14      	ldr	r3, [pc, #80]	; (800d9b8 <USBH_LL_Init+0x74>)
 800d968:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d96c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800d96e:	4b12      	ldr	r3, [pc, #72]	; (800d9b8 <USBH_LL_Init+0x74>)
 800d970:	2208      	movs	r2, #8
 800d972:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800d974:	4b10      	ldr	r3, [pc, #64]	; (800d9b8 <USBH_LL_Init+0x74>)
 800d976:	2201      	movs	r2, #1
 800d978:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d97a:	4b0f      	ldr	r3, [pc, #60]	; (800d9b8 <USBH_LL_Init+0x74>)
 800d97c:	2200      	movs	r2, #0
 800d97e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800d980:	4b0d      	ldr	r3, [pc, #52]	; (800d9b8 <USBH_LL_Init+0x74>)
 800d982:	2202      	movs	r2, #2
 800d984:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d986:	4b0c      	ldr	r3, [pc, #48]	; (800d9b8 <USBH_LL_Init+0x74>)
 800d988:	2200      	movs	r2, #0
 800d98a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800d98c:	480a      	ldr	r0, [pc, #40]	; (800d9b8 <USBH_LL_Init+0x74>)
 800d98e:	f7f4 fac6 	bl	8001f1e <HAL_HCD_Init>
 800d992:	4603      	mov	r3, r0
 800d994:	2b00      	cmp	r3, #0
 800d996:	d001      	beq.n	800d99c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800d998:	f7f3 fd82 	bl	80014a0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800d99c:	4806      	ldr	r0, [pc, #24]	; (800d9b8 <USBH_LL_Init+0x74>)
 800d99e:	f7f4 feaa 	bl	80026f6 <HAL_HCD_GetCurrentFrame>
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	4619      	mov	r1, r3
 800d9a6:	6878      	ldr	r0, [r7, #4]
 800d9a8:	f7fa f9b2 	bl	8007d10 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800d9ac:	2300      	movs	r3, #0
}
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	3708      	adds	r7, #8
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	bd80      	pop	{r7, pc}
 800d9b6:	bf00      	nop
 800d9b8:	200043f0 	.word	0x200043f0

0800d9bc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b084      	sub	sp, #16
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f7f4 fe19 	bl	800260a <HAL_HCD_Start>
 800d9d8:	4603      	mov	r3, r0
 800d9da:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d9dc:	7bfb      	ldrb	r3, [r7, #15]
 800d9de:	4618      	mov	r0, r3
 800d9e0:	f000 f98c 	bl	800dcfc <USBH_Get_USB_Status>
 800d9e4:	4603      	mov	r3, r0
 800d9e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d9e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	3710      	adds	r7, #16
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	bd80      	pop	{r7, pc}

0800d9f2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800d9f2:	b580      	push	{r7, lr}
 800d9f4:	b084      	sub	sp, #16
 800d9f6:	af00      	add	r7, sp, #0
 800d9f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d9fe:	2300      	movs	r3, #0
 800da00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800da08:	4618      	mov	r0, r3
 800da0a:	f7f4 fe21 	bl	8002650 <HAL_HCD_Stop>
 800da0e:	4603      	mov	r3, r0
 800da10:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800da12:	7bfb      	ldrb	r3, [r7, #15]
 800da14:	4618      	mov	r0, r3
 800da16:	f000 f971 	bl	800dcfc <USBH_Get_USB_Status>
 800da1a:	4603      	mov	r3, r0
 800da1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da1e:	7bbb      	ldrb	r3, [r7, #14]
}
 800da20:	4618      	mov	r0, r3
 800da22:	3710      	adds	r7, #16
 800da24:	46bd      	mov	sp, r7
 800da26:	bd80      	pop	{r7, pc}

0800da28 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b084      	sub	sp, #16
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800da30:	2301      	movs	r3, #1
 800da32:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800da3a:	4618      	mov	r0, r3
 800da3c:	f7f4 fe69 	bl	8002712 <HAL_HCD_GetCurrentSpeed>
 800da40:	4603      	mov	r3, r0
 800da42:	2b02      	cmp	r3, #2
 800da44:	d00c      	beq.n	800da60 <USBH_LL_GetSpeed+0x38>
 800da46:	2b02      	cmp	r3, #2
 800da48:	d80d      	bhi.n	800da66 <USBH_LL_GetSpeed+0x3e>
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d002      	beq.n	800da54 <USBH_LL_GetSpeed+0x2c>
 800da4e:	2b01      	cmp	r3, #1
 800da50:	d003      	beq.n	800da5a <USBH_LL_GetSpeed+0x32>
 800da52:	e008      	b.n	800da66 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800da54:	2300      	movs	r3, #0
 800da56:	73fb      	strb	r3, [r7, #15]
    break;
 800da58:	e008      	b.n	800da6c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800da5a:	2301      	movs	r3, #1
 800da5c:	73fb      	strb	r3, [r7, #15]
    break;
 800da5e:	e005      	b.n	800da6c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800da60:	2302      	movs	r3, #2
 800da62:	73fb      	strb	r3, [r7, #15]
    break;
 800da64:	e002      	b.n	800da6c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800da66:	2301      	movs	r3, #1
 800da68:	73fb      	strb	r3, [r7, #15]
    break;
 800da6a:	bf00      	nop
  }
  return  speed;
 800da6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800da6e:	4618      	mov	r0, r3
 800da70:	3710      	adds	r7, #16
 800da72:	46bd      	mov	sp, r7
 800da74:	bd80      	pop	{r7, pc}

0800da76 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800da76:	b580      	push	{r7, lr}
 800da78:	b084      	sub	sp, #16
 800da7a:	af00      	add	r7, sp, #0
 800da7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da7e:	2300      	movs	r3, #0
 800da80:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800da82:	2300      	movs	r3, #0
 800da84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800da8c:	4618      	mov	r0, r3
 800da8e:	f7f4 fdfc 	bl	800268a <HAL_HCD_ResetPort>
 800da92:	4603      	mov	r3, r0
 800da94:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800da96:	7bfb      	ldrb	r3, [r7, #15]
 800da98:	4618      	mov	r0, r3
 800da9a:	f000 f92f 	bl	800dcfc <USBH_Get_USB_Status>
 800da9e:	4603      	mov	r3, r0
 800daa0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800daa2:	7bbb      	ldrb	r3, [r7, #14]
}
 800daa4:	4618      	mov	r0, r3
 800daa6:	3710      	adds	r7, #16
 800daa8:	46bd      	mov	sp, r7
 800daaa:	bd80      	pop	{r7, pc}

0800daac <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b082      	sub	sp, #8
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
 800dab4:	460b      	mov	r3, r1
 800dab6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dabe:	78fa      	ldrb	r2, [r7, #3]
 800dac0:	4611      	mov	r1, r2
 800dac2:	4618      	mov	r0, r3
 800dac4:	f7f4 fe03 	bl	80026ce <HAL_HCD_HC_GetXferCount>
 800dac8:	4603      	mov	r3, r0
}
 800daca:	4618      	mov	r0, r3
 800dacc:	3708      	adds	r7, #8
 800dace:	46bd      	mov	sp, r7
 800dad0:	bd80      	pop	{r7, pc}

0800dad2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800dad2:	b590      	push	{r4, r7, lr}
 800dad4:	b089      	sub	sp, #36	; 0x24
 800dad6:	af04      	add	r7, sp, #16
 800dad8:	6078      	str	r0, [r7, #4]
 800dada:	4608      	mov	r0, r1
 800dadc:	4611      	mov	r1, r2
 800dade:	461a      	mov	r2, r3
 800dae0:	4603      	mov	r3, r0
 800dae2:	70fb      	strb	r3, [r7, #3]
 800dae4:	460b      	mov	r3, r1
 800dae6:	70bb      	strb	r3, [r7, #2]
 800dae8:	4613      	mov	r3, r2
 800daea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800daec:	2300      	movs	r3, #0
 800daee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800daf0:	2300      	movs	r3, #0
 800daf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800dafa:	787c      	ldrb	r4, [r7, #1]
 800dafc:	78ba      	ldrb	r2, [r7, #2]
 800dafe:	78f9      	ldrb	r1, [r7, #3]
 800db00:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800db02:	9302      	str	r3, [sp, #8]
 800db04:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800db08:	9301      	str	r3, [sp, #4]
 800db0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800db0e:	9300      	str	r3, [sp, #0]
 800db10:	4623      	mov	r3, r4
 800db12:	f7f4 fa66 	bl	8001fe2 <HAL_HCD_HC_Init>
 800db16:	4603      	mov	r3, r0
 800db18:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800db1a:	7bfb      	ldrb	r3, [r7, #15]
 800db1c:	4618      	mov	r0, r3
 800db1e:	f000 f8ed 	bl	800dcfc <USBH_Get_USB_Status>
 800db22:	4603      	mov	r3, r0
 800db24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db26:	7bbb      	ldrb	r3, [r7, #14]
}
 800db28:	4618      	mov	r0, r3
 800db2a:	3714      	adds	r7, #20
 800db2c:	46bd      	mov	sp, r7
 800db2e:	bd90      	pop	{r4, r7, pc}

0800db30 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b084      	sub	sp, #16
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
 800db38:	460b      	mov	r3, r1
 800db3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db3c:	2300      	movs	r3, #0
 800db3e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800db40:	2300      	movs	r3, #0
 800db42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800db4a:	78fa      	ldrb	r2, [r7, #3]
 800db4c:	4611      	mov	r1, r2
 800db4e:	4618      	mov	r0, r3
 800db50:	f7f4 fad6 	bl	8002100 <HAL_HCD_HC_Halt>
 800db54:	4603      	mov	r3, r0
 800db56:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800db58:	7bfb      	ldrb	r3, [r7, #15]
 800db5a:	4618      	mov	r0, r3
 800db5c:	f000 f8ce 	bl	800dcfc <USBH_Get_USB_Status>
 800db60:	4603      	mov	r3, r0
 800db62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db64:	7bbb      	ldrb	r3, [r7, #14]
}
 800db66:	4618      	mov	r0, r3
 800db68:	3710      	adds	r7, #16
 800db6a:	46bd      	mov	sp, r7
 800db6c:	bd80      	pop	{r7, pc}

0800db6e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800db6e:	b590      	push	{r4, r7, lr}
 800db70:	b089      	sub	sp, #36	; 0x24
 800db72:	af04      	add	r7, sp, #16
 800db74:	6078      	str	r0, [r7, #4]
 800db76:	4608      	mov	r0, r1
 800db78:	4611      	mov	r1, r2
 800db7a:	461a      	mov	r2, r3
 800db7c:	4603      	mov	r3, r0
 800db7e:	70fb      	strb	r3, [r7, #3]
 800db80:	460b      	mov	r3, r1
 800db82:	70bb      	strb	r3, [r7, #2]
 800db84:	4613      	mov	r3, r2
 800db86:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db88:	2300      	movs	r3, #0
 800db8a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800db8c:	2300      	movs	r3, #0
 800db8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800db96:	787c      	ldrb	r4, [r7, #1]
 800db98:	78ba      	ldrb	r2, [r7, #2]
 800db9a:	78f9      	ldrb	r1, [r7, #3]
 800db9c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800dba0:	9303      	str	r3, [sp, #12]
 800dba2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dba4:	9302      	str	r3, [sp, #8]
 800dba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dba8:	9301      	str	r3, [sp, #4]
 800dbaa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dbae:	9300      	str	r3, [sp, #0]
 800dbb0:	4623      	mov	r3, r4
 800dbb2:	f7f4 fac9 	bl	8002148 <HAL_HCD_HC_SubmitRequest>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800dbba:	7bfb      	ldrb	r3, [r7, #15]
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	f000 f89d 	bl	800dcfc <USBH_Get_USB_Status>
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dbc6:	7bbb      	ldrb	r3, [r7, #14]
}
 800dbc8:	4618      	mov	r0, r3
 800dbca:	3714      	adds	r7, #20
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd90      	pop	{r4, r7, pc}

0800dbd0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b082      	sub	sp, #8
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
 800dbd8:	460b      	mov	r3, r1
 800dbda:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dbe2:	78fa      	ldrb	r2, [r7, #3]
 800dbe4:	4611      	mov	r1, r2
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	f7f4 fd5d 	bl	80026a6 <HAL_HCD_HC_GetURBState>
 800dbec:	4603      	mov	r3, r0
}
 800dbee:	4618      	mov	r0, r3
 800dbf0:	3708      	adds	r7, #8
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	bd80      	pop	{r7, pc}

0800dbf6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800dbf6:	b580      	push	{r7, lr}
 800dbf8:	b082      	sub	sp, #8
 800dbfa:	af00      	add	r7, sp, #0
 800dbfc:	6078      	str	r0, [r7, #4]
 800dbfe:	460b      	mov	r3, r1
 800dc00:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800dc08:	2b01      	cmp	r3, #1
 800dc0a:	d103      	bne.n	800dc14 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800dc0c:	78fb      	ldrb	r3, [r7, #3]
 800dc0e:	4618      	mov	r0, r3
 800dc10:	f000 f8a0 	bl	800dd54 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800dc14:	20c8      	movs	r0, #200	; 0xc8
 800dc16:	f7f3 fe97 	bl	8001948 <HAL_Delay>
  return USBH_OK;
 800dc1a:	2300      	movs	r3, #0
}
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	3708      	adds	r7, #8
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd80      	pop	{r7, pc}

0800dc24 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800dc24:	b480      	push	{r7}
 800dc26:	b085      	sub	sp, #20
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
 800dc2c:	460b      	mov	r3, r1
 800dc2e:	70fb      	strb	r3, [r7, #3]
 800dc30:	4613      	mov	r3, r2
 800dc32:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dc3a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800dc3c:	78fb      	ldrb	r3, [r7, #3]
 800dc3e:	68fa      	ldr	r2, [r7, #12]
 800dc40:	212c      	movs	r1, #44	; 0x2c
 800dc42:	fb01 f303 	mul.w	r3, r1, r3
 800dc46:	4413      	add	r3, r2
 800dc48:	333b      	adds	r3, #59	; 0x3b
 800dc4a:	781b      	ldrb	r3, [r3, #0]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d009      	beq.n	800dc64 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800dc50:	78fb      	ldrb	r3, [r7, #3]
 800dc52:	68fa      	ldr	r2, [r7, #12]
 800dc54:	212c      	movs	r1, #44	; 0x2c
 800dc56:	fb01 f303 	mul.w	r3, r1, r3
 800dc5a:	4413      	add	r3, r2
 800dc5c:	3354      	adds	r3, #84	; 0x54
 800dc5e:	78ba      	ldrb	r2, [r7, #2]
 800dc60:	701a      	strb	r2, [r3, #0]
 800dc62:	e008      	b.n	800dc76 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800dc64:	78fb      	ldrb	r3, [r7, #3]
 800dc66:	68fa      	ldr	r2, [r7, #12]
 800dc68:	212c      	movs	r1, #44	; 0x2c
 800dc6a:	fb01 f303 	mul.w	r3, r1, r3
 800dc6e:	4413      	add	r3, r2
 800dc70:	3355      	adds	r3, #85	; 0x55
 800dc72:	78ba      	ldrb	r2, [r7, #2]
 800dc74:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800dc76:	2300      	movs	r3, #0
}
 800dc78:	4618      	mov	r0, r3
 800dc7a:	3714      	adds	r7, #20
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc82:	4770      	bx	lr

0800dc84 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800dc84:	b480      	push	{r7}
 800dc86:	b085      	sub	sp, #20
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
 800dc8c:	460b      	mov	r3, r1
 800dc8e:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800dc90:	2300      	movs	r3, #0
 800dc92:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dc9a:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800dc9c:	78fb      	ldrb	r3, [r7, #3]
 800dc9e:	68ba      	ldr	r2, [r7, #8]
 800dca0:	212c      	movs	r1, #44	; 0x2c
 800dca2:	fb01 f303 	mul.w	r3, r1, r3
 800dca6:	4413      	add	r3, r2
 800dca8:	333b      	adds	r3, #59	; 0x3b
 800dcaa:	781b      	ldrb	r3, [r3, #0]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d009      	beq.n	800dcc4 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800dcb0:	78fb      	ldrb	r3, [r7, #3]
 800dcb2:	68ba      	ldr	r2, [r7, #8]
 800dcb4:	212c      	movs	r1, #44	; 0x2c
 800dcb6:	fb01 f303 	mul.w	r3, r1, r3
 800dcba:	4413      	add	r3, r2
 800dcbc:	3354      	adds	r3, #84	; 0x54
 800dcbe:	781b      	ldrb	r3, [r3, #0]
 800dcc0:	73fb      	strb	r3, [r7, #15]
 800dcc2:	e008      	b.n	800dcd6 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800dcc4:	78fb      	ldrb	r3, [r7, #3]
 800dcc6:	68ba      	ldr	r2, [r7, #8]
 800dcc8:	212c      	movs	r1, #44	; 0x2c
 800dcca:	fb01 f303 	mul.w	r3, r1, r3
 800dcce:	4413      	add	r3, r2
 800dcd0:	3355      	adds	r3, #85	; 0x55
 800dcd2:	781b      	ldrb	r3, [r3, #0]
 800dcd4:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800dcd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcd8:	4618      	mov	r0, r3
 800dcda:	3714      	adds	r7, #20
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce2:	4770      	bx	lr

0800dce4 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b082      	sub	sp, #8
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800dcec:	6878      	ldr	r0, [r7, #4]
 800dcee:	f7f3 fe2b 	bl	8001948 <HAL_Delay>
}
 800dcf2:	bf00      	nop
 800dcf4:	3708      	adds	r7, #8
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}
	...

0800dcfc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dcfc:	b480      	push	{r7}
 800dcfe:	b085      	sub	sp, #20
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	4603      	mov	r3, r0
 800dd04:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dd06:	2300      	movs	r3, #0
 800dd08:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dd0a:	79fb      	ldrb	r3, [r7, #7]
 800dd0c:	2b03      	cmp	r3, #3
 800dd0e:	d817      	bhi.n	800dd40 <USBH_Get_USB_Status+0x44>
 800dd10:	a201      	add	r2, pc, #4	; (adr r2, 800dd18 <USBH_Get_USB_Status+0x1c>)
 800dd12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd16:	bf00      	nop
 800dd18:	0800dd29 	.word	0x0800dd29
 800dd1c:	0800dd2f 	.word	0x0800dd2f
 800dd20:	0800dd35 	.word	0x0800dd35
 800dd24:	0800dd3b 	.word	0x0800dd3b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800dd28:	2300      	movs	r3, #0
 800dd2a:	73fb      	strb	r3, [r7, #15]
    break;
 800dd2c:	e00b      	b.n	800dd46 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800dd2e:	2302      	movs	r3, #2
 800dd30:	73fb      	strb	r3, [r7, #15]
    break;
 800dd32:	e008      	b.n	800dd46 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800dd34:	2301      	movs	r3, #1
 800dd36:	73fb      	strb	r3, [r7, #15]
    break;
 800dd38:	e005      	b.n	800dd46 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800dd3a:	2302      	movs	r3, #2
 800dd3c:	73fb      	strb	r3, [r7, #15]
    break;
 800dd3e:	e002      	b.n	800dd46 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800dd40:	2302      	movs	r3, #2
 800dd42:	73fb      	strb	r3, [r7, #15]
    break;
 800dd44:	bf00      	nop
  }
  return usb_status;
 800dd46:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd48:	4618      	mov	r0, r3
 800dd4a:	3714      	adds	r7, #20
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd52:	4770      	bx	lr

0800dd54 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b084      	sub	sp, #16
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	4603      	mov	r3, r0
 800dd5c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800dd5e:	79fb      	ldrb	r3, [r7, #7]
 800dd60:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800dd62:	79fb      	ldrb	r3, [r7, #7]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d102      	bne.n	800dd6e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800dd68:	2301      	movs	r3, #1
 800dd6a:	73fb      	strb	r3, [r7, #15]
 800dd6c:	e001      	b.n	800dd72 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800dd6e:	2300      	movs	r3, #0
 800dd70:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800dd72:	7bfb      	ldrb	r3, [r7, #15]
 800dd74:	461a      	mov	r2, r3
 800dd76:	2101      	movs	r1, #1
 800dd78:	4803      	ldr	r0, [pc, #12]	; (800dd88 <MX_DriverVbusFS+0x34>)
 800dd7a:	f7f4 f8b7 	bl	8001eec <HAL_GPIO_WritePin>
}
 800dd7e:	bf00      	nop
 800dd80:	3710      	adds	r7, #16
 800dd82:	46bd      	mov	sp, r7
 800dd84:	bd80      	pop	{r7, pc}
 800dd86:	bf00      	nop
 800dd88:	40020800 	.word	0x40020800

0800dd8c <__errno>:
 800dd8c:	4b01      	ldr	r3, [pc, #4]	; (800dd94 <__errno+0x8>)
 800dd8e:	6818      	ldr	r0, [r3, #0]
 800dd90:	4770      	bx	lr
 800dd92:	bf00      	nop
 800dd94:	2000002c 	.word	0x2000002c

0800dd98 <__libc_init_array>:
 800dd98:	b570      	push	{r4, r5, r6, lr}
 800dd9a:	4d0d      	ldr	r5, [pc, #52]	; (800ddd0 <__libc_init_array+0x38>)
 800dd9c:	4c0d      	ldr	r4, [pc, #52]	; (800ddd4 <__libc_init_array+0x3c>)
 800dd9e:	1b64      	subs	r4, r4, r5
 800dda0:	10a4      	asrs	r4, r4, #2
 800dda2:	2600      	movs	r6, #0
 800dda4:	42a6      	cmp	r6, r4
 800dda6:	d109      	bne.n	800ddbc <__libc_init_array+0x24>
 800dda8:	4d0b      	ldr	r5, [pc, #44]	; (800ddd8 <__libc_init_array+0x40>)
 800ddaa:	4c0c      	ldr	r4, [pc, #48]	; (800dddc <__libc_init_array+0x44>)
 800ddac:	f002 f8cc 	bl	800ff48 <_init>
 800ddb0:	1b64      	subs	r4, r4, r5
 800ddb2:	10a4      	asrs	r4, r4, #2
 800ddb4:	2600      	movs	r6, #0
 800ddb6:	42a6      	cmp	r6, r4
 800ddb8:	d105      	bne.n	800ddc6 <__libc_init_array+0x2e>
 800ddba:	bd70      	pop	{r4, r5, r6, pc}
 800ddbc:	f855 3b04 	ldr.w	r3, [r5], #4
 800ddc0:	4798      	blx	r3
 800ddc2:	3601      	adds	r6, #1
 800ddc4:	e7ee      	b.n	800dda4 <__libc_init_array+0xc>
 800ddc6:	f855 3b04 	ldr.w	r3, [r5], #4
 800ddca:	4798      	blx	r3
 800ddcc:	3601      	adds	r6, #1
 800ddce:	e7f2      	b.n	800ddb6 <__libc_init_array+0x1e>
 800ddd0:	08010b38 	.word	0x08010b38
 800ddd4:	08010b38 	.word	0x08010b38
 800ddd8:	08010b38 	.word	0x08010b38
 800dddc:	08010b3c 	.word	0x08010b3c

0800dde0 <malloc>:
 800dde0:	4b02      	ldr	r3, [pc, #8]	; (800ddec <malloc+0xc>)
 800dde2:	4601      	mov	r1, r0
 800dde4:	6818      	ldr	r0, [r3, #0]
 800dde6:	f000 b871 	b.w	800decc <_malloc_r>
 800ddea:	bf00      	nop
 800ddec:	2000002c 	.word	0x2000002c

0800ddf0 <free>:
 800ddf0:	4b02      	ldr	r3, [pc, #8]	; (800ddfc <free+0xc>)
 800ddf2:	4601      	mov	r1, r0
 800ddf4:	6818      	ldr	r0, [r3, #0]
 800ddf6:	f000 b819 	b.w	800de2c <_free_r>
 800ddfa:	bf00      	nop
 800ddfc:	2000002c 	.word	0x2000002c

0800de00 <memcpy>:
 800de00:	440a      	add	r2, r1
 800de02:	4291      	cmp	r1, r2
 800de04:	f100 33ff 	add.w	r3, r0, #4294967295
 800de08:	d100      	bne.n	800de0c <memcpy+0xc>
 800de0a:	4770      	bx	lr
 800de0c:	b510      	push	{r4, lr}
 800de0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de12:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de16:	4291      	cmp	r1, r2
 800de18:	d1f9      	bne.n	800de0e <memcpy+0xe>
 800de1a:	bd10      	pop	{r4, pc}

0800de1c <memset>:
 800de1c:	4402      	add	r2, r0
 800de1e:	4603      	mov	r3, r0
 800de20:	4293      	cmp	r3, r2
 800de22:	d100      	bne.n	800de26 <memset+0xa>
 800de24:	4770      	bx	lr
 800de26:	f803 1b01 	strb.w	r1, [r3], #1
 800de2a:	e7f9      	b.n	800de20 <memset+0x4>

0800de2c <_free_r>:
 800de2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800de2e:	2900      	cmp	r1, #0
 800de30:	d048      	beq.n	800dec4 <_free_r+0x98>
 800de32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de36:	9001      	str	r0, [sp, #4]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	f1a1 0404 	sub.w	r4, r1, #4
 800de3e:	bfb8      	it	lt
 800de40:	18e4      	addlt	r4, r4, r3
 800de42:	f000 fd7b 	bl	800e93c <__malloc_lock>
 800de46:	4a20      	ldr	r2, [pc, #128]	; (800dec8 <_free_r+0x9c>)
 800de48:	9801      	ldr	r0, [sp, #4]
 800de4a:	6813      	ldr	r3, [r2, #0]
 800de4c:	4615      	mov	r5, r2
 800de4e:	b933      	cbnz	r3, 800de5e <_free_r+0x32>
 800de50:	6063      	str	r3, [r4, #4]
 800de52:	6014      	str	r4, [r2, #0]
 800de54:	b003      	add	sp, #12
 800de56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800de5a:	f000 bd75 	b.w	800e948 <__malloc_unlock>
 800de5e:	42a3      	cmp	r3, r4
 800de60:	d90b      	bls.n	800de7a <_free_r+0x4e>
 800de62:	6821      	ldr	r1, [r4, #0]
 800de64:	1862      	adds	r2, r4, r1
 800de66:	4293      	cmp	r3, r2
 800de68:	bf04      	itt	eq
 800de6a:	681a      	ldreq	r2, [r3, #0]
 800de6c:	685b      	ldreq	r3, [r3, #4]
 800de6e:	6063      	str	r3, [r4, #4]
 800de70:	bf04      	itt	eq
 800de72:	1852      	addeq	r2, r2, r1
 800de74:	6022      	streq	r2, [r4, #0]
 800de76:	602c      	str	r4, [r5, #0]
 800de78:	e7ec      	b.n	800de54 <_free_r+0x28>
 800de7a:	461a      	mov	r2, r3
 800de7c:	685b      	ldr	r3, [r3, #4]
 800de7e:	b10b      	cbz	r3, 800de84 <_free_r+0x58>
 800de80:	42a3      	cmp	r3, r4
 800de82:	d9fa      	bls.n	800de7a <_free_r+0x4e>
 800de84:	6811      	ldr	r1, [r2, #0]
 800de86:	1855      	adds	r5, r2, r1
 800de88:	42a5      	cmp	r5, r4
 800de8a:	d10b      	bne.n	800dea4 <_free_r+0x78>
 800de8c:	6824      	ldr	r4, [r4, #0]
 800de8e:	4421      	add	r1, r4
 800de90:	1854      	adds	r4, r2, r1
 800de92:	42a3      	cmp	r3, r4
 800de94:	6011      	str	r1, [r2, #0]
 800de96:	d1dd      	bne.n	800de54 <_free_r+0x28>
 800de98:	681c      	ldr	r4, [r3, #0]
 800de9a:	685b      	ldr	r3, [r3, #4]
 800de9c:	6053      	str	r3, [r2, #4]
 800de9e:	4421      	add	r1, r4
 800dea0:	6011      	str	r1, [r2, #0]
 800dea2:	e7d7      	b.n	800de54 <_free_r+0x28>
 800dea4:	d902      	bls.n	800deac <_free_r+0x80>
 800dea6:	230c      	movs	r3, #12
 800dea8:	6003      	str	r3, [r0, #0]
 800deaa:	e7d3      	b.n	800de54 <_free_r+0x28>
 800deac:	6825      	ldr	r5, [r4, #0]
 800deae:	1961      	adds	r1, r4, r5
 800deb0:	428b      	cmp	r3, r1
 800deb2:	bf04      	itt	eq
 800deb4:	6819      	ldreq	r1, [r3, #0]
 800deb6:	685b      	ldreq	r3, [r3, #4]
 800deb8:	6063      	str	r3, [r4, #4]
 800deba:	bf04      	itt	eq
 800debc:	1949      	addeq	r1, r1, r5
 800debe:	6021      	streq	r1, [r4, #0]
 800dec0:	6054      	str	r4, [r2, #4]
 800dec2:	e7c7      	b.n	800de54 <_free_r+0x28>
 800dec4:	b003      	add	sp, #12
 800dec6:	bd30      	pop	{r4, r5, pc}
 800dec8:	20000548 	.word	0x20000548

0800decc <_malloc_r>:
 800decc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dece:	1ccd      	adds	r5, r1, #3
 800ded0:	f025 0503 	bic.w	r5, r5, #3
 800ded4:	3508      	adds	r5, #8
 800ded6:	2d0c      	cmp	r5, #12
 800ded8:	bf38      	it	cc
 800deda:	250c      	movcc	r5, #12
 800dedc:	2d00      	cmp	r5, #0
 800dede:	4606      	mov	r6, r0
 800dee0:	db01      	blt.n	800dee6 <_malloc_r+0x1a>
 800dee2:	42a9      	cmp	r1, r5
 800dee4:	d903      	bls.n	800deee <_malloc_r+0x22>
 800dee6:	230c      	movs	r3, #12
 800dee8:	6033      	str	r3, [r6, #0]
 800deea:	2000      	movs	r0, #0
 800deec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800deee:	f000 fd25 	bl	800e93c <__malloc_lock>
 800def2:	4921      	ldr	r1, [pc, #132]	; (800df78 <_malloc_r+0xac>)
 800def4:	680a      	ldr	r2, [r1, #0]
 800def6:	4614      	mov	r4, r2
 800def8:	b99c      	cbnz	r4, 800df22 <_malloc_r+0x56>
 800defa:	4f20      	ldr	r7, [pc, #128]	; (800df7c <_malloc_r+0xb0>)
 800defc:	683b      	ldr	r3, [r7, #0]
 800defe:	b923      	cbnz	r3, 800df0a <_malloc_r+0x3e>
 800df00:	4621      	mov	r1, r4
 800df02:	4630      	mov	r0, r6
 800df04:	f000 f8ca 	bl	800e09c <_sbrk_r>
 800df08:	6038      	str	r0, [r7, #0]
 800df0a:	4629      	mov	r1, r5
 800df0c:	4630      	mov	r0, r6
 800df0e:	f000 f8c5 	bl	800e09c <_sbrk_r>
 800df12:	1c43      	adds	r3, r0, #1
 800df14:	d123      	bne.n	800df5e <_malloc_r+0x92>
 800df16:	230c      	movs	r3, #12
 800df18:	6033      	str	r3, [r6, #0]
 800df1a:	4630      	mov	r0, r6
 800df1c:	f000 fd14 	bl	800e948 <__malloc_unlock>
 800df20:	e7e3      	b.n	800deea <_malloc_r+0x1e>
 800df22:	6823      	ldr	r3, [r4, #0]
 800df24:	1b5b      	subs	r3, r3, r5
 800df26:	d417      	bmi.n	800df58 <_malloc_r+0x8c>
 800df28:	2b0b      	cmp	r3, #11
 800df2a:	d903      	bls.n	800df34 <_malloc_r+0x68>
 800df2c:	6023      	str	r3, [r4, #0]
 800df2e:	441c      	add	r4, r3
 800df30:	6025      	str	r5, [r4, #0]
 800df32:	e004      	b.n	800df3e <_malloc_r+0x72>
 800df34:	6863      	ldr	r3, [r4, #4]
 800df36:	42a2      	cmp	r2, r4
 800df38:	bf0c      	ite	eq
 800df3a:	600b      	streq	r3, [r1, #0]
 800df3c:	6053      	strne	r3, [r2, #4]
 800df3e:	4630      	mov	r0, r6
 800df40:	f000 fd02 	bl	800e948 <__malloc_unlock>
 800df44:	f104 000b 	add.w	r0, r4, #11
 800df48:	1d23      	adds	r3, r4, #4
 800df4a:	f020 0007 	bic.w	r0, r0, #7
 800df4e:	1ac2      	subs	r2, r0, r3
 800df50:	d0cc      	beq.n	800deec <_malloc_r+0x20>
 800df52:	1a1b      	subs	r3, r3, r0
 800df54:	50a3      	str	r3, [r4, r2]
 800df56:	e7c9      	b.n	800deec <_malloc_r+0x20>
 800df58:	4622      	mov	r2, r4
 800df5a:	6864      	ldr	r4, [r4, #4]
 800df5c:	e7cc      	b.n	800def8 <_malloc_r+0x2c>
 800df5e:	1cc4      	adds	r4, r0, #3
 800df60:	f024 0403 	bic.w	r4, r4, #3
 800df64:	42a0      	cmp	r0, r4
 800df66:	d0e3      	beq.n	800df30 <_malloc_r+0x64>
 800df68:	1a21      	subs	r1, r4, r0
 800df6a:	4630      	mov	r0, r6
 800df6c:	f000 f896 	bl	800e09c <_sbrk_r>
 800df70:	3001      	adds	r0, #1
 800df72:	d1dd      	bne.n	800df30 <_malloc_r+0x64>
 800df74:	e7cf      	b.n	800df16 <_malloc_r+0x4a>
 800df76:	bf00      	nop
 800df78:	20000548 	.word	0x20000548
 800df7c:	2000054c 	.word	0x2000054c

0800df80 <iprintf>:
 800df80:	b40f      	push	{r0, r1, r2, r3}
 800df82:	4b0a      	ldr	r3, [pc, #40]	; (800dfac <iprintf+0x2c>)
 800df84:	b513      	push	{r0, r1, r4, lr}
 800df86:	681c      	ldr	r4, [r3, #0]
 800df88:	b124      	cbz	r4, 800df94 <iprintf+0x14>
 800df8a:	69a3      	ldr	r3, [r4, #24]
 800df8c:	b913      	cbnz	r3, 800df94 <iprintf+0x14>
 800df8e:	4620      	mov	r0, r4
 800df90:	f000 fbb2 	bl	800e6f8 <__sinit>
 800df94:	ab05      	add	r3, sp, #20
 800df96:	9a04      	ldr	r2, [sp, #16]
 800df98:	68a1      	ldr	r1, [r4, #8]
 800df9a:	9301      	str	r3, [sp, #4]
 800df9c:	4620      	mov	r0, r4
 800df9e:	f000 fe5f 	bl	800ec60 <_vfiprintf_r>
 800dfa2:	b002      	add	sp, #8
 800dfa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dfa8:	b004      	add	sp, #16
 800dfaa:	4770      	bx	lr
 800dfac:	2000002c 	.word	0x2000002c

0800dfb0 <_puts_r>:
 800dfb0:	b570      	push	{r4, r5, r6, lr}
 800dfb2:	460e      	mov	r6, r1
 800dfb4:	4605      	mov	r5, r0
 800dfb6:	b118      	cbz	r0, 800dfc0 <_puts_r+0x10>
 800dfb8:	6983      	ldr	r3, [r0, #24]
 800dfba:	b90b      	cbnz	r3, 800dfc0 <_puts_r+0x10>
 800dfbc:	f000 fb9c 	bl	800e6f8 <__sinit>
 800dfc0:	69ab      	ldr	r3, [r5, #24]
 800dfc2:	68ac      	ldr	r4, [r5, #8]
 800dfc4:	b913      	cbnz	r3, 800dfcc <_puts_r+0x1c>
 800dfc6:	4628      	mov	r0, r5
 800dfc8:	f000 fb96 	bl	800e6f8 <__sinit>
 800dfcc:	4b2c      	ldr	r3, [pc, #176]	; (800e080 <_puts_r+0xd0>)
 800dfce:	429c      	cmp	r4, r3
 800dfd0:	d120      	bne.n	800e014 <_puts_r+0x64>
 800dfd2:	686c      	ldr	r4, [r5, #4]
 800dfd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dfd6:	07db      	lsls	r3, r3, #31
 800dfd8:	d405      	bmi.n	800dfe6 <_puts_r+0x36>
 800dfda:	89a3      	ldrh	r3, [r4, #12]
 800dfdc:	0598      	lsls	r0, r3, #22
 800dfde:	d402      	bmi.n	800dfe6 <_puts_r+0x36>
 800dfe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dfe2:	f000 fc44 	bl	800e86e <__retarget_lock_acquire_recursive>
 800dfe6:	89a3      	ldrh	r3, [r4, #12]
 800dfe8:	0719      	lsls	r1, r3, #28
 800dfea:	d51d      	bpl.n	800e028 <_puts_r+0x78>
 800dfec:	6923      	ldr	r3, [r4, #16]
 800dfee:	b1db      	cbz	r3, 800e028 <_puts_r+0x78>
 800dff0:	3e01      	subs	r6, #1
 800dff2:	68a3      	ldr	r3, [r4, #8]
 800dff4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800dff8:	3b01      	subs	r3, #1
 800dffa:	60a3      	str	r3, [r4, #8]
 800dffc:	bb39      	cbnz	r1, 800e04e <_puts_r+0x9e>
 800dffe:	2b00      	cmp	r3, #0
 800e000:	da38      	bge.n	800e074 <_puts_r+0xc4>
 800e002:	4622      	mov	r2, r4
 800e004:	210a      	movs	r1, #10
 800e006:	4628      	mov	r0, r5
 800e008:	f000 f98a 	bl	800e320 <__swbuf_r>
 800e00c:	3001      	adds	r0, #1
 800e00e:	d011      	beq.n	800e034 <_puts_r+0x84>
 800e010:	250a      	movs	r5, #10
 800e012:	e011      	b.n	800e038 <_puts_r+0x88>
 800e014:	4b1b      	ldr	r3, [pc, #108]	; (800e084 <_puts_r+0xd4>)
 800e016:	429c      	cmp	r4, r3
 800e018:	d101      	bne.n	800e01e <_puts_r+0x6e>
 800e01a:	68ac      	ldr	r4, [r5, #8]
 800e01c:	e7da      	b.n	800dfd4 <_puts_r+0x24>
 800e01e:	4b1a      	ldr	r3, [pc, #104]	; (800e088 <_puts_r+0xd8>)
 800e020:	429c      	cmp	r4, r3
 800e022:	bf08      	it	eq
 800e024:	68ec      	ldreq	r4, [r5, #12]
 800e026:	e7d5      	b.n	800dfd4 <_puts_r+0x24>
 800e028:	4621      	mov	r1, r4
 800e02a:	4628      	mov	r0, r5
 800e02c:	f000 f9ca 	bl	800e3c4 <__swsetup_r>
 800e030:	2800      	cmp	r0, #0
 800e032:	d0dd      	beq.n	800dff0 <_puts_r+0x40>
 800e034:	f04f 35ff 	mov.w	r5, #4294967295
 800e038:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e03a:	07da      	lsls	r2, r3, #31
 800e03c:	d405      	bmi.n	800e04a <_puts_r+0x9a>
 800e03e:	89a3      	ldrh	r3, [r4, #12]
 800e040:	059b      	lsls	r3, r3, #22
 800e042:	d402      	bmi.n	800e04a <_puts_r+0x9a>
 800e044:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e046:	f000 fc13 	bl	800e870 <__retarget_lock_release_recursive>
 800e04a:	4628      	mov	r0, r5
 800e04c:	bd70      	pop	{r4, r5, r6, pc}
 800e04e:	2b00      	cmp	r3, #0
 800e050:	da04      	bge.n	800e05c <_puts_r+0xac>
 800e052:	69a2      	ldr	r2, [r4, #24]
 800e054:	429a      	cmp	r2, r3
 800e056:	dc06      	bgt.n	800e066 <_puts_r+0xb6>
 800e058:	290a      	cmp	r1, #10
 800e05a:	d004      	beq.n	800e066 <_puts_r+0xb6>
 800e05c:	6823      	ldr	r3, [r4, #0]
 800e05e:	1c5a      	adds	r2, r3, #1
 800e060:	6022      	str	r2, [r4, #0]
 800e062:	7019      	strb	r1, [r3, #0]
 800e064:	e7c5      	b.n	800dff2 <_puts_r+0x42>
 800e066:	4622      	mov	r2, r4
 800e068:	4628      	mov	r0, r5
 800e06a:	f000 f959 	bl	800e320 <__swbuf_r>
 800e06e:	3001      	adds	r0, #1
 800e070:	d1bf      	bne.n	800dff2 <_puts_r+0x42>
 800e072:	e7df      	b.n	800e034 <_puts_r+0x84>
 800e074:	6823      	ldr	r3, [r4, #0]
 800e076:	250a      	movs	r5, #10
 800e078:	1c5a      	adds	r2, r3, #1
 800e07a:	6022      	str	r2, [r4, #0]
 800e07c:	701d      	strb	r5, [r3, #0]
 800e07e:	e7db      	b.n	800e038 <_puts_r+0x88>
 800e080:	080109a0 	.word	0x080109a0
 800e084:	080109c0 	.word	0x080109c0
 800e088:	08010980 	.word	0x08010980

0800e08c <puts>:
 800e08c:	4b02      	ldr	r3, [pc, #8]	; (800e098 <puts+0xc>)
 800e08e:	4601      	mov	r1, r0
 800e090:	6818      	ldr	r0, [r3, #0]
 800e092:	f7ff bf8d 	b.w	800dfb0 <_puts_r>
 800e096:	bf00      	nop
 800e098:	2000002c 	.word	0x2000002c

0800e09c <_sbrk_r>:
 800e09c:	b538      	push	{r3, r4, r5, lr}
 800e09e:	4d06      	ldr	r5, [pc, #24]	; (800e0b8 <_sbrk_r+0x1c>)
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	4604      	mov	r4, r0
 800e0a4:	4608      	mov	r0, r1
 800e0a6:	602b      	str	r3, [r5, #0]
 800e0a8:	f7f3 fb6a 	bl	8001780 <_sbrk>
 800e0ac:	1c43      	adds	r3, r0, #1
 800e0ae:	d102      	bne.n	800e0b6 <_sbrk_r+0x1a>
 800e0b0:	682b      	ldr	r3, [r5, #0]
 800e0b2:	b103      	cbz	r3, 800e0b6 <_sbrk_r+0x1a>
 800e0b4:	6023      	str	r3, [r4, #0]
 800e0b6:	bd38      	pop	{r3, r4, r5, pc}
 800e0b8:	20004700 	.word	0x20004700

0800e0bc <iscanf>:
 800e0bc:	b40f      	push	{r0, r1, r2, r3}
 800e0be:	4b0a      	ldr	r3, [pc, #40]	; (800e0e8 <iscanf+0x2c>)
 800e0c0:	b513      	push	{r0, r1, r4, lr}
 800e0c2:	681c      	ldr	r4, [r3, #0]
 800e0c4:	b124      	cbz	r4, 800e0d0 <iscanf+0x14>
 800e0c6:	69a3      	ldr	r3, [r4, #24]
 800e0c8:	b913      	cbnz	r3, 800e0d0 <iscanf+0x14>
 800e0ca:	4620      	mov	r0, r4
 800e0cc:	f000 fb14 	bl	800e6f8 <__sinit>
 800e0d0:	ab05      	add	r3, sp, #20
 800e0d2:	9a04      	ldr	r2, [sp, #16]
 800e0d4:	6861      	ldr	r1, [r4, #4]
 800e0d6:	9301      	str	r3, [sp, #4]
 800e0d8:	4620      	mov	r0, r4
 800e0da:	f001 fa29 	bl	800f530 <_vfiscanf_r>
 800e0de:	b002      	add	sp, #8
 800e0e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e0e4:	b004      	add	sp, #16
 800e0e6:	4770      	bx	lr
 800e0e8:	2000002c 	.word	0x2000002c

0800e0ec <setvbuf>:
 800e0ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e0f0:	461d      	mov	r5, r3
 800e0f2:	4b5d      	ldr	r3, [pc, #372]	; (800e268 <setvbuf+0x17c>)
 800e0f4:	681f      	ldr	r7, [r3, #0]
 800e0f6:	4604      	mov	r4, r0
 800e0f8:	460e      	mov	r6, r1
 800e0fa:	4690      	mov	r8, r2
 800e0fc:	b127      	cbz	r7, 800e108 <setvbuf+0x1c>
 800e0fe:	69bb      	ldr	r3, [r7, #24]
 800e100:	b913      	cbnz	r3, 800e108 <setvbuf+0x1c>
 800e102:	4638      	mov	r0, r7
 800e104:	f000 faf8 	bl	800e6f8 <__sinit>
 800e108:	4b58      	ldr	r3, [pc, #352]	; (800e26c <setvbuf+0x180>)
 800e10a:	429c      	cmp	r4, r3
 800e10c:	d167      	bne.n	800e1de <setvbuf+0xf2>
 800e10e:	687c      	ldr	r4, [r7, #4]
 800e110:	f1b8 0f02 	cmp.w	r8, #2
 800e114:	d006      	beq.n	800e124 <setvbuf+0x38>
 800e116:	f1b8 0f01 	cmp.w	r8, #1
 800e11a:	f200 809f 	bhi.w	800e25c <setvbuf+0x170>
 800e11e:	2d00      	cmp	r5, #0
 800e120:	f2c0 809c 	blt.w	800e25c <setvbuf+0x170>
 800e124:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e126:	07db      	lsls	r3, r3, #31
 800e128:	d405      	bmi.n	800e136 <setvbuf+0x4a>
 800e12a:	89a3      	ldrh	r3, [r4, #12]
 800e12c:	0598      	lsls	r0, r3, #22
 800e12e:	d402      	bmi.n	800e136 <setvbuf+0x4a>
 800e130:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e132:	f000 fb9c 	bl	800e86e <__retarget_lock_acquire_recursive>
 800e136:	4621      	mov	r1, r4
 800e138:	4638      	mov	r0, r7
 800e13a:	f000 fa37 	bl	800e5ac <_fflush_r>
 800e13e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e140:	b141      	cbz	r1, 800e154 <setvbuf+0x68>
 800e142:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e146:	4299      	cmp	r1, r3
 800e148:	d002      	beq.n	800e150 <setvbuf+0x64>
 800e14a:	4638      	mov	r0, r7
 800e14c:	f7ff fe6e 	bl	800de2c <_free_r>
 800e150:	2300      	movs	r3, #0
 800e152:	6363      	str	r3, [r4, #52]	; 0x34
 800e154:	2300      	movs	r3, #0
 800e156:	61a3      	str	r3, [r4, #24]
 800e158:	6063      	str	r3, [r4, #4]
 800e15a:	89a3      	ldrh	r3, [r4, #12]
 800e15c:	0619      	lsls	r1, r3, #24
 800e15e:	d503      	bpl.n	800e168 <setvbuf+0x7c>
 800e160:	6921      	ldr	r1, [r4, #16]
 800e162:	4638      	mov	r0, r7
 800e164:	f7ff fe62 	bl	800de2c <_free_r>
 800e168:	89a3      	ldrh	r3, [r4, #12]
 800e16a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800e16e:	f023 0303 	bic.w	r3, r3, #3
 800e172:	f1b8 0f02 	cmp.w	r8, #2
 800e176:	81a3      	strh	r3, [r4, #12]
 800e178:	d06c      	beq.n	800e254 <setvbuf+0x168>
 800e17a:	ab01      	add	r3, sp, #4
 800e17c:	466a      	mov	r2, sp
 800e17e:	4621      	mov	r1, r4
 800e180:	4638      	mov	r0, r7
 800e182:	f000 fb76 	bl	800e872 <__swhatbuf_r>
 800e186:	89a3      	ldrh	r3, [r4, #12]
 800e188:	4318      	orrs	r0, r3
 800e18a:	81a0      	strh	r0, [r4, #12]
 800e18c:	2d00      	cmp	r5, #0
 800e18e:	d130      	bne.n	800e1f2 <setvbuf+0x106>
 800e190:	9d00      	ldr	r5, [sp, #0]
 800e192:	4628      	mov	r0, r5
 800e194:	f7ff fe24 	bl	800dde0 <malloc>
 800e198:	4606      	mov	r6, r0
 800e19a:	2800      	cmp	r0, #0
 800e19c:	d155      	bne.n	800e24a <setvbuf+0x15e>
 800e19e:	f8dd 9000 	ldr.w	r9, [sp]
 800e1a2:	45a9      	cmp	r9, r5
 800e1a4:	d14a      	bne.n	800e23c <setvbuf+0x150>
 800e1a6:	f04f 35ff 	mov.w	r5, #4294967295
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	60a2      	str	r2, [r4, #8]
 800e1ae:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800e1b2:	6022      	str	r2, [r4, #0]
 800e1b4:	6122      	str	r2, [r4, #16]
 800e1b6:	2201      	movs	r2, #1
 800e1b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1bc:	6162      	str	r2, [r4, #20]
 800e1be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e1c0:	f043 0302 	orr.w	r3, r3, #2
 800e1c4:	07d2      	lsls	r2, r2, #31
 800e1c6:	81a3      	strh	r3, [r4, #12]
 800e1c8:	d405      	bmi.n	800e1d6 <setvbuf+0xea>
 800e1ca:	f413 7f00 	tst.w	r3, #512	; 0x200
 800e1ce:	d102      	bne.n	800e1d6 <setvbuf+0xea>
 800e1d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e1d2:	f000 fb4d 	bl	800e870 <__retarget_lock_release_recursive>
 800e1d6:	4628      	mov	r0, r5
 800e1d8:	b003      	add	sp, #12
 800e1da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e1de:	4b24      	ldr	r3, [pc, #144]	; (800e270 <setvbuf+0x184>)
 800e1e0:	429c      	cmp	r4, r3
 800e1e2:	d101      	bne.n	800e1e8 <setvbuf+0xfc>
 800e1e4:	68bc      	ldr	r4, [r7, #8]
 800e1e6:	e793      	b.n	800e110 <setvbuf+0x24>
 800e1e8:	4b22      	ldr	r3, [pc, #136]	; (800e274 <setvbuf+0x188>)
 800e1ea:	429c      	cmp	r4, r3
 800e1ec:	bf08      	it	eq
 800e1ee:	68fc      	ldreq	r4, [r7, #12]
 800e1f0:	e78e      	b.n	800e110 <setvbuf+0x24>
 800e1f2:	2e00      	cmp	r6, #0
 800e1f4:	d0cd      	beq.n	800e192 <setvbuf+0xa6>
 800e1f6:	69bb      	ldr	r3, [r7, #24]
 800e1f8:	b913      	cbnz	r3, 800e200 <setvbuf+0x114>
 800e1fa:	4638      	mov	r0, r7
 800e1fc:	f000 fa7c 	bl	800e6f8 <__sinit>
 800e200:	f1b8 0f01 	cmp.w	r8, #1
 800e204:	bf08      	it	eq
 800e206:	89a3      	ldrheq	r3, [r4, #12]
 800e208:	6026      	str	r6, [r4, #0]
 800e20a:	bf04      	itt	eq
 800e20c:	f043 0301 	orreq.w	r3, r3, #1
 800e210:	81a3      	strheq	r3, [r4, #12]
 800e212:	89a2      	ldrh	r2, [r4, #12]
 800e214:	f012 0308 	ands.w	r3, r2, #8
 800e218:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800e21c:	d01c      	beq.n	800e258 <setvbuf+0x16c>
 800e21e:	07d3      	lsls	r3, r2, #31
 800e220:	bf41      	itttt	mi
 800e222:	2300      	movmi	r3, #0
 800e224:	426d      	negmi	r5, r5
 800e226:	60a3      	strmi	r3, [r4, #8]
 800e228:	61a5      	strmi	r5, [r4, #24]
 800e22a:	bf58      	it	pl
 800e22c:	60a5      	strpl	r5, [r4, #8]
 800e22e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800e230:	f015 0501 	ands.w	r5, r5, #1
 800e234:	d115      	bne.n	800e262 <setvbuf+0x176>
 800e236:	f412 7f00 	tst.w	r2, #512	; 0x200
 800e23a:	e7c8      	b.n	800e1ce <setvbuf+0xe2>
 800e23c:	4648      	mov	r0, r9
 800e23e:	f7ff fdcf 	bl	800dde0 <malloc>
 800e242:	4606      	mov	r6, r0
 800e244:	2800      	cmp	r0, #0
 800e246:	d0ae      	beq.n	800e1a6 <setvbuf+0xba>
 800e248:	464d      	mov	r5, r9
 800e24a:	89a3      	ldrh	r3, [r4, #12]
 800e24c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e250:	81a3      	strh	r3, [r4, #12]
 800e252:	e7d0      	b.n	800e1f6 <setvbuf+0x10a>
 800e254:	2500      	movs	r5, #0
 800e256:	e7a8      	b.n	800e1aa <setvbuf+0xbe>
 800e258:	60a3      	str	r3, [r4, #8]
 800e25a:	e7e8      	b.n	800e22e <setvbuf+0x142>
 800e25c:	f04f 35ff 	mov.w	r5, #4294967295
 800e260:	e7b9      	b.n	800e1d6 <setvbuf+0xea>
 800e262:	2500      	movs	r5, #0
 800e264:	e7b7      	b.n	800e1d6 <setvbuf+0xea>
 800e266:	bf00      	nop
 800e268:	2000002c 	.word	0x2000002c
 800e26c:	080109a0 	.word	0x080109a0
 800e270:	080109c0 	.word	0x080109c0
 800e274:	08010980 	.word	0x08010980

0800e278 <sniprintf>:
 800e278:	b40c      	push	{r2, r3}
 800e27a:	b530      	push	{r4, r5, lr}
 800e27c:	4b17      	ldr	r3, [pc, #92]	; (800e2dc <sniprintf+0x64>)
 800e27e:	1e0c      	subs	r4, r1, #0
 800e280:	681d      	ldr	r5, [r3, #0]
 800e282:	b09d      	sub	sp, #116	; 0x74
 800e284:	da08      	bge.n	800e298 <sniprintf+0x20>
 800e286:	238b      	movs	r3, #139	; 0x8b
 800e288:	602b      	str	r3, [r5, #0]
 800e28a:	f04f 30ff 	mov.w	r0, #4294967295
 800e28e:	b01d      	add	sp, #116	; 0x74
 800e290:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e294:	b002      	add	sp, #8
 800e296:	4770      	bx	lr
 800e298:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e29c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e2a0:	bf14      	ite	ne
 800e2a2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e2a6:	4623      	moveq	r3, r4
 800e2a8:	9304      	str	r3, [sp, #16]
 800e2aa:	9307      	str	r3, [sp, #28]
 800e2ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e2b0:	9002      	str	r0, [sp, #8]
 800e2b2:	9006      	str	r0, [sp, #24]
 800e2b4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e2b8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e2ba:	ab21      	add	r3, sp, #132	; 0x84
 800e2bc:	a902      	add	r1, sp, #8
 800e2be:	4628      	mov	r0, r5
 800e2c0:	9301      	str	r3, [sp, #4]
 800e2c2:	f000 fba3 	bl	800ea0c <_svfiprintf_r>
 800e2c6:	1c43      	adds	r3, r0, #1
 800e2c8:	bfbc      	itt	lt
 800e2ca:	238b      	movlt	r3, #139	; 0x8b
 800e2cc:	602b      	strlt	r3, [r5, #0]
 800e2ce:	2c00      	cmp	r4, #0
 800e2d0:	d0dd      	beq.n	800e28e <sniprintf+0x16>
 800e2d2:	9b02      	ldr	r3, [sp, #8]
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	701a      	strb	r2, [r3, #0]
 800e2d8:	e7d9      	b.n	800e28e <sniprintf+0x16>
 800e2da:	bf00      	nop
 800e2dc:	2000002c 	.word	0x2000002c

0800e2e0 <siprintf>:
 800e2e0:	b40e      	push	{r1, r2, r3}
 800e2e2:	b500      	push	{lr}
 800e2e4:	b09c      	sub	sp, #112	; 0x70
 800e2e6:	ab1d      	add	r3, sp, #116	; 0x74
 800e2e8:	9002      	str	r0, [sp, #8]
 800e2ea:	9006      	str	r0, [sp, #24]
 800e2ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e2f0:	4809      	ldr	r0, [pc, #36]	; (800e318 <siprintf+0x38>)
 800e2f2:	9107      	str	r1, [sp, #28]
 800e2f4:	9104      	str	r1, [sp, #16]
 800e2f6:	4909      	ldr	r1, [pc, #36]	; (800e31c <siprintf+0x3c>)
 800e2f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e2fc:	9105      	str	r1, [sp, #20]
 800e2fe:	6800      	ldr	r0, [r0, #0]
 800e300:	9301      	str	r3, [sp, #4]
 800e302:	a902      	add	r1, sp, #8
 800e304:	f000 fb82 	bl	800ea0c <_svfiprintf_r>
 800e308:	9b02      	ldr	r3, [sp, #8]
 800e30a:	2200      	movs	r2, #0
 800e30c:	701a      	strb	r2, [r3, #0]
 800e30e:	b01c      	add	sp, #112	; 0x70
 800e310:	f85d eb04 	ldr.w	lr, [sp], #4
 800e314:	b003      	add	sp, #12
 800e316:	4770      	bx	lr
 800e318:	2000002c 	.word	0x2000002c
 800e31c:	ffff0208 	.word	0xffff0208

0800e320 <__swbuf_r>:
 800e320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e322:	460e      	mov	r6, r1
 800e324:	4614      	mov	r4, r2
 800e326:	4605      	mov	r5, r0
 800e328:	b118      	cbz	r0, 800e332 <__swbuf_r+0x12>
 800e32a:	6983      	ldr	r3, [r0, #24]
 800e32c:	b90b      	cbnz	r3, 800e332 <__swbuf_r+0x12>
 800e32e:	f000 f9e3 	bl	800e6f8 <__sinit>
 800e332:	4b21      	ldr	r3, [pc, #132]	; (800e3b8 <__swbuf_r+0x98>)
 800e334:	429c      	cmp	r4, r3
 800e336:	d12b      	bne.n	800e390 <__swbuf_r+0x70>
 800e338:	686c      	ldr	r4, [r5, #4]
 800e33a:	69a3      	ldr	r3, [r4, #24]
 800e33c:	60a3      	str	r3, [r4, #8]
 800e33e:	89a3      	ldrh	r3, [r4, #12]
 800e340:	071a      	lsls	r2, r3, #28
 800e342:	d52f      	bpl.n	800e3a4 <__swbuf_r+0x84>
 800e344:	6923      	ldr	r3, [r4, #16]
 800e346:	b36b      	cbz	r3, 800e3a4 <__swbuf_r+0x84>
 800e348:	6923      	ldr	r3, [r4, #16]
 800e34a:	6820      	ldr	r0, [r4, #0]
 800e34c:	1ac0      	subs	r0, r0, r3
 800e34e:	6963      	ldr	r3, [r4, #20]
 800e350:	b2f6      	uxtb	r6, r6
 800e352:	4283      	cmp	r3, r0
 800e354:	4637      	mov	r7, r6
 800e356:	dc04      	bgt.n	800e362 <__swbuf_r+0x42>
 800e358:	4621      	mov	r1, r4
 800e35a:	4628      	mov	r0, r5
 800e35c:	f000 f926 	bl	800e5ac <_fflush_r>
 800e360:	bb30      	cbnz	r0, 800e3b0 <__swbuf_r+0x90>
 800e362:	68a3      	ldr	r3, [r4, #8]
 800e364:	3b01      	subs	r3, #1
 800e366:	60a3      	str	r3, [r4, #8]
 800e368:	6823      	ldr	r3, [r4, #0]
 800e36a:	1c5a      	adds	r2, r3, #1
 800e36c:	6022      	str	r2, [r4, #0]
 800e36e:	701e      	strb	r6, [r3, #0]
 800e370:	6963      	ldr	r3, [r4, #20]
 800e372:	3001      	adds	r0, #1
 800e374:	4283      	cmp	r3, r0
 800e376:	d004      	beq.n	800e382 <__swbuf_r+0x62>
 800e378:	89a3      	ldrh	r3, [r4, #12]
 800e37a:	07db      	lsls	r3, r3, #31
 800e37c:	d506      	bpl.n	800e38c <__swbuf_r+0x6c>
 800e37e:	2e0a      	cmp	r6, #10
 800e380:	d104      	bne.n	800e38c <__swbuf_r+0x6c>
 800e382:	4621      	mov	r1, r4
 800e384:	4628      	mov	r0, r5
 800e386:	f000 f911 	bl	800e5ac <_fflush_r>
 800e38a:	b988      	cbnz	r0, 800e3b0 <__swbuf_r+0x90>
 800e38c:	4638      	mov	r0, r7
 800e38e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e390:	4b0a      	ldr	r3, [pc, #40]	; (800e3bc <__swbuf_r+0x9c>)
 800e392:	429c      	cmp	r4, r3
 800e394:	d101      	bne.n	800e39a <__swbuf_r+0x7a>
 800e396:	68ac      	ldr	r4, [r5, #8]
 800e398:	e7cf      	b.n	800e33a <__swbuf_r+0x1a>
 800e39a:	4b09      	ldr	r3, [pc, #36]	; (800e3c0 <__swbuf_r+0xa0>)
 800e39c:	429c      	cmp	r4, r3
 800e39e:	bf08      	it	eq
 800e3a0:	68ec      	ldreq	r4, [r5, #12]
 800e3a2:	e7ca      	b.n	800e33a <__swbuf_r+0x1a>
 800e3a4:	4621      	mov	r1, r4
 800e3a6:	4628      	mov	r0, r5
 800e3a8:	f000 f80c 	bl	800e3c4 <__swsetup_r>
 800e3ac:	2800      	cmp	r0, #0
 800e3ae:	d0cb      	beq.n	800e348 <__swbuf_r+0x28>
 800e3b0:	f04f 37ff 	mov.w	r7, #4294967295
 800e3b4:	e7ea      	b.n	800e38c <__swbuf_r+0x6c>
 800e3b6:	bf00      	nop
 800e3b8:	080109a0 	.word	0x080109a0
 800e3bc:	080109c0 	.word	0x080109c0
 800e3c0:	08010980 	.word	0x08010980

0800e3c4 <__swsetup_r>:
 800e3c4:	4b32      	ldr	r3, [pc, #200]	; (800e490 <__swsetup_r+0xcc>)
 800e3c6:	b570      	push	{r4, r5, r6, lr}
 800e3c8:	681d      	ldr	r5, [r3, #0]
 800e3ca:	4606      	mov	r6, r0
 800e3cc:	460c      	mov	r4, r1
 800e3ce:	b125      	cbz	r5, 800e3da <__swsetup_r+0x16>
 800e3d0:	69ab      	ldr	r3, [r5, #24]
 800e3d2:	b913      	cbnz	r3, 800e3da <__swsetup_r+0x16>
 800e3d4:	4628      	mov	r0, r5
 800e3d6:	f000 f98f 	bl	800e6f8 <__sinit>
 800e3da:	4b2e      	ldr	r3, [pc, #184]	; (800e494 <__swsetup_r+0xd0>)
 800e3dc:	429c      	cmp	r4, r3
 800e3de:	d10f      	bne.n	800e400 <__swsetup_r+0x3c>
 800e3e0:	686c      	ldr	r4, [r5, #4]
 800e3e2:	89a3      	ldrh	r3, [r4, #12]
 800e3e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e3e8:	0719      	lsls	r1, r3, #28
 800e3ea:	d42c      	bmi.n	800e446 <__swsetup_r+0x82>
 800e3ec:	06dd      	lsls	r5, r3, #27
 800e3ee:	d411      	bmi.n	800e414 <__swsetup_r+0x50>
 800e3f0:	2309      	movs	r3, #9
 800e3f2:	6033      	str	r3, [r6, #0]
 800e3f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e3f8:	81a3      	strh	r3, [r4, #12]
 800e3fa:	f04f 30ff 	mov.w	r0, #4294967295
 800e3fe:	e03e      	b.n	800e47e <__swsetup_r+0xba>
 800e400:	4b25      	ldr	r3, [pc, #148]	; (800e498 <__swsetup_r+0xd4>)
 800e402:	429c      	cmp	r4, r3
 800e404:	d101      	bne.n	800e40a <__swsetup_r+0x46>
 800e406:	68ac      	ldr	r4, [r5, #8]
 800e408:	e7eb      	b.n	800e3e2 <__swsetup_r+0x1e>
 800e40a:	4b24      	ldr	r3, [pc, #144]	; (800e49c <__swsetup_r+0xd8>)
 800e40c:	429c      	cmp	r4, r3
 800e40e:	bf08      	it	eq
 800e410:	68ec      	ldreq	r4, [r5, #12]
 800e412:	e7e6      	b.n	800e3e2 <__swsetup_r+0x1e>
 800e414:	0758      	lsls	r0, r3, #29
 800e416:	d512      	bpl.n	800e43e <__swsetup_r+0x7a>
 800e418:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e41a:	b141      	cbz	r1, 800e42e <__swsetup_r+0x6a>
 800e41c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e420:	4299      	cmp	r1, r3
 800e422:	d002      	beq.n	800e42a <__swsetup_r+0x66>
 800e424:	4630      	mov	r0, r6
 800e426:	f7ff fd01 	bl	800de2c <_free_r>
 800e42a:	2300      	movs	r3, #0
 800e42c:	6363      	str	r3, [r4, #52]	; 0x34
 800e42e:	89a3      	ldrh	r3, [r4, #12]
 800e430:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e434:	81a3      	strh	r3, [r4, #12]
 800e436:	2300      	movs	r3, #0
 800e438:	6063      	str	r3, [r4, #4]
 800e43a:	6923      	ldr	r3, [r4, #16]
 800e43c:	6023      	str	r3, [r4, #0]
 800e43e:	89a3      	ldrh	r3, [r4, #12]
 800e440:	f043 0308 	orr.w	r3, r3, #8
 800e444:	81a3      	strh	r3, [r4, #12]
 800e446:	6923      	ldr	r3, [r4, #16]
 800e448:	b94b      	cbnz	r3, 800e45e <__swsetup_r+0x9a>
 800e44a:	89a3      	ldrh	r3, [r4, #12]
 800e44c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e454:	d003      	beq.n	800e45e <__swsetup_r+0x9a>
 800e456:	4621      	mov	r1, r4
 800e458:	4630      	mov	r0, r6
 800e45a:	f000 fa2f 	bl	800e8bc <__smakebuf_r>
 800e45e:	89a0      	ldrh	r0, [r4, #12]
 800e460:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e464:	f010 0301 	ands.w	r3, r0, #1
 800e468:	d00a      	beq.n	800e480 <__swsetup_r+0xbc>
 800e46a:	2300      	movs	r3, #0
 800e46c:	60a3      	str	r3, [r4, #8]
 800e46e:	6963      	ldr	r3, [r4, #20]
 800e470:	425b      	negs	r3, r3
 800e472:	61a3      	str	r3, [r4, #24]
 800e474:	6923      	ldr	r3, [r4, #16]
 800e476:	b943      	cbnz	r3, 800e48a <__swsetup_r+0xc6>
 800e478:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e47c:	d1ba      	bne.n	800e3f4 <__swsetup_r+0x30>
 800e47e:	bd70      	pop	{r4, r5, r6, pc}
 800e480:	0781      	lsls	r1, r0, #30
 800e482:	bf58      	it	pl
 800e484:	6963      	ldrpl	r3, [r4, #20]
 800e486:	60a3      	str	r3, [r4, #8]
 800e488:	e7f4      	b.n	800e474 <__swsetup_r+0xb0>
 800e48a:	2000      	movs	r0, #0
 800e48c:	e7f7      	b.n	800e47e <__swsetup_r+0xba>
 800e48e:	bf00      	nop
 800e490:	2000002c 	.word	0x2000002c
 800e494:	080109a0 	.word	0x080109a0
 800e498:	080109c0 	.word	0x080109c0
 800e49c:	08010980 	.word	0x08010980

0800e4a0 <__sflush_r>:
 800e4a0:	898a      	ldrh	r2, [r1, #12]
 800e4a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4a6:	4605      	mov	r5, r0
 800e4a8:	0710      	lsls	r0, r2, #28
 800e4aa:	460c      	mov	r4, r1
 800e4ac:	d458      	bmi.n	800e560 <__sflush_r+0xc0>
 800e4ae:	684b      	ldr	r3, [r1, #4]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	dc05      	bgt.n	800e4c0 <__sflush_r+0x20>
 800e4b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	dc02      	bgt.n	800e4c0 <__sflush_r+0x20>
 800e4ba:	2000      	movs	r0, #0
 800e4bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e4c2:	2e00      	cmp	r6, #0
 800e4c4:	d0f9      	beq.n	800e4ba <__sflush_r+0x1a>
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e4cc:	682f      	ldr	r7, [r5, #0]
 800e4ce:	602b      	str	r3, [r5, #0]
 800e4d0:	d032      	beq.n	800e538 <__sflush_r+0x98>
 800e4d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e4d4:	89a3      	ldrh	r3, [r4, #12]
 800e4d6:	075a      	lsls	r2, r3, #29
 800e4d8:	d505      	bpl.n	800e4e6 <__sflush_r+0x46>
 800e4da:	6863      	ldr	r3, [r4, #4]
 800e4dc:	1ac0      	subs	r0, r0, r3
 800e4de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e4e0:	b10b      	cbz	r3, 800e4e6 <__sflush_r+0x46>
 800e4e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e4e4:	1ac0      	subs	r0, r0, r3
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	4602      	mov	r2, r0
 800e4ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e4ec:	6a21      	ldr	r1, [r4, #32]
 800e4ee:	4628      	mov	r0, r5
 800e4f0:	47b0      	blx	r6
 800e4f2:	1c43      	adds	r3, r0, #1
 800e4f4:	89a3      	ldrh	r3, [r4, #12]
 800e4f6:	d106      	bne.n	800e506 <__sflush_r+0x66>
 800e4f8:	6829      	ldr	r1, [r5, #0]
 800e4fa:	291d      	cmp	r1, #29
 800e4fc:	d82c      	bhi.n	800e558 <__sflush_r+0xb8>
 800e4fe:	4a2a      	ldr	r2, [pc, #168]	; (800e5a8 <__sflush_r+0x108>)
 800e500:	40ca      	lsrs	r2, r1
 800e502:	07d6      	lsls	r6, r2, #31
 800e504:	d528      	bpl.n	800e558 <__sflush_r+0xb8>
 800e506:	2200      	movs	r2, #0
 800e508:	6062      	str	r2, [r4, #4]
 800e50a:	04d9      	lsls	r1, r3, #19
 800e50c:	6922      	ldr	r2, [r4, #16]
 800e50e:	6022      	str	r2, [r4, #0]
 800e510:	d504      	bpl.n	800e51c <__sflush_r+0x7c>
 800e512:	1c42      	adds	r2, r0, #1
 800e514:	d101      	bne.n	800e51a <__sflush_r+0x7a>
 800e516:	682b      	ldr	r3, [r5, #0]
 800e518:	b903      	cbnz	r3, 800e51c <__sflush_r+0x7c>
 800e51a:	6560      	str	r0, [r4, #84]	; 0x54
 800e51c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e51e:	602f      	str	r7, [r5, #0]
 800e520:	2900      	cmp	r1, #0
 800e522:	d0ca      	beq.n	800e4ba <__sflush_r+0x1a>
 800e524:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e528:	4299      	cmp	r1, r3
 800e52a:	d002      	beq.n	800e532 <__sflush_r+0x92>
 800e52c:	4628      	mov	r0, r5
 800e52e:	f7ff fc7d 	bl	800de2c <_free_r>
 800e532:	2000      	movs	r0, #0
 800e534:	6360      	str	r0, [r4, #52]	; 0x34
 800e536:	e7c1      	b.n	800e4bc <__sflush_r+0x1c>
 800e538:	6a21      	ldr	r1, [r4, #32]
 800e53a:	2301      	movs	r3, #1
 800e53c:	4628      	mov	r0, r5
 800e53e:	47b0      	blx	r6
 800e540:	1c41      	adds	r1, r0, #1
 800e542:	d1c7      	bne.n	800e4d4 <__sflush_r+0x34>
 800e544:	682b      	ldr	r3, [r5, #0]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d0c4      	beq.n	800e4d4 <__sflush_r+0x34>
 800e54a:	2b1d      	cmp	r3, #29
 800e54c:	d001      	beq.n	800e552 <__sflush_r+0xb2>
 800e54e:	2b16      	cmp	r3, #22
 800e550:	d101      	bne.n	800e556 <__sflush_r+0xb6>
 800e552:	602f      	str	r7, [r5, #0]
 800e554:	e7b1      	b.n	800e4ba <__sflush_r+0x1a>
 800e556:	89a3      	ldrh	r3, [r4, #12]
 800e558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e55c:	81a3      	strh	r3, [r4, #12]
 800e55e:	e7ad      	b.n	800e4bc <__sflush_r+0x1c>
 800e560:	690f      	ldr	r7, [r1, #16]
 800e562:	2f00      	cmp	r7, #0
 800e564:	d0a9      	beq.n	800e4ba <__sflush_r+0x1a>
 800e566:	0793      	lsls	r3, r2, #30
 800e568:	680e      	ldr	r6, [r1, #0]
 800e56a:	bf08      	it	eq
 800e56c:	694b      	ldreq	r3, [r1, #20]
 800e56e:	600f      	str	r7, [r1, #0]
 800e570:	bf18      	it	ne
 800e572:	2300      	movne	r3, #0
 800e574:	eba6 0807 	sub.w	r8, r6, r7
 800e578:	608b      	str	r3, [r1, #8]
 800e57a:	f1b8 0f00 	cmp.w	r8, #0
 800e57e:	dd9c      	ble.n	800e4ba <__sflush_r+0x1a>
 800e580:	6a21      	ldr	r1, [r4, #32]
 800e582:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e584:	4643      	mov	r3, r8
 800e586:	463a      	mov	r2, r7
 800e588:	4628      	mov	r0, r5
 800e58a:	47b0      	blx	r6
 800e58c:	2800      	cmp	r0, #0
 800e58e:	dc06      	bgt.n	800e59e <__sflush_r+0xfe>
 800e590:	89a3      	ldrh	r3, [r4, #12]
 800e592:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e596:	81a3      	strh	r3, [r4, #12]
 800e598:	f04f 30ff 	mov.w	r0, #4294967295
 800e59c:	e78e      	b.n	800e4bc <__sflush_r+0x1c>
 800e59e:	4407      	add	r7, r0
 800e5a0:	eba8 0800 	sub.w	r8, r8, r0
 800e5a4:	e7e9      	b.n	800e57a <__sflush_r+0xda>
 800e5a6:	bf00      	nop
 800e5a8:	20400001 	.word	0x20400001

0800e5ac <_fflush_r>:
 800e5ac:	b538      	push	{r3, r4, r5, lr}
 800e5ae:	690b      	ldr	r3, [r1, #16]
 800e5b0:	4605      	mov	r5, r0
 800e5b2:	460c      	mov	r4, r1
 800e5b4:	b913      	cbnz	r3, 800e5bc <_fflush_r+0x10>
 800e5b6:	2500      	movs	r5, #0
 800e5b8:	4628      	mov	r0, r5
 800e5ba:	bd38      	pop	{r3, r4, r5, pc}
 800e5bc:	b118      	cbz	r0, 800e5c6 <_fflush_r+0x1a>
 800e5be:	6983      	ldr	r3, [r0, #24]
 800e5c0:	b90b      	cbnz	r3, 800e5c6 <_fflush_r+0x1a>
 800e5c2:	f000 f899 	bl	800e6f8 <__sinit>
 800e5c6:	4b14      	ldr	r3, [pc, #80]	; (800e618 <_fflush_r+0x6c>)
 800e5c8:	429c      	cmp	r4, r3
 800e5ca:	d11b      	bne.n	800e604 <_fflush_r+0x58>
 800e5cc:	686c      	ldr	r4, [r5, #4]
 800e5ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d0ef      	beq.n	800e5b6 <_fflush_r+0xa>
 800e5d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e5d8:	07d0      	lsls	r0, r2, #31
 800e5da:	d404      	bmi.n	800e5e6 <_fflush_r+0x3a>
 800e5dc:	0599      	lsls	r1, r3, #22
 800e5de:	d402      	bmi.n	800e5e6 <_fflush_r+0x3a>
 800e5e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e5e2:	f000 f944 	bl	800e86e <__retarget_lock_acquire_recursive>
 800e5e6:	4628      	mov	r0, r5
 800e5e8:	4621      	mov	r1, r4
 800e5ea:	f7ff ff59 	bl	800e4a0 <__sflush_r>
 800e5ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e5f0:	07da      	lsls	r2, r3, #31
 800e5f2:	4605      	mov	r5, r0
 800e5f4:	d4e0      	bmi.n	800e5b8 <_fflush_r+0xc>
 800e5f6:	89a3      	ldrh	r3, [r4, #12]
 800e5f8:	059b      	lsls	r3, r3, #22
 800e5fa:	d4dd      	bmi.n	800e5b8 <_fflush_r+0xc>
 800e5fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e5fe:	f000 f937 	bl	800e870 <__retarget_lock_release_recursive>
 800e602:	e7d9      	b.n	800e5b8 <_fflush_r+0xc>
 800e604:	4b05      	ldr	r3, [pc, #20]	; (800e61c <_fflush_r+0x70>)
 800e606:	429c      	cmp	r4, r3
 800e608:	d101      	bne.n	800e60e <_fflush_r+0x62>
 800e60a:	68ac      	ldr	r4, [r5, #8]
 800e60c:	e7df      	b.n	800e5ce <_fflush_r+0x22>
 800e60e:	4b04      	ldr	r3, [pc, #16]	; (800e620 <_fflush_r+0x74>)
 800e610:	429c      	cmp	r4, r3
 800e612:	bf08      	it	eq
 800e614:	68ec      	ldreq	r4, [r5, #12]
 800e616:	e7da      	b.n	800e5ce <_fflush_r+0x22>
 800e618:	080109a0 	.word	0x080109a0
 800e61c:	080109c0 	.word	0x080109c0
 800e620:	08010980 	.word	0x08010980

0800e624 <fflush>:
 800e624:	4601      	mov	r1, r0
 800e626:	b920      	cbnz	r0, 800e632 <fflush+0xe>
 800e628:	4b04      	ldr	r3, [pc, #16]	; (800e63c <fflush+0x18>)
 800e62a:	4905      	ldr	r1, [pc, #20]	; (800e640 <fflush+0x1c>)
 800e62c:	6818      	ldr	r0, [r3, #0]
 800e62e:	f000 b8fe 	b.w	800e82e <_fwalk_reent>
 800e632:	4b04      	ldr	r3, [pc, #16]	; (800e644 <fflush+0x20>)
 800e634:	6818      	ldr	r0, [r3, #0]
 800e636:	f7ff bfb9 	b.w	800e5ac <_fflush_r>
 800e63a:	bf00      	nop
 800e63c:	0801097c 	.word	0x0801097c
 800e640:	0800e5ad 	.word	0x0800e5ad
 800e644:	2000002c 	.word	0x2000002c

0800e648 <std>:
 800e648:	2300      	movs	r3, #0
 800e64a:	b510      	push	{r4, lr}
 800e64c:	4604      	mov	r4, r0
 800e64e:	e9c0 3300 	strd	r3, r3, [r0]
 800e652:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e656:	6083      	str	r3, [r0, #8]
 800e658:	8181      	strh	r1, [r0, #12]
 800e65a:	6643      	str	r3, [r0, #100]	; 0x64
 800e65c:	81c2      	strh	r2, [r0, #14]
 800e65e:	6183      	str	r3, [r0, #24]
 800e660:	4619      	mov	r1, r3
 800e662:	2208      	movs	r2, #8
 800e664:	305c      	adds	r0, #92	; 0x5c
 800e666:	f7ff fbd9 	bl	800de1c <memset>
 800e66a:	4b05      	ldr	r3, [pc, #20]	; (800e680 <std+0x38>)
 800e66c:	6263      	str	r3, [r4, #36]	; 0x24
 800e66e:	4b05      	ldr	r3, [pc, #20]	; (800e684 <std+0x3c>)
 800e670:	62a3      	str	r3, [r4, #40]	; 0x28
 800e672:	4b05      	ldr	r3, [pc, #20]	; (800e688 <std+0x40>)
 800e674:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e676:	4b05      	ldr	r3, [pc, #20]	; (800e68c <std+0x44>)
 800e678:	6224      	str	r4, [r4, #32]
 800e67a:	6323      	str	r3, [r4, #48]	; 0x30
 800e67c:	bd10      	pop	{r4, pc}
 800e67e:	bf00      	nop
 800e680:	0800f9b5 	.word	0x0800f9b5
 800e684:	0800f9d7 	.word	0x0800f9d7
 800e688:	0800fa0f 	.word	0x0800fa0f
 800e68c:	0800fa33 	.word	0x0800fa33

0800e690 <_cleanup_r>:
 800e690:	4901      	ldr	r1, [pc, #4]	; (800e698 <_cleanup_r+0x8>)
 800e692:	f000 b8cc 	b.w	800e82e <_fwalk_reent>
 800e696:	bf00      	nop
 800e698:	0800e5ad 	.word	0x0800e5ad

0800e69c <__sfmoreglue>:
 800e69c:	b570      	push	{r4, r5, r6, lr}
 800e69e:	1e4a      	subs	r2, r1, #1
 800e6a0:	2568      	movs	r5, #104	; 0x68
 800e6a2:	4355      	muls	r5, r2
 800e6a4:	460e      	mov	r6, r1
 800e6a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e6aa:	f7ff fc0f 	bl	800decc <_malloc_r>
 800e6ae:	4604      	mov	r4, r0
 800e6b0:	b140      	cbz	r0, 800e6c4 <__sfmoreglue+0x28>
 800e6b2:	2100      	movs	r1, #0
 800e6b4:	e9c0 1600 	strd	r1, r6, [r0]
 800e6b8:	300c      	adds	r0, #12
 800e6ba:	60a0      	str	r0, [r4, #8]
 800e6bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e6c0:	f7ff fbac 	bl	800de1c <memset>
 800e6c4:	4620      	mov	r0, r4
 800e6c6:	bd70      	pop	{r4, r5, r6, pc}

0800e6c8 <__sfp_lock_acquire>:
 800e6c8:	4801      	ldr	r0, [pc, #4]	; (800e6d0 <__sfp_lock_acquire+0x8>)
 800e6ca:	f000 b8d0 	b.w	800e86e <__retarget_lock_acquire_recursive>
 800e6ce:	bf00      	nop
 800e6d0:	200046fc 	.word	0x200046fc

0800e6d4 <__sfp_lock_release>:
 800e6d4:	4801      	ldr	r0, [pc, #4]	; (800e6dc <__sfp_lock_release+0x8>)
 800e6d6:	f000 b8cb 	b.w	800e870 <__retarget_lock_release_recursive>
 800e6da:	bf00      	nop
 800e6dc:	200046fc 	.word	0x200046fc

0800e6e0 <__sinit_lock_acquire>:
 800e6e0:	4801      	ldr	r0, [pc, #4]	; (800e6e8 <__sinit_lock_acquire+0x8>)
 800e6e2:	f000 b8c4 	b.w	800e86e <__retarget_lock_acquire_recursive>
 800e6e6:	bf00      	nop
 800e6e8:	200046f7 	.word	0x200046f7

0800e6ec <__sinit_lock_release>:
 800e6ec:	4801      	ldr	r0, [pc, #4]	; (800e6f4 <__sinit_lock_release+0x8>)
 800e6ee:	f000 b8bf 	b.w	800e870 <__retarget_lock_release_recursive>
 800e6f2:	bf00      	nop
 800e6f4:	200046f7 	.word	0x200046f7

0800e6f8 <__sinit>:
 800e6f8:	b510      	push	{r4, lr}
 800e6fa:	4604      	mov	r4, r0
 800e6fc:	f7ff fff0 	bl	800e6e0 <__sinit_lock_acquire>
 800e700:	69a3      	ldr	r3, [r4, #24]
 800e702:	b11b      	cbz	r3, 800e70c <__sinit+0x14>
 800e704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e708:	f7ff bff0 	b.w	800e6ec <__sinit_lock_release>
 800e70c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e710:	6523      	str	r3, [r4, #80]	; 0x50
 800e712:	4b13      	ldr	r3, [pc, #76]	; (800e760 <__sinit+0x68>)
 800e714:	4a13      	ldr	r2, [pc, #76]	; (800e764 <__sinit+0x6c>)
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	62a2      	str	r2, [r4, #40]	; 0x28
 800e71a:	42a3      	cmp	r3, r4
 800e71c:	bf04      	itt	eq
 800e71e:	2301      	moveq	r3, #1
 800e720:	61a3      	streq	r3, [r4, #24]
 800e722:	4620      	mov	r0, r4
 800e724:	f000 f820 	bl	800e768 <__sfp>
 800e728:	6060      	str	r0, [r4, #4]
 800e72a:	4620      	mov	r0, r4
 800e72c:	f000 f81c 	bl	800e768 <__sfp>
 800e730:	60a0      	str	r0, [r4, #8]
 800e732:	4620      	mov	r0, r4
 800e734:	f000 f818 	bl	800e768 <__sfp>
 800e738:	2200      	movs	r2, #0
 800e73a:	60e0      	str	r0, [r4, #12]
 800e73c:	2104      	movs	r1, #4
 800e73e:	6860      	ldr	r0, [r4, #4]
 800e740:	f7ff ff82 	bl	800e648 <std>
 800e744:	68a0      	ldr	r0, [r4, #8]
 800e746:	2201      	movs	r2, #1
 800e748:	2109      	movs	r1, #9
 800e74a:	f7ff ff7d 	bl	800e648 <std>
 800e74e:	68e0      	ldr	r0, [r4, #12]
 800e750:	2202      	movs	r2, #2
 800e752:	2112      	movs	r1, #18
 800e754:	f7ff ff78 	bl	800e648 <std>
 800e758:	2301      	movs	r3, #1
 800e75a:	61a3      	str	r3, [r4, #24]
 800e75c:	e7d2      	b.n	800e704 <__sinit+0xc>
 800e75e:	bf00      	nop
 800e760:	0801097c 	.word	0x0801097c
 800e764:	0800e691 	.word	0x0800e691

0800e768 <__sfp>:
 800e768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e76a:	4607      	mov	r7, r0
 800e76c:	f7ff ffac 	bl	800e6c8 <__sfp_lock_acquire>
 800e770:	4b1e      	ldr	r3, [pc, #120]	; (800e7ec <__sfp+0x84>)
 800e772:	681e      	ldr	r6, [r3, #0]
 800e774:	69b3      	ldr	r3, [r6, #24]
 800e776:	b913      	cbnz	r3, 800e77e <__sfp+0x16>
 800e778:	4630      	mov	r0, r6
 800e77a:	f7ff ffbd 	bl	800e6f8 <__sinit>
 800e77e:	3648      	adds	r6, #72	; 0x48
 800e780:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e784:	3b01      	subs	r3, #1
 800e786:	d503      	bpl.n	800e790 <__sfp+0x28>
 800e788:	6833      	ldr	r3, [r6, #0]
 800e78a:	b30b      	cbz	r3, 800e7d0 <__sfp+0x68>
 800e78c:	6836      	ldr	r6, [r6, #0]
 800e78e:	e7f7      	b.n	800e780 <__sfp+0x18>
 800e790:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e794:	b9d5      	cbnz	r5, 800e7cc <__sfp+0x64>
 800e796:	4b16      	ldr	r3, [pc, #88]	; (800e7f0 <__sfp+0x88>)
 800e798:	60e3      	str	r3, [r4, #12]
 800e79a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e79e:	6665      	str	r5, [r4, #100]	; 0x64
 800e7a0:	f000 f864 	bl	800e86c <__retarget_lock_init_recursive>
 800e7a4:	f7ff ff96 	bl	800e6d4 <__sfp_lock_release>
 800e7a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e7ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e7b0:	6025      	str	r5, [r4, #0]
 800e7b2:	61a5      	str	r5, [r4, #24]
 800e7b4:	2208      	movs	r2, #8
 800e7b6:	4629      	mov	r1, r5
 800e7b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e7bc:	f7ff fb2e 	bl	800de1c <memset>
 800e7c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e7c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e7c8:	4620      	mov	r0, r4
 800e7ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7cc:	3468      	adds	r4, #104	; 0x68
 800e7ce:	e7d9      	b.n	800e784 <__sfp+0x1c>
 800e7d0:	2104      	movs	r1, #4
 800e7d2:	4638      	mov	r0, r7
 800e7d4:	f7ff ff62 	bl	800e69c <__sfmoreglue>
 800e7d8:	4604      	mov	r4, r0
 800e7da:	6030      	str	r0, [r6, #0]
 800e7dc:	2800      	cmp	r0, #0
 800e7de:	d1d5      	bne.n	800e78c <__sfp+0x24>
 800e7e0:	f7ff ff78 	bl	800e6d4 <__sfp_lock_release>
 800e7e4:	230c      	movs	r3, #12
 800e7e6:	603b      	str	r3, [r7, #0]
 800e7e8:	e7ee      	b.n	800e7c8 <__sfp+0x60>
 800e7ea:	bf00      	nop
 800e7ec:	0801097c 	.word	0x0801097c
 800e7f0:	ffff0001 	.word	0xffff0001

0800e7f4 <_fwalk>:
 800e7f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7f8:	460f      	mov	r7, r1
 800e7fa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e7fe:	2600      	movs	r6, #0
 800e800:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 800e804:	f1b8 0801 	subs.w	r8, r8, #1
 800e808:	d505      	bpl.n	800e816 <_fwalk+0x22>
 800e80a:	6824      	ldr	r4, [r4, #0]
 800e80c:	2c00      	cmp	r4, #0
 800e80e:	d1f7      	bne.n	800e800 <_fwalk+0xc>
 800e810:	4630      	mov	r0, r6
 800e812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e816:	89ab      	ldrh	r3, [r5, #12]
 800e818:	2b01      	cmp	r3, #1
 800e81a:	d906      	bls.n	800e82a <_fwalk+0x36>
 800e81c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e820:	3301      	adds	r3, #1
 800e822:	d002      	beq.n	800e82a <_fwalk+0x36>
 800e824:	4628      	mov	r0, r5
 800e826:	47b8      	blx	r7
 800e828:	4306      	orrs	r6, r0
 800e82a:	3568      	adds	r5, #104	; 0x68
 800e82c:	e7ea      	b.n	800e804 <_fwalk+0x10>

0800e82e <_fwalk_reent>:
 800e82e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e832:	4606      	mov	r6, r0
 800e834:	4688      	mov	r8, r1
 800e836:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e83a:	2700      	movs	r7, #0
 800e83c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e840:	f1b9 0901 	subs.w	r9, r9, #1
 800e844:	d505      	bpl.n	800e852 <_fwalk_reent+0x24>
 800e846:	6824      	ldr	r4, [r4, #0]
 800e848:	2c00      	cmp	r4, #0
 800e84a:	d1f7      	bne.n	800e83c <_fwalk_reent+0xe>
 800e84c:	4638      	mov	r0, r7
 800e84e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e852:	89ab      	ldrh	r3, [r5, #12]
 800e854:	2b01      	cmp	r3, #1
 800e856:	d907      	bls.n	800e868 <_fwalk_reent+0x3a>
 800e858:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e85c:	3301      	adds	r3, #1
 800e85e:	d003      	beq.n	800e868 <_fwalk_reent+0x3a>
 800e860:	4629      	mov	r1, r5
 800e862:	4630      	mov	r0, r6
 800e864:	47c0      	blx	r8
 800e866:	4307      	orrs	r7, r0
 800e868:	3568      	adds	r5, #104	; 0x68
 800e86a:	e7e9      	b.n	800e840 <_fwalk_reent+0x12>

0800e86c <__retarget_lock_init_recursive>:
 800e86c:	4770      	bx	lr

0800e86e <__retarget_lock_acquire_recursive>:
 800e86e:	4770      	bx	lr

0800e870 <__retarget_lock_release_recursive>:
 800e870:	4770      	bx	lr

0800e872 <__swhatbuf_r>:
 800e872:	b570      	push	{r4, r5, r6, lr}
 800e874:	460e      	mov	r6, r1
 800e876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e87a:	2900      	cmp	r1, #0
 800e87c:	b096      	sub	sp, #88	; 0x58
 800e87e:	4614      	mov	r4, r2
 800e880:	461d      	mov	r5, r3
 800e882:	da07      	bge.n	800e894 <__swhatbuf_r+0x22>
 800e884:	2300      	movs	r3, #0
 800e886:	602b      	str	r3, [r5, #0]
 800e888:	89b3      	ldrh	r3, [r6, #12]
 800e88a:	061a      	lsls	r2, r3, #24
 800e88c:	d410      	bmi.n	800e8b0 <__swhatbuf_r+0x3e>
 800e88e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e892:	e00e      	b.n	800e8b2 <__swhatbuf_r+0x40>
 800e894:	466a      	mov	r2, sp
 800e896:	f001 fac9 	bl	800fe2c <_fstat_r>
 800e89a:	2800      	cmp	r0, #0
 800e89c:	dbf2      	blt.n	800e884 <__swhatbuf_r+0x12>
 800e89e:	9a01      	ldr	r2, [sp, #4]
 800e8a0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e8a4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e8a8:	425a      	negs	r2, r3
 800e8aa:	415a      	adcs	r2, r3
 800e8ac:	602a      	str	r2, [r5, #0]
 800e8ae:	e7ee      	b.n	800e88e <__swhatbuf_r+0x1c>
 800e8b0:	2340      	movs	r3, #64	; 0x40
 800e8b2:	2000      	movs	r0, #0
 800e8b4:	6023      	str	r3, [r4, #0]
 800e8b6:	b016      	add	sp, #88	; 0x58
 800e8b8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e8bc <__smakebuf_r>:
 800e8bc:	898b      	ldrh	r3, [r1, #12]
 800e8be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e8c0:	079d      	lsls	r5, r3, #30
 800e8c2:	4606      	mov	r6, r0
 800e8c4:	460c      	mov	r4, r1
 800e8c6:	d507      	bpl.n	800e8d8 <__smakebuf_r+0x1c>
 800e8c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e8cc:	6023      	str	r3, [r4, #0]
 800e8ce:	6123      	str	r3, [r4, #16]
 800e8d0:	2301      	movs	r3, #1
 800e8d2:	6163      	str	r3, [r4, #20]
 800e8d4:	b002      	add	sp, #8
 800e8d6:	bd70      	pop	{r4, r5, r6, pc}
 800e8d8:	ab01      	add	r3, sp, #4
 800e8da:	466a      	mov	r2, sp
 800e8dc:	f7ff ffc9 	bl	800e872 <__swhatbuf_r>
 800e8e0:	9900      	ldr	r1, [sp, #0]
 800e8e2:	4605      	mov	r5, r0
 800e8e4:	4630      	mov	r0, r6
 800e8e6:	f7ff faf1 	bl	800decc <_malloc_r>
 800e8ea:	b948      	cbnz	r0, 800e900 <__smakebuf_r+0x44>
 800e8ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e8f0:	059a      	lsls	r2, r3, #22
 800e8f2:	d4ef      	bmi.n	800e8d4 <__smakebuf_r+0x18>
 800e8f4:	f023 0303 	bic.w	r3, r3, #3
 800e8f8:	f043 0302 	orr.w	r3, r3, #2
 800e8fc:	81a3      	strh	r3, [r4, #12]
 800e8fe:	e7e3      	b.n	800e8c8 <__smakebuf_r+0xc>
 800e900:	4b0d      	ldr	r3, [pc, #52]	; (800e938 <__smakebuf_r+0x7c>)
 800e902:	62b3      	str	r3, [r6, #40]	; 0x28
 800e904:	89a3      	ldrh	r3, [r4, #12]
 800e906:	6020      	str	r0, [r4, #0]
 800e908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e90c:	81a3      	strh	r3, [r4, #12]
 800e90e:	9b00      	ldr	r3, [sp, #0]
 800e910:	6163      	str	r3, [r4, #20]
 800e912:	9b01      	ldr	r3, [sp, #4]
 800e914:	6120      	str	r0, [r4, #16]
 800e916:	b15b      	cbz	r3, 800e930 <__smakebuf_r+0x74>
 800e918:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e91c:	4630      	mov	r0, r6
 800e91e:	f001 fa97 	bl	800fe50 <_isatty_r>
 800e922:	b128      	cbz	r0, 800e930 <__smakebuf_r+0x74>
 800e924:	89a3      	ldrh	r3, [r4, #12]
 800e926:	f023 0303 	bic.w	r3, r3, #3
 800e92a:	f043 0301 	orr.w	r3, r3, #1
 800e92e:	81a3      	strh	r3, [r4, #12]
 800e930:	89a0      	ldrh	r0, [r4, #12]
 800e932:	4305      	orrs	r5, r0
 800e934:	81a5      	strh	r5, [r4, #12]
 800e936:	e7cd      	b.n	800e8d4 <__smakebuf_r+0x18>
 800e938:	0800e691 	.word	0x0800e691

0800e93c <__malloc_lock>:
 800e93c:	4801      	ldr	r0, [pc, #4]	; (800e944 <__malloc_lock+0x8>)
 800e93e:	f7ff bf96 	b.w	800e86e <__retarget_lock_acquire_recursive>
 800e942:	bf00      	nop
 800e944:	200046f8 	.word	0x200046f8

0800e948 <__malloc_unlock>:
 800e948:	4801      	ldr	r0, [pc, #4]	; (800e950 <__malloc_unlock+0x8>)
 800e94a:	f7ff bf91 	b.w	800e870 <__retarget_lock_release_recursive>
 800e94e:	bf00      	nop
 800e950:	200046f8 	.word	0x200046f8

0800e954 <__ssputs_r>:
 800e954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e958:	688e      	ldr	r6, [r1, #8]
 800e95a:	429e      	cmp	r6, r3
 800e95c:	4682      	mov	sl, r0
 800e95e:	460c      	mov	r4, r1
 800e960:	4690      	mov	r8, r2
 800e962:	461f      	mov	r7, r3
 800e964:	d838      	bhi.n	800e9d8 <__ssputs_r+0x84>
 800e966:	898a      	ldrh	r2, [r1, #12]
 800e968:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e96c:	d032      	beq.n	800e9d4 <__ssputs_r+0x80>
 800e96e:	6825      	ldr	r5, [r4, #0]
 800e970:	6909      	ldr	r1, [r1, #16]
 800e972:	eba5 0901 	sub.w	r9, r5, r1
 800e976:	6965      	ldr	r5, [r4, #20]
 800e978:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e97c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e980:	3301      	adds	r3, #1
 800e982:	444b      	add	r3, r9
 800e984:	106d      	asrs	r5, r5, #1
 800e986:	429d      	cmp	r5, r3
 800e988:	bf38      	it	cc
 800e98a:	461d      	movcc	r5, r3
 800e98c:	0553      	lsls	r3, r2, #21
 800e98e:	d531      	bpl.n	800e9f4 <__ssputs_r+0xa0>
 800e990:	4629      	mov	r1, r5
 800e992:	f7ff fa9b 	bl	800decc <_malloc_r>
 800e996:	4606      	mov	r6, r0
 800e998:	b950      	cbnz	r0, 800e9b0 <__ssputs_r+0x5c>
 800e99a:	230c      	movs	r3, #12
 800e99c:	f8ca 3000 	str.w	r3, [sl]
 800e9a0:	89a3      	ldrh	r3, [r4, #12]
 800e9a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9a6:	81a3      	strh	r3, [r4, #12]
 800e9a8:	f04f 30ff 	mov.w	r0, #4294967295
 800e9ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9b0:	6921      	ldr	r1, [r4, #16]
 800e9b2:	464a      	mov	r2, r9
 800e9b4:	f7ff fa24 	bl	800de00 <memcpy>
 800e9b8:	89a3      	ldrh	r3, [r4, #12]
 800e9ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e9be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e9c2:	81a3      	strh	r3, [r4, #12]
 800e9c4:	6126      	str	r6, [r4, #16]
 800e9c6:	6165      	str	r5, [r4, #20]
 800e9c8:	444e      	add	r6, r9
 800e9ca:	eba5 0509 	sub.w	r5, r5, r9
 800e9ce:	6026      	str	r6, [r4, #0]
 800e9d0:	60a5      	str	r5, [r4, #8]
 800e9d2:	463e      	mov	r6, r7
 800e9d4:	42be      	cmp	r6, r7
 800e9d6:	d900      	bls.n	800e9da <__ssputs_r+0x86>
 800e9d8:	463e      	mov	r6, r7
 800e9da:	4632      	mov	r2, r6
 800e9dc:	6820      	ldr	r0, [r4, #0]
 800e9de:	4641      	mov	r1, r8
 800e9e0:	f001 fa58 	bl	800fe94 <memmove>
 800e9e4:	68a3      	ldr	r3, [r4, #8]
 800e9e6:	6822      	ldr	r2, [r4, #0]
 800e9e8:	1b9b      	subs	r3, r3, r6
 800e9ea:	4432      	add	r2, r6
 800e9ec:	60a3      	str	r3, [r4, #8]
 800e9ee:	6022      	str	r2, [r4, #0]
 800e9f0:	2000      	movs	r0, #0
 800e9f2:	e7db      	b.n	800e9ac <__ssputs_r+0x58>
 800e9f4:	462a      	mov	r2, r5
 800e9f6:	f001 fa67 	bl	800fec8 <_realloc_r>
 800e9fa:	4606      	mov	r6, r0
 800e9fc:	2800      	cmp	r0, #0
 800e9fe:	d1e1      	bne.n	800e9c4 <__ssputs_r+0x70>
 800ea00:	6921      	ldr	r1, [r4, #16]
 800ea02:	4650      	mov	r0, sl
 800ea04:	f7ff fa12 	bl	800de2c <_free_r>
 800ea08:	e7c7      	b.n	800e99a <__ssputs_r+0x46>
	...

0800ea0c <_svfiprintf_r>:
 800ea0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea10:	4698      	mov	r8, r3
 800ea12:	898b      	ldrh	r3, [r1, #12]
 800ea14:	061b      	lsls	r3, r3, #24
 800ea16:	b09d      	sub	sp, #116	; 0x74
 800ea18:	4607      	mov	r7, r0
 800ea1a:	460d      	mov	r5, r1
 800ea1c:	4614      	mov	r4, r2
 800ea1e:	d50e      	bpl.n	800ea3e <_svfiprintf_r+0x32>
 800ea20:	690b      	ldr	r3, [r1, #16]
 800ea22:	b963      	cbnz	r3, 800ea3e <_svfiprintf_r+0x32>
 800ea24:	2140      	movs	r1, #64	; 0x40
 800ea26:	f7ff fa51 	bl	800decc <_malloc_r>
 800ea2a:	6028      	str	r0, [r5, #0]
 800ea2c:	6128      	str	r0, [r5, #16]
 800ea2e:	b920      	cbnz	r0, 800ea3a <_svfiprintf_r+0x2e>
 800ea30:	230c      	movs	r3, #12
 800ea32:	603b      	str	r3, [r7, #0]
 800ea34:	f04f 30ff 	mov.w	r0, #4294967295
 800ea38:	e0d1      	b.n	800ebde <_svfiprintf_r+0x1d2>
 800ea3a:	2340      	movs	r3, #64	; 0x40
 800ea3c:	616b      	str	r3, [r5, #20]
 800ea3e:	2300      	movs	r3, #0
 800ea40:	9309      	str	r3, [sp, #36]	; 0x24
 800ea42:	2320      	movs	r3, #32
 800ea44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ea48:	f8cd 800c 	str.w	r8, [sp, #12]
 800ea4c:	2330      	movs	r3, #48	; 0x30
 800ea4e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ebf8 <_svfiprintf_r+0x1ec>
 800ea52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ea56:	f04f 0901 	mov.w	r9, #1
 800ea5a:	4623      	mov	r3, r4
 800ea5c:	469a      	mov	sl, r3
 800ea5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea62:	b10a      	cbz	r2, 800ea68 <_svfiprintf_r+0x5c>
 800ea64:	2a25      	cmp	r2, #37	; 0x25
 800ea66:	d1f9      	bne.n	800ea5c <_svfiprintf_r+0x50>
 800ea68:	ebba 0b04 	subs.w	fp, sl, r4
 800ea6c:	d00b      	beq.n	800ea86 <_svfiprintf_r+0x7a>
 800ea6e:	465b      	mov	r3, fp
 800ea70:	4622      	mov	r2, r4
 800ea72:	4629      	mov	r1, r5
 800ea74:	4638      	mov	r0, r7
 800ea76:	f7ff ff6d 	bl	800e954 <__ssputs_r>
 800ea7a:	3001      	adds	r0, #1
 800ea7c:	f000 80aa 	beq.w	800ebd4 <_svfiprintf_r+0x1c8>
 800ea80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ea82:	445a      	add	r2, fp
 800ea84:	9209      	str	r2, [sp, #36]	; 0x24
 800ea86:	f89a 3000 	ldrb.w	r3, [sl]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	f000 80a2 	beq.w	800ebd4 <_svfiprintf_r+0x1c8>
 800ea90:	2300      	movs	r3, #0
 800ea92:	f04f 32ff 	mov.w	r2, #4294967295
 800ea96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea9a:	f10a 0a01 	add.w	sl, sl, #1
 800ea9e:	9304      	str	r3, [sp, #16]
 800eaa0:	9307      	str	r3, [sp, #28]
 800eaa2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eaa6:	931a      	str	r3, [sp, #104]	; 0x68
 800eaa8:	4654      	mov	r4, sl
 800eaaa:	2205      	movs	r2, #5
 800eaac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eab0:	4851      	ldr	r0, [pc, #324]	; (800ebf8 <_svfiprintf_r+0x1ec>)
 800eab2:	f7f1 fba5 	bl	8000200 <memchr>
 800eab6:	9a04      	ldr	r2, [sp, #16]
 800eab8:	b9d8      	cbnz	r0, 800eaf2 <_svfiprintf_r+0xe6>
 800eaba:	06d0      	lsls	r0, r2, #27
 800eabc:	bf44      	itt	mi
 800eabe:	2320      	movmi	r3, #32
 800eac0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eac4:	0711      	lsls	r1, r2, #28
 800eac6:	bf44      	itt	mi
 800eac8:	232b      	movmi	r3, #43	; 0x2b
 800eaca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eace:	f89a 3000 	ldrb.w	r3, [sl]
 800ead2:	2b2a      	cmp	r3, #42	; 0x2a
 800ead4:	d015      	beq.n	800eb02 <_svfiprintf_r+0xf6>
 800ead6:	9a07      	ldr	r2, [sp, #28]
 800ead8:	4654      	mov	r4, sl
 800eada:	2000      	movs	r0, #0
 800eadc:	f04f 0c0a 	mov.w	ip, #10
 800eae0:	4621      	mov	r1, r4
 800eae2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eae6:	3b30      	subs	r3, #48	; 0x30
 800eae8:	2b09      	cmp	r3, #9
 800eaea:	d94e      	bls.n	800eb8a <_svfiprintf_r+0x17e>
 800eaec:	b1b0      	cbz	r0, 800eb1c <_svfiprintf_r+0x110>
 800eaee:	9207      	str	r2, [sp, #28]
 800eaf0:	e014      	b.n	800eb1c <_svfiprintf_r+0x110>
 800eaf2:	eba0 0308 	sub.w	r3, r0, r8
 800eaf6:	fa09 f303 	lsl.w	r3, r9, r3
 800eafa:	4313      	orrs	r3, r2
 800eafc:	9304      	str	r3, [sp, #16]
 800eafe:	46a2      	mov	sl, r4
 800eb00:	e7d2      	b.n	800eaa8 <_svfiprintf_r+0x9c>
 800eb02:	9b03      	ldr	r3, [sp, #12]
 800eb04:	1d19      	adds	r1, r3, #4
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	9103      	str	r1, [sp, #12]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	bfbb      	ittet	lt
 800eb0e:	425b      	neglt	r3, r3
 800eb10:	f042 0202 	orrlt.w	r2, r2, #2
 800eb14:	9307      	strge	r3, [sp, #28]
 800eb16:	9307      	strlt	r3, [sp, #28]
 800eb18:	bfb8      	it	lt
 800eb1a:	9204      	strlt	r2, [sp, #16]
 800eb1c:	7823      	ldrb	r3, [r4, #0]
 800eb1e:	2b2e      	cmp	r3, #46	; 0x2e
 800eb20:	d10c      	bne.n	800eb3c <_svfiprintf_r+0x130>
 800eb22:	7863      	ldrb	r3, [r4, #1]
 800eb24:	2b2a      	cmp	r3, #42	; 0x2a
 800eb26:	d135      	bne.n	800eb94 <_svfiprintf_r+0x188>
 800eb28:	9b03      	ldr	r3, [sp, #12]
 800eb2a:	1d1a      	adds	r2, r3, #4
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	9203      	str	r2, [sp, #12]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	bfb8      	it	lt
 800eb34:	f04f 33ff 	movlt.w	r3, #4294967295
 800eb38:	3402      	adds	r4, #2
 800eb3a:	9305      	str	r3, [sp, #20]
 800eb3c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ec08 <_svfiprintf_r+0x1fc>
 800eb40:	7821      	ldrb	r1, [r4, #0]
 800eb42:	2203      	movs	r2, #3
 800eb44:	4650      	mov	r0, sl
 800eb46:	f7f1 fb5b 	bl	8000200 <memchr>
 800eb4a:	b140      	cbz	r0, 800eb5e <_svfiprintf_r+0x152>
 800eb4c:	2340      	movs	r3, #64	; 0x40
 800eb4e:	eba0 000a 	sub.w	r0, r0, sl
 800eb52:	fa03 f000 	lsl.w	r0, r3, r0
 800eb56:	9b04      	ldr	r3, [sp, #16]
 800eb58:	4303      	orrs	r3, r0
 800eb5a:	3401      	adds	r4, #1
 800eb5c:	9304      	str	r3, [sp, #16]
 800eb5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb62:	4826      	ldr	r0, [pc, #152]	; (800ebfc <_svfiprintf_r+0x1f0>)
 800eb64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eb68:	2206      	movs	r2, #6
 800eb6a:	f7f1 fb49 	bl	8000200 <memchr>
 800eb6e:	2800      	cmp	r0, #0
 800eb70:	d038      	beq.n	800ebe4 <_svfiprintf_r+0x1d8>
 800eb72:	4b23      	ldr	r3, [pc, #140]	; (800ec00 <_svfiprintf_r+0x1f4>)
 800eb74:	bb1b      	cbnz	r3, 800ebbe <_svfiprintf_r+0x1b2>
 800eb76:	9b03      	ldr	r3, [sp, #12]
 800eb78:	3307      	adds	r3, #7
 800eb7a:	f023 0307 	bic.w	r3, r3, #7
 800eb7e:	3308      	adds	r3, #8
 800eb80:	9303      	str	r3, [sp, #12]
 800eb82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb84:	4433      	add	r3, r6
 800eb86:	9309      	str	r3, [sp, #36]	; 0x24
 800eb88:	e767      	b.n	800ea5a <_svfiprintf_r+0x4e>
 800eb8a:	fb0c 3202 	mla	r2, ip, r2, r3
 800eb8e:	460c      	mov	r4, r1
 800eb90:	2001      	movs	r0, #1
 800eb92:	e7a5      	b.n	800eae0 <_svfiprintf_r+0xd4>
 800eb94:	2300      	movs	r3, #0
 800eb96:	3401      	adds	r4, #1
 800eb98:	9305      	str	r3, [sp, #20]
 800eb9a:	4619      	mov	r1, r3
 800eb9c:	f04f 0c0a 	mov.w	ip, #10
 800eba0:	4620      	mov	r0, r4
 800eba2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eba6:	3a30      	subs	r2, #48	; 0x30
 800eba8:	2a09      	cmp	r2, #9
 800ebaa:	d903      	bls.n	800ebb4 <_svfiprintf_r+0x1a8>
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d0c5      	beq.n	800eb3c <_svfiprintf_r+0x130>
 800ebb0:	9105      	str	r1, [sp, #20]
 800ebb2:	e7c3      	b.n	800eb3c <_svfiprintf_r+0x130>
 800ebb4:	fb0c 2101 	mla	r1, ip, r1, r2
 800ebb8:	4604      	mov	r4, r0
 800ebba:	2301      	movs	r3, #1
 800ebbc:	e7f0      	b.n	800eba0 <_svfiprintf_r+0x194>
 800ebbe:	ab03      	add	r3, sp, #12
 800ebc0:	9300      	str	r3, [sp, #0]
 800ebc2:	462a      	mov	r2, r5
 800ebc4:	4b0f      	ldr	r3, [pc, #60]	; (800ec04 <_svfiprintf_r+0x1f8>)
 800ebc6:	a904      	add	r1, sp, #16
 800ebc8:	4638      	mov	r0, r7
 800ebca:	f3af 8000 	nop.w
 800ebce:	1c42      	adds	r2, r0, #1
 800ebd0:	4606      	mov	r6, r0
 800ebd2:	d1d6      	bne.n	800eb82 <_svfiprintf_r+0x176>
 800ebd4:	89ab      	ldrh	r3, [r5, #12]
 800ebd6:	065b      	lsls	r3, r3, #25
 800ebd8:	f53f af2c 	bmi.w	800ea34 <_svfiprintf_r+0x28>
 800ebdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ebde:	b01d      	add	sp, #116	; 0x74
 800ebe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebe4:	ab03      	add	r3, sp, #12
 800ebe6:	9300      	str	r3, [sp, #0]
 800ebe8:	462a      	mov	r2, r5
 800ebea:	4b06      	ldr	r3, [pc, #24]	; (800ec04 <_svfiprintf_r+0x1f8>)
 800ebec:	a904      	add	r1, sp, #16
 800ebee:	4638      	mov	r0, r7
 800ebf0:	f000 f9d4 	bl	800ef9c <_printf_i>
 800ebf4:	e7eb      	b.n	800ebce <_svfiprintf_r+0x1c2>
 800ebf6:	bf00      	nop
 800ebf8:	080109e0 	.word	0x080109e0
 800ebfc:	080109ea 	.word	0x080109ea
 800ec00:	00000000 	.word	0x00000000
 800ec04:	0800e955 	.word	0x0800e955
 800ec08:	080109e6 	.word	0x080109e6

0800ec0c <__sfputc_r>:
 800ec0c:	6893      	ldr	r3, [r2, #8]
 800ec0e:	3b01      	subs	r3, #1
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	b410      	push	{r4}
 800ec14:	6093      	str	r3, [r2, #8]
 800ec16:	da08      	bge.n	800ec2a <__sfputc_r+0x1e>
 800ec18:	6994      	ldr	r4, [r2, #24]
 800ec1a:	42a3      	cmp	r3, r4
 800ec1c:	db01      	blt.n	800ec22 <__sfputc_r+0x16>
 800ec1e:	290a      	cmp	r1, #10
 800ec20:	d103      	bne.n	800ec2a <__sfputc_r+0x1e>
 800ec22:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec26:	f7ff bb7b 	b.w	800e320 <__swbuf_r>
 800ec2a:	6813      	ldr	r3, [r2, #0]
 800ec2c:	1c58      	adds	r0, r3, #1
 800ec2e:	6010      	str	r0, [r2, #0]
 800ec30:	7019      	strb	r1, [r3, #0]
 800ec32:	4608      	mov	r0, r1
 800ec34:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec38:	4770      	bx	lr

0800ec3a <__sfputs_r>:
 800ec3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec3c:	4606      	mov	r6, r0
 800ec3e:	460f      	mov	r7, r1
 800ec40:	4614      	mov	r4, r2
 800ec42:	18d5      	adds	r5, r2, r3
 800ec44:	42ac      	cmp	r4, r5
 800ec46:	d101      	bne.n	800ec4c <__sfputs_r+0x12>
 800ec48:	2000      	movs	r0, #0
 800ec4a:	e007      	b.n	800ec5c <__sfputs_r+0x22>
 800ec4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec50:	463a      	mov	r2, r7
 800ec52:	4630      	mov	r0, r6
 800ec54:	f7ff ffda 	bl	800ec0c <__sfputc_r>
 800ec58:	1c43      	adds	r3, r0, #1
 800ec5a:	d1f3      	bne.n	800ec44 <__sfputs_r+0xa>
 800ec5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ec60 <_vfiprintf_r>:
 800ec60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec64:	460d      	mov	r5, r1
 800ec66:	b09d      	sub	sp, #116	; 0x74
 800ec68:	4614      	mov	r4, r2
 800ec6a:	4698      	mov	r8, r3
 800ec6c:	4606      	mov	r6, r0
 800ec6e:	b118      	cbz	r0, 800ec78 <_vfiprintf_r+0x18>
 800ec70:	6983      	ldr	r3, [r0, #24]
 800ec72:	b90b      	cbnz	r3, 800ec78 <_vfiprintf_r+0x18>
 800ec74:	f7ff fd40 	bl	800e6f8 <__sinit>
 800ec78:	4b89      	ldr	r3, [pc, #548]	; (800eea0 <_vfiprintf_r+0x240>)
 800ec7a:	429d      	cmp	r5, r3
 800ec7c:	d11b      	bne.n	800ecb6 <_vfiprintf_r+0x56>
 800ec7e:	6875      	ldr	r5, [r6, #4]
 800ec80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ec82:	07d9      	lsls	r1, r3, #31
 800ec84:	d405      	bmi.n	800ec92 <_vfiprintf_r+0x32>
 800ec86:	89ab      	ldrh	r3, [r5, #12]
 800ec88:	059a      	lsls	r2, r3, #22
 800ec8a:	d402      	bmi.n	800ec92 <_vfiprintf_r+0x32>
 800ec8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ec8e:	f7ff fdee 	bl	800e86e <__retarget_lock_acquire_recursive>
 800ec92:	89ab      	ldrh	r3, [r5, #12]
 800ec94:	071b      	lsls	r3, r3, #28
 800ec96:	d501      	bpl.n	800ec9c <_vfiprintf_r+0x3c>
 800ec98:	692b      	ldr	r3, [r5, #16]
 800ec9a:	b9eb      	cbnz	r3, 800ecd8 <_vfiprintf_r+0x78>
 800ec9c:	4629      	mov	r1, r5
 800ec9e:	4630      	mov	r0, r6
 800eca0:	f7ff fb90 	bl	800e3c4 <__swsetup_r>
 800eca4:	b1c0      	cbz	r0, 800ecd8 <_vfiprintf_r+0x78>
 800eca6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eca8:	07dc      	lsls	r4, r3, #31
 800ecaa:	d50e      	bpl.n	800ecca <_vfiprintf_r+0x6a>
 800ecac:	f04f 30ff 	mov.w	r0, #4294967295
 800ecb0:	b01d      	add	sp, #116	; 0x74
 800ecb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecb6:	4b7b      	ldr	r3, [pc, #492]	; (800eea4 <_vfiprintf_r+0x244>)
 800ecb8:	429d      	cmp	r5, r3
 800ecba:	d101      	bne.n	800ecc0 <_vfiprintf_r+0x60>
 800ecbc:	68b5      	ldr	r5, [r6, #8]
 800ecbe:	e7df      	b.n	800ec80 <_vfiprintf_r+0x20>
 800ecc0:	4b79      	ldr	r3, [pc, #484]	; (800eea8 <_vfiprintf_r+0x248>)
 800ecc2:	429d      	cmp	r5, r3
 800ecc4:	bf08      	it	eq
 800ecc6:	68f5      	ldreq	r5, [r6, #12]
 800ecc8:	e7da      	b.n	800ec80 <_vfiprintf_r+0x20>
 800ecca:	89ab      	ldrh	r3, [r5, #12]
 800eccc:	0598      	lsls	r0, r3, #22
 800ecce:	d4ed      	bmi.n	800ecac <_vfiprintf_r+0x4c>
 800ecd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ecd2:	f7ff fdcd 	bl	800e870 <__retarget_lock_release_recursive>
 800ecd6:	e7e9      	b.n	800ecac <_vfiprintf_r+0x4c>
 800ecd8:	2300      	movs	r3, #0
 800ecda:	9309      	str	r3, [sp, #36]	; 0x24
 800ecdc:	2320      	movs	r3, #32
 800ecde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ece2:	f8cd 800c 	str.w	r8, [sp, #12]
 800ece6:	2330      	movs	r3, #48	; 0x30
 800ece8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800eeac <_vfiprintf_r+0x24c>
 800ecec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ecf0:	f04f 0901 	mov.w	r9, #1
 800ecf4:	4623      	mov	r3, r4
 800ecf6:	469a      	mov	sl, r3
 800ecf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ecfc:	b10a      	cbz	r2, 800ed02 <_vfiprintf_r+0xa2>
 800ecfe:	2a25      	cmp	r2, #37	; 0x25
 800ed00:	d1f9      	bne.n	800ecf6 <_vfiprintf_r+0x96>
 800ed02:	ebba 0b04 	subs.w	fp, sl, r4
 800ed06:	d00b      	beq.n	800ed20 <_vfiprintf_r+0xc0>
 800ed08:	465b      	mov	r3, fp
 800ed0a:	4622      	mov	r2, r4
 800ed0c:	4629      	mov	r1, r5
 800ed0e:	4630      	mov	r0, r6
 800ed10:	f7ff ff93 	bl	800ec3a <__sfputs_r>
 800ed14:	3001      	adds	r0, #1
 800ed16:	f000 80aa 	beq.w	800ee6e <_vfiprintf_r+0x20e>
 800ed1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed1c:	445a      	add	r2, fp
 800ed1e:	9209      	str	r2, [sp, #36]	; 0x24
 800ed20:	f89a 3000 	ldrb.w	r3, [sl]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	f000 80a2 	beq.w	800ee6e <_vfiprintf_r+0x20e>
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	f04f 32ff 	mov.w	r2, #4294967295
 800ed30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed34:	f10a 0a01 	add.w	sl, sl, #1
 800ed38:	9304      	str	r3, [sp, #16]
 800ed3a:	9307      	str	r3, [sp, #28]
 800ed3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ed40:	931a      	str	r3, [sp, #104]	; 0x68
 800ed42:	4654      	mov	r4, sl
 800ed44:	2205      	movs	r2, #5
 800ed46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed4a:	4858      	ldr	r0, [pc, #352]	; (800eeac <_vfiprintf_r+0x24c>)
 800ed4c:	f7f1 fa58 	bl	8000200 <memchr>
 800ed50:	9a04      	ldr	r2, [sp, #16]
 800ed52:	b9d8      	cbnz	r0, 800ed8c <_vfiprintf_r+0x12c>
 800ed54:	06d1      	lsls	r1, r2, #27
 800ed56:	bf44      	itt	mi
 800ed58:	2320      	movmi	r3, #32
 800ed5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ed5e:	0713      	lsls	r3, r2, #28
 800ed60:	bf44      	itt	mi
 800ed62:	232b      	movmi	r3, #43	; 0x2b
 800ed64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ed68:	f89a 3000 	ldrb.w	r3, [sl]
 800ed6c:	2b2a      	cmp	r3, #42	; 0x2a
 800ed6e:	d015      	beq.n	800ed9c <_vfiprintf_r+0x13c>
 800ed70:	9a07      	ldr	r2, [sp, #28]
 800ed72:	4654      	mov	r4, sl
 800ed74:	2000      	movs	r0, #0
 800ed76:	f04f 0c0a 	mov.w	ip, #10
 800ed7a:	4621      	mov	r1, r4
 800ed7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ed80:	3b30      	subs	r3, #48	; 0x30
 800ed82:	2b09      	cmp	r3, #9
 800ed84:	d94e      	bls.n	800ee24 <_vfiprintf_r+0x1c4>
 800ed86:	b1b0      	cbz	r0, 800edb6 <_vfiprintf_r+0x156>
 800ed88:	9207      	str	r2, [sp, #28]
 800ed8a:	e014      	b.n	800edb6 <_vfiprintf_r+0x156>
 800ed8c:	eba0 0308 	sub.w	r3, r0, r8
 800ed90:	fa09 f303 	lsl.w	r3, r9, r3
 800ed94:	4313      	orrs	r3, r2
 800ed96:	9304      	str	r3, [sp, #16]
 800ed98:	46a2      	mov	sl, r4
 800ed9a:	e7d2      	b.n	800ed42 <_vfiprintf_r+0xe2>
 800ed9c:	9b03      	ldr	r3, [sp, #12]
 800ed9e:	1d19      	adds	r1, r3, #4
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	9103      	str	r1, [sp, #12]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	bfbb      	ittet	lt
 800eda8:	425b      	neglt	r3, r3
 800edaa:	f042 0202 	orrlt.w	r2, r2, #2
 800edae:	9307      	strge	r3, [sp, #28]
 800edb0:	9307      	strlt	r3, [sp, #28]
 800edb2:	bfb8      	it	lt
 800edb4:	9204      	strlt	r2, [sp, #16]
 800edb6:	7823      	ldrb	r3, [r4, #0]
 800edb8:	2b2e      	cmp	r3, #46	; 0x2e
 800edba:	d10c      	bne.n	800edd6 <_vfiprintf_r+0x176>
 800edbc:	7863      	ldrb	r3, [r4, #1]
 800edbe:	2b2a      	cmp	r3, #42	; 0x2a
 800edc0:	d135      	bne.n	800ee2e <_vfiprintf_r+0x1ce>
 800edc2:	9b03      	ldr	r3, [sp, #12]
 800edc4:	1d1a      	adds	r2, r3, #4
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	9203      	str	r2, [sp, #12]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	bfb8      	it	lt
 800edce:	f04f 33ff 	movlt.w	r3, #4294967295
 800edd2:	3402      	adds	r4, #2
 800edd4:	9305      	str	r3, [sp, #20]
 800edd6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800eebc <_vfiprintf_r+0x25c>
 800edda:	7821      	ldrb	r1, [r4, #0]
 800eddc:	2203      	movs	r2, #3
 800edde:	4650      	mov	r0, sl
 800ede0:	f7f1 fa0e 	bl	8000200 <memchr>
 800ede4:	b140      	cbz	r0, 800edf8 <_vfiprintf_r+0x198>
 800ede6:	2340      	movs	r3, #64	; 0x40
 800ede8:	eba0 000a 	sub.w	r0, r0, sl
 800edec:	fa03 f000 	lsl.w	r0, r3, r0
 800edf0:	9b04      	ldr	r3, [sp, #16]
 800edf2:	4303      	orrs	r3, r0
 800edf4:	3401      	adds	r4, #1
 800edf6:	9304      	str	r3, [sp, #16]
 800edf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edfc:	482c      	ldr	r0, [pc, #176]	; (800eeb0 <_vfiprintf_r+0x250>)
 800edfe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ee02:	2206      	movs	r2, #6
 800ee04:	f7f1 f9fc 	bl	8000200 <memchr>
 800ee08:	2800      	cmp	r0, #0
 800ee0a:	d03f      	beq.n	800ee8c <_vfiprintf_r+0x22c>
 800ee0c:	4b29      	ldr	r3, [pc, #164]	; (800eeb4 <_vfiprintf_r+0x254>)
 800ee0e:	bb1b      	cbnz	r3, 800ee58 <_vfiprintf_r+0x1f8>
 800ee10:	9b03      	ldr	r3, [sp, #12]
 800ee12:	3307      	adds	r3, #7
 800ee14:	f023 0307 	bic.w	r3, r3, #7
 800ee18:	3308      	adds	r3, #8
 800ee1a:	9303      	str	r3, [sp, #12]
 800ee1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee1e:	443b      	add	r3, r7
 800ee20:	9309      	str	r3, [sp, #36]	; 0x24
 800ee22:	e767      	b.n	800ecf4 <_vfiprintf_r+0x94>
 800ee24:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee28:	460c      	mov	r4, r1
 800ee2a:	2001      	movs	r0, #1
 800ee2c:	e7a5      	b.n	800ed7a <_vfiprintf_r+0x11a>
 800ee2e:	2300      	movs	r3, #0
 800ee30:	3401      	adds	r4, #1
 800ee32:	9305      	str	r3, [sp, #20]
 800ee34:	4619      	mov	r1, r3
 800ee36:	f04f 0c0a 	mov.w	ip, #10
 800ee3a:	4620      	mov	r0, r4
 800ee3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee40:	3a30      	subs	r2, #48	; 0x30
 800ee42:	2a09      	cmp	r2, #9
 800ee44:	d903      	bls.n	800ee4e <_vfiprintf_r+0x1ee>
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d0c5      	beq.n	800edd6 <_vfiprintf_r+0x176>
 800ee4a:	9105      	str	r1, [sp, #20]
 800ee4c:	e7c3      	b.n	800edd6 <_vfiprintf_r+0x176>
 800ee4e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ee52:	4604      	mov	r4, r0
 800ee54:	2301      	movs	r3, #1
 800ee56:	e7f0      	b.n	800ee3a <_vfiprintf_r+0x1da>
 800ee58:	ab03      	add	r3, sp, #12
 800ee5a:	9300      	str	r3, [sp, #0]
 800ee5c:	462a      	mov	r2, r5
 800ee5e:	4b16      	ldr	r3, [pc, #88]	; (800eeb8 <_vfiprintf_r+0x258>)
 800ee60:	a904      	add	r1, sp, #16
 800ee62:	4630      	mov	r0, r6
 800ee64:	f3af 8000 	nop.w
 800ee68:	4607      	mov	r7, r0
 800ee6a:	1c78      	adds	r0, r7, #1
 800ee6c:	d1d6      	bne.n	800ee1c <_vfiprintf_r+0x1bc>
 800ee6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ee70:	07d9      	lsls	r1, r3, #31
 800ee72:	d405      	bmi.n	800ee80 <_vfiprintf_r+0x220>
 800ee74:	89ab      	ldrh	r3, [r5, #12]
 800ee76:	059a      	lsls	r2, r3, #22
 800ee78:	d402      	bmi.n	800ee80 <_vfiprintf_r+0x220>
 800ee7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ee7c:	f7ff fcf8 	bl	800e870 <__retarget_lock_release_recursive>
 800ee80:	89ab      	ldrh	r3, [r5, #12]
 800ee82:	065b      	lsls	r3, r3, #25
 800ee84:	f53f af12 	bmi.w	800ecac <_vfiprintf_r+0x4c>
 800ee88:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ee8a:	e711      	b.n	800ecb0 <_vfiprintf_r+0x50>
 800ee8c:	ab03      	add	r3, sp, #12
 800ee8e:	9300      	str	r3, [sp, #0]
 800ee90:	462a      	mov	r2, r5
 800ee92:	4b09      	ldr	r3, [pc, #36]	; (800eeb8 <_vfiprintf_r+0x258>)
 800ee94:	a904      	add	r1, sp, #16
 800ee96:	4630      	mov	r0, r6
 800ee98:	f000 f880 	bl	800ef9c <_printf_i>
 800ee9c:	e7e4      	b.n	800ee68 <_vfiprintf_r+0x208>
 800ee9e:	bf00      	nop
 800eea0:	080109a0 	.word	0x080109a0
 800eea4:	080109c0 	.word	0x080109c0
 800eea8:	08010980 	.word	0x08010980
 800eeac:	080109e0 	.word	0x080109e0
 800eeb0:	080109ea 	.word	0x080109ea
 800eeb4:	00000000 	.word	0x00000000
 800eeb8:	0800ec3b 	.word	0x0800ec3b
 800eebc:	080109e6 	.word	0x080109e6

0800eec0 <_printf_common>:
 800eec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eec4:	4616      	mov	r6, r2
 800eec6:	4699      	mov	r9, r3
 800eec8:	688a      	ldr	r2, [r1, #8]
 800eeca:	690b      	ldr	r3, [r1, #16]
 800eecc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eed0:	4293      	cmp	r3, r2
 800eed2:	bfb8      	it	lt
 800eed4:	4613      	movlt	r3, r2
 800eed6:	6033      	str	r3, [r6, #0]
 800eed8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eedc:	4607      	mov	r7, r0
 800eede:	460c      	mov	r4, r1
 800eee0:	b10a      	cbz	r2, 800eee6 <_printf_common+0x26>
 800eee2:	3301      	adds	r3, #1
 800eee4:	6033      	str	r3, [r6, #0]
 800eee6:	6823      	ldr	r3, [r4, #0]
 800eee8:	0699      	lsls	r1, r3, #26
 800eeea:	bf42      	ittt	mi
 800eeec:	6833      	ldrmi	r3, [r6, #0]
 800eeee:	3302      	addmi	r3, #2
 800eef0:	6033      	strmi	r3, [r6, #0]
 800eef2:	6825      	ldr	r5, [r4, #0]
 800eef4:	f015 0506 	ands.w	r5, r5, #6
 800eef8:	d106      	bne.n	800ef08 <_printf_common+0x48>
 800eefa:	f104 0a19 	add.w	sl, r4, #25
 800eefe:	68e3      	ldr	r3, [r4, #12]
 800ef00:	6832      	ldr	r2, [r6, #0]
 800ef02:	1a9b      	subs	r3, r3, r2
 800ef04:	42ab      	cmp	r3, r5
 800ef06:	dc26      	bgt.n	800ef56 <_printf_common+0x96>
 800ef08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ef0c:	1e13      	subs	r3, r2, #0
 800ef0e:	6822      	ldr	r2, [r4, #0]
 800ef10:	bf18      	it	ne
 800ef12:	2301      	movne	r3, #1
 800ef14:	0692      	lsls	r2, r2, #26
 800ef16:	d42b      	bmi.n	800ef70 <_printf_common+0xb0>
 800ef18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ef1c:	4649      	mov	r1, r9
 800ef1e:	4638      	mov	r0, r7
 800ef20:	47c0      	blx	r8
 800ef22:	3001      	adds	r0, #1
 800ef24:	d01e      	beq.n	800ef64 <_printf_common+0xa4>
 800ef26:	6823      	ldr	r3, [r4, #0]
 800ef28:	68e5      	ldr	r5, [r4, #12]
 800ef2a:	6832      	ldr	r2, [r6, #0]
 800ef2c:	f003 0306 	and.w	r3, r3, #6
 800ef30:	2b04      	cmp	r3, #4
 800ef32:	bf08      	it	eq
 800ef34:	1aad      	subeq	r5, r5, r2
 800ef36:	68a3      	ldr	r3, [r4, #8]
 800ef38:	6922      	ldr	r2, [r4, #16]
 800ef3a:	bf0c      	ite	eq
 800ef3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ef40:	2500      	movne	r5, #0
 800ef42:	4293      	cmp	r3, r2
 800ef44:	bfc4      	itt	gt
 800ef46:	1a9b      	subgt	r3, r3, r2
 800ef48:	18ed      	addgt	r5, r5, r3
 800ef4a:	2600      	movs	r6, #0
 800ef4c:	341a      	adds	r4, #26
 800ef4e:	42b5      	cmp	r5, r6
 800ef50:	d11a      	bne.n	800ef88 <_printf_common+0xc8>
 800ef52:	2000      	movs	r0, #0
 800ef54:	e008      	b.n	800ef68 <_printf_common+0xa8>
 800ef56:	2301      	movs	r3, #1
 800ef58:	4652      	mov	r2, sl
 800ef5a:	4649      	mov	r1, r9
 800ef5c:	4638      	mov	r0, r7
 800ef5e:	47c0      	blx	r8
 800ef60:	3001      	adds	r0, #1
 800ef62:	d103      	bne.n	800ef6c <_printf_common+0xac>
 800ef64:	f04f 30ff 	mov.w	r0, #4294967295
 800ef68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef6c:	3501      	adds	r5, #1
 800ef6e:	e7c6      	b.n	800eefe <_printf_common+0x3e>
 800ef70:	18e1      	adds	r1, r4, r3
 800ef72:	1c5a      	adds	r2, r3, #1
 800ef74:	2030      	movs	r0, #48	; 0x30
 800ef76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ef7a:	4422      	add	r2, r4
 800ef7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ef80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ef84:	3302      	adds	r3, #2
 800ef86:	e7c7      	b.n	800ef18 <_printf_common+0x58>
 800ef88:	2301      	movs	r3, #1
 800ef8a:	4622      	mov	r2, r4
 800ef8c:	4649      	mov	r1, r9
 800ef8e:	4638      	mov	r0, r7
 800ef90:	47c0      	blx	r8
 800ef92:	3001      	adds	r0, #1
 800ef94:	d0e6      	beq.n	800ef64 <_printf_common+0xa4>
 800ef96:	3601      	adds	r6, #1
 800ef98:	e7d9      	b.n	800ef4e <_printf_common+0x8e>
	...

0800ef9c <_printf_i>:
 800ef9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800efa0:	460c      	mov	r4, r1
 800efa2:	4691      	mov	r9, r2
 800efa4:	7e27      	ldrb	r7, [r4, #24]
 800efa6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800efa8:	2f78      	cmp	r7, #120	; 0x78
 800efaa:	4680      	mov	r8, r0
 800efac:	469a      	mov	sl, r3
 800efae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800efb2:	d807      	bhi.n	800efc4 <_printf_i+0x28>
 800efb4:	2f62      	cmp	r7, #98	; 0x62
 800efb6:	d80a      	bhi.n	800efce <_printf_i+0x32>
 800efb8:	2f00      	cmp	r7, #0
 800efba:	f000 80d8 	beq.w	800f16e <_printf_i+0x1d2>
 800efbe:	2f58      	cmp	r7, #88	; 0x58
 800efc0:	f000 80a3 	beq.w	800f10a <_printf_i+0x16e>
 800efc4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800efc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800efcc:	e03a      	b.n	800f044 <_printf_i+0xa8>
 800efce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800efd2:	2b15      	cmp	r3, #21
 800efd4:	d8f6      	bhi.n	800efc4 <_printf_i+0x28>
 800efd6:	a001      	add	r0, pc, #4	; (adr r0, 800efdc <_printf_i+0x40>)
 800efd8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800efdc:	0800f035 	.word	0x0800f035
 800efe0:	0800f049 	.word	0x0800f049
 800efe4:	0800efc5 	.word	0x0800efc5
 800efe8:	0800efc5 	.word	0x0800efc5
 800efec:	0800efc5 	.word	0x0800efc5
 800eff0:	0800efc5 	.word	0x0800efc5
 800eff4:	0800f049 	.word	0x0800f049
 800eff8:	0800efc5 	.word	0x0800efc5
 800effc:	0800efc5 	.word	0x0800efc5
 800f000:	0800efc5 	.word	0x0800efc5
 800f004:	0800efc5 	.word	0x0800efc5
 800f008:	0800f155 	.word	0x0800f155
 800f00c:	0800f079 	.word	0x0800f079
 800f010:	0800f137 	.word	0x0800f137
 800f014:	0800efc5 	.word	0x0800efc5
 800f018:	0800efc5 	.word	0x0800efc5
 800f01c:	0800f177 	.word	0x0800f177
 800f020:	0800efc5 	.word	0x0800efc5
 800f024:	0800f079 	.word	0x0800f079
 800f028:	0800efc5 	.word	0x0800efc5
 800f02c:	0800efc5 	.word	0x0800efc5
 800f030:	0800f13f 	.word	0x0800f13f
 800f034:	680b      	ldr	r3, [r1, #0]
 800f036:	1d1a      	adds	r2, r3, #4
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	600a      	str	r2, [r1, #0]
 800f03c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f040:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f044:	2301      	movs	r3, #1
 800f046:	e0a3      	b.n	800f190 <_printf_i+0x1f4>
 800f048:	6825      	ldr	r5, [r4, #0]
 800f04a:	6808      	ldr	r0, [r1, #0]
 800f04c:	062e      	lsls	r6, r5, #24
 800f04e:	f100 0304 	add.w	r3, r0, #4
 800f052:	d50a      	bpl.n	800f06a <_printf_i+0xce>
 800f054:	6805      	ldr	r5, [r0, #0]
 800f056:	600b      	str	r3, [r1, #0]
 800f058:	2d00      	cmp	r5, #0
 800f05a:	da03      	bge.n	800f064 <_printf_i+0xc8>
 800f05c:	232d      	movs	r3, #45	; 0x2d
 800f05e:	426d      	negs	r5, r5
 800f060:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f064:	485e      	ldr	r0, [pc, #376]	; (800f1e0 <_printf_i+0x244>)
 800f066:	230a      	movs	r3, #10
 800f068:	e019      	b.n	800f09e <_printf_i+0x102>
 800f06a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f06e:	6805      	ldr	r5, [r0, #0]
 800f070:	600b      	str	r3, [r1, #0]
 800f072:	bf18      	it	ne
 800f074:	b22d      	sxthne	r5, r5
 800f076:	e7ef      	b.n	800f058 <_printf_i+0xbc>
 800f078:	680b      	ldr	r3, [r1, #0]
 800f07a:	6825      	ldr	r5, [r4, #0]
 800f07c:	1d18      	adds	r0, r3, #4
 800f07e:	6008      	str	r0, [r1, #0]
 800f080:	0628      	lsls	r0, r5, #24
 800f082:	d501      	bpl.n	800f088 <_printf_i+0xec>
 800f084:	681d      	ldr	r5, [r3, #0]
 800f086:	e002      	b.n	800f08e <_printf_i+0xf2>
 800f088:	0669      	lsls	r1, r5, #25
 800f08a:	d5fb      	bpl.n	800f084 <_printf_i+0xe8>
 800f08c:	881d      	ldrh	r5, [r3, #0]
 800f08e:	4854      	ldr	r0, [pc, #336]	; (800f1e0 <_printf_i+0x244>)
 800f090:	2f6f      	cmp	r7, #111	; 0x6f
 800f092:	bf0c      	ite	eq
 800f094:	2308      	moveq	r3, #8
 800f096:	230a      	movne	r3, #10
 800f098:	2100      	movs	r1, #0
 800f09a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f09e:	6866      	ldr	r6, [r4, #4]
 800f0a0:	60a6      	str	r6, [r4, #8]
 800f0a2:	2e00      	cmp	r6, #0
 800f0a4:	bfa2      	ittt	ge
 800f0a6:	6821      	ldrge	r1, [r4, #0]
 800f0a8:	f021 0104 	bicge.w	r1, r1, #4
 800f0ac:	6021      	strge	r1, [r4, #0]
 800f0ae:	b90d      	cbnz	r5, 800f0b4 <_printf_i+0x118>
 800f0b0:	2e00      	cmp	r6, #0
 800f0b2:	d04d      	beq.n	800f150 <_printf_i+0x1b4>
 800f0b4:	4616      	mov	r6, r2
 800f0b6:	fbb5 f1f3 	udiv	r1, r5, r3
 800f0ba:	fb03 5711 	mls	r7, r3, r1, r5
 800f0be:	5dc7      	ldrb	r7, [r0, r7]
 800f0c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f0c4:	462f      	mov	r7, r5
 800f0c6:	42bb      	cmp	r3, r7
 800f0c8:	460d      	mov	r5, r1
 800f0ca:	d9f4      	bls.n	800f0b6 <_printf_i+0x11a>
 800f0cc:	2b08      	cmp	r3, #8
 800f0ce:	d10b      	bne.n	800f0e8 <_printf_i+0x14c>
 800f0d0:	6823      	ldr	r3, [r4, #0]
 800f0d2:	07df      	lsls	r7, r3, #31
 800f0d4:	d508      	bpl.n	800f0e8 <_printf_i+0x14c>
 800f0d6:	6923      	ldr	r3, [r4, #16]
 800f0d8:	6861      	ldr	r1, [r4, #4]
 800f0da:	4299      	cmp	r1, r3
 800f0dc:	bfde      	ittt	le
 800f0de:	2330      	movle	r3, #48	; 0x30
 800f0e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f0e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f0e8:	1b92      	subs	r2, r2, r6
 800f0ea:	6122      	str	r2, [r4, #16]
 800f0ec:	f8cd a000 	str.w	sl, [sp]
 800f0f0:	464b      	mov	r3, r9
 800f0f2:	aa03      	add	r2, sp, #12
 800f0f4:	4621      	mov	r1, r4
 800f0f6:	4640      	mov	r0, r8
 800f0f8:	f7ff fee2 	bl	800eec0 <_printf_common>
 800f0fc:	3001      	adds	r0, #1
 800f0fe:	d14c      	bne.n	800f19a <_printf_i+0x1fe>
 800f100:	f04f 30ff 	mov.w	r0, #4294967295
 800f104:	b004      	add	sp, #16
 800f106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f10a:	4835      	ldr	r0, [pc, #212]	; (800f1e0 <_printf_i+0x244>)
 800f10c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f110:	6823      	ldr	r3, [r4, #0]
 800f112:	680e      	ldr	r6, [r1, #0]
 800f114:	061f      	lsls	r7, r3, #24
 800f116:	f856 5b04 	ldr.w	r5, [r6], #4
 800f11a:	600e      	str	r6, [r1, #0]
 800f11c:	d514      	bpl.n	800f148 <_printf_i+0x1ac>
 800f11e:	07d9      	lsls	r1, r3, #31
 800f120:	bf44      	itt	mi
 800f122:	f043 0320 	orrmi.w	r3, r3, #32
 800f126:	6023      	strmi	r3, [r4, #0]
 800f128:	b91d      	cbnz	r5, 800f132 <_printf_i+0x196>
 800f12a:	6823      	ldr	r3, [r4, #0]
 800f12c:	f023 0320 	bic.w	r3, r3, #32
 800f130:	6023      	str	r3, [r4, #0]
 800f132:	2310      	movs	r3, #16
 800f134:	e7b0      	b.n	800f098 <_printf_i+0xfc>
 800f136:	6823      	ldr	r3, [r4, #0]
 800f138:	f043 0320 	orr.w	r3, r3, #32
 800f13c:	6023      	str	r3, [r4, #0]
 800f13e:	2378      	movs	r3, #120	; 0x78
 800f140:	4828      	ldr	r0, [pc, #160]	; (800f1e4 <_printf_i+0x248>)
 800f142:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f146:	e7e3      	b.n	800f110 <_printf_i+0x174>
 800f148:	065e      	lsls	r6, r3, #25
 800f14a:	bf48      	it	mi
 800f14c:	b2ad      	uxthmi	r5, r5
 800f14e:	e7e6      	b.n	800f11e <_printf_i+0x182>
 800f150:	4616      	mov	r6, r2
 800f152:	e7bb      	b.n	800f0cc <_printf_i+0x130>
 800f154:	680b      	ldr	r3, [r1, #0]
 800f156:	6826      	ldr	r6, [r4, #0]
 800f158:	6960      	ldr	r0, [r4, #20]
 800f15a:	1d1d      	adds	r5, r3, #4
 800f15c:	600d      	str	r5, [r1, #0]
 800f15e:	0635      	lsls	r5, r6, #24
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	d501      	bpl.n	800f168 <_printf_i+0x1cc>
 800f164:	6018      	str	r0, [r3, #0]
 800f166:	e002      	b.n	800f16e <_printf_i+0x1d2>
 800f168:	0671      	lsls	r1, r6, #25
 800f16a:	d5fb      	bpl.n	800f164 <_printf_i+0x1c8>
 800f16c:	8018      	strh	r0, [r3, #0]
 800f16e:	2300      	movs	r3, #0
 800f170:	6123      	str	r3, [r4, #16]
 800f172:	4616      	mov	r6, r2
 800f174:	e7ba      	b.n	800f0ec <_printf_i+0x150>
 800f176:	680b      	ldr	r3, [r1, #0]
 800f178:	1d1a      	adds	r2, r3, #4
 800f17a:	600a      	str	r2, [r1, #0]
 800f17c:	681e      	ldr	r6, [r3, #0]
 800f17e:	6862      	ldr	r2, [r4, #4]
 800f180:	2100      	movs	r1, #0
 800f182:	4630      	mov	r0, r6
 800f184:	f7f1 f83c 	bl	8000200 <memchr>
 800f188:	b108      	cbz	r0, 800f18e <_printf_i+0x1f2>
 800f18a:	1b80      	subs	r0, r0, r6
 800f18c:	6060      	str	r0, [r4, #4]
 800f18e:	6863      	ldr	r3, [r4, #4]
 800f190:	6123      	str	r3, [r4, #16]
 800f192:	2300      	movs	r3, #0
 800f194:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f198:	e7a8      	b.n	800f0ec <_printf_i+0x150>
 800f19a:	6923      	ldr	r3, [r4, #16]
 800f19c:	4632      	mov	r2, r6
 800f19e:	4649      	mov	r1, r9
 800f1a0:	4640      	mov	r0, r8
 800f1a2:	47d0      	blx	sl
 800f1a4:	3001      	adds	r0, #1
 800f1a6:	d0ab      	beq.n	800f100 <_printf_i+0x164>
 800f1a8:	6823      	ldr	r3, [r4, #0]
 800f1aa:	079b      	lsls	r3, r3, #30
 800f1ac:	d413      	bmi.n	800f1d6 <_printf_i+0x23a>
 800f1ae:	68e0      	ldr	r0, [r4, #12]
 800f1b0:	9b03      	ldr	r3, [sp, #12]
 800f1b2:	4298      	cmp	r0, r3
 800f1b4:	bfb8      	it	lt
 800f1b6:	4618      	movlt	r0, r3
 800f1b8:	e7a4      	b.n	800f104 <_printf_i+0x168>
 800f1ba:	2301      	movs	r3, #1
 800f1bc:	4632      	mov	r2, r6
 800f1be:	4649      	mov	r1, r9
 800f1c0:	4640      	mov	r0, r8
 800f1c2:	47d0      	blx	sl
 800f1c4:	3001      	adds	r0, #1
 800f1c6:	d09b      	beq.n	800f100 <_printf_i+0x164>
 800f1c8:	3501      	adds	r5, #1
 800f1ca:	68e3      	ldr	r3, [r4, #12]
 800f1cc:	9903      	ldr	r1, [sp, #12]
 800f1ce:	1a5b      	subs	r3, r3, r1
 800f1d0:	42ab      	cmp	r3, r5
 800f1d2:	dcf2      	bgt.n	800f1ba <_printf_i+0x21e>
 800f1d4:	e7eb      	b.n	800f1ae <_printf_i+0x212>
 800f1d6:	2500      	movs	r5, #0
 800f1d8:	f104 0619 	add.w	r6, r4, #25
 800f1dc:	e7f5      	b.n	800f1ca <_printf_i+0x22e>
 800f1de:	bf00      	nop
 800f1e0:	080109f1 	.word	0x080109f1
 800f1e4:	08010a02 	.word	0x08010a02

0800f1e8 <__svfiscanf_r>:
 800f1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1ec:	461d      	mov	r5, r3
 800f1ee:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800f1f0:	07df      	lsls	r7, r3, #31
 800f1f2:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800f1f6:	4606      	mov	r6, r0
 800f1f8:	460c      	mov	r4, r1
 800f1fa:	4692      	mov	sl, r2
 800f1fc:	d405      	bmi.n	800f20a <__svfiscanf_r+0x22>
 800f1fe:	898b      	ldrh	r3, [r1, #12]
 800f200:	0598      	lsls	r0, r3, #22
 800f202:	d402      	bmi.n	800f20a <__svfiscanf_r+0x22>
 800f204:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800f206:	f7ff fb32 	bl	800e86e <__retarget_lock_acquire_recursive>
 800f20a:	2300      	movs	r3, #0
 800f20c:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 800f210:	4bae      	ldr	r3, [pc, #696]	; (800f4cc <__svfiscanf_r+0x2e4>)
 800f212:	93a0      	str	r3, [sp, #640]	; 0x280
 800f214:	f10d 0804 	add.w	r8, sp, #4
 800f218:	4bad      	ldr	r3, [pc, #692]	; (800f4d0 <__svfiscanf_r+0x2e8>)
 800f21a:	4fae      	ldr	r7, [pc, #696]	; (800f4d4 <__svfiscanf_r+0x2ec>)
 800f21c:	f8df 92b8 	ldr.w	r9, [pc, #696]	; 800f4d8 <__svfiscanf_r+0x2f0>
 800f220:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800f224:	93a1      	str	r3, [sp, #644]	; 0x284
 800f226:	9500      	str	r5, [sp, #0]
 800f228:	f89a b000 	ldrb.w	fp, [sl]
 800f22c:	f1bb 0f00 	cmp.w	fp, #0
 800f230:	f000 8170 	beq.w	800f514 <__svfiscanf_r+0x32c>
 800f234:	f81b 3007 	ldrb.w	r3, [fp, r7]
 800f238:	f013 0308 	ands.w	r3, r3, #8
 800f23c:	f10a 0501 	add.w	r5, sl, #1
 800f240:	d019      	beq.n	800f276 <__svfiscanf_r+0x8e>
 800f242:	6863      	ldr	r3, [r4, #4]
 800f244:	2b00      	cmp	r3, #0
 800f246:	dd0f      	ble.n	800f268 <__svfiscanf_r+0x80>
 800f248:	6823      	ldr	r3, [r4, #0]
 800f24a:	781a      	ldrb	r2, [r3, #0]
 800f24c:	5cba      	ldrb	r2, [r7, r2]
 800f24e:	0711      	lsls	r1, r2, #28
 800f250:	d401      	bmi.n	800f256 <__svfiscanf_r+0x6e>
 800f252:	46aa      	mov	sl, r5
 800f254:	e7e8      	b.n	800f228 <__svfiscanf_r+0x40>
 800f256:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f258:	3201      	adds	r2, #1
 800f25a:	9245      	str	r2, [sp, #276]	; 0x114
 800f25c:	6862      	ldr	r2, [r4, #4]
 800f25e:	3301      	adds	r3, #1
 800f260:	3a01      	subs	r2, #1
 800f262:	6062      	str	r2, [r4, #4]
 800f264:	6023      	str	r3, [r4, #0]
 800f266:	e7ec      	b.n	800f242 <__svfiscanf_r+0x5a>
 800f268:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f26a:	4621      	mov	r1, r4
 800f26c:	4630      	mov	r0, r6
 800f26e:	4798      	blx	r3
 800f270:	2800      	cmp	r0, #0
 800f272:	d0e9      	beq.n	800f248 <__svfiscanf_r+0x60>
 800f274:	e7ed      	b.n	800f252 <__svfiscanf_r+0x6a>
 800f276:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800f27a:	f040 8086 	bne.w	800f38a <__svfiscanf_r+0x1a2>
 800f27e:	9341      	str	r3, [sp, #260]	; 0x104
 800f280:	9343      	str	r3, [sp, #268]	; 0x10c
 800f282:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800f286:	2b2a      	cmp	r3, #42	; 0x2a
 800f288:	bf02      	ittt	eq
 800f28a:	2310      	moveq	r3, #16
 800f28c:	9341      	streq	r3, [sp, #260]	; 0x104
 800f28e:	f10a 0502 	addeq.w	r5, sl, #2
 800f292:	220a      	movs	r2, #10
 800f294:	46aa      	mov	sl, r5
 800f296:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800f29a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800f29e:	2b09      	cmp	r3, #9
 800f2a0:	d91e      	bls.n	800f2e0 <__svfiscanf_r+0xf8>
 800f2a2:	488d      	ldr	r0, [pc, #564]	; (800f4d8 <__svfiscanf_r+0x2f0>)
 800f2a4:	2203      	movs	r2, #3
 800f2a6:	f7f0 ffab 	bl	8000200 <memchr>
 800f2aa:	b140      	cbz	r0, 800f2be <__svfiscanf_r+0xd6>
 800f2ac:	2301      	movs	r3, #1
 800f2ae:	eba0 0009 	sub.w	r0, r0, r9
 800f2b2:	fa03 f000 	lsl.w	r0, r3, r0
 800f2b6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f2b8:	4318      	orrs	r0, r3
 800f2ba:	9041      	str	r0, [sp, #260]	; 0x104
 800f2bc:	4655      	mov	r5, sl
 800f2be:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f2c2:	2b78      	cmp	r3, #120	; 0x78
 800f2c4:	d807      	bhi.n	800f2d6 <__svfiscanf_r+0xee>
 800f2c6:	2b57      	cmp	r3, #87	; 0x57
 800f2c8:	d811      	bhi.n	800f2ee <__svfiscanf_r+0x106>
 800f2ca:	2b25      	cmp	r3, #37	; 0x25
 800f2cc:	d05d      	beq.n	800f38a <__svfiscanf_r+0x1a2>
 800f2ce:	d857      	bhi.n	800f380 <__svfiscanf_r+0x198>
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	f000 80d6 	beq.w	800f482 <__svfiscanf_r+0x29a>
 800f2d6:	2303      	movs	r3, #3
 800f2d8:	9347      	str	r3, [sp, #284]	; 0x11c
 800f2da:	230a      	movs	r3, #10
 800f2dc:	9342      	str	r3, [sp, #264]	; 0x108
 800f2de:	e08b      	b.n	800f3f8 <__svfiscanf_r+0x210>
 800f2e0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800f2e2:	fb02 1303 	mla	r3, r2, r3, r1
 800f2e6:	3b30      	subs	r3, #48	; 0x30
 800f2e8:	9343      	str	r3, [sp, #268]	; 0x10c
 800f2ea:	4655      	mov	r5, sl
 800f2ec:	e7d2      	b.n	800f294 <__svfiscanf_r+0xac>
 800f2ee:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800f2f2:	2a20      	cmp	r2, #32
 800f2f4:	d8ef      	bhi.n	800f2d6 <__svfiscanf_r+0xee>
 800f2f6:	a101      	add	r1, pc, #4	; (adr r1, 800f2fc <__svfiscanf_r+0x114>)
 800f2f8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f2fc:	0800f3e3 	.word	0x0800f3e3
 800f300:	0800f2d7 	.word	0x0800f2d7
 800f304:	0800f2d7 	.word	0x0800f2d7
 800f308:	0800f441 	.word	0x0800f441
 800f30c:	0800f2d7 	.word	0x0800f2d7
 800f310:	0800f2d7 	.word	0x0800f2d7
 800f314:	0800f2d7 	.word	0x0800f2d7
 800f318:	0800f2d7 	.word	0x0800f2d7
 800f31c:	0800f2d7 	.word	0x0800f2d7
 800f320:	0800f2d7 	.word	0x0800f2d7
 800f324:	0800f2d7 	.word	0x0800f2d7
 800f328:	0800f457 	.word	0x0800f457
 800f32c:	0800f42d 	.word	0x0800f42d
 800f330:	0800f387 	.word	0x0800f387
 800f334:	0800f387 	.word	0x0800f387
 800f338:	0800f387 	.word	0x0800f387
 800f33c:	0800f2d7 	.word	0x0800f2d7
 800f340:	0800f431 	.word	0x0800f431
 800f344:	0800f2d7 	.word	0x0800f2d7
 800f348:	0800f2d7 	.word	0x0800f2d7
 800f34c:	0800f2d7 	.word	0x0800f2d7
 800f350:	0800f2d7 	.word	0x0800f2d7
 800f354:	0800f467 	.word	0x0800f467
 800f358:	0800f439 	.word	0x0800f439
 800f35c:	0800f3db 	.word	0x0800f3db
 800f360:	0800f2d7 	.word	0x0800f2d7
 800f364:	0800f2d7 	.word	0x0800f2d7
 800f368:	0800f463 	.word	0x0800f463
 800f36c:	0800f2d7 	.word	0x0800f2d7
 800f370:	0800f42d 	.word	0x0800f42d
 800f374:	0800f2d7 	.word	0x0800f2d7
 800f378:	0800f2d7 	.word	0x0800f2d7
 800f37c:	0800f3e3 	.word	0x0800f3e3
 800f380:	3b45      	subs	r3, #69	; 0x45
 800f382:	2b02      	cmp	r3, #2
 800f384:	d8a7      	bhi.n	800f2d6 <__svfiscanf_r+0xee>
 800f386:	2305      	movs	r3, #5
 800f388:	e035      	b.n	800f3f6 <__svfiscanf_r+0x20e>
 800f38a:	6863      	ldr	r3, [r4, #4]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	dd0d      	ble.n	800f3ac <__svfiscanf_r+0x1c4>
 800f390:	6823      	ldr	r3, [r4, #0]
 800f392:	781a      	ldrb	r2, [r3, #0]
 800f394:	455a      	cmp	r2, fp
 800f396:	f040 80bd 	bne.w	800f514 <__svfiscanf_r+0x32c>
 800f39a:	3301      	adds	r3, #1
 800f39c:	6862      	ldr	r2, [r4, #4]
 800f39e:	6023      	str	r3, [r4, #0]
 800f3a0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800f3a2:	3a01      	subs	r2, #1
 800f3a4:	3301      	adds	r3, #1
 800f3a6:	6062      	str	r2, [r4, #4]
 800f3a8:	9345      	str	r3, [sp, #276]	; 0x114
 800f3aa:	e752      	b.n	800f252 <__svfiscanf_r+0x6a>
 800f3ac:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f3ae:	4621      	mov	r1, r4
 800f3b0:	4630      	mov	r0, r6
 800f3b2:	4798      	blx	r3
 800f3b4:	2800      	cmp	r0, #0
 800f3b6:	d0eb      	beq.n	800f390 <__svfiscanf_r+0x1a8>
 800f3b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f3ba:	07da      	lsls	r2, r3, #31
 800f3bc:	f140 80a2 	bpl.w	800f504 <__svfiscanf_r+0x31c>
 800f3c0:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f3c2:	2800      	cmp	r0, #0
 800f3c4:	d066      	beq.n	800f494 <__svfiscanf_r+0x2ac>
 800f3c6:	89a3      	ldrh	r3, [r4, #12]
 800f3c8:	f013 0f40 	tst.w	r3, #64	; 0x40
 800f3cc:	bf18      	it	ne
 800f3ce:	f04f 30ff 	movne.w	r0, #4294967295
 800f3d2:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800f3d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3da:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f3dc:	f042 0220 	orr.w	r2, r2, #32
 800f3e0:	9241      	str	r2, [sp, #260]	; 0x104
 800f3e2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f3e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f3e8:	9241      	str	r2, [sp, #260]	; 0x104
 800f3ea:	2210      	movs	r2, #16
 800f3ec:	2b6f      	cmp	r3, #111	; 0x6f
 800f3ee:	9242      	str	r2, [sp, #264]	; 0x108
 800f3f0:	bf34      	ite	cc
 800f3f2:	2303      	movcc	r3, #3
 800f3f4:	2304      	movcs	r3, #4
 800f3f6:	9347      	str	r3, [sp, #284]	; 0x11c
 800f3f8:	6863      	ldr	r3, [r4, #4]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	dd4d      	ble.n	800f49a <__svfiscanf_r+0x2b2>
 800f3fe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f400:	065b      	lsls	r3, r3, #25
 800f402:	d404      	bmi.n	800f40e <__svfiscanf_r+0x226>
 800f404:	6823      	ldr	r3, [r4, #0]
 800f406:	781a      	ldrb	r2, [r3, #0]
 800f408:	5cba      	ldrb	r2, [r7, r2]
 800f40a:	0710      	lsls	r0, r2, #28
 800f40c:	d44c      	bmi.n	800f4a8 <__svfiscanf_r+0x2c0>
 800f40e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800f410:	2b02      	cmp	r3, #2
 800f412:	dc63      	bgt.n	800f4dc <__svfiscanf_r+0x2f4>
 800f414:	466b      	mov	r3, sp
 800f416:	4622      	mov	r2, r4
 800f418:	a941      	add	r1, sp, #260	; 0x104
 800f41a:	4630      	mov	r0, r6
 800f41c:	f000 f8b0 	bl	800f580 <_scanf_chars>
 800f420:	2801      	cmp	r0, #1
 800f422:	d077      	beq.n	800f514 <__svfiscanf_r+0x32c>
 800f424:	2802      	cmp	r0, #2
 800f426:	f47f af14 	bne.w	800f252 <__svfiscanf_r+0x6a>
 800f42a:	e7c5      	b.n	800f3b8 <__svfiscanf_r+0x1d0>
 800f42c:	220a      	movs	r2, #10
 800f42e:	e7dd      	b.n	800f3ec <__svfiscanf_r+0x204>
 800f430:	2300      	movs	r3, #0
 800f432:	9342      	str	r3, [sp, #264]	; 0x108
 800f434:	2303      	movs	r3, #3
 800f436:	e7de      	b.n	800f3f6 <__svfiscanf_r+0x20e>
 800f438:	2308      	movs	r3, #8
 800f43a:	9342      	str	r3, [sp, #264]	; 0x108
 800f43c:	2304      	movs	r3, #4
 800f43e:	e7da      	b.n	800f3f6 <__svfiscanf_r+0x20e>
 800f440:	4629      	mov	r1, r5
 800f442:	4640      	mov	r0, r8
 800f444:	f000 fa7c 	bl	800f940 <__sccl>
 800f448:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f44a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f44e:	9341      	str	r3, [sp, #260]	; 0x104
 800f450:	4605      	mov	r5, r0
 800f452:	2301      	movs	r3, #1
 800f454:	e7cf      	b.n	800f3f6 <__svfiscanf_r+0x20e>
 800f456:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f458:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f45c:	9341      	str	r3, [sp, #260]	; 0x104
 800f45e:	2300      	movs	r3, #0
 800f460:	e7c9      	b.n	800f3f6 <__svfiscanf_r+0x20e>
 800f462:	2302      	movs	r3, #2
 800f464:	e7c7      	b.n	800f3f6 <__svfiscanf_r+0x20e>
 800f466:	9841      	ldr	r0, [sp, #260]	; 0x104
 800f468:	06c3      	lsls	r3, r0, #27
 800f46a:	f53f aef2 	bmi.w	800f252 <__svfiscanf_r+0x6a>
 800f46e:	9b00      	ldr	r3, [sp, #0]
 800f470:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f472:	1d19      	adds	r1, r3, #4
 800f474:	9100      	str	r1, [sp, #0]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	07c0      	lsls	r0, r0, #31
 800f47a:	bf4c      	ite	mi
 800f47c:	801a      	strhmi	r2, [r3, #0]
 800f47e:	601a      	strpl	r2, [r3, #0]
 800f480:	e6e7      	b.n	800f252 <__svfiscanf_r+0x6a>
 800f482:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f484:	07d8      	lsls	r0, r3, #31
 800f486:	d405      	bmi.n	800f494 <__svfiscanf_r+0x2ac>
 800f488:	89a3      	ldrh	r3, [r4, #12]
 800f48a:	0599      	lsls	r1, r3, #22
 800f48c:	d402      	bmi.n	800f494 <__svfiscanf_r+0x2ac>
 800f48e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f490:	f7ff f9ee 	bl	800e870 <__retarget_lock_release_recursive>
 800f494:	f04f 30ff 	mov.w	r0, #4294967295
 800f498:	e79b      	b.n	800f3d2 <__svfiscanf_r+0x1ea>
 800f49a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f49c:	4621      	mov	r1, r4
 800f49e:	4630      	mov	r0, r6
 800f4a0:	4798      	blx	r3
 800f4a2:	2800      	cmp	r0, #0
 800f4a4:	d0ab      	beq.n	800f3fe <__svfiscanf_r+0x216>
 800f4a6:	e787      	b.n	800f3b8 <__svfiscanf_r+0x1d0>
 800f4a8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f4aa:	3201      	adds	r2, #1
 800f4ac:	9245      	str	r2, [sp, #276]	; 0x114
 800f4ae:	6862      	ldr	r2, [r4, #4]
 800f4b0:	3a01      	subs	r2, #1
 800f4b2:	2a00      	cmp	r2, #0
 800f4b4:	6062      	str	r2, [r4, #4]
 800f4b6:	dd02      	ble.n	800f4be <__svfiscanf_r+0x2d6>
 800f4b8:	3301      	adds	r3, #1
 800f4ba:	6023      	str	r3, [r4, #0]
 800f4bc:	e7a2      	b.n	800f404 <__svfiscanf_r+0x21c>
 800f4be:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f4c0:	4621      	mov	r1, r4
 800f4c2:	4630      	mov	r0, r6
 800f4c4:	4798      	blx	r3
 800f4c6:	2800      	cmp	r0, #0
 800f4c8:	d09c      	beq.n	800f404 <__svfiscanf_r+0x21c>
 800f4ca:	e775      	b.n	800f3b8 <__svfiscanf_r+0x1d0>
 800f4cc:	0800fcb9 	.word	0x0800fcb9
 800f4d0:	0800f82d 	.word	0x0800f82d
 800f4d4:	08010a2f 	.word	0x08010a2f
 800f4d8:	080109e6 	.word	0x080109e6
 800f4dc:	2b04      	cmp	r3, #4
 800f4de:	dc06      	bgt.n	800f4ee <__svfiscanf_r+0x306>
 800f4e0:	466b      	mov	r3, sp
 800f4e2:	4622      	mov	r2, r4
 800f4e4:	a941      	add	r1, sp, #260	; 0x104
 800f4e6:	4630      	mov	r0, r6
 800f4e8:	f000 f8a2 	bl	800f630 <_scanf_i>
 800f4ec:	e798      	b.n	800f420 <__svfiscanf_r+0x238>
 800f4ee:	4b0f      	ldr	r3, [pc, #60]	; (800f52c <__svfiscanf_r+0x344>)
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	f43f aeae 	beq.w	800f252 <__svfiscanf_r+0x6a>
 800f4f6:	466b      	mov	r3, sp
 800f4f8:	4622      	mov	r2, r4
 800f4fa:	a941      	add	r1, sp, #260	; 0x104
 800f4fc:	4630      	mov	r0, r6
 800f4fe:	f3af 8000 	nop.w
 800f502:	e78d      	b.n	800f420 <__svfiscanf_r+0x238>
 800f504:	89a3      	ldrh	r3, [r4, #12]
 800f506:	0599      	lsls	r1, r3, #22
 800f508:	f53f af5a 	bmi.w	800f3c0 <__svfiscanf_r+0x1d8>
 800f50c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f50e:	f7ff f9af 	bl	800e870 <__retarget_lock_release_recursive>
 800f512:	e755      	b.n	800f3c0 <__svfiscanf_r+0x1d8>
 800f514:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f516:	07da      	lsls	r2, r3, #31
 800f518:	d405      	bmi.n	800f526 <__svfiscanf_r+0x33e>
 800f51a:	89a3      	ldrh	r3, [r4, #12]
 800f51c:	059b      	lsls	r3, r3, #22
 800f51e:	d402      	bmi.n	800f526 <__svfiscanf_r+0x33e>
 800f520:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f522:	f7ff f9a5 	bl	800e870 <__retarget_lock_release_recursive>
 800f526:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f528:	e753      	b.n	800f3d2 <__svfiscanf_r+0x1ea>
 800f52a:	bf00      	nop
 800f52c:	00000000 	.word	0x00000000

0800f530 <_vfiscanf_r>:
 800f530:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f532:	460c      	mov	r4, r1
 800f534:	4605      	mov	r5, r0
 800f536:	b138      	cbz	r0, 800f548 <_vfiscanf_r+0x18>
 800f538:	6981      	ldr	r1, [r0, #24]
 800f53a:	b929      	cbnz	r1, 800f548 <_vfiscanf_r+0x18>
 800f53c:	e9cd 2300 	strd	r2, r3, [sp]
 800f540:	f7ff f8da 	bl	800e6f8 <__sinit>
 800f544:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f548:	490a      	ldr	r1, [pc, #40]	; (800f574 <_vfiscanf_r+0x44>)
 800f54a:	428c      	cmp	r4, r1
 800f54c:	d107      	bne.n	800f55e <_vfiscanf_r+0x2e>
 800f54e:	686c      	ldr	r4, [r5, #4]
 800f550:	4621      	mov	r1, r4
 800f552:	4628      	mov	r0, r5
 800f554:	b003      	add	sp, #12
 800f556:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f55a:	f7ff be45 	b.w	800f1e8 <__svfiscanf_r>
 800f55e:	4906      	ldr	r1, [pc, #24]	; (800f578 <_vfiscanf_r+0x48>)
 800f560:	428c      	cmp	r4, r1
 800f562:	d101      	bne.n	800f568 <_vfiscanf_r+0x38>
 800f564:	68ac      	ldr	r4, [r5, #8]
 800f566:	e7f3      	b.n	800f550 <_vfiscanf_r+0x20>
 800f568:	4904      	ldr	r1, [pc, #16]	; (800f57c <_vfiscanf_r+0x4c>)
 800f56a:	428c      	cmp	r4, r1
 800f56c:	bf08      	it	eq
 800f56e:	68ec      	ldreq	r4, [r5, #12]
 800f570:	e7ee      	b.n	800f550 <_vfiscanf_r+0x20>
 800f572:	bf00      	nop
 800f574:	080109a0 	.word	0x080109a0
 800f578:	080109c0 	.word	0x080109c0
 800f57c:	08010980 	.word	0x08010980

0800f580 <_scanf_chars>:
 800f580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f584:	4615      	mov	r5, r2
 800f586:	688a      	ldr	r2, [r1, #8]
 800f588:	4680      	mov	r8, r0
 800f58a:	460c      	mov	r4, r1
 800f58c:	b932      	cbnz	r2, 800f59c <_scanf_chars+0x1c>
 800f58e:	698a      	ldr	r2, [r1, #24]
 800f590:	2a00      	cmp	r2, #0
 800f592:	bf0c      	ite	eq
 800f594:	2201      	moveq	r2, #1
 800f596:	f04f 32ff 	movne.w	r2, #4294967295
 800f59a:	608a      	str	r2, [r1, #8]
 800f59c:	6822      	ldr	r2, [r4, #0]
 800f59e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800f62c <_scanf_chars+0xac>
 800f5a2:	06d1      	lsls	r1, r2, #27
 800f5a4:	bf5f      	itttt	pl
 800f5a6:	681a      	ldrpl	r2, [r3, #0]
 800f5a8:	1d11      	addpl	r1, r2, #4
 800f5aa:	6019      	strpl	r1, [r3, #0]
 800f5ac:	6816      	ldrpl	r6, [r2, #0]
 800f5ae:	2700      	movs	r7, #0
 800f5b0:	69a0      	ldr	r0, [r4, #24]
 800f5b2:	b188      	cbz	r0, 800f5d8 <_scanf_chars+0x58>
 800f5b4:	2801      	cmp	r0, #1
 800f5b6:	d107      	bne.n	800f5c8 <_scanf_chars+0x48>
 800f5b8:	682b      	ldr	r3, [r5, #0]
 800f5ba:	781a      	ldrb	r2, [r3, #0]
 800f5bc:	6963      	ldr	r3, [r4, #20]
 800f5be:	5c9b      	ldrb	r3, [r3, r2]
 800f5c0:	b953      	cbnz	r3, 800f5d8 <_scanf_chars+0x58>
 800f5c2:	bb27      	cbnz	r7, 800f60e <_scanf_chars+0x8e>
 800f5c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5c8:	2802      	cmp	r0, #2
 800f5ca:	d120      	bne.n	800f60e <_scanf_chars+0x8e>
 800f5cc:	682b      	ldr	r3, [r5, #0]
 800f5ce:	781b      	ldrb	r3, [r3, #0]
 800f5d0:	f813 3009 	ldrb.w	r3, [r3, r9]
 800f5d4:	071b      	lsls	r3, r3, #28
 800f5d6:	d41a      	bmi.n	800f60e <_scanf_chars+0x8e>
 800f5d8:	6823      	ldr	r3, [r4, #0]
 800f5da:	06da      	lsls	r2, r3, #27
 800f5dc:	bf5e      	ittt	pl
 800f5de:	682b      	ldrpl	r3, [r5, #0]
 800f5e0:	781b      	ldrbpl	r3, [r3, #0]
 800f5e2:	f806 3b01 	strbpl.w	r3, [r6], #1
 800f5e6:	682a      	ldr	r2, [r5, #0]
 800f5e8:	686b      	ldr	r3, [r5, #4]
 800f5ea:	3201      	adds	r2, #1
 800f5ec:	602a      	str	r2, [r5, #0]
 800f5ee:	68a2      	ldr	r2, [r4, #8]
 800f5f0:	3b01      	subs	r3, #1
 800f5f2:	3a01      	subs	r2, #1
 800f5f4:	606b      	str	r3, [r5, #4]
 800f5f6:	3701      	adds	r7, #1
 800f5f8:	60a2      	str	r2, [r4, #8]
 800f5fa:	b142      	cbz	r2, 800f60e <_scanf_chars+0x8e>
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	dcd7      	bgt.n	800f5b0 <_scanf_chars+0x30>
 800f600:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f604:	4629      	mov	r1, r5
 800f606:	4640      	mov	r0, r8
 800f608:	4798      	blx	r3
 800f60a:	2800      	cmp	r0, #0
 800f60c:	d0d0      	beq.n	800f5b0 <_scanf_chars+0x30>
 800f60e:	6823      	ldr	r3, [r4, #0]
 800f610:	f013 0310 	ands.w	r3, r3, #16
 800f614:	d105      	bne.n	800f622 <_scanf_chars+0xa2>
 800f616:	68e2      	ldr	r2, [r4, #12]
 800f618:	3201      	adds	r2, #1
 800f61a:	60e2      	str	r2, [r4, #12]
 800f61c:	69a2      	ldr	r2, [r4, #24]
 800f61e:	b102      	cbz	r2, 800f622 <_scanf_chars+0xa2>
 800f620:	7033      	strb	r3, [r6, #0]
 800f622:	6923      	ldr	r3, [r4, #16]
 800f624:	441f      	add	r7, r3
 800f626:	6127      	str	r7, [r4, #16]
 800f628:	2000      	movs	r0, #0
 800f62a:	e7cb      	b.n	800f5c4 <_scanf_chars+0x44>
 800f62c:	08010a2f 	.word	0x08010a2f

0800f630 <_scanf_i>:
 800f630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f634:	4698      	mov	r8, r3
 800f636:	4b74      	ldr	r3, [pc, #464]	; (800f808 <_scanf_i+0x1d8>)
 800f638:	460c      	mov	r4, r1
 800f63a:	4682      	mov	sl, r0
 800f63c:	4616      	mov	r6, r2
 800f63e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f642:	b087      	sub	sp, #28
 800f644:	ab03      	add	r3, sp, #12
 800f646:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f64a:	4b70      	ldr	r3, [pc, #448]	; (800f80c <_scanf_i+0x1dc>)
 800f64c:	69a1      	ldr	r1, [r4, #24]
 800f64e:	4a70      	ldr	r2, [pc, #448]	; (800f810 <_scanf_i+0x1e0>)
 800f650:	2903      	cmp	r1, #3
 800f652:	bf18      	it	ne
 800f654:	461a      	movne	r2, r3
 800f656:	68a3      	ldr	r3, [r4, #8]
 800f658:	9201      	str	r2, [sp, #4]
 800f65a:	1e5a      	subs	r2, r3, #1
 800f65c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f660:	bf88      	it	hi
 800f662:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f666:	4627      	mov	r7, r4
 800f668:	bf82      	ittt	hi
 800f66a:	eb03 0905 	addhi.w	r9, r3, r5
 800f66e:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f672:	60a3      	strhi	r3, [r4, #8]
 800f674:	f857 3b1c 	ldr.w	r3, [r7], #28
 800f678:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800f67c:	bf98      	it	ls
 800f67e:	f04f 0900 	movls.w	r9, #0
 800f682:	6023      	str	r3, [r4, #0]
 800f684:	463d      	mov	r5, r7
 800f686:	f04f 0b00 	mov.w	fp, #0
 800f68a:	6831      	ldr	r1, [r6, #0]
 800f68c:	ab03      	add	r3, sp, #12
 800f68e:	7809      	ldrb	r1, [r1, #0]
 800f690:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800f694:	2202      	movs	r2, #2
 800f696:	f7f0 fdb3 	bl	8000200 <memchr>
 800f69a:	b328      	cbz	r0, 800f6e8 <_scanf_i+0xb8>
 800f69c:	f1bb 0f01 	cmp.w	fp, #1
 800f6a0:	d159      	bne.n	800f756 <_scanf_i+0x126>
 800f6a2:	6862      	ldr	r2, [r4, #4]
 800f6a4:	b92a      	cbnz	r2, 800f6b2 <_scanf_i+0x82>
 800f6a6:	6822      	ldr	r2, [r4, #0]
 800f6a8:	2308      	movs	r3, #8
 800f6aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f6ae:	6063      	str	r3, [r4, #4]
 800f6b0:	6022      	str	r2, [r4, #0]
 800f6b2:	6822      	ldr	r2, [r4, #0]
 800f6b4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800f6b8:	6022      	str	r2, [r4, #0]
 800f6ba:	68a2      	ldr	r2, [r4, #8]
 800f6bc:	1e51      	subs	r1, r2, #1
 800f6be:	60a1      	str	r1, [r4, #8]
 800f6c0:	b192      	cbz	r2, 800f6e8 <_scanf_i+0xb8>
 800f6c2:	6832      	ldr	r2, [r6, #0]
 800f6c4:	1c51      	adds	r1, r2, #1
 800f6c6:	6031      	str	r1, [r6, #0]
 800f6c8:	7812      	ldrb	r2, [r2, #0]
 800f6ca:	f805 2b01 	strb.w	r2, [r5], #1
 800f6ce:	6872      	ldr	r2, [r6, #4]
 800f6d0:	3a01      	subs	r2, #1
 800f6d2:	2a00      	cmp	r2, #0
 800f6d4:	6072      	str	r2, [r6, #4]
 800f6d6:	dc07      	bgt.n	800f6e8 <_scanf_i+0xb8>
 800f6d8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800f6dc:	4631      	mov	r1, r6
 800f6de:	4650      	mov	r0, sl
 800f6e0:	4790      	blx	r2
 800f6e2:	2800      	cmp	r0, #0
 800f6e4:	f040 8085 	bne.w	800f7f2 <_scanf_i+0x1c2>
 800f6e8:	f10b 0b01 	add.w	fp, fp, #1
 800f6ec:	f1bb 0f03 	cmp.w	fp, #3
 800f6f0:	d1cb      	bne.n	800f68a <_scanf_i+0x5a>
 800f6f2:	6863      	ldr	r3, [r4, #4]
 800f6f4:	b90b      	cbnz	r3, 800f6fa <_scanf_i+0xca>
 800f6f6:	230a      	movs	r3, #10
 800f6f8:	6063      	str	r3, [r4, #4]
 800f6fa:	6863      	ldr	r3, [r4, #4]
 800f6fc:	4945      	ldr	r1, [pc, #276]	; (800f814 <_scanf_i+0x1e4>)
 800f6fe:	6960      	ldr	r0, [r4, #20]
 800f700:	1ac9      	subs	r1, r1, r3
 800f702:	f000 f91d 	bl	800f940 <__sccl>
 800f706:	f04f 0b00 	mov.w	fp, #0
 800f70a:	68a3      	ldr	r3, [r4, #8]
 800f70c:	6822      	ldr	r2, [r4, #0]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d03d      	beq.n	800f78e <_scanf_i+0x15e>
 800f712:	6831      	ldr	r1, [r6, #0]
 800f714:	6960      	ldr	r0, [r4, #20]
 800f716:	f891 c000 	ldrb.w	ip, [r1]
 800f71a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800f71e:	2800      	cmp	r0, #0
 800f720:	d035      	beq.n	800f78e <_scanf_i+0x15e>
 800f722:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800f726:	d124      	bne.n	800f772 <_scanf_i+0x142>
 800f728:	0510      	lsls	r0, r2, #20
 800f72a:	d522      	bpl.n	800f772 <_scanf_i+0x142>
 800f72c:	f10b 0b01 	add.w	fp, fp, #1
 800f730:	f1b9 0f00 	cmp.w	r9, #0
 800f734:	d003      	beq.n	800f73e <_scanf_i+0x10e>
 800f736:	3301      	adds	r3, #1
 800f738:	f109 39ff 	add.w	r9, r9, #4294967295
 800f73c:	60a3      	str	r3, [r4, #8]
 800f73e:	6873      	ldr	r3, [r6, #4]
 800f740:	3b01      	subs	r3, #1
 800f742:	2b00      	cmp	r3, #0
 800f744:	6073      	str	r3, [r6, #4]
 800f746:	dd1b      	ble.n	800f780 <_scanf_i+0x150>
 800f748:	6833      	ldr	r3, [r6, #0]
 800f74a:	3301      	adds	r3, #1
 800f74c:	6033      	str	r3, [r6, #0]
 800f74e:	68a3      	ldr	r3, [r4, #8]
 800f750:	3b01      	subs	r3, #1
 800f752:	60a3      	str	r3, [r4, #8]
 800f754:	e7d9      	b.n	800f70a <_scanf_i+0xda>
 800f756:	f1bb 0f02 	cmp.w	fp, #2
 800f75a:	d1ae      	bne.n	800f6ba <_scanf_i+0x8a>
 800f75c:	6822      	ldr	r2, [r4, #0]
 800f75e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800f762:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800f766:	d1bf      	bne.n	800f6e8 <_scanf_i+0xb8>
 800f768:	2310      	movs	r3, #16
 800f76a:	6063      	str	r3, [r4, #4]
 800f76c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f770:	e7a2      	b.n	800f6b8 <_scanf_i+0x88>
 800f772:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800f776:	6022      	str	r2, [r4, #0]
 800f778:	780b      	ldrb	r3, [r1, #0]
 800f77a:	f805 3b01 	strb.w	r3, [r5], #1
 800f77e:	e7de      	b.n	800f73e <_scanf_i+0x10e>
 800f780:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f784:	4631      	mov	r1, r6
 800f786:	4650      	mov	r0, sl
 800f788:	4798      	blx	r3
 800f78a:	2800      	cmp	r0, #0
 800f78c:	d0df      	beq.n	800f74e <_scanf_i+0x11e>
 800f78e:	6823      	ldr	r3, [r4, #0]
 800f790:	05d9      	lsls	r1, r3, #23
 800f792:	d50d      	bpl.n	800f7b0 <_scanf_i+0x180>
 800f794:	42bd      	cmp	r5, r7
 800f796:	d909      	bls.n	800f7ac <_scanf_i+0x17c>
 800f798:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800f79c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f7a0:	4632      	mov	r2, r6
 800f7a2:	4650      	mov	r0, sl
 800f7a4:	4798      	blx	r3
 800f7a6:	f105 39ff 	add.w	r9, r5, #4294967295
 800f7aa:	464d      	mov	r5, r9
 800f7ac:	42bd      	cmp	r5, r7
 800f7ae:	d028      	beq.n	800f802 <_scanf_i+0x1d2>
 800f7b0:	6822      	ldr	r2, [r4, #0]
 800f7b2:	f012 0210 	ands.w	r2, r2, #16
 800f7b6:	d113      	bne.n	800f7e0 <_scanf_i+0x1b0>
 800f7b8:	702a      	strb	r2, [r5, #0]
 800f7ba:	6863      	ldr	r3, [r4, #4]
 800f7bc:	9e01      	ldr	r6, [sp, #4]
 800f7be:	4639      	mov	r1, r7
 800f7c0:	4650      	mov	r0, sl
 800f7c2:	47b0      	blx	r6
 800f7c4:	f8d8 3000 	ldr.w	r3, [r8]
 800f7c8:	6821      	ldr	r1, [r4, #0]
 800f7ca:	1d1a      	adds	r2, r3, #4
 800f7cc:	f8c8 2000 	str.w	r2, [r8]
 800f7d0:	f011 0f20 	tst.w	r1, #32
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	d00f      	beq.n	800f7f8 <_scanf_i+0x1c8>
 800f7d8:	6018      	str	r0, [r3, #0]
 800f7da:	68e3      	ldr	r3, [r4, #12]
 800f7dc:	3301      	adds	r3, #1
 800f7de:	60e3      	str	r3, [r4, #12]
 800f7e0:	1bed      	subs	r5, r5, r7
 800f7e2:	44ab      	add	fp, r5
 800f7e4:	6925      	ldr	r5, [r4, #16]
 800f7e6:	445d      	add	r5, fp
 800f7e8:	6125      	str	r5, [r4, #16]
 800f7ea:	2000      	movs	r0, #0
 800f7ec:	b007      	add	sp, #28
 800f7ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7f2:	f04f 0b00 	mov.w	fp, #0
 800f7f6:	e7ca      	b.n	800f78e <_scanf_i+0x15e>
 800f7f8:	07ca      	lsls	r2, r1, #31
 800f7fa:	bf4c      	ite	mi
 800f7fc:	8018      	strhmi	r0, [r3, #0]
 800f7fe:	6018      	strpl	r0, [r3, #0]
 800f800:	e7eb      	b.n	800f7da <_scanf_i+0x1aa>
 800f802:	2001      	movs	r0, #1
 800f804:	e7f2      	b.n	800f7ec <_scanf_i+0x1bc>
 800f806:	bf00      	nop
 800f808:	08010504 	.word	0x08010504
 800f80c:	0800fc41 	.word	0x0800fc41
 800f810:	0800fb45 	.word	0x0800fb45
 800f814:	08010a2c 	.word	0x08010a2c

0800f818 <lflush>:
 800f818:	8983      	ldrh	r3, [r0, #12]
 800f81a:	f003 0309 	and.w	r3, r3, #9
 800f81e:	2b09      	cmp	r3, #9
 800f820:	d101      	bne.n	800f826 <lflush+0xe>
 800f822:	f7fe beff 	b.w	800e624 <fflush>
 800f826:	2000      	movs	r0, #0
 800f828:	4770      	bx	lr
	...

0800f82c <__srefill_r>:
 800f82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f82e:	460c      	mov	r4, r1
 800f830:	4605      	mov	r5, r0
 800f832:	b118      	cbz	r0, 800f83c <__srefill_r+0x10>
 800f834:	6983      	ldr	r3, [r0, #24]
 800f836:	b90b      	cbnz	r3, 800f83c <__srefill_r+0x10>
 800f838:	f7fe ff5e 	bl	800e6f8 <__sinit>
 800f83c:	4b3b      	ldr	r3, [pc, #236]	; (800f92c <__srefill_r+0x100>)
 800f83e:	429c      	cmp	r4, r3
 800f840:	d10a      	bne.n	800f858 <__srefill_r+0x2c>
 800f842:	686c      	ldr	r4, [r5, #4]
 800f844:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f848:	2300      	movs	r3, #0
 800f84a:	6063      	str	r3, [r4, #4]
 800f84c:	89a3      	ldrh	r3, [r4, #12]
 800f84e:	069e      	lsls	r6, r3, #26
 800f850:	d50c      	bpl.n	800f86c <__srefill_r+0x40>
 800f852:	f04f 30ff 	mov.w	r0, #4294967295
 800f856:	e066      	b.n	800f926 <__srefill_r+0xfa>
 800f858:	4b35      	ldr	r3, [pc, #212]	; (800f930 <__srefill_r+0x104>)
 800f85a:	429c      	cmp	r4, r3
 800f85c:	d101      	bne.n	800f862 <__srefill_r+0x36>
 800f85e:	68ac      	ldr	r4, [r5, #8]
 800f860:	e7f0      	b.n	800f844 <__srefill_r+0x18>
 800f862:	4b34      	ldr	r3, [pc, #208]	; (800f934 <__srefill_r+0x108>)
 800f864:	429c      	cmp	r4, r3
 800f866:	bf08      	it	eq
 800f868:	68ec      	ldreq	r4, [r5, #12]
 800f86a:	e7eb      	b.n	800f844 <__srefill_r+0x18>
 800f86c:	0758      	lsls	r0, r3, #29
 800f86e:	d448      	bmi.n	800f902 <__srefill_r+0xd6>
 800f870:	06d9      	lsls	r1, r3, #27
 800f872:	d405      	bmi.n	800f880 <__srefill_r+0x54>
 800f874:	2309      	movs	r3, #9
 800f876:	602b      	str	r3, [r5, #0]
 800f878:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f87c:	81a3      	strh	r3, [r4, #12]
 800f87e:	e7e8      	b.n	800f852 <__srefill_r+0x26>
 800f880:	071a      	lsls	r2, r3, #28
 800f882:	d50b      	bpl.n	800f89c <__srefill_r+0x70>
 800f884:	4621      	mov	r1, r4
 800f886:	4628      	mov	r0, r5
 800f888:	f7fe fe90 	bl	800e5ac <_fflush_r>
 800f88c:	2800      	cmp	r0, #0
 800f88e:	d1e0      	bne.n	800f852 <__srefill_r+0x26>
 800f890:	89a3      	ldrh	r3, [r4, #12]
 800f892:	60a0      	str	r0, [r4, #8]
 800f894:	f023 0308 	bic.w	r3, r3, #8
 800f898:	81a3      	strh	r3, [r4, #12]
 800f89a:	61a0      	str	r0, [r4, #24]
 800f89c:	89a3      	ldrh	r3, [r4, #12]
 800f89e:	f043 0304 	orr.w	r3, r3, #4
 800f8a2:	81a3      	strh	r3, [r4, #12]
 800f8a4:	6923      	ldr	r3, [r4, #16]
 800f8a6:	b91b      	cbnz	r3, 800f8b0 <__srefill_r+0x84>
 800f8a8:	4621      	mov	r1, r4
 800f8aa:	4628      	mov	r0, r5
 800f8ac:	f7ff f806 	bl	800e8bc <__smakebuf_r>
 800f8b0:	89a6      	ldrh	r6, [r4, #12]
 800f8b2:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800f8b6:	07b3      	lsls	r3, r6, #30
 800f8b8:	d00f      	beq.n	800f8da <__srefill_r+0xae>
 800f8ba:	2301      	movs	r3, #1
 800f8bc:	81a3      	strh	r3, [r4, #12]
 800f8be:	4b1e      	ldr	r3, [pc, #120]	; (800f938 <__srefill_r+0x10c>)
 800f8c0:	491e      	ldr	r1, [pc, #120]	; (800f93c <__srefill_r+0x110>)
 800f8c2:	6818      	ldr	r0, [r3, #0]
 800f8c4:	f006 0609 	and.w	r6, r6, #9
 800f8c8:	f7fe ff94 	bl	800e7f4 <_fwalk>
 800f8cc:	2e09      	cmp	r6, #9
 800f8ce:	81a7      	strh	r7, [r4, #12]
 800f8d0:	d103      	bne.n	800f8da <__srefill_r+0xae>
 800f8d2:	4621      	mov	r1, r4
 800f8d4:	4628      	mov	r0, r5
 800f8d6:	f7fe fde3 	bl	800e4a0 <__sflush_r>
 800f8da:	6922      	ldr	r2, [r4, #16]
 800f8dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f8de:	6963      	ldr	r3, [r4, #20]
 800f8e0:	6a21      	ldr	r1, [r4, #32]
 800f8e2:	6022      	str	r2, [r4, #0]
 800f8e4:	4628      	mov	r0, r5
 800f8e6:	47b0      	blx	r6
 800f8e8:	2800      	cmp	r0, #0
 800f8ea:	6060      	str	r0, [r4, #4]
 800f8ec:	dc1c      	bgt.n	800f928 <__srefill_r+0xfc>
 800f8ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f8f2:	bf17      	itett	ne
 800f8f4:	2200      	movne	r2, #0
 800f8f6:	f043 0320 	orreq.w	r3, r3, #32
 800f8fa:	6062      	strne	r2, [r4, #4]
 800f8fc:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800f900:	e7bc      	b.n	800f87c <__srefill_r+0x50>
 800f902:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f904:	2900      	cmp	r1, #0
 800f906:	d0cd      	beq.n	800f8a4 <__srefill_r+0x78>
 800f908:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f90c:	4299      	cmp	r1, r3
 800f90e:	d002      	beq.n	800f916 <__srefill_r+0xea>
 800f910:	4628      	mov	r0, r5
 800f912:	f7fe fa8b 	bl	800de2c <_free_r>
 800f916:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f918:	6063      	str	r3, [r4, #4]
 800f91a:	2000      	movs	r0, #0
 800f91c:	6360      	str	r0, [r4, #52]	; 0x34
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d0c0      	beq.n	800f8a4 <__srefill_r+0x78>
 800f922:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f924:	6023      	str	r3, [r4, #0]
 800f926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f928:	2000      	movs	r0, #0
 800f92a:	e7fc      	b.n	800f926 <__srefill_r+0xfa>
 800f92c:	080109a0 	.word	0x080109a0
 800f930:	080109c0 	.word	0x080109c0
 800f934:	08010980 	.word	0x08010980
 800f938:	0801097c 	.word	0x0801097c
 800f93c:	0800f819 	.word	0x0800f819

0800f940 <__sccl>:
 800f940:	b570      	push	{r4, r5, r6, lr}
 800f942:	780b      	ldrb	r3, [r1, #0]
 800f944:	4604      	mov	r4, r0
 800f946:	2b5e      	cmp	r3, #94	; 0x5e
 800f948:	bf0b      	itete	eq
 800f94a:	784b      	ldrbeq	r3, [r1, #1]
 800f94c:	1c48      	addne	r0, r1, #1
 800f94e:	1c88      	addeq	r0, r1, #2
 800f950:	2200      	movne	r2, #0
 800f952:	bf08      	it	eq
 800f954:	2201      	moveq	r2, #1
 800f956:	1e61      	subs	r1, r4, #1
 800f958:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800f95c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800f960:	42a9      	cmp	r1, r5
 800f962:	d1fb      	bne.n	800f95c <__sccl+0x1c>
 800f964:	b90b      	cbnz	r3, 800f96a <__sccl+0x2a>
 800f966:	3801      	subs	r0, #1
 800f968:	bd70      	pop	{r4, r5, r6, pc}
 800f96a:	f082 0101 	eor.w	r1, r2, #1
 800f96e:	54e1      	strb	r1, [r4, r3]
 800f970:	1c42      	adds	r2, r0, #1
 800f972:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800f976:	2d2d      	cmp	r5, #45	; 0x2d
 800f978:	f102 36ff 	add.w	r6, r2, #4294967295
 800f97c:	4610      	mov	r0, r2
 800f97e:	d006      	beq.n	800f98e <__sccl+0x4e>
 800f980:	2d5d      	cmp	r5, #93	; 0x5d
 800f982:	d0f1      	beq.n	800f968 <__sccl+0x28>
 800f984:	b90d      	cbnz	r5, 800f98a <__sccl+0x4a>
 800f986:	4630      	mov	r0, r6
 800f988:	e7ee      	b.n	800f968 <__sccl+0x28>
 800f98a:	462b      	mov	r3, r5
 800f98c:	e7ef      	b.n	800f96e <__sccl+0x2e>
 800f98e:	7816      	ldrb	r6, [r2, #0]
 800f990:	2e5d      	cmp	r6, #93	; 0x5d
 800f992:	d0fa      	beq.n	800f98a <__sccl+0x4a>
 800f994:	42b3      	cmp	r3, r6
 800f996:	dcf8      	bgt.n	800f98a <__sccl+0x4a>
 800f998:	4618      	mov	r0, r3
 800f99a:	3001      	adds	r0, #1
 800f99c:	4286      	cmp	r6, r0
 800f99e:	5421      	strb	r1, [r4, r0]
 800f9a0:	dcfb      	bgt.n	800f99a <__sccl+0x5a>
 800f9a2:	43d8      	mvns	r0, r3
 800f9a4:	4430      	add	r0, r6
 800f9a6:	1c5d      	adds	r5, r3, #1
 800f9a8:	42b3      	cmp	r3, r6
 800f9aa:	bfa8      	it	ge
 800f9ac:	2000      	movge	r0, #0
 800f9ae:	182b      	adds	r3, r5, r0
 800f9b0:	3202      	adds	r2, #2
 800f9b2:	e7de      	b.n	800f972 <__sccl+0x32>

0800f9b4 <__sread>:
 800f9b4:	b510      	push	{r4, lr}
 800f9b6:	460c      	mov	r4, r1
 800f9b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9bc:	f000 faaa 	bl	800ff14 <_read_r>
 800f9c0:	2800      	cmp	r0, #0
 800f9c2:	bfab      	itete	ge
 800f9c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f9c6:	89a3      	ldrhlt	r3, [r4, #12]
 800f9c8:	181b      	addge	r3, r3, r0
 800f9ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f9ce:	bfac      	ite	ge
 800f9d0:	6563      	strge	r3, [r4, #84]	; 0x54
 800f9d2:	81a3      	strhlt	r3, [r4, #12]
 800f9d4:	bd10      	pop	{r4, pc}

0800f9d6 <__swrite>:
 800f9d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9da:	461f      	mov	r7, r3
 800f9dc:	898b      	ldrh	r3, [r1, #12]
 800f9de:	05db      	lsls	r3, r3, #23
 800f9e0:	4605      	mov	r5, r0
 800f9e2:	460c      	mov	r4, r1
 800f9e4:	4616      	mov	r6, r2
 800f9e6:	d505      	bpl.n	800f9f4 <__swrite+0x1e>
 800f9e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9ec:	2302      	movs	r3, #2
 800f9ee:	2200      	movs	r2, #0
 800f9f0:	f000 fa3e 	bl	800fe70 <_lseek_r>
 800f9f4:	89a3      	ldrh	r3, [r4, #12]
 800f9f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f9fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f9fe:	81a3      	strh	r3, [r4, #12]
 800fa00:	4632      	mov	r2, r6
 800fa02:	463b      	mov	r3, r7
 800fa04:	4628      	mov	r0, r5
 800fa06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa0a:	f000 b9ed 	b.w	800fde8 <_write_r>

0800fa0e <__sseek>:
 800fa0e:	b510      	push	{r4, lr}
 800fa10:	460c      	mov	r4, r1
 800fa12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa16:	f000 fa2b 	bl	800fe70 <_lseek_r>
 800fa1a:	1c43      	adds	r3, r0, #1
 800fa1c:	89a3      	ldrh	r3, [r4, #12]
 800fa1e:	bf15      	itete	ne
 800fa20:	6560      	strne	r0, [r4, #84]	; 0x54
 800fa22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fa26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fa2a:	81a3      	strheq	r3, [r4, #12]
 800fa2c:	bf18      	it	ne
 800fa2e:	81a3      	strhne	r3, [r4, #12]
 800fa30:	bd10      	pop	{r4, pc}

0800fa32 <__sclose>:
 800fa32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa36:	f000 b9e9 	b.w	800fe0c <_close_r>
	...

0800fa3c <_strtol_l.isra.0>:
 800fa3c:	2b01      	cmp	r3, #1
 800fa3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa42:	d001      	beq.n	800fa48 <_strtol_l.isra.0+0xc>
 800fa44:	2b24      	cmp	r3, #36	; 0x24
 800fa46:	d906      	bls.n	800fa56 <_strtol_l.isra.0+0x1a>
 800fa48:	f7fe f9a0 	bl	800dd8c <__errno>
 800fa4c:	2316      	movs	r3, #22
 800fa4e:	6003      	str	r3, [r0, #0]
 800fa50:	2000      	movs	r0, #0
 800fa52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa56:	4f3a      	ldr	r7, [pc, #232]	; (800fb40 <_strtol_l.isra.0+0x104>)
 800fa58:	468e      	mov	lr, r1
 800fa5a:	4676      	mov	r6, lr
 800fa5c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800fa60:	5de5      	ldrb	r5, [r4, r7]
 800fa62:	f015 0508 	ands.w	r5, r5, #8
 800fa66:	d1f8      	bne.n	800fa5a <_strtol_l.isra.0+0x1e>
 800fa68:	2c2d      	cmp	r4, #45	; 0x2d
 800fa6a:	d134      	bne.n	800fad6 <_strtol_l.isra.0+0x9a>
 800fa6c:	f89e 4000 	ldrb.w	r4, [lr]
 800fa70:	f04f 0801 	mov.w	r8, #1
 800fa74:	f106 0e02 	add.w	lr, r6, #2
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d05c      	beq.n	800fb36 <_strtol_l.isra.0+0xfa>
 800fa7c:	2b10      	cmp	r3, #16
 800fa7e:	d10c      	bne.n	800fa9a <_strtol_l.isra.0+0x5e>
 800fa80:	2c30      	cmp	r4, #48	; 0x30
 800fa82:	d10a      	bne.n	800fa9a <_strtol_l.isra.0+0x5e>
 800fa84:	f89e 4000 	ldrb.w	r4, [lr]
 800fa88:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800fa8c:	2c58      	cmp	r4, #88	; 0x58
 800fa8e:	d14d      	bne.n	800fb2c <_strtol_l.isra.0+0xf0>
 800fa90:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800fa94:	2310      	movs	r3, #16
 800fa96:	f10e 0e02 	add.w	lr, lr, #2
 800fa9a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800fa9e:	f10c 3cff 	add.w	ip, ip, #4294967295
 800faa2:	2600      	movs	r6, #0
 800faa4:	fbbc f9f3 	udiv	r9, ip, r3
 800faa8:	4635      	mov	r5, r6
 800faaa:	fb03 ca19 	mls	sl, r3, r9, ip
 800faae:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800fab2:	2f09      	cmp	r7, #9
 800fab4:	d818      	bhi.n	800fae8 <_strtol_l.isra.0+0xac>
 800fab6:	463c      	mov	r4, r7
 800fab8:	42a3      	cmp	r3, r4
 800faba:	dd24      	ble.n	800fb06 <_strtol_l.isra.0+0xca>
 800fabc:	2e00      	cmp	r6, #0
 800fabe:	db1f      	blt.n	800fb00 <_strtol_l.isra.0+0xc4>
 800fac0:	45a9      	cmp	r9, r5
 800fac2:	d31d      	bcc.n	800fb00 <_strtol_l.isra.0+0xc4>
 800fac4:	d101      	bne.n	800faca <_strtol_l.isra.0+0x8e>
 800fac6:	45a2      	cmp	sl, r4
 800fac8:	db1a      	blt.n	800fb00 <_strtol_l.isra.0+0xc4>
 800faca:	fb05 4503 	mla	r5, r5, r3, r4
 800face:	2601      	movs	r6, #1
 800fad0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800fad4:	e7eb      	b.n	800faae <_strtol_l.isra.0+0x72>
 800fad6:	2c2b      	cmp	r4, #43	; 0x2b
 800fad8:	bf08      	it	eq
 800fada:	f89e 4000 	ldrbeq.w	r4, [lr]
 800fade:	46a8      	mov	r8, r5
 800fae0:	bf08      	it	eq
 800fae2:	f106 0e02 	addeq.w	lr, r6, #2
 800fae6:	e7c7      	b.n	800fa78 <_strtol_l.isra.0+0x3c>
 800fae8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800faec:	2f19      	cmp	r7, #25
 800faee:	d801      	bhi.n	800faf4 <_strtol_l.isra.0+0xb8>
 800faf0:	3c37      	subs	r4, #55	; 0x37
 800faf2:	e7e1      	b.n	800fab8 <_strtol_l.isra.0+0x7c>
 800faf4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800faf8:	2f19      	cmp	r7, #25
 800fafa:	d804      	bhi.n	800fb06 <_strtol_l.isra.0+0xca>
 800fafc:	3c57      	subs	r4, #87	; 0x57
 800fafe:	e7db      	b.n	800fab8 <_strtol_l.isra.0+0x7c>
 800fb00:	f04f 36ff 	mov.w	r6, #4294967295
 800fb04:	e7e4      	b.n	800fad0 <_strtol_l.isra.0+0x94>
 800fb06:	2e00      	cmp	r6, #0
 800fb08:	da05      	bge.n	800fb16 <_strtol_l.isra.0+0xda>
 800fb0a:	2322      	movs	r3, #34	; 0x22
 800fb0c:	6003      	str	r3, [r0, #0]
 800fb0e:	4665      	mov	r5, ip
 800fb10:	b942      	cbnz	r2, 800fb24 <_strtol_l.isra.0+0xe8>
 800fb12:	4628      	mov	r0, r5
 800fb14:	e79d      	b.n	800fa52 <_strtol_l.isra.0+0x16>
 800fb16:	f1b8 0f00 	cmp.w	r8, #0
 800fb1a:	d000      	beq.n	800fb1e <_strtol_l.isra.0+0xe2>
 800fb1c:	426d      	negs	r5, r5
 800fb1e:	2a00      	cmp	r2, #0
 800fb20:	d0f7      	beq.n	800fb12 <_strtol_l.isra.0+0xd6>
 800fb22:	b10e      	cbz	r6, 800fb28 <_strtol_l.isra.0+0xec>
 800fb24:	f10e 31ff 	add.w	r1, lr, #4294967295
 800fb28:	6011      	str	r1, [r2, #0]
 800fb2a:	e7f2      	b.n	800fb12 <_strtol_l.isra.0+0xd6>
 800fb2c:	2430      	movs	r4, #48	; 0x30
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d1b3      	bne.n	800fa9a <_strtol_l.isra.0+0x5e>
 800fb32:	2308      	movs	r3, #8
 800fb34:	e7b1      	b.n	800fa9a <_strtol_l.isra.0+0x5e>
 800fb36:	2c30      	cmp	r4, #48	; 0x30
 800fb38:	d0a4      	beq.n	800fa84 <_strtol_l.isra.0+0x48>
 800fb3a:	230a      	movs	r3, #10
 800fb3c:	e7ad      	b.n	800fa9a <_strtol_l.isra.0+0x5e>
 800fb3e:	bf00      	nop
 800fb40:	08010a2f 	.word	0x08010a2f

0800fb44 <_strtol_r>:
 800fb44:	f7ff bf7a 	b.w	800fa3c <_strtol_l.isra.0>

0800fb48 <_strtoul_l.isra.0>:
 800fb48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fb4c:	4e3b      	ldr	r6, [pc, #236]	; (800fc3c <_strtoul_l.isra.0+0xf4>)
 800fb4e:	4686      	mov	lr, r0
 800fb50:	468c      	mov	ip, r1
 800fb52:	4660      	mov	r0, ip
 800fb54:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800fb58:	5da5      	ldrb	r5, [r4, r6]
 800fb5a:	f015 0508 	ands.w	r5, r5, #8
 800fb5e:	d1f8      	bne.n	800fb52 <_strtoul_l.isra.0+0xa>
 800fb60:	2c2d      	cmp	r4, #45	; 0x2d
 800fb62:	d134      	bne.n	800fbce <_strtoul_l.isra.0+0x86>
 800fb64:	f89c 4000 	ldrb.w	r4, [ip]
 800fb68:	f04f 0801 	mov.w	r8, #1
 800fb6c:	f100 0c02 	add.w	ip, r0, #2
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d05e      	beq.n	800fc32 <_strtoul_l.isra.0+0xea>
 800fb74:	2b10      	cmp	r3, #16
 800fb76:	d10c      	bne.n	800fb92 <_strtoul_l.isra.0+0x4a>
 800fb78:	2c30      	cmp	r4, #48	; 0x30
 800fb7a:	d10a      	bne.n	800fb92 <_strtoul_l.isra.0+0x4a>
 800fb7c:	f89c 0000 	ldrb.w	r0, [ip]
 800fb80:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800fb84:	2858      	cmp	r0, #88	; 0x58
 800fb86:	d14f      	bne.n	800fc28 <_strtoul_l.isra.0+0xe0>
 800fb88:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800fb8c:	2310      	movs	r3, #16
 800fb8e:	f10c 0c02 	add.w	ip, ip, #2
 800fb92:	f04f 37ff 	mov.w	r7, #4294967295
 800fb96:	2500      	movs	r5, #0
 800fb98:	fbb7 f7f3 	udiv	r7, r7, r3
 800fb9c:	fb03 f907 	mul.w	r9, r3, r7
 800fba0:	ea6f 0909 	mvn.w	r9, r9
 800fba4:	4628      	mov	r0, r5
 800fba6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800fbaa:	2e09      	cmp	r6, #9
 800fbac:	d818      	bhi.n	800fbe0 <_strtoul_l.isra.0+0x98>
 800fbae:	4634      	mov	r4, r6
 800fbb0:	42a3      	cmp	r3, r4
 800fbb2:	dd24      	ble.n	800fbfe <_strtoul_l.isra.0+0xb6>
 800fbb4:	2d00      	cmp	r5, #0
 800fbb6:	db1f      	blt.n	800fbf8 <_strtoul_l.isra.0+0xb0>
 800fbb8:	4287      	cmp	r7, r0
 800fbba:	d31d      	bcc.n	800fbf8 <_strtoul_l.isra.0+0xb0>
 800fbbc:	d101      	bne.n	800fbc2 <_strtoul_l.isra.0+0x7a>
 800fbbe:	45a1      	cmp	r9, r4
 800fbc0:	db1a      	blt.n	800fbf8 <_strtoul_l.isra.0+0xb0>
 800fbc2:	fb00 4003 	mla	r0, r0, r3, r4
 800fbc6:	2501      	movs	r5, #1
 800fbc8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800fbcc:	e7eb      	b.n	800fba6 <_strtoul_l.isra.0+0x5e>
 800fbce:	2c2b      	cmp	r4, #43	; 0x2b
 800fbd0:	bf08      	it	eq
 800fbd2:	f89c 4000 	ldrbeq.w	r4, [ip]
 800fbd6:	46a8      	mov	r8, r5
 800fbd8:	bf08      	it	eq
 800fbda:	f100 0c02 	addeq.w	ip, r0, #2
 800fbde:	e7c7      	b.n	800fb70 <_strtoul_l.isra.0+0x28>
 800fbe0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800fbe4:	2e19      	cmp	r6, #25
 800fbe6:	d801      	bhi.n	800fbec <_strtoul_l.isra.0+0xa4>
 800fbe8:	3c37      	subs	r4, #55	; 0x37
 800fbea:	e7e1      	b.n	800fbb0 <_strtoul_l.isra.0+0x68>
 800fbec:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800fbf0:	2e19      	cmp	r6, #25
 800fbf2:	d804      	bhi.n	800fbfe <_strtoul_l.isra.0+0xb6>
 800fbf4:	3c57      	subs	r4, #87	; 0x57
 800fbf6:	e7db      	b.n	800fbb0 <_strtoul_l.isra.0+0x68>
 800fbf8:	f04f 35ff 	mov.w	r5, #4294967295
 800fbfc:	e7e4      	b.n	800fbc8 <_strtoul_l.isra.0+0x80>
 800fbfe:	2d00      	cmp	r5, #0
 800fc00:	da07      	bge.n	800fc12 <_strtoul_l.isra.0+0xca>
 800fc02:	2322      	movs	r3, #34	; 0x22
 800fc04:	f8ce 3000 	str.w	r3, [lr]
 800fc08:	f04f 30ff 	mov.w	r0, #4294967295
 800fc0c:	b942      	cbnz	r2, 800fc20 <_strtoul_l.isra.0+0xd8>
 800fc0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc12:	f1b8 0f00 	cmp.w	r8, #0
 800fc16:	d000      	beq.n	800fc1a <_strtoul_l.isra.0+0xd2>
 800fc18:	4240      	negs	r0, r0
 800fc1a:	2a00      	cmp	r2, #0
 800fc1c:	d0f7      	beq.n	800fc0e <_strtoul_l.isra.0+0xc6>
 800fc1e:	b10d      	cbz	r5, 800fc24 <_strtoul_l.isra.0+0xdc>
 800fc20:	f10c 31ff 	add.w	r1, ip, #4294967295
 800fc24:	6011      	str	r1, [r2, #0]
 800fc26:	e7f2      	b.n	800fc0e <_strtoul_l.isra.0+0xc6>
 800fc28:	2430      	movs	r4, #48	; 0x30
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d1b1      	bne.n	800fb92 <_strtoul_l.isra.0+0x4a>
 800fc2e:	2308      	movs	r3, #8
 800fc30:	e7af      	b.n	800fb92 <_strtoul_l.isra.0+0x4a>
 800fc32:	2c30      	cmp	r4, #48	; 0x30
 800fc34:	d0a2      	beq.n	800fb7c <_strtoul_l.isra.0+0x34>
 800fc36:	230a      	movs	r3, #10
 800fc38:	e7ab      	b.n	800fb92 <_strtoul_l.isra.0+0x4a>
 800fc3a:	bf00      	nop
 800fc3c:	08010a2f 	.word	0x08010a2f

0800fc40 <_strtoul_r>:
 800fc40:	f7ff bf82 	b.w	800fb48 <_strtoul_l.isra.0>

0800fc44 <__submore>:
 800fc44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc48:	460c      	mov	r4, r1
 800fc4a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800fc4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fc50:	4299      	cmp	r1, r3
 800fc52:	d11d      	bne.n	800fc90 <__submore+0x4c>
 800fc54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800fc58:	f7fe f938 	bl	800decc <_malloc_r>
 800fc5c:	b918      	cbnz	r0, 800fc66 <__submore+0x22>
 800fc5e:	f04f 30ff 	mov.w	r0, #4294967295
 800fc62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fc6a:	63a3      	str	r3, [r4, #56]	; 0x38
 800fc6c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800fc70:	6360      	str	r0, [r4, #52]	; 0x34
 800fc72:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800fc76:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800fc7a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800fc7e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800fc82:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800fc86:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800fc8a:	6020      	str	r0, [r4, #0]
 800fc8c:	2000      	movs	r0, #0
 800fc8e:	e7e8      	b.n	800fc62 <__submore+0x1e>
 800fc90:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800fc92:	0077      	lsls	r7, r6, #1
 800fc94:	463a      	mov	r2, r7
 800fc96:	f000 f917 	bl	800fec8 <_realloc_r>
 800fc9a:	4605      	mov	r5, r0
 800fc9c:	2800      	cmp	r0, #0
 800fc9e:	d0de      	beq.n	800fc5e <__submore+0x1a>
 800fca0:	eb00 0806 	add.w	r8, r0, r6
 800fca4:	4601      	mov	r1, r0
 800fca6:	4632      	mov	r2, r6
 800fca8:	4640      	mov	r0, r8
 800fcaa:	f7fe f8a9 	bl	800de00 <memcpy>
 800fcae:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800fcb2:	f8c4 8000 	str.w	r8, [r4]
 800fcb6:	e7e9      	b.n	800fc8c <__submore+0x48>

0800fcb8 <_ungetc_r>:
 800fcb8:	b570      	push	{r4, r5, r6, lr}
 800fcba:	4614      	mov	r4, r2
 800fcbc:	1c4a      	adds	r2, r1, #1
 800fcbe:	4606      	mov	r6, r0
 800fcc0:	460d      	mov	r5, r1
 800fcc2:	d103      	bne.n	800fccc <_ungetc_r+0x14>
 800fcc4:	f04f 35ff 	mov.w	r5, #4294967295
 800fcc8:	4628      	mov	r0, r5
 800fcca:	bd70      	pop	{r4, r5, r6, pc}
 800fccc:	b118      	cbz	r0, 800fcd6 <_ungetc_r+0x1e>
 800fcce:	6983      	ldr	r3, [r0, #24]
 800fcd0:	b90b      	cbnz	r3, 800fcd6 <_ungetc_r+0x1e>
 800fcd2:	f7fe fd11 	bl	800e6f8 <__sinit>
 800fcd6:	4b41      	ldr	r3, [pc, #260]	; (800fddc <_ungetc_r+0x124>)
 800fcd8:	429c      	cmp	r4, r3
 800fcda:	d11d      	bne.n	800fd18 <_ungetc_r+0x60>
 800fcdc:	6874      	ldr	r4, [r6, #4]
 800fcde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fce0:	07db      	lsls	r3, r3, #31
 800fce2:	d405      	bmi.n	800fcf0 <_ungetc_r+0x38>
 800fce4:	89a3      	ldrh	r3, [r4, #12]
 800fce6:	0598      	lsls	r0, r3, #22
 800fce8:	d402      	bmi.n	800fcf0 <_ungetc_r+0x38>
 800fcea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fcec:	f7fe fdbf 	bl	800e86e <__retarget_lock_acquire_recursive>
 800fcf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fcf4:	f023 0320 	bic.w	r3, r3, #32
 800fcf8:	0759      	lsls	r1, r3, #29
 800fcfa:	81a3      	strh	r3, [r4, #12]
 800fcfc:	b29a      	uxth	r2, r3
 800fcfe:	d42d      	bmi.n	800fd5c <_ungetc_r+0xa4>
 800fd00:	06d3      	lsls	r3, r2, #27
 800fd02:	d413      	bmi.n	800fd2c <_ungetc_r+0x74>
 800fd04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fd06:	07dd      	lsls	r5, r3, #31
 800fd08:	d4dc      	bmi.n	800fcc4 <_ungetc_r+0xc>
 800fd0a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800fd0e:	d1d9      	bne.n	800fcc4 <_ungetc_r+0xc>
 800fd10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fd12:	f7fe fdad 	bl	800e870 <__retarget_lock_release_recursive>
 800fd16:	e7d5      	b.n	800fcc4 <_ungetc_r+0xc>
 800fd18:	4b31      	ldr	r3, [pc, #196]	; (800fde0 <_ungetc_r+0x128>)
 800fd1a:	429c      	cmp	r4, r3
 800fd1c:	d101      	bne.n	800fd22 <_ungetc_r+0x6a>
 800fd1e:	68b4      	ldr	r4, [r6, #8]
 800fd20:	e7dd      	b.n	800fcde <_ungetc_r+0x26>
 800fd22:	4b30      	ldr	r3, [pc, #192]	; (800fde4 <_ungetc_r+0x12c>)
 800fd24:	429c      	cmp	r4, r3
 800fd26:	bf08      	it	eq
 800fd28:	68f4      	ldreq	r4, [r6, #12]
 800fd2a:	e7d8      	b.n	800fcde <_ungetc_r+0x26>
 800fd2c:	0710      	lsls	r0, r2, #28
 800fd2e:	d511      	bpl.n	800fd54 <_ungetc_r+0x9c>
 800fd30:	4621      	mov	r1, r4
 800fd32:	4630      	mov	r0, r6
 800fd34:	f7fe fc3a 	bl	800e5ac <_fflush_r>
 800fd38:	b130      	cbz	r0, 800fd48 <_ungetc_r+0x90>
 800fd3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fd3c:	07d9      	lsls	r1, r3, #31
 800fd3e:	d4c1      	bmi.n	800fcc4 <_ungetc_r+0xc>
 800fd40:	89a3      	ldrh	r3, [r4, #12]
 800fd42:	f413 7f00 	tst.w	r3, #512	; 0x200
 800fd46:	e7e2      	b.n	800fd0e <_ungetc_r+0x56>
 800fd48:	89a3      	ldrh	r3, [r4, #12]
 800fd4a:	60a0      	str	r0, [r4, #8]
 800fd4c:	f023 0308 	bic.w	r3, r3, #8
 800fd50:	81a3      	strh	r3, [r4, #12]
 800fd52:	61a0      	str	r0, [r4, #24]
 800fd54:	89a3      	ldrh	r3, [r4, #12]
 800fd56:	f043 0304 	orr.w	r3, r3, #4
 800fd5a:	81a3      	strh	r3, [r4, #12]
 800fd5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fd5e:	6862      	ldr	r2, [r4, #4]
 800fd60:	b2ed      	uxtb	r5, r5
 800fd62:	b1d3      	cbz	r3, 800fd9a <_ungetc_r+0xe2>
 800fd64:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800fd66:	4293      	cmp	r3, r2
 800fd68:	dc05      	bgt.n	800fd76 <_ungetc_r+0xbe>
 800fd6a:	4621      	mov	r1, r4
 800fd6c:	4630      	mov	r0, r6
 800fd6e:	f7ff ff69 	bl	800fc44 <__submore>
 800fd72:	2800      	cmp	r0, #0
 800fd74:	d1e1      	bne.n	800fd3a <_ungetc_r+0x82>
 800fd76:	6823      	ldr	r3, [r4, #0]
 800fd78:	1e5a      	subs	r2, r3, #1
 800fd7a:	6022      	str	r2, [r4, #0]
 800fd7c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800fd80:	6863      	ldr	r3, [r4, #4]
 800fd82:	3301      	adds	r3, #1
 800fd84:	6063      	str	r3, [r4, #4]
 800fd86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fd88:	07da      	lsls	r2, r3, #31
 800fd8a:	d49d      	bmi.n	800fcc8 <_ungetc_r+0x10>
 800fd8c:	89a3      	ldrh	r3, [r4, #12]
 800fd8e:	059b      	lsls	r3, r3, #22
 800fd90:	d49a      	bmi.n	800fcc8 <_ungetc_r+0x10>
 800fd92:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fd94:	f7fe fd6c 	bl	800e870 <__retarget_lock_release_recursive>
 800fd98:	e796      	b.n	800fcc8 <_ungetc_r+0x10>
 800fd9a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800fd9c:	6920      	ldr	r0, [r4, #16]
 800fd9e:	6823      	ldr	r3, [r4, #0]
 800fda0:	f001 0101 	and.w	r1, r1, #1
 800fda4:	b160      	cbz	r0, 800fdc0 <_ungetc_r+0x108>
 800fda6:	4298      	cmp	r0, r3
 800fda8:	d20a      	bcs.n	800fdc0 <_ungetc_r+0x108>
 800fdaa:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800fdae:	42a8      	cmp	r0, r5
 800fdb0:	d106      	bne.n	800fdc0 <_ungetc_r+0x108>
 800fdb2:	3b01      	subs	r3, #1
 800fdb4:	3201      	adds	r2, #1
 800fdb6:	6023      	str	r3, [r4, #0]
 800fdb8:	6062      	str	r2, [r4, #4]
 800fdba:	2900      	cmp	r1, #0
 800fdbc:	d184      	bne.n	800fcc8 <_ungetc_r+0x10>
 800fdbe:	e7e5      	b.n	800fd8c <_ungetc_r+0xd4>
 800fdc0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800fdc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fdc8:	6363      	str	r3, [r4, #52]	; 0x34
 800fdca:	2303      	movs	r3, #3
 800fdcc:	63a3      	str	r3, [r4, #56]	; 0x38
 800fdce:	4623      	mov	r3, r4
 800fdd0:	f803 5f46 	strb.w	r5, [r3, #70]!
 800fdd4:	6023      	str	r3, [r4, #0]
 800fdd6:	2301      	movs	r3, #1
 800fdd8:	6063      	str	r3, [r4, #4]
 800fdda:	e7ee      	b.n	800fdba <_ungetc_r+0x102>
 800fddc:	080109a0 	.word	0x080109a0
 800fde0:	080109c0 	.word	0x080109c0
 800fde4:	08010980 	.word	0x08010980

0800fde8 <_write_r>:
 800fde8:	b538      	push	{r3, r4, r5, lr}
 800fdea:	4d07      	ldr	r5, [pc, #28]	; (800fe08 <_write_r+0x20>)
 800fdec:	4604      	mov	r4, r0
 800fdee:	4608      	mov	r0, r1
 800fdf0:	4611      	mov	r1, r2
 800fdf2:	2200      	movs	r2, #0
 800fdf4:	602a      	str	r2, [r5, #0]
 800fdf6:	461a      	mov	r2, r3
 800fdf8:	f7f1 fb86 	bl	8001508 <_write>
 800fdfc:	1c43      	adds	r3, r0, #1
 800fdfe:	d102      	bne.n	800fe06 <_write_r+0x1e>
 800fe00:	682b      	ldr	r3, [r5, #0]
 800fe02:	b103      	cbz	r3, 800fe06 <_write_r+0x1e>
 800fe04:	6023      	str	r3, [r4, #0]
 800fe06:	bd38      	pop	{r3, r4, r5, pc}
 800fe08:	20004700 	.word	0x20004700

0800fe0c <_close_r>:
 800fe0c:	b538      	push	{r3, r4, r5, lr}
 800fe0e:	4d06      	ldr	r5, [pc, #24]	; (800fe28 <_close_r+0x1c>)
 800fe10:	2300      	movs	r3, #0
 800fe12:	4604      	mov	r4, r0
 800fe14:	4608      	mov	r0, r1
 800fe16:	602b      	str	r3, [r5, #0]
 800fe18:	f7f1 fba2 	bl	8001560 <_close>
 800fe1c:	1c43      	adds	r3, r0, #1
 800fe1e:	d102      	bne.n	800fe26 <_close_r+0x1a>
 800fe20:	682b      	ldr	r3, [r5, #0]
 800fe22:	b103      	cbz	r3, 800fe26 <_close_r+0x1a>
 800fe24:	6023      	str	r3, [r4, #0]
 800fe26:	bd38      	pop	{r3, r4, r5, pc}
 800fe28:	20004700 	.word	0x20004700

0800fe2c <_fstat_r>:
 800fe2c:	b538      	push	{r3, r4, r5, lr}
 800fe2e:	4d07      	ldr	r5, [pc, #28]	; (800fe4c <_fstat_r+0x20>)
 800fe30:	2300      	movs	r3, #0
 800fe32:	4604      	mov	r4, r0
 800fe34:	4608      	mov	r0, r1
 800fe36:	4611      	mov	r1, r2
 800fe38:	602b      	str	r3, [r5, #0]
 800fe3a:	f7f1 fbe1 	bl	8001600 <_fstat>
 800fe3e:	1c43      	adds	r3, r0, #1
 800fe40:	d102      	bne.n	800fe48 <_fstat_r+0x1c>
 800fe42:	682b      	ldr	r3, [r5, #0]
 800fe44:	b103      	cbz	r3, 800fe48 <_fstat_r+0x1c>
 800fe46:	6023      	str	r3, [r4, #0]
 800fe48:	bd38      	pop	{r3, r4, r5, pc}
 800fe4a:	bf00      	nop
 800fe4c:	20004700 	.word	0x20004700

0800fe50 <_isatty_r>:
 800fe50:	b538      	push	{r3, r4, r5, lr}
 800fe52:	4d06      	ldr	r5, [pc, #24]	; (800fe6c <_isatty_r+0x1c>)
 800fe54:	2300      	movs	r3, #0
 800fe56:	4604      	mov	r4, r0
 800fe58:	4608      	mov	r0, r1
 800fe5a:	602b      	str	r3, [r5, #0]
 800fe5c:	f7f1 fb3e 	bl	80014dc <_isatty>
 800fe60:	1c43      	adds	r3, r0, #1
 800fe62:	d102      	bne.n	800fe6a <_isatty_r+0x1a>
 800fe64:	682b      	ldr	r3, [r5, #0]
 800fe66:	b103      	cbz	r3, 800fe6a <_isatty_r+0x1a>
 800fe68:	6023      	str	r3, [r4, #0]
 800fe6a:	bd38      	pop	{r3, r4, r5, pc}
 800fe6c:	20004700 	.word	0x20004700

0800fe70 <_lseek_r>:
 800fe70:	b538      	push	{r3, r4, r5, lr}
 800fe72:	4d07      	ldr	r5, [pc, #28]	; (800fe90 <_lseek_r+0x20>)
 800fe74:	4604      	mov	r4, r0
 800fe76:	4608      	mov	r0, r1
 800fe78:	4611      	mov	r1, r2
 800fe7a:	2200      	movs	r2, #0
 800fe7c:	602a      	str	r2, [r5, #0]
 800fe7e:	461a      	mov	r2, r3
 800fe80:	f7f1 fb85 	bl	800158e <_lseek>
 800fe84:	1c43      	adds	r3, r0, #1
 800fe86:	d102      	bne.n	800fe8e <_lseek_r+0x1e>
 800fe88:	682b      	ldr	r3, [r5, #0]
 800fe8a:	b103      	cbz	r3, 800fe8e <_lseek_r+0x1e>
 800fe8c:	6023      	str	r3, [r4, #0]
 800fe8e:	bd38      	pop	{r3, r4, r5, pc}
 800fe90:	20004700 	.word	0x20004700

0800fe94 <memmove>:
 800fe94:	4288      	cmp	r0, r1
 800fe96:	b510      	push	{r4, lr}
 800fe98:	eb01 0402 	add.w	r4, r1, r2
 800fe9c:	d902      	bls.n	800fea4 <memmove+0x10>
 800fe9e:	4284      	cmp	r4, r0
 800fea0:	4623      	mov	r3, r4
 800fea2:	d807      	bhi.n	800feb4 <memmove+0x20>
 800fea4:	1e43      	subs	r3, r0, #1
 800fea6:	42a1      	cmp	r1, r4
 800fea8:	d008      	beq.n	800febc <memmove+0x28>
 800feaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800feae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800feb2:	e7f8      	b.n	800fea6 <memmove+0x12>
 800feb4:	4402      	add	r2, r0
 800feb6:	4601      	mov	r1, r0
 800feb8:	428a      	cmp	r2, r1
 800feba:	d100      	bne.n	800febe <memmove+0x2a>
 800febc:	bd10      	pop	{r4, pc}
 800febe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fec2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fec6:	e7f7      	b.n	800feb8 <memmove+0x24>

0800fec8 <_realloc_r>:
 800fec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800feca:	4607      	mov	r7, r0
 800fecc:	4614      	mov	r4, r2
 800fece:	460e      	mov	r6, r1
 800fed0:	b921      	cbnz	r1, 800fedc <_realloc_r+0x14>
 800fed2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fed6:	4611      	mov	r1, r2
 800fed8:	f7fd bff8 	b.w	800decc <_malloc_r>
 800fedc:	b922      	cbnz	r2, 800fee8 <_realloc_r+0x20>
 800fede:	f7fd ffa5 	bl	800de2c <_free_r>
 800fee2:	4625      	mov	r5, r4
 800fee4:	4628      	mov	r0, r5
 800fee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fee8:	f000 f826 	bl	800ff38 <_malloc_usable_size_r>
 800feec:	42a0      	cmp	r0, r4
 800feee:	d20f      	bcs.n	800ff10 <_realloc_r+0x48>
 800fef0:	4621      	mov	r1, r4
 800fef2:	4638      	mov	r0, r7
 800fef4:	f7fd ffea 	bl	800decc <_malloc_r>
 800fef8:	4605      	mov	r5, r0
 800fefa:	2800      	cmp	r0, #0
 800fefc:	d0f2      	beq.n	800fee4 <_realloc_r+0x1c>
 800fefe:	4631      	mov	r1, r6
 800ff00:	4622      	mov	r2, r4
 800ff02:	f7fd ff7d 	bl	800de00 <memcpy>
 800ff06:	4631      	mov	r1, r6
 800ff08:	4638      	mov	r0, r7
 800ff0a:	f7fd ff8f 	bl	800de2c <_free_r>
 800ff0e:	e7e9      	b.n	800fee4 <_realloc_r+0x1c>
 800ff10:	4635      	mov	r5, r6
 800ff12:	e7e7      	b.n	800fee4 <_realloc_r+0x1c>

0800ff14 <_read_r>:
 800ff14:	b538      	push	{r3, r4, r5, lr}
 800ff16:	4d07      	ldr	r5, [pc, #28]	; (800ff34 <_read_r+0x20>)
 800ff18:	4604      	mov	r4, r0
 800ff1a:	4608      	mov	r0, r1
 800ff1c:	4611      	mov	r1, r2
 800ff1e:	2200      	movs	r2, #0
 800ff20:	602a      	str	r2, [r5, #0]
 800ff22:	461a      	mov	r2, r3
 800ff24:	f7f1 fb44 	bl	80015b0 <_read>
 800ff28:	1c43      	adds	r3, r0, #1
 800ff2a:	d102      	bne.n	800ff32 <_read_r+0x1e>
 800ff2c:	682b      	ldr	r3, [r5, #0]
 800ff2e:	b103      	cbz	r3, 800ff32 <_read_r+0x1e>
 800ff30:	6023      	str	r3, [r4, #0]
 800ff32:	bd38      	pop	{r3, r4, r5, pc}
 800ff34:	20004700 	.word	0x20004700

0800ff38 <_malloc_usable_size_r>:
 800ff38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff3c:	1f18      	subs	r0, r3, #4
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	bfbc      	itt	lt
 800ff42:	580b      	ldrlt	r3, [r1, r0]
 800ff44:	18c0      	addlt	r0, r0, r3
 800ff46:	4770      	bx	lr

0800ff48 <_init>:
 800ff48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff4a:	bf00      	nop
 800ff4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff4e:	bc08      	pop	{r3}
 800ff50:	469e      	mov	lr, r3
 800ff52:	4770      	bx	lr

0800ff54 <_fini>:
 800ff54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff56:	bf00      	nop
 800ff58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff5a:	bc08      	pop	{r3}
 800ff5c:	469e      	mov	lr, r3
 800ff5e:	4770      	bx	lr
