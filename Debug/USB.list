
USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010510  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bb4  080106a0  080106a0  000206a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011254  08011254  00030090  2**0
                  CONTENTS
  4 .ARM          00000008  08011254  08011254  00021254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801125c  0801125c  00030090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801125c  0801125c  0002125c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011260  08011260  00021260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08011264  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030090  2**0
                  CONTENTS
 10 .bss          000046b4  20000090  20000090  00030090  2**3
                  ALLOC
 11 ._user_heap_stack 00004004  20004744  20004744  00030090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002c144  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000057cd  00000000  00000000  0005c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001318  00000000  00000000  000619d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001180  00000000  00000000  00062cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027585  00000000  00000000  00063e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001efa3  00000000  00000000  0008b3f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb561  00000000  00000000  000aa398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001758f9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b30  00000000  00000000  0017594c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010688 	.word	0x08010688

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08010688 	.word	0x08010688

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_dmul>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ae:	bf1d      	ittte	ne
 80002b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002b4:	ea94 0f0c 	teqne	r4, ip
 80002b8:	ea95 0f0c 	teqne	r5, ip
 80002bc:	f000 f8de 	bleq	800047c <__aeabi_dmul+0x1dc>
 80002c0:	442c      	add	r4, r5
 80002c2:	ea81 0603 	eor.w	r6, r1, r3
 80002c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002d2:	bf18      	it	ne
 80002d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002e0:	d038      	beq.n	8000354 <__aeabi_dmul+0xb4>
 80002e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002e6:	f04f 0500 	mov.w	r5, #0
 80002ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002f6:	f04f 0600 	mov.w	r6, #0
 80002fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002fe:	f09c 0f00 	teq	ip, #0
 8000302:	bf18      	it	ne
 8000304:	f04e 0e01 	orrne.w	lr, lr, #1
 8000308:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800030c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000310:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000314:	d204      	bcs.n	8000320 <__aeabi_dmul+0x80>
 8000316:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800031a:	416d      	adcs	r5, r5
 800031c:	eb46 0606 	adc.w	r6, r6, r6
 8000320:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000324:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000328:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800032c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000330:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000334:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000338:	bf88      	it	hi
 800033a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800033e:	d81e      	bhi.n	800037e <__aeabi_dmul+0xde>
 8000340:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000358:	ea46 0101 	orr.w	r1, r6, r1
 800035c:	ea40 0002 	orr.w	r0, r0, r2
 8000360:	ea81 0103 	eor.w	r1, r1, r3
 8000364:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000368:	bfc2      	ittt	gt
 800036a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800036e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000372:	bd70      	popgt	{r4, r5, r6, pc}
 8000374:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000378:	f04f 0e00 	mov.w	lr, #0
 800037c:	3c01      	subs	r4, #1
 800037e:	f300 80ab 	bgt.w	80004d8 <__aeabi_dmul+0x238>
 8000382:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000386:	bfde      	ittt	le
 8000388:	2000      	movle	r0, #0
 800038a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800038e:	bd70      	pople	{r4, r5, r6, pc}
 8000390:	f1c4 0400 	rsb	r4, r4, #0
 8000394:	3c20      	subs	r4, #32
 8000396:	da35      	bge.n	8000404 <__aeabi_dmul+0x164>
 8000398:	340c      	adds	r4, #12
 800039a:	dc1b      	bgt.n	80003d4 <__aeabi_dmul+0x134>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0520 	rsb	r5, r4, #32
 80003a4:	fa00 f305 	lsl.w	r3, r0, r5
 80003a8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea40 0002 	orr.w	r0, r0, r2
 80003b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c0:	fa21 f604 	lsr.w	r6, r1, r4
 80003c4:	eb42 0106 	adc.w	r1, r2, r6
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 040c 	rsb	r4, r4, #12
 80003d8:	f1c4 0520 	rsb	r5, r4, #32
 80003dc:	fa00 f304 	lsl.w	r3, r0, r4
 80003e0:	fa20 f005 	lsr.w	r0, r0, r5
 80003e4:	fa01 f204 	lsl.w	r2, r1, r4
 80003e8:	ea40 0002 	orr.w	r0, r0, r2
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f4:	f141 0100 	adc.w	r1, r1, #0
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 0520 	rsb	r5, r4, #32
 8000408:	fa00 f205 	lsl.w	r2, r0, r5
 800040c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000410:	fa20 f304 	lsr.w	r3, r0, r4
 8000414:	fa01 f205 	lsl.w	r2, r1, r5
 8000418:	ea43 0302 	orr.w	r3, r3, r2
 800041c:	fa21 f004 	lsr.w	r0, r1, r4
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	fa21 f204 	lsr.w	r2, r1, r4
 8000428:	ea20 0002 	bic.w	r0, r0, r2
 800042c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000434:	bf08      	it	eq
 8000436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f094 0f00 	teq	r4, #0
 8000440:	d10f      	bne.n	8000462 <__aeabi_dmul+0x1c2>
 8000442:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000446:	0040      	lsls	r0, r0, #1
 8000448:	eb41 0101 	adc.w	r1, r1, r1
 800044c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3c01      	subeq	r4, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1a6>
 8000456:	ea41 0106 	orr.w	r1, r1, r6
 800045a:	f095 0f00 	teq	r5, #0
 800045e:	bf18      	it	ne
 8000460:	4770      	bxne	lr
 8000462:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	eb43 0303 	adc.w	r3, r3, r3
 800046c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3d01      	subeq	r5, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1c6>
 8000476:	ea43 0306 	orr.w	r3, r3, r6
 800047a:	4770      	bx	lr
 800047c:	ea94 0f0c 	teq	r4, ip
 8000480:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000484:	bf18      	it	ne
 8000486:	ea95 0f0c 	teqne	r5, ip
 800048a:	d00c      	beq.n	80004a6 <__aeabi_dmul+0x206>
 800048c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000490:	bf18      	it	ne
 8000492:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000496:	d1d1      	bne.n	800043c <__aeabi_dmul+0x19c>
 8000498:	ea81 0103 	eor.w	r1, r1, r3
 800049c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd70      	pop	{r4, r5, r6, pc}
 80004a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004aa:	bf06      	itte	eq
 80004ac:	4610      	moveq	r0, r2
 80004ae:	4619      	moveq	r1, r3
 80004b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b4:	d019      	beq.n	80004ea <__aeabi_dmul+0x24a>
 80004b6:	ea94 0f0c 	teq	r4, ip
 80004ba:	d102      	bne.n	80004c2 <__aeabi_dmul+0x222>
 80004bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004c0:	d113      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004c2:	ea95 0f0c 	teq	r5, ip
 80004c6:	d105      	bne.n	80004d4 <__aeabi_dmul+0x234>
 80004c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004cc:	bf1c      	itt	ne
 80004ce:	4610      	movne	r0, r2
 80004d0:	4619      	movne	r1, r3
 80004d2:	d10a      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004d4:	ea81 0103 	eor.w	r1, r1, r3
 80004d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd70      	pop	{r4, r5, r6, pc}
 80004ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004f2:	bd70      	pop	{r4, r5, r6, pc}

080004f4 <__aeabi_drsub>:
 80004f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e002      	b.n	8000500 <__adddf3>
 80004fa:	bf00      	nop

080004fc <__aeabi_dsub>:
 80004fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000500 <__adddf3>:
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000506:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800050a:	ea94 0f05 	teq	r4, r5
 800050e:	bf08      	it	eq
 8000510:	ea90 0f02 	teqeq	r0, r2
 8000514:	bf1f      	itttt	ne
 8000516:	ea54 0c00 	orrsne.w	ip, r4, r0
 800051a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800051e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000522:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000526:	f000 80e2 	beq.w	80006ee <__adddf3+0x1ee>
 800052a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800052e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000532:	bfb8      	it	lt
 8000534:	426d      	neglt	r5, r5
 8000536:	dd0c      	ble.n	8000552 <__adddf3+0x52>
 8000538:	442c      	add	r4, r5
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	ea82 0000 	eor.w	r0, r2, r0
 8000546:	ea83 0101 	eor.w	r1, r3, r1
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	2d36      	cmp	r5, #54	; 0x36
 8000554:	bf88      	it	hi
 8000556:	bd30      	pophi	{r4, r5, pc}
 8000558:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800055c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000560:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000564:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000568:	d002      	beq.n	8000570 <__adddf3+0x70>
 800056a:	4240      	negs	r0, r0
 800056c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000570:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000574:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000578:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800057c:	d002      	beq.n	8000584 <__adddf3+0x84>
 800057e:	4252      	negs	r2, r2
 8000580:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000584:	ea94 0f05 	teq	r4, r5
 8000588:	f000 80a7 	beq.w	80006da <__adddf3+0x1da>
 800058c:	f1a4 0401 	sub.w	r4, r4, #1
 8000590:	f1d5 0e20 	rsbs	lr, r5, #32
 8000594:	db0d      	blt.n	80005b2 <__adddf3+0xb2>
 8000596:	fa02 fc0e 	lsl.w	ip, r2, lr
 800059a:	fa22 f205 	lsr.w	r2, r2, r5
 800059e:	1880      	adds	r0, r0, r2
 80005a0:	f141 0100 	adc.w	r1, r1, #0
 80005a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005a8:	1880      	adds	r0, r0, r2
 80005aa:	fa43 f305 	asr.w	r3, r3, r5
 80005ae:	4159      	adcs	r1, r3
 80005b0:	e00e      	b.n	80005d0 <__adddf3+0xd0>
 80005b2:	f1a5 0520 	sub.w	r5, r5, #32
 80005b6:	f10e 0e20 	add.w	lr, lr, #32
 80005ba:	2a01      	cmp	r2, #1
 80005bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005c0:	bf28      	it	cs
 80005c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005c6:	fa43 f305 	asr.w	r3, r3, r5
 80005ca:	18c0      	adds	r0, r0, r3
 80005cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	d507      	bpl.n	80005e6 <__adddf3+0xe6>
 80005d6:	f04f 0e00 	mov.w	lr, #0
 80005da:	f1dc 0c00 	rsbs	ip, ip, #0
 80005de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ea:	d31b      	bcc.n	8000624 <__adddf3+0x124>
 80005ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005f0:	d30c      	bcc.n	800060c <__adddf3+0x10c>
 80005f2:	0849      	lsrs	r1, r1, #1
 80005f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005fc:	f104 0401 	add.w	r4, r4, #1
 8000600:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000604:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000608:	f080 809a 	bcs.w	8000740 <__adddf3+0x240>
 800060c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	ea41 0105 	orr.w	r1, r1, r5
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000628:	4140      	adcs	r0, r0
 800062a:	eb41 0101 	adc.w	r1, r1, r1
 800062e:	3c01      	subs	r4, #1
 8000630:	bf28      	it	cs
 8000632:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000636:	d2e9      	bcs.n	800060c <__adddf3+0x10c>
 8000638:	f091 0f00 	teq	r1, #0
 800063c:	bf04      	itt	eq
 800063e:	4601      	moveq	r1, r0
 8000640:	2000      	moveq	r0, #0
 8000642:	fab1 f381 	clz	r3, r1
 8000646:	bf08      	it	eq
 8000648:	3320      	addeq	r3, #32
 800064a:	f1a3 030b 	sub.w	r3, r3, #11
 800064e:	f1b3 0220 	subs.w	r2, r3, #32
 8000652:	da0c      	bge.n	800066e <__adddf3+0x16e>
 8000654:	320c      	adds	r2, #12
 8000656:	dd08      	ble.n	800066a <__adddf3+0x16a>
 8000658:	f102 0c14 	add.w	ip, r2, #20
 800065c:	f1c2 020c 	rsb	r2, r2, #12
 8000660:	fa01 f00c 	lsl.w	r0, r1, ip
 8000664:	fa21 f102 	lsr.w	r1, r1, r2
 8000668:	e00c      	b.n	8000684 <__adddf3+0x184>
 800066a:	f102 0214 	add.w	r2, r2, #20
 800066e:	bfd8      	it	le
 8000670:	f1c2 0c20 	rsble	ip, r2, #32
 8000674:	fa01 f102 	lsl.w	r1, r1, r2
 8000678:	fa20 fc0c 	lsr.w	ip, r0, ip
 800067c:	bfdc      	itt	le
 800067e:	ea41 010c 	orrle.w	r1, r1, ip
 8000682:	4090      	lslle	r0, r2
 8000684:	1ae4      	subs	r4, r4, r3
 8000686:	bfa2      	ittt	ge
 8000688:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800068c:	4329      	orrge	r1, r5
 800068e:	bd30      	popge	{r4, r5, pc}
 8000690:	ea6f 0404 	mvn.w	r4, r4
 8000694:	3c1f      	subs	r4, #31
 8000696:	da1c      	bge.n	80006d2 <__adddf3+0x1d2>
 8000698:	340c      	adds	r4, #12
 800069a:	dc0e      	bgt.n	80006ba <__adddf3+0x1ba>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0220 	rsb	r2, r4, #32
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ac:	ea40 0003 	orr.w	r0, r0, r3
 80006b0:	fa21 f304 	lsr.w	r3, r1, r4
 80006b4:	ea45 0103 	orr.w	r1, r5, r3
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f1c4 040c 	rsb	r4, r4, #12
 80006be:	f1c4 0220 	rsb	r2, r4, #32
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ca:	ea40 0003 	orr.w	r0, r0, r3
 80006ce:	4629      	mov	r1, r5
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	fa21 f004 	lsr.w	r0, r1, r4
 80006d6:	4629      	mov	r1, r5
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f094 0f00 	teq	r4, #0
 80006de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006e2:	bf06      	itte	eq
 80006e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006e8:	3401      	addeq	r4, #1
 80006ea:	3d01      	subne	r5, #1
 80006ec:	e74e      	b.n	800058c <__adddf3+0x8c>
 80006ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006f2:	bf18      	it	ne
 80006f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f8:	d029      	beq.n	800074e <__adddf3+0x24e>
 80006fa:	ea94 0f05 	teq	r4, r5
 80006fe:	bf08      	it	eq
 8000700:	ea90 0f02 	teqeq	r0, r2
 8000704:	d005      	beq.n	8000712 <__adddf3+0x212>
 8000706:	ea54 0c00 	orrs.w	ip, r4, r0
 800070a:	bf04      	itt	eq
 800070c:	4619      	moveq	r1, r3
 800070e:	4610      	moveq	r0, r2
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	ea91 0f03 	teq	r1, r3
 8000716:	bf1e      	ittt	ne
 8000718:	2100      	movne	r1, #0
 800071a:	2000      	movne	r0, #0
 800071c:	bd30      	popne	{r4, r5, pc}
 800071e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000722:	d105      	bne.n	8000730 <__adddf3+0x230>
 8000724:	0040      	lsls	r0, r0, #1
 8000726:	4149      	adcs	r1, r1
 8000728:	bf28      	it	cs
 800072a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd30      	pop	{r4, r5, pc}
 8000730:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000734:	bf3c      	itt	cc
 8000736:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800073a:	bd30      	popcc	{r4, r5, pc}
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000744:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000752:	bf1a      	itte	ne
 8000754:	4619      	movne	r1, r3
 8000756:	4610      	movne	r0, r2
 8000758:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800075c:	bf1c      	itt	ne
 800075e:	460b      	movne	r3, r1
 8000760:	4602      	movne	r2, r0
 8000762:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000766:	bf06      	itte	eq
 8000768:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800076c:	ea91 0f03 	teqeq	r1, r3
 8000770:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	bf00      	nop

08000778 <__aeabi_ui2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f04f 0500 	mov.w	r5, #0
 8000790:	f04f 0100 	mov.w	r1, #0
 8000794:	e750      	b.n	8000638 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_i2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007b0:	bf48      	it	mi
 80007b2:	4240      	negmi	r0, r0
 80007b4:	f04f 0100 	mov.w	r1, #0
 80007b8:	e73e      	b.n	8000638 <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_f2d>:
 80007bc:	0042      	lsls	r2, r0, #1
 80007be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ca:	bf1f      	itttt	ne
 80007cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007d8:	4770      	bxne	lr
 80007da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007de:	bf08      	it	eq
 80007e0:	4770      	bxeq	lr
 80007e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007e6:	bf04      	itt	eq
 80007e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007ec:	4770      	bxeq	lr
 80007ee:	b530      	push	{r4, r5, lr}
 80007f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	e71c      	b.n	8000638 <__adddf3+0x138>
 80007fe:	bf00      	nop

08000800 <__aeabi_ul2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f04f 0500 	mov.w	r5, #0
 800080e:	e00a      	b.n	8000826 <__aeabi_l2d+0x16>

08000810 <__aeabi_l2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800081e:	d502      	bpl.n	8000826 <__aeabi_l2d+0x16>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800082a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800082e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000832:	f43f aed8 	beq.w	80005e6 <__adddf3+0xe6>
 8000836:	f04f 0203 	mov.w	r2, #3
 800083a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083e:	bf18      	it	ne
 8000840:	3203      	addne	r2, #3
 8000842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000846:	bf18      	it	ne
 8000848:	3203      	addne	r2, #3
 800084a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800084e:	f1c2 0320 	rsb	r3, r2, #32
 8000852:	fa00 fc03 	lsl.w	ip, r0, r3
 8000856:	fa20 f002 	lsr.w	r0, r0, r2
 800085a:	fa01 fe03 	lsl.w	lr, r1, r3
 800085e:	ea40 000e 	orr.w	r0, r0, lr
 8000862:	fa21 f102 	lsr.w	r1, r1, r2
 8000866:	4414      	add	r4, r2
 8000868:	e6bd      	b.n	80005e6 <__adddf3+0xe6>
 800086a:	bf00      	nop

0800086c <__aeabi_d2uiz>:
 800086c:	004a      	lsls	r2, r1, #1
 800086e:	d211      	bcs.n	8000894 <__aeabi_d2uiz+0x28>
 8000870:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000874:	d211      	bcs.n	800089a <__aeabi_d2uiz+0x2e>
 8000876:	d50d      	bpl.n	8000894 <__aeabi_d2uiz+0x28>
 8000878:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800087c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000880:	d40e      	bmi.n	80008a0 <__aeabi_d2uiz+0x34>
 8000882:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000886:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800088a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800088e:	fa23 f002 	lsr.w	r0, r3, r2
 8000892:	4770      	bx	lr
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	4770      	bx	lr
 800089a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800089e:	d102      	bne.n	80008a6 <__aeabi_d2uiz+0x3a>
 80008a0:	f04f 30ff 	mov.w	r0, #4294967295
 80008a4:	4770      	bx	lr
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	4770      	bx	lr

080008ac <__aeabi_uldivmod>:
 80008ac:	b953      	cbnz	r3, 80008c4 <__aeabi_uldivmod+0x18>
 80008ae:	b94a      	cbnz	r2, 80008c4 <__aeabi_uldivmod+0x18>
 80008b0:	2900      	cmp	r1, #0
 80008b2:	bf08      	it	eq
 80008b4:	2800      	cmpeq	r0, #0
 80008b6:	bf1c      	itt	ne
 80008b8:	f04f 31ff 	movne.w	r1, #4294967295
 80008bc:	f04f 30ff 	movne.w	r0, #4294967295
 80008c0:	f000 b96e 	b.w	8000ba0 <__aeabi_idiv0>
 80008c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008cc:	f000 f806 	bl	80008dc <__udivmoddi4>
 80008d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008d8:	b004      	add	sp, #16
 80008da:	4770      	bx	lr

080008dc <__udivmoddi4>:
 80008dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008e0:	9d08      	ldr	r5, [sp, #32]
 80008e2:	4604      	mov	r4, r0
 80008e4:	468c      	mov	ip, r1
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	f040 8083 	bne.w	80009f2 <__udivmoddi4+0x116>
 80008ec:	428a      	cmp	r2, r1
 80008ee:	4617      	mov	r7, r2
 80008f0:	d947      	bls.n	8000982 <__udivmoddi4+0xa6>
 80008f2:	fab2 f282 	clz	r2, r2
 80008f6:	b142      	cbz	r2, 800090a <__udivmoddi4+0x2e>
 80008f8:	f1c2 0020 	rsb	r0, r2, #32
 80008fc:	fa24 f000 	lsr.w	r0, r4, r0
 8000900:	4091      	lsls	r1, r2
 8000902:	4097      	lsls	r7, r2
 8000904:	ea40 0c01 	orr.w	ip, r0, r1
 8000908:	4094      	lsls	r4, r2
 800090a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800090e:	0c23      	lsrs	r3, r4, #16
 8000910:	fbbc f6f8 	udiv	r6, ip, r8
 8000914:	fa1f fe87 	uxth.w	lr, r7
 8000918:	fb08 c116 	mls	r1, r8, r6, ip
 800091c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000920:	fb06 f10e 	mul.w	r1, r6, lr
 8000924:	4299      	cmp	r1, r3
 8000926:	d909      	bls.n	800093c <__udivmoddi4+0x60>
 8000928:	18fb      	adds	r3, r7, r3
 800092a:	f106 30ff 	add.w	r0, r6, #4294967295
 800092e:	f080 8119 	bcs.w	8000b64 <__udivmoddi4+0x288>
 8000932:	4299      	cmp	r1, r3
 8000934:	f240 8116 	bls.w	8000b64 <__udivmoddi4+0x288>
 8000938:	3e02      	subs	r6, #2
 800093a:	443b      	add	r3, r7
 800093c:	1a5b      	subs	r3, r3, r1
 800093e:	b2a4      	uxth	r4, r4
 8000940:	fbb3 f0f8 	udiv	r0, r3, r8
 8000944:	fb08 3310 	mls	r3, r8, r0, r3
 8000948:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800094c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000950:	45a6      	cmp	lr, r4
 8000952:	d909      	bls.n	8000968 <__udivmoddi4+0x8c>
 8000954:	193c      	adds	r4, r7, r4
 8000956:	f100 33ff 	add.w	r3, r0, #4294967295
 800095a:	f080 8105 	bcs.w	8000b68 <__udivmoddi4+0x28c>
 800095e:	45a6      	cmp	lr, r4
 8000960:	f240 8102 	bls.w	8000b68 <__udivmoddi4+0x28c>
 8000964:	3802      	subs	r0, #2
 8000966:	443c      	add	r4, r7
 8000968:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800096c:	eba4 040e 	sub.w	r4, r4, lr
 8000970:	2600      	movs	r6, #0
 8000972:	b11d      	cbz	r5, 800097c <__udivmoddi4+0xa0>
 8000974:	40d4      	lsrs	r4, r2
 8000976:	2300      	movs	r3, #0
 8000978:	e9c5 4300 	strd	r4, r3, [r5]
 800097c:	4631      	mov	r1, r6
 800097e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000982:	b902      	cbnz	r2, 8000986 <__udivmoddi4+0xaa>
 8000984:	deff      	udf	#255	; 0xff
 8000986:	fab2 f282 	clz	r2, r2
 800098a:	2a00      	cmp	r2, #0
 800098c:	d150      	bne.n	8000a30 <__udivmoddi4+0x154>
 800098e:	1bcb      	subs	r3, r1, r7
 8000990:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000994:	fa1f f887 	uxth.w	r8, r7
 8000998:	2601      	movs	r6, #1
 800099a:	fbb3 fcfe 	udiv	ip, r3, lr
 800099e:	0c21      	lsrs	r1, r4, #16
 80009a0:	fb0e 331c 	mls	r3, lr, ip, r3
 80009a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009a8:	fb08 f30c 	mul.w	r3, r8, ip
 80009ac:	428b      	cmp	r3, r1
 80009ae:	d907      	bls.n	80009c0 <__udivmoddi4+0xe4>
 80009b0:	1879      	adds	r1, r7, r1
 80009b2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80009b6:	d202      	bcs.n	80009be <__udivmoddi4+0xe2>
 80009b8:	428b      	cmp	r3, r1
 80009ba:	f200 80e9 	bhi.w	8000b90 <__udivmoddi4+0x2b4>
 80009be:	4684      	mov	ip, r0
 80009c0:	1ac9      	subs	r1, r1, r3
 80009c2:	b2a3      	uxth	r3, r4
 80009c4:	fbb1 f0fe 	udiv	r0, r1, lr
 80009c8:	fb0e 1110 	mls	r1, lr, r0, r1
 80009cc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80009d0:	fb08 f800 	mul.w	r8, r8, r0
 80009d4:	45a0      	cmp	r8, r4
 80009d6:	d907      	bls.n	80009e8 <__udivmoddi4+0x10c>
 80009d8:	193c      	adds	r4, r7, r4
 80009da:	f100 33ff 	add.w	r3, r0, #4294967295
 80009de:	d202      	bcs.n	80009e6 <__udivmoddi4+0x10a>
 80009e0:	45a0      	cmp	r8, r4
 80009e2:	f200 80d9 	bhi.w	8000b98 <__udivmoddi4+0x2bc>
 80009e6:	4618      	mov	r0, r3
 80009e8:	eba4 0408 	sub.w	r4, r4, r8
 80009ec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80009f0:	e7bf      	b.n	8000972 <__udivmoddi4+0x96>
 80009f2:	428b      	cmp	r3, r1
 80009f4:	d909      	bls.n	8000a0a <__udivmoddi4+0x12e>
 80009f6:	2d00      	cmp	r5, #0
 80009f8:	f000 80b1 	beq.w	8000b5e <__udivmoddi4+0x282>
 80009fc:	2600      	movs	r6, #0
 80009fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000a02:	4630      	mov	r0, r6
 8000a04:	4631      	mov	r1, r6
 8000a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a0a:	fab3 f683 	clz	r6, r3
 8000a0e:	2e00      	cmp	r6, #0
 8000a10:	d14a      	bne.n	8000aa8 <__udivmoddi4+0x1cc>
 8000a12:	428b      	cmp	r3, r1
 8000a14:	d302      	bcc.n	8000a1c <__udivmoddi4+0x140>
 8000a16:	4282      	cmp	r2, r0
 8000a18:	f200 80b8 	bhi.w	8000b8c <__udivmoddi4+0x2b0>
 8000a1c:	1a84      	subs	r4, r0, r2
 8000a1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000a22:	2001      	movs	r0, #1
 8000a24:	468c      	mov	ip, r1
 8000a26:	2d00      	cmp	r5, #0
 8000a28:	d0a8      	beq.n	800097c <__udivmoddi4+0xa0>
 8000a2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a2e:	e7a5      	b.n	800097c <__udivmoddi4+0xa0>
 8000a30:	f1c2 0320 	rsb	r3, r2, #32
 8000a34:	fa20 f603 	lsr.w	r6, r0, r3
 8000a38:	4097      	lsls	r7, r2
 8000a3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a42:	40d9      	lsrs	r1, r3
 8000a44:	4330      	orrs	r0, r6
 8000a46:	0c03      	lsrs	r3, r0, #16
 8000a48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a4c:	fa1f f887 	uxth.w	r8, r7
 8000a50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a58:	fb06 f108 	mul.w	r1, r6, r8
 8000a5c:	4299      	cmp	r1, r3
 8000a5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a62:	d909      	bls.n	8000a78 <__udivmoddi4+0x19c>
 8000a64:	18fb      	adds	r3, r7, r3
 8000a66:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a6a:	f080 808d 	bcs.w	8000b88 <__udivmoddi4+0x2ac>
 8000a6e:	4299      	cmp	r1, r3
 8000a70:	f240 808a 	bls.w	8000b88 <__udivmoddi4+0x2ac>
 8000a74:	3e02      	subs	r6, #2
 8000a76:	443b      	add	r3, r7
 8000a78:	1a5b      	subs	r3, r3, r1
 8000a7a:	b281      	uxth	r1, r0
 8000a7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a88:	fb00 f308 	mul.w	r3, r0, r8
 8000a8c:	428b      	cmp	r3, r1
 8000a8e:	d907      	bls.n	8000aa0 <__udivmoddi4+0x1c4>
 8000a90:	1879      	adds	r1, r7, r1
 8000a92:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a96:	d273      	bcs.n	8000b80 <__udivmoddi4+0x2a4>
 8000a98:	428b      	cmp	r3, r1
 8000a9a:	d971      	bls.n	8000b80 <__udivmoddi4+0x2a4>
 8000a9c:	3802      	subs	r0, #2
 8000a9e:	4439      	add	r1, r7
 8000aa0:	1acb      	subs	r3, r1, r3
 8000aa2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000aa6:	e778      	b.n	800099a <__udivmoddi4+0xbe>
 8000aa8:	f1c6 0c20 	rsb	ip, r6, #32
 8000aac:	fa03 f406 	lsl.w	r4, r3, r6
 8000ab0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ab4:	431c      	orrs	r4, r3
 8000ab6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000aba:	fa01 f306 	lsl.w	r3, r1, r6
 8000abe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ac2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ac6:	431f      	orrs	r7, r3
 8000ac8:	0c3b      	lsrs	r3, r7, #16
 8000aca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ace:	fa1f f884 	uxth.w	r8, r4
 8000ad2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ad6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ada:	fb09 fa08 	mul.w	sl, r9, r8
 8000ade:	458a      	cmp	sl, r1
 8000ae0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ae4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ae8:	d908      	bls.n	8000afc <__udivmoddi4+0x220>
 8000aea:	1861      	adds	r1, r4, r1
 8000aec:	f109 30ff 	add.w	r0, r9, #4294967295
 8000af0:	d248      	bcs.n	8000b84 <__udivmoddi4+0x2a8>
 8000af2:	458a      	cmp	sl, r1
 8000af4:	d946      	bls.n	8000b84 <__udivmoddi4+0x2a8>
 8000af6:	f1a9 0902 	sub.w	r9, r9, #2
 8000afa:	4421      	add	r1, r4
 8000afc:	eba1 010a 	sub.w	r1, r1, sl
 8000b00:	b2bf      	uxth	r7, r7
 8000b02:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b06:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b0a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000b0e:	fb00 f808 	mul.w	r8, r0, r8
 8000b12:	45b8      	cmp	r8, r7
 8000b14:	d907      	bls.n	8000b26 <__udivmoddi4+0x24a>
 8000b16:	19e7      	adds	r7, r4, r7
 8000b18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b1c:	d22e      	bcs.n	8000b7c <__udivmoddi4+0x2a0>
 8000b1e:	45b8      	cmp	r8, r7
 8000b20:	d92c      	bls.n	8000b7c <__udivmoddi4+0x2a0>
 8000b22:	3802      	subs	r0, #2
 8000b24:	4427      	add	r7, r4
 8000b26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b2a:	eba7 0708 	sub.w	r7, r7, r8
 8000b2e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b32:	454f      	cmp	r7, r9
 8000b34:	46c6      	mov	lr, r8
 8000b36:	4649      	mov	r1, r9
 8000b38:	d31a      	bcc.n	8000b70 <__udivmoddi4+0x294>
 8000b3a:	d017      	beq.n	8000b6c <__udivmoddi4+0x290>
 8000b3c:	b15d      	cbz	r5, 8000b56 <__udivmoddi4+0x27a>
 8000b3e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b42:	eb67 0701 	sbc.w	r7, r7, r1
 8000b46:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b4a:	40f2      	lsrs	r2, r6
 8000b4c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b50:	40f7      	lsrs	r7, r6
 8000b52:	e9c5 2700 	strd	r2, r7, [r5]
 8000b56:	2600      	movs	r6, #0
 8000b58:	4631      	mov	r1, r6
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	462e      	mov	r6, r5
 8000b60:	4628      	mov	r0, r5
 8000b62:	e70b      	b.n	800097c <__udivmoddi4+0xa0>
 8000b64:	4606      	mov	r6, r0
 8000b66:	e6e9      	b.n	800093c <__udivmoddi4+0x60>
 8000b68:	4618      	mov	r0, r3
 8000b6a:	e6fd      	b.n	8000968 <__udivmoddi4+0x8c>
 8000b6c:	4543      	cmp	r3, r8
 8000b6e:	d2e5      	bcs.n	8000b3c <__udivmoddi4+0x260>
 8000b70:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b74:	eb69 0104 	sbc.w	r1, r9, r4
 8000b78:	3801      	subs	r0, #1
 8000b7a:	e7df      	b.n	8000b3c <__udivmoddi4+0x260>
 8000b7c:	4608      	mov	r0, r1
 8000b7e:	e7d2      	b.n	8000b26 <__udivmoddi4+0x24a>
 8000b80:	4660      	mov	r0, ip
 8000b82:	e78d      	b.n	8000aa0 <__udivmoddi4+0x1c4>
 8000b84:	4681      	mov	r9, r0
 8000b86:	e7b9      	b.n	8000afc <__udivmoddi4+0x220>
 8000b88:	4666      	mov	r6, ip
 8000b8a:	e775      	b.n	8000a78 <__udivmoddi4+0x19c>
 8000b8c:	4630      	mov	r0, r6
 8000b8e:	e74a      	b.n	8000a26 <__udivmoddi4+0x14a>
 8000b90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b94:	4439      	add	r1, r7
 8000b96:	e713      	b.n	80009c0 <__udivmoddi4+0xe4>
 8000b98:	3802      	subs	r0, #2
 8000b9a:	443c      	add	r4, r7
 8000b9c:	e724      	b.n	80009e8 <__udivmoddi4+0x10c>
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_idiv0>:
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <Send_Uart>:
FATFS *pUSBHFatFS;
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string){
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(UART, (uint8_t *)string, strlen(string), HAL_MAX_DELAY);
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f7ff fb19 	bl	80001e4 <strlen>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	b29a      	uxth	r2, r3
 8000bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bba:	6879      	ldr	r1, [r7, #4]
 8000bbc:	4803      	ldr	r0, [pc, #12]	; (8000bcc <Send_Uart+0x28>)
 8000bbe:	f003 ff56 	bl	8004a6e <HAL_UART_Transmit>

}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000a84 	.word	0x20000a84

08000bd0 <Mount_USB>:


int Mount_USB (void){
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
	if ((fresult = f_mount(&USBHFatFS, USBHPath, 1)) != FR_OK){
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	490b      	ldr	r1, [pc, #44]	; (8000c04 <Mount_USB+0x34>)
 8000bd8:	480b      	ldr	r0, [pc, #44]	; (8000c08 <Mount_USB+0x38>)
 8000bda:	f00b ff8d 	bl	800caf8 <f_mount>
 8000bde:	4603      	mov	r3, r0
 8000be0:	461a      	mov	r2, r3
 8000be2:	4b0a      	ldr	r3, [pc, #40]	; (8000c0c <Mount_USB+0x3c>)
 8000be4:	701a      	strb	r2, [r3, #0]
 8000be6:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <Mount_USB+0x3c>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d004      	beq.n	8000bf8 <Mount_USB+0x28>
		Send_Uart ("ERROR!!! in mounting USB ...\n\n");
 8000bee:	4808      	ldr	r0, [pc, #32]	; (8000c10 <Mount_USB+0x40>)
 8000bf0:	f7ff ffd8 	bl	8000ba4 <Send_Uart>
		return 1;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	e003      	b.n	8000c00 <Mount_USB+0x30>
	}
	else{
		Send_Uart("USB mounted successfully...\n");
 8000bf8:	4806      	ldr	r0, [pc, #24]	; (8000c14 <Mount_USB+0x44>)
 8000bfa:	f7ff ffd3 	bl	8000ba4 <Send_Uart>
		return 0;
 8000bfe:	2300      	movs	r3, #0
	}
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000af0 	.word	0x20000af0
 8000c08:	20001b50 	.word	0x20001b50
 8000c0c:	20000958 	.word	0x20000958
 8000c10:	080106a0 	.word	0x080106a0
 8000c14:	080106c0 	.word	0x080106c0

08000c18 <Unmount_USB>:

int Unmount_USB (void){
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
	if ((fresult = f_mount(NULL, USBHPath, 1)) == FR_OK){
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	490b      	ldr	r1, [pc, #44]	; (8000c4c <Unmount_USB+0x34>)
 8000c20:	2000      	movs	r0, #0
 8000c22:	f00b ff69 	bl	800caf8 <f_mount>
 8000c26:	4603      	mov	r3, r0
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <Unmount_USB+0x38>)
 8000c2c:	701a      	strb	r2, [r3, #0]
 8000c2e:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <Unmount_USB+0x38>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d104      	bne.n	8000c40 <Unmount_USB+0x28>
		Send_Uart ("USB UNMOUNTED successfully...\n\n\n");
 8000c36:	4807      	ldr	r0, [pc, #28]	; (8000c54 <Unmount_USB+0x3c>)
 8000c38:	f7ff ffb4 	bl	8000ba4 <Send_Uart>
		return 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	e003      	b.n	8000c48 <Unmount_USB+0x30>
	}

	else{
		Send_Uart("ERROR!!! in UNMOUNTING USB \n\n\n");
 8000c40:	4805      	ldr	r0, [pc, #20]	; (8000c58 <Unmount_USB+0x40>)
 8000c42:	f7ff ffaf 	bl	8000ba4 <Send_Uart>
		return 1;
 8000c46:	2301      	movs	r3, #1
	}
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000af0 	.word	0x20000af0
 8000c50:	20000958 	.word	0x20000958
 8000c54:	080106e0 	.word	0x080106e0
 8000c58:	08010704 	.word	0x08010704

08000c5c <Scan_USB>:

/* Start node to be scanned (***also used as work area***) */
FRESULT Scan_USB (char* pat){
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b09c      	sub	sp, #112	; 0x70
 8000c60:	af02      	add	r7, sp, #8
 8000c62:	6078      	str	r0, [r7, #4]
    DIR dir;
    UINT i;
    char *path = malloc(20*sizeof (char));
 8000c64:	2014      	movs	r0, #20
 8000c66:	f00d fc31 	bl	800e4cc <malloc>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	667b      	str	r3, [r7, #100]	; 0x64
    sprintf (path, "%s",pat);
 8000c6e:	687a      	ldr	r2, [r7, #4]
 8000c70:	4949      	ldr	r1, [pc, #292]	; (8000d98 <Scan_USB+0x13c>)
 8000c72:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000c74:	f00d fe8c 	bl	800e990 <siprintf>

                         /* Open the directory */
    if (( fresult = f_opendir(&dir, path)) == FR_OK){
 8000c78:	f107 0308 	add.w	r3, r7, #8
 8000c7c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f00c fd05 	bl	800d68e <f_opendir>
 8000c84:	4603      	mov	r3, r0
 8000c86:	461a      	mov	r2, r3
 8000c88:	4b44      	ldr	r3, [pc, #272]	; (8000d9c <Scan_USB+0x140>)
 8000c8a:	701a      	strb	r2, [r3, #0]
 8000c8c:	4b43      	ldr	r3, [pc, #268]	; (8000d9c <Scan_USB+0x140>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d178      	bne.n	8000d86 <Scan_USB+0x12a>

    	for (;;){
                               /* Read a directory item */
            if ((fresult = f_readdir(&dir, &USBHfno)) != FR_OK || USBHfno.fname[0] == 0)
 8000c94:	f107 0308 	add.w	r3, r7, #8
 8000c98:	4941      	ldr	r1, [pc, #260]	; (8000da0 <Scan_USB+0x144>)
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f00c fdc6 	bl	800d82c <f_readdir>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	4b3d      	ldr	r3, [pc, #244]	; (8000d9c <Scan_USB+0x140>)
 8000ca6:	701a      	strb	r2, [r3, #0]
 8000ca8:	4b3c      	ldr	r3, [pc, #240]	; (8000d9c <Scan_USB+0x140>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d165      	bne.n	8000d7c <Scan_USB+0x120>
 8000cb0:	4b3b      	ldr	r3, [pc, #236]	; (8000da0 <Scan_USB+0x144>)
 8000cb2:	7e9b      	ldrb	r3, [r3, #26]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d061      	beq.n	8000d7c <Scan_USB+0x120>
            	break;  /* Break on error or end of dir */

            if (USBHfno.fattrib & AM_DIR)     /* It is a directory */
 8000cb8:	4b39      	ldr	r3, [pc, #228]	; (8000da0 <Scan_USB+0x144>)
 8000cba:	7b1b      	ldrb	r3, [r3, #12]
 8000cbc:	f003 0310 	and.w	r3, r3, #16
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d03a      	beq.n	8000d3a <Scan_USB+0xde>
            {
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname)))
 8000cc4:	4937      	ldr	r1, [pc, #220]	; (8000da4 <Scan_USB+0x148>)
 8000cc6:	4838      	ldr	r0, [pc, #224]	; (8000da8 <Scan_USB+0x14c>)
 8000cc8:	f7ff fa82 	bl	80001d0 <strcmp>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d04f      	beq.n	8000d72 <Scan_USB+0x116>
            		continue;
            	if (!(strcmp("System Volume Information", USBHfno.fname)))
 8000cd2:	4934      	ldr	r1, [pc, #208]	; (8000da4 <Scan_USB+0x148>)
 8000cd4:	4835      	ldr	r0, [pc, #212]	; (8000dac <Scan_USB+0x150>)
 8000cd6:	f7ff fa7b 	bl	80001d0 <strcmp>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d04a      	beq.n	8000d76 <Scan_USB+0x11a>
            		continue;

            	char *buf = malloc(30*sizeof(char));
 8000ce0:	201e      	movs	r0, #30
 8000ce2:	f00d fbf3 	bl	800e4cc <malloc>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	65fb      	str	r3, [r7, #92]	; 0x5c
            	sprintf (buf, "Dir: %s\r\n", USBHfno.fname);
 8000cea:	4a2e      	ldr	r2, [pc, #184]	; (8000da4 <Scan_USB+0x148>)
 8000cec:	4930      	ldr	r1, [pc, #192]	; (8000db0 <Scan_USB+0x154>)
 8000cee:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000cf0:	f00d fe4e 	bl	800e990 <siprintf>
            	Send_Uart(buf);
 8000cf4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000cf6:	f7ff ff55 	bl	8000ba4 <Send_Uart>
            	free(buf);
 8000cfa:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000cfc:	f00d fbee 	bl	800e4dc <free>

                i = strlen(path);
 8000d00:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000d02:	f7ff fa6f 	bl	80001e4 <strlen>
 8000d06:	65b8      	str	r0, [r7, #88]	; 0x58
                sprintf(&path[i], "/%s", USBHfno.fname);
 8000d08:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000d0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000d0c:	4413      	add	r3, r2
 8000d0e:	4a25      	ldr	r2, [pc, #148]	; (8000da4 <Scan_USB+0x148>)
 8000d10:	4928      	ldr	r1, [pc, #160]	; (8000db4 <Scan_USB+0x158>)
 8000d12:	4618      	mov	r0, r3
 8000d14:	f00d fe3c 	bl	800e990 <siprintf>

                /* Enter the directory */
                if ((fresult = Scan_USB(path)) != FR_OK)
 8000d18:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000d1a:	f7ff ff9f 	bl	8000c5c <Scan_USB>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	461a      	mov	r2, r3
 8000d22:	4b1e      	ldr	r3, [pc, #120]	; (8000d9c <Scan_USB+0x140>)
 8000d24:	701a      	strb	r2, [r3, #0]
 8000d26:	4b1d      	ldr	r3, [pc, #116]	; (8000d9c <Scan_USB+0x140>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d125      	bne.n	8000d7a <Scan_USB+0x11e>
                	break;
                path[i] = 0;
 8000d2e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000d30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000d32:	4413      	add	r3, r2
 8000d34:	2200      	movs	r2, #0
 8000d36:	701a      	strb	r2, [r3, #0]
 8000d38:	e7ac      	b.n	8000c94 <Scan_USB+0x38>
            }

            else{   /* It is a file. */
           	   char *buf = malloc(50*sizeof(char));
 8000d3a:	2032      	movs	r0, #50	; 0x32
 8000d3c:	f00d fbc6 	bl	800e4cc <malloc>
 8000d40:	4603      	mov	r3, r0
 8000d42:	663b      	str	r3, [r7, #96]	; 0x60
               sprintf(buf,"File: %s/%s  %d KB\n", path, USBHfno.fname,(int)USBHfno.fsize/1024);
 8000d44:	4b16      	ldr	r3, [pc, #88]	; (8000da0 <Scan_USB+0x144>)
 8000d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	da01      	bge.n	8000d54 <Scan_USB+0xf8>
 8000d50:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8000d54:	129b      	asrs	r3, r3, #10
 8000d56:	9300      	str	r3, [sp, #0]
 8000d58:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <Scan_USB+0x148>)
 8000d5a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000d5c:	4916      	ldr	r1, [pc, #88]	; (8000db8 <Scan_USB+0x15c>)
 8000d5e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000d60:	f00d fe16 	bl	800e990 <siprintf>
               Send_Uart(buf);
 8000d64:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000d66:	f7ff ff1d 	bl	8000ba4 <Send_Uart>
               free(buf);
 8000d6a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000d6c:	f00d fbb6 	bl	800e4dc <free>
 8000d70:	e790      	b.n	8000c94 <Scan_USB+0x38>
            		continue;
 8000d72:	bf00      	nop
 8000d74:	e78e      	b.n	8000c94 <Scan_USB+0x38>
            		continue;
 8000d76:	bf00      	nop
            if ((fresult = f_readdir(&dir, &USBHfno)) != FR_OK || USBHfno.fname[0] == 0)
 8000d78:	e78c      	b.n	8000c94 <Scan_USB+0x38>
                	break;
 8000d7a:	bf00      	nop
            }
        }
        f_closedir(&dir);
 8000d7c:	f107 0308 	add.w	r3, r7, #8
 8000d80:	4618      	mov	r0, r3
 8000d82:	f00c fd2d 	bl	800d7e0 <f_closedir>
    }
    free(path);
 8000d86:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000d88:	f00d fba8 	bl	800e4dc <free>
    return fresult;
 8000d8c:	4b03      	ldr	r3, [pc, #12]	; (8000d9c <Scan_USB+0x140>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3768      	adds	r7, #104	; 0x68
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	08010724 	.word	0x08010724
 8000d9c:	20000958 	.word	0x20000958
 8000da0:	20000960 	.word	0x20000960
 8000da4:	2000097a 	.word	0x2000097a
 8000da8:	08010728 	.word	0x08010728
 8000dac:	08010734 	.word	0x08010734
 8000db0:	08010750 	.word	0x08010750
 8000db4:	0801075c 	.word	0x0801075c
 8000db8:	08010760 	.word	0x08010760

08000dbc <toggleinfoled>:
	    return fresult;
	}
}


void toggleinfoled(GPIO_TypeDef* Portx, uint16_t Portnumber, int delay){
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	607a      	str	r2, [r7, #4]
 8000dc8:	817b      	strh	r3, [r7, #10]

	int isOn;
	int delay1;

	isOn = !isOn;
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	bf0c      	ite	eq
 8000dd0:	2301      	moveq	r3, #1
 8000dd2:	2300      	movne	r3, #0
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	613b      	str	r3, [r7, #16]
	if(isOn == 1)
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d102      	bne.n	8000de4 <toggleinfoled+0x28>
	  delay1 = delay;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	617b      	str	r3, [r7, #20]
 8000de2:	e001      	b.n	8000de8 <toggleinfoled+0x2c>
	else
	  delay1 = delay;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	617b      	str	r3, [r7, #20]

	HAL_GPIO_WritePin(Portx, Portnumber, isOn);
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	897b      	ldrh	r3, [r7, #10]
 8000dee:	4619      	mov	r1, r3
 8000df0:	68f8      	ldr	r0, [r7, #12]
 8000df2:	f001 fbf1 	bl	80025d8 <HAL_GPIO_WritePin>
	HAL_Delay(delay1);
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f000 fe37 	bl	8001a6c <HAL_Delay>
}
 8000dfe:	bf00      	nop
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
	...

08000e08 <Read_File>:


FRESULT Read_File (char *name){
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	1d3b      	adds	r3, r7, #4
 8000e12:	6018      	str	r0, [r3, #0]
	/**** check whether the file exists or not ****/

	if ((fresult = f_stat (name, &USBHfno)) != FR_OK){
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	4987      	ldr	r1, [pc, #540]	; (8001034 <Read_File+0x22c>)
 8000e18:	6818      	ldr	r0, [r3, #0]
 8000e1a:	f00c fd44 	bl	800d8a6 <f_stat>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	461a      	mov	r2, r3
 8000e22:	4b85      	ldr	r3, [pc, #532]	; (8001038 <Read_File+0x230>)
 8000e24:	701a      	strb	r2, [r3, #0]
 8000e26:	4b84      	ldr	r3, [pc, #528]	; (8001038 <Read_File+0x230>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d017      	beq.n	8000e5e <Read_File+0x56>
		char *buf = malloc(100*sizeof(char));
 8000e2e:	2064      	movs	r0, #100	; 0x64
 8000e30:	f00d fb4c 	bl	800e4cc <malloc>
 8000e34:	4603      	mov	r3, r0
 8000e36:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
		sprintf (buf, "ERRROR!!! *%s* does not exists\n\n", name);
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	497f      	ldr	r1, [pc, #508]	; (800103c <Read_File+0x234>)
 8000e40:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 8000e44:	f00d fda4 	bl	800e990 <siprintf>
		Send_Uart (buf);
 8000e48:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 8000e4c:	f7ff feaa 	bl	8000ba4 <Send_Uart>
		free(buf);
 8000e50:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 8000e54:	f00d fb42 	bl	800e4dc <free>
	    return fresult;
 8000e58:	4b77      	ldr	r3, [pc, #476]	; (8001038 <Read_File+0x230>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	e0e4      	b.n	8001028 <Read_File+0x220>
	}

	else{
/********************************************************************************/
/* Open file to read */
		if ((fresult = f_open(&USBHFile, name, FA_READ)) != FR_OK){
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	2201      	movs	r2, #1
 8000e62:	6819      	ldr	r1, [r3, #0]
 8000e64:	4876      	ldr	r0, [pc, #472]	; (8001040 <Read_File+0x238>)
 8000e66:	f00b fe8d 	bl	800cb84 <f_open>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4b72      	ldr	r3, [pc, #456]	; (8001038 <Read_File+0x230>)
 8000e70:	701a      	strb	r2, [r3, #0]
 8000e72:	4b71      	ldr	r3, [pc, #452]	; (8001038 <Read_File+0x230>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d01a      	beq.n	8000eb0 <Read_File+0xa8>
			char *buf = malloc(100*sizeof(char));
 8000e7a:	2064      	movs	r0, #100	; 0x64
 8000e7c:	f00d fb26 	bl	800e4cc <malloc>
 8000e80:	4603      	mov	r3, r0
 8000e82:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
			sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8000e86:	4b6c      	ldr	r3, [pc, #432]	; (8001038 <Read_File+0x230>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	1d3b      	adds	r3, r7, #4
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	496c      	ldr	r1, [pc, #432]	; (8001044 <Read_File+0x23c>)
 8000e92:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 8000e96:	f00d fd7b 	bl	800e990 <siprintf>
		    Send_Uart(buf);
 8000e9a:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 8000e9e:	f7ff fe81 	bl	8000ba4 <Send_Uart>
		    free(buf);
 8000ea2:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 8000ea6:	f00d fb19 	bl	800e4dc <free>
		    return fresult;
 8000eaa:	4b63      	ldr	r3, [pc, #396]	; (8001038 <Read_File+0x230>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	e0bb      	b.n	8001028 <Read_File+0x220>

/* Read data from the file
 *
 ** see the function details for the arguments */

    	char *buf = malloc(100*sizeof(char));
 8000eb0:	2064      	movs	r0, #100	; 0x64
 8000eb2:	f00d fb0b 	bl	800e4cc <malloc>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
    	sprintf (buf, "Opening file-->  *%s*  To READ data from it\n", name);
 8000ebc:	1d3b      	adds	r3, r7, #4
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	4961      	ldr	r1, [pc, #388]	; (8001048 <Read_File+0x240>)
 8000ec2:	f8d7 0228 	ldr.w	r0, [r7, #552]	; 0x228
 8000ec6:	f00d fd63 	bl	800e990 <siprintf>
    	Send_Uart(buf);
 8000eca:	f8d7 0228 	ldr.w	r0, [r7, #552]	; 0x228
 8000ece:	f7ff fe69 	bl	8000ba4 <Send_Uart>
        free(buf);
 8000ed2:	f8d7 0228 	ldr.w	r0, [r7, #552]	; 0x228
 8000ed6:	f00d fb01 	bl	800e4dc <free>
/********************************************************************************/



        BYTE buffer[512];
        int bytecount = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
	    FRESULT fr;          /* FatFs function common result code */
	    UINT br, bw;         /* File read/write count */


//		while(f_gets(buffer,sizeof(buffer), &USBHFile)){
		while (&USBHFile != f_eof(&USBHFile)){
 8000ee0:	e055      	b.n	8000f8e <Read_File+0x186>
			memset((void*)buffer, 0,sizeof(buffer));
 8000ee2:	f107 030c 	add.w	r3, r7, #12
 8000ee6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eea:	2100      	movs	r1, #0
 8000eec:	4618      	mov	r0, r3
 8000eee:	f00d fb0b 	bl	800e508 <memset>
			fr = f_read(&USBHFile,(void*)buffer, sizeof(buffer), &br); /* Read a chunk of data from the source file */
 8000ef2:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8000ef6:	f107 010c 	add.w	r1, r7, #12
 8000efa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000efe:	4850      	ldr	r0, [pc, #320]	; (8001040 <Read_File+0x238>)
 8000f00:	f00c f8f1 	bl	800d0e6 <f_read>
 8000f04:	4603      	mov	r3, r0
 8000f06:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
			if (br == 0)
 8000f0a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d04b      	beq.n	8000faa <Read_File+0x1a2>
				break; /* error or eof */

		toggleinfoled(GPIOD, GPIO_PIN_13, 100);
 8000f12:	2264      	movs	r2, #100	; 0x64
 8000f14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f18:	484c      	ldr	r0, [pc, #304]	; (800104c <Read_File+0x244>)
 8000f1a:	f7ff ff4f 	bl	8000dbc <toggleinfoled>


		write_STM32_Flash((uint32_t)0x08010000,(uint32_t*)buffer,1);
 8000f1e:	f107 030c 	add.w	r3, r7, #12
 8000f22:	2201      	movs	r2, #1
 8000f24:	4619      	mov	r1, r3
 8000f26:	484a      	ldr	r0, [pc, #296]	; (8001050 <Read_File+0x248>)
 8000f28:	f000 f9c2 	bl	80012b0 <write_STM32_Flash>


		printf("\n");
 8000f2c:	200a      	movs	r0, #10
 8000f2e:	f00d fbb5 	bl	800e69c <putchar>
		for(int i = 0; i < sizeof(buffer) ; i++){
 8000f32:	2300      	movs	r3, #0
 8000f34:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8000f38:	e024      	b.n	8000f84 <Read_File+0x17c>
			if(i!=0 && !( i % 4)){
 8000f3a:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d011      	beq.n	8000f66 <Read_File+0x15e>
 8000f42:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8000f46:	f003 0303 	and.w	r3, r3, #3
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d10b      	bne.n	8000f66 <Read_File+0x15e>
				printf(" ");
 8000f4e:	2020      	movs	r0, #32
 8000f50:	f00d fba4 	bl	800e69c <putchar>
				if(!(i % 64)){
 8000f54:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8000f58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d102      	bne.n	8000f66 <Read_File+0x15e>
					printf("\n");
 8000f60:	200a      	movs	r0, #10
 8000f62:	f00d fb9b 	bl	800e69c <putchar>
				}
			}
			printf("%02X", *(BYTE*)(buffer + i));
 8000f66:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8000f6a:	f107 020c 	add.w	r2, r7, #12
 8000f6e:	4413      	add	r3, r2
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	4619      	mov	r1, r3
 8000f74:	4837      	ldr	r0, [pc, #220]	; (8001054 <Read_File+0x24c>)
 8000f76:	f00d fb79 	bl	800e66c <iprintf>
		for(int i = 0; i < sizeof(buffer) ; i++){
 8000f7a:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8000f7e:	3301      	adds	r3, #1
 8000f80:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8000f84:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8000f88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f8c:	d3d5      	bcc.n	8000f3a <Read_File+0x132>
		while (&USBHFile != f_eof(&USBHFile)){
 8000f8e:	4b2c      	ldr	r3, [pc, #176]	; (8001040 <Read_File+0x238>)
 8000f90:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8000f94:	4b2a      	ldr	r3, [pc, #168]	; (8001040 <Read_File+0x238>)
 8000f96:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	bf08      	it	eq
 8000f9e:	4290      	cmpeq	r0, r2
 8000fa0:	d19f      	bne.n	8000ee2 <Read_File+0xda>
 8000fa2:	4b27      	ldr	r3, [pc, #156]	; (8001040 <Read_File+0x238>)
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d19c      	bne.n	8000ee2 <Read_File+0xda>
 8000fa8:	e000      	b.n	8000fac <Read_File+0x1a4>
				break; /* error or eof */
 8000faa:	bf00      	nop
			}
		}
		printf("\n\n");
 8000fac:	482a      	ldr	r0, [pc, #168]	; (8001058 <Read_File+0x250>)
 8000fae:	f00d fbf9 	bl	800e7a4 <puts>

/********************************************************************************/
/* Close file */
		if ((fresult = f_close(&USBHFile)) != FR_OK){
 8000fb2:	4823      	ldr	r0, [pc, #140]	; (8001040 <Read_File+0x238>)
 8000fb4:	f00c fb41 	bl	800d63a <f_close>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	461a      	mov	r2, r3
 8000fbc:	4b1e      	ldr	r3, [pc, #120]	; (8001038 <Read_File+0x230>)
 8000fbe:	701a      	strb	r2, [r3, #0]
 8000fc0:	4b1d      	ldr	r3, [pc, #116]	; (8001038 <Read_File+0x230>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d018      	beq.n	8000ffa <Read_File+0x1f2>
			char *buf = malloc(100*sizeof(char));
 8000fc8:	2064      	movs	r0, #100	; 0x64
 8000fca:	f00d fa7f 	bl	800e4cc <malloc>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
			sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 8000fd4:	4b18      	ldr	r3, [pc, #96]	; (8001038 <Read_File+0x230>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	1d3b      	adds	r3, r7, #4
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	491f      	ldr	r1, [pc, #124]	; (800105c <Read_File+0x254>)
 8000fe0:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 8000fe4:	f00d fcd4 	bl	800e990 <siprintf>
			Send_Uart(buf);
 8000fe8:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 8000fec:	f7ff fdda 	bl	8000ba4 <Send_Uart>
			free(buf);
 8000ff0:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 8000ff4:	f00d fa72 	bl	800e4dc <free>
 8000ff8:	e014      	b.n	8001024 <Read_File+0x21c>
		}
		else{
			char *buf = malloc(100*sizeof(char));
 8000ffa:	2064      	movs	r0, #100	; 0x64
 8000ffc:	f00d fa66 	bl	800e4cc <malloc>
 8001000:	4603      	mov	r3, r0
 8001002:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
			sprintf (buf, "File *%s* CLOSED successfully\n\n", name);
 8001006:	1d3b      	adds	r3, r7, #4
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	4915      	ldr	r1, [pc, #84]	; (8001060 <Read_File+0x258>)
 800100c:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 8001010:	f00d fcbe 	bl	800e990 <siprintf>
			Send_Uart(buf);
 8001014:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 8001018:	f7ff fdc4 	bl	8000ba4 <Send_Uart>
			free(buf);
 800101c:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 8001020:	f00d fa5c 	bl	800e4dc <free>
		}

	    return fresult;
 8001024:	4b04      	ldr	r3, [pc, #16]	; (8001038 <Read_File+0x230>)
 8001026:	781b      	ldrb	r3, [r3, #0]
	}
}
 8001028:	4618      	mov	r0, r3
 800102a:	f507 770c 	add.w	r7, r7, #560	; 0x230
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000960 	.word	0x20000960
 8001038:	20000958 	.word	0x20000958
 800103c:	08010888 	.word	0x08010888
 8001040:	20000af8 	.word	0x20000af8
 8001044:	08010798 	.word	0x08010798
 8001048:	080108ac 	.word	0x080108ac
 800104c:	40020c00 	.word	0x40020c00
 8001050:	08010000 	.word	0x08010000
 8001054:	080108dc 	.word	0x080108dc
 8001058:	080108e4 	.word	0x080108e4
 800105c:	080108e8 	.word	0x080108e8
 8001060:	08010910 	.word	0x08010910

08001064 <Check_USB_Details>:
    	free(buf);
    }
    return fresult;
}

void Check_USB_Details (void){
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
    /* Check free space */
    f_getfree("", &fre_clust, &pUSBHFatFS);
 800106a:	4a31      	ldr	r2, [pc, #196]	; (8001130 <Check_USB_Details+0xcc>)
 800106c:	4931      	ldr	r1, [pc, #196]	; (8001134 <Check_USB_Details+0xd0>)
 800106e:	4832      	ldr	r0, [pc, #200]	; (8001138 <Check_USB_Details+0xd4>)
 8001070:	f00c fc52 	bl	800d918 <f_getfree>

    total = (uint32_t)((pUSBHFatFS->n_fatent - 2) * pUSBHFatFS->csize * 0.5);
 8001074:	4b2e      	ldr	r3, [pc, #184]	; (8001130 <Check_USB_Details+0xcc>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	6a1b      	ldr	r3, [r3, #32]
 800107a:	3b02      	subs	r3, #2
 800107c:	4a2c      	ldr	r2, [pc, #176]	; (8001130 <Check_USB_Details+0xcc>)
 800107e:	6812      	ldr	r2, [r2, #0]
 8001080:	8952      	ldrh	r2, [r2, #10]
 8001082:	fb02 f303 	mul.w	r3, r2, r3
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fb76 	bl	8000778 <__aeabi_ui2d>
 800108c:	f04f 0200 	mov.w	r2, #0
 8001090:	4b2a      	ldr	r3, [pc, #168]	; (800113c <Check_USB_Details+0xd8>)
 8001092:	f7ff f905 	bl	80002a0 <__aeabi_dmul>
 8001096:	4602      	mov	r2, r0
 8001098:	460b      	mov	r3, r1
 800109a:	4610      	mov	r0, r2
 800109c:	4619      	mov	r1, r3
 800109e:	f7ff fbe5 	bl	800086c <__aeabi_d2uiz>
 80010a2:	4603      	mov	r3, r0
 80010a4:	4a26      	ldr	r2, [pc, #152]	; (8001140 <Check_USB_Details+0xdc>)
 80010a6:	6013      	str	r3, [r2, #0]
    char *buf = malloc(30*sizeof(char));
 80010a8:	201e      	movs	r0, #30
 80010aa:	f00d fa0f 	bl	800e4cc <malloc>
 80010ae:	4603      	mov	r3, r0
 80010b0:	607b      	str	r3, [r7, #4]
    sprintf (buf, "USB  Total Size KB: \t%lu\n",total/1024);
 80010b2:	4b23      	ldr	r3, [pc, #140]	; (8001140 <Check_USB_Details+0xdc>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	0a9b      	lsrs	r3, r3, #10
 80010b8:	461a      	mov	r2, r3
 80010ba:	4922      	ldr	r1, [pc, #136]	; (8001144 <Check_USB_Details+0xe0>)
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f00d fc67 	bl	800e990 <siprintf>
    Send_Uart(buf);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff fd6e 	bl	8000ba4 <Send_Uart>
    free(buf);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f00d fa07 	bl	800e4dc <free>


    free_space = (uint32_t)(fre_clust * pUSBHFatFS->csize * 0.5);
 80010ce:	4b18      	ldr	r3, [pc, #96]	; (8001130 <Check_USB_Details+0xcc>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	895b      	ldrh	r3, [r3, #10]
 80010d4:	461a      	mov	r2, r3
 80010d6:	4b17      	ldr	r3, [pc, #92]	; (8001134 <Check_USB_Details+0xd0>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	fb03 f302 	mul.w	r3, r3, r2
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff fb4a 	bl	8000778 <__aeabi_ui2d>
 80010e4:	f04f 0200 	mov.w	r2, #0
 80010e8:	4b14      	ldr	r3, [pc, #80]	; (800113c <Check_USB_Details+0xd8>)
 80010ea:	f7ff f8d9 	bl	80002a0 <__aeabi_dmul>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	4610      	mov	r0, r2
 80010f4:	4619      	mov	r1, r3
 80010f6:	f7ff fbb9 	bl	800086c <__aeabi_d2uiz>
 80010fa:	4603      	mov	r3, r0
 80010fc:	4a12      	ldr	r2, [pc, #72]	; (8001148 <Check_USB_Details+0xe4>)
 80010fe:	6013      	str	r3, [r2, #0]
    buf = malloc(30*sizeof(char));
 8001100:	201e      	movs	r0, #30
 8001102:	f00d f9e3 	bl	800e4cc <malloc>
 8001106:	4603      	mov	r3, r0
 8001108:	607b      	str	r3, [r7, #4]
    sprintf (buf, "USB Free Space KB: \t%lu\n",free_space/1024);
 800110a:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <Check_USB_Details+0xe4>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	0a9b      	lsrs	r3, r3, #10
 8001110:	461a      	mov	r2, r3
 8001112:	490e      	ldr	r1, [pc, #56]	; (800114c <Check_USB_Details+0xe8>)
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f00d fc3b 	bl	800e990 <siprintf>
    Send_Uart(buf);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff fd42 	bl	8000ba4 <Send_Uart>
    free(buf);
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f00d f9db 	bl	800e4dc <free>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000948 	.word	0x20000948
 8001134:	20000568 	.word	0x20000568
 8001138:	08010b04 	.word	0x08010b04
 800113c:	3fe00000 	.word	0x3fe00000
 8001140:	20000a80 	.word	0x20000a80
 8001144:	08010b08 	.word	0x08010b08
 8001148:	2000094c 	.word	0x2000094c
 800114c:	08010b24 	.word	0x08010b24

08001150 <GetSector>:
#define  MAX_ADDRESS_SECTOR10 0x080DFFFF

#define  MIN_ADDRESS_SECTOR11 0x080E0000
#define  MAX_ADDRESS_SECTOR11 0x080FFFFF

static uint32_t GetSector(uint32_t Sectoraddress){
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
	uint32_t sector = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	60fb      	str	r3, [r7, #12]

	if(Sectoraddress < MAX_ADDRESS_SECTOR0 && Sectoraddress >= MIN_ADDRESS_SECTOR0){
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a44      	ldr	r2, [pc, #272]	; (8001270 <GetSector+0x120>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d806      	bhi.n	8001172 <GetSector+0x22>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800116a:	d302      	bcc.n	8001172 <GetSector+0x22>
		sector = FLASH_SECTOR_0;
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	e077      	b.n	8001262 <GetSector+0x112>
	}
	else if(Sectoraddress < MAX_ADDRESS_SECTOR1 && Sectoraddress >= MIN_ADDRESS_SECTOR1){
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a3f      	ldr	r2, [pc, #252]	; (8001274 <GetSector+0x124>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d806      	bhi.n	8001188 <GetSector+0x38>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a3e      	ldr	r2, [pc, #248]	; (8001278 <GetSector+0x128>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d302      	bcc.n	8001188 <GetSector+0x38>
		sector = FLASH_SECTOR_1;
 8001182:	2301      	movs	r3, #1
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	e06c      	b.n	8001262 <GetSector+0x112>
	}
	else if(Sectoraddress < MAX_ADDRESS_SECTOR2 && Sectoraddress >= MIN_ADDRESS_SECTOR2){
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4a3c      	ldr	r2, [pc, #240]	; (800127c <GetSector+0x12c>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d806      	bhi.n	800119e <GetSector+0x4e>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4a3b      	ldr	r2, [pc, #236]	; (8001280 <GetSector+0x130>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d302      	bcc.n	800119e <GetSector+0x4e>
		sector = FLASH_SECTOR_2;
 8001198:	2302      	movs	r3, #2
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	e061      	b.n	8001262 <GetSector+0x112>
	}
	else if(Sectoraddress < MAX_ADDRESS_SECTOR3 && Sectoraddress >= MIN_ADDRESS_SECTOR3){
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a38      	ldr	r2, [pc, #224]	; (8001284 <GetSector+0x134>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d206      	bcs.n	80011b4 <GetSector+0x64>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a37      	ldr	r2, [pc, #220]	; (8001288 <GetSector+0x138>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d302      	bcc.n	80011b4 <GetSector+0x64>
		sector = FLASH_SECTOR_3;
 80011ae:	2303      	movs	r3, #3
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	e056      	b.n	8001262 <GetSector+0x112>
	}
	else if(Sectoraddress < MAX_ADDRESS_SECTOR4 && Sectoraddress >= MIN_ADDRESS_SECTOR4){
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4a35      	ldr	r2, [pc, #212]	; (800128c <GetSector+0x13c>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d206      	bcs.n	80011ca <GetSector+0x7a>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4a31      	ldr	r2, [pc, #196]	; (8001284 <GetSector+0x134>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d902      	bls.n	80011ca <GetSector+0x7a>
		sector = FLASH_SECTOR_4;
 80011c4:	2304      	movs	r3, #4
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	e04b      	b.n	8001262 <GetSector+0x112>
	}
	else if(Sectoraddress < MAX_ADDRESS_SECTOR5 && Sectoraddress >= MIN_ADDRESS_SECTOR5){
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a30      	ldr	r2, [pc, #192]	; (8001290 <GetSector+0x140>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d206      	bcs.n	80011e0 <GetSector+0x90>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a2d      	ldr	r2, [pc, #180]	; (800128c <GetSector+0x13c>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d902      	bls.n	80011e0 <GetSector+0x90>
		sector = FLASH_SECTOR_5;
 80011da:	2305      	movs	r3, #5
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	e040      	b.n	8001262 <GetSector+0x112>
	}
	else if(Sectoraddress < MAX_ADDRESS_SECTOR6 && Sectoraddress >= MIN_ADDRESS_SECTOR6){
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a2c      	ldr	r2, [pc, #176]	; (8001294 <GetSector+0x144>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d206      	bcs.n	80011f6 <GetSector+0xa6>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a29      	ldr	r2, [pc, #164]	; (8001290 <GetSector+0x140>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d902      	bls.n	80011f6 <GetSector+0xa6>
		sector = FLASH_SECTOR_6;
 80011f0:	2306      	movs	r3, #6
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	e035      	b.n	8001262 <GetSector+0x112>
	}
	else if(Sectoraddress < MAX_ADDRESS_SECTOR7 && Sectoraddress >= MIN_ADDRESS_SECTOR7){
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a27      	ldr	r2, [pc, #156]	; (8001298 <GetSector+0x148>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d206      	bcs.n	800120c <GetSector+0xbc>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a24      	ldr	r2, [pc, #144]	; (8001294 <GetSector+0x144>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d902      	bls.n	800120c <GetSector+0xbc>
		sector = FLASH_SECTOR_7;
 8001206:	2307      	movs	r3, #7
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	e02a      	b.n	8001262 <GetSector+0x112>
	}
	else if(Sectoraddress < MAX_ADDRESS_SECTOR8 && Sectoraddress >= MIN_ADDRESS_SECTOR8){
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4a23      	ldr	r2, [pc, #140]	; (800129c <GetSector+0x14c>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d206      	bcs.n	8001222 <GetSector+0xd2>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4a20      	ldr	r2, [pc, #128]	; (8001298 <GetSector+0x148>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d902      	bls.n	8001222 <GetSector+0xd2>
		sector = FLASH_SECTOR_8;
 800121c:	2308      	movs	r3, #8
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	e01f      	b.n	8001262 <GetSector+0x112>
	}
	else if(Sectoraddress < MAX_ADDRESS_SECTOR9 && Sectoraddress >= MIN_ADDRESS_SECTOR9){
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a1e      	ldr	r2, [pc, #120]	; (80012a0 <GetSector+0x150>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d206      	bcs.n	8001238 <GetSector+0xe8>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a1b      	ldr	r2, [pc, #108]	; (800129c <GetSector+0x14c>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d902      	bls.n	8001238 <GetSector+0xe8>
		sector = FLASH_SECTOR_9;
 8001232:	2309      	movs	r3, #9
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	e014      	b.n	8001262 <GetSector+0x112>
	}
	else if(Sectoraddress < MAX_ADDRESS_SECTOR10 && Sectoraddress >= MIN_ADDRESS_SECTOR10){
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a1a      	ldr	r2, [pc, #104]	; (80012a4 <GetSector+0x154>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d806      	bhi.n	800124e <GetSector+0xfe>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a17      	ldr	r2, [pc, #92]	; (80012a0 <GetSector+0x150>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d902      	bls.n	800124e <GetSector+0xfe>
		sector = FLASH_SECTOR_10;
 8001248:	230a      	movs	r3, #10
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	e009      	b.n	8001262 <GetSector+0x112>
	}
	else if(Sectoraddress < MAX_ADDRESS_SECTOR11 && Sectoraddress >= MIN_ADDRESS_SECTOR11){
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a15      	ldr	r2, [pc, #84]	; (80012a8 <GetSector+0x158>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d805      	bhi.n	8001262 <GetSector+0x112>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a14      	ldr	r2, [pc, #80]	; (80012ac <GetSector+0x15c>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d901      	bls.n	8001262 <GetSector+0x112>
		sector = FLASH_SECTOR_11;
 800125e:	230b      	movs	r3, #11
 8001260:	60fb      	str	r3, [r7, #12]
	}

return sector;
 8001262:	68fb      	ldr	r3, [r7, #12]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3714      	adds	r7, #20
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	08003ffe 	.word	0x08003ffe
 8001274:	08007ffe 	.word	0x08007ffe
 8001278:	08004000 	.word	0x08004000
 800127c:	0800bffe 	.word	0x0800bffe
 8001280:	08008000 	.word	0x08008000
 8001284:	0800ffff 	.word	0x0800ffff
 8001288:	0800c000 	.word	0x0800c000
 800128c:	0801ffff 	.word	0x0801ffff
 8001290:	0803ffff 	.word	0x0803ffff
 8001294:	0805ffff 	.word	0x0805ffff
 8001298:	0807ffff 	.word	0x0807ffff
 800129c:	0809ffff 	.word	0x0809ffff
 80012a0:	080bffff 	.word	0x080bffff
 80012a4:	080dfffe 	.word	0x080dfffe
 80012a8:	080ffffe 	.word	0x080ffffe
 80012ac:	080dffff 	.word	0x080dffff

080012b0 <write_STM32_Flash>:
//	return float_variable;

	return thing.a;
}

uint32_t write_STM32_Flash(uint32_t StartSectorAddress, uint32_t* data, uint16_t numberofwords){
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08a      	sub	sp, #40	; 0x28
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	4613      	mov	r3, r2
 80012bc:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	int sofar = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24

	/*Unlock the flash to enable the flash control register  to access */
	HAL_FLASH_Unlock();
 80012c2:	f000 fd5d 	bl	8001d80 <HAL_FLASH_Unlock>
		//1) Erase the user Flash area
		//2) Get the number of sector to erase from 1.st sector

	uint32_t StartSector		 = GetSector(StartSectorAddress);
 80012c6:	68f8      	ldr	r0, [r7, #12]
 80012c8:	f7ff ff42 	bl	8001150 <GetSector>
 80012cc:	6238      	str	r0, [r7, #32]
	uint32_t EndSector_Address   = StartSector + numberofwords * 4;   //4 bytes
 80012ce:	88fb      	ldrh	r3, [r7, #6]
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	461a      	mov	r2, r3
 80012d4:	6a3b      	ldr	r3, [r7, #32]
 80012d6:	4413      	add	r3, r2
 80012d8:	61fb      	str	r3, [r7, #28]
	uint32_t EndSector	     	 = GetSector(EndSector_Address);
 80012da:	69f8      	ldr	r0, [r7, #28]
 80012dc:	f7ff ff38 	bl	8001150 <GetSector>
 80012e0:	61b8      	str	r0, [r7, #24]

	/*Fill EraseInit Structer*/

	EraseInitStruct.TypeErase 		= FLASH_TYPEERASE_SECTORS;
 80012e2:	4b20      	ldr	r3, [pc, #128]	; (8001364 <write_STM32_Flash+0xb4>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange 	= FLASH_VOLTAGE_RANGE_3;
 80012e8:	4b1e      	ldr	r3, [pc, #120]	; (8001364 <write_STM32_Flash+0xb4>)
 80012ea:	2202      	movs	r2, #2
 80012ec:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector			= StartSector;
 80012ee:	4a1d      	ldr	r2, [pc, #116]	; (8001364 <write_STM32_Flash+0xb4>)
 80012f0:	6a3b      	ldr	r3, [r7, #32]
 80012f2:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbSectors		= (EndSector-StartSector)+1;
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	6a3b      	ldr	r3, [r7, #32]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	3301      	adds	r3, #1
 80012fc:	4a19      	ldr	r2, [pc, #100]	; (8001364 <write_STM32_Flash+0xb4>)
 80012fe:	60d3      	str	r3, [r2, #12]
	   *  before they are accessed during code execution.
	   *  If this cannot be done safely, it is recommended to flush the caches by
	   *  setting the DCRST and ICRST bits in the FLASH_CR register.
	  */

	if(HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK){
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	4619      	mov	r1, r3
 8001306:	4817      	ldr	r0, [pc, #92]	; (8001364 <write_STM32_Flash+0xb4>)
 8001308:	f000 fea8 	bl	800205c <HAL_FLASHEx_Erase>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d01d      	beq.n	800134e <write_STM32_Flash+0x9e>
		return HAL_FLASH_GetError();
 8001312:	f000 fd67 	bl	8001de4 <HAL_FLASH_GetError>
 8001316:	4603      	mov	r3, r0
 8001318:	e020      	b.n	800135c <write_STM32_Flash+0xac>
	  /* Program the user Flash area word by word
	    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR)
	  */

	while (sofar < numberofwords){
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, data[sofar]) == HAL_OK){
 800131a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	68ba      	ldr	r2, [r7, #8]
 8001320:	4413      	add	r3, r2
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	461a      	mov	r2, r3
 8001326:	f04f 0300 	mov.w	r3, #0
 800132a:	68f9      	ldr	r1, [r7, #12]
 800132c:	2002      	movs	r0, #2
 800132e:	f000 fcd3 	bl	8001cd8 <HAL_FLASH_Program>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d106      	bne.n	8001346 <write_STM32_Flash+0x96>
			StartSectorAddress += 4;  // 4 bytes forward WORD
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	3304      	adds	r3, #4
 800133c:	60fb      	str	r3, [r7, #12]
			// use StartPageAddress += 2 for half word(H-WORD) and 8 for double word (DWORD)
			sofar++;
 800133e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001340:	3301      	adds	r3, #1
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
 8001344:	e003      	b.n	800134e <write_STM32_Flash+0x9e>
		}
		else {
			return HAL_FLASH_GetError(); /* Error occurred while writing data in Flash memory*/
 8001346:	f000 fd4d 	bl	8001de4 <HAL_FLASH_GetError>
 800134a:	4603      	mov	r3, r0
 800134c:	e006      	b.n	800135c <write_STM32_Flash+0xac>
	while (sofar < numberofwords){
 800134e:	88fb      	ldrh	r3, [r7, #6]
 8001350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001352:	429a      	cmp	r2, r3
 8001354:	dbe1      	blt.n	800131a <write_STM32_Flash+0x6a>
	}

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/

	HAL_FLASH_Lock();
 8001356:	f000 fd35 	bl	8001dc4 <HAL_FLASH_Lock>

	  return 0;
 800135a:	2300      	movs	r3, #0
}
 800135c:	4618      	mov	r0, r3
 800135e:	3728      	adds	r7, #40	; 0x28
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	200000ac 	.word	0x200000ac

08001368 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800136c:	f000 fb0c 	bl	8001988 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001370:	f000 f810 	bl	8001394 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001374:	f000 f8a2 	bl	80014bc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001378:	f000 f876 	bl	8001468 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 800137c:	f004 fe9a 	bl	80060b4 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8001380:	f00c fcf4 	bl	800dd6c <MX_USB_HOST_Init>

  /* USER CODE BEGIN 2 */

  RetargetInit(&huart3);
 8001384:	4802      	ldr	r0, [pc, #8]	; (8001390 <main+0x28>)
 8001386:	f000 f923 	bl	80015d0 <RetargetInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800138a:	f00c fd15 	bl	800ddb8 <MX_USB_HOST_Process>
 800138e:	e7fc      	b.n	800138a <main+0x22>
 8001390:	20000a84 	.word	0x20000a84

08001394 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b094      	sub	sp, #80	; 0x50
 8001398:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800139a:	f107 0320 	add.w	r3, r7, #32
 800139e:	2230      	movs	r2, #48	; 0x30
 80013a0:	2100      	movs	r1, #0
 80013a2:	4618      	mov	r0, r3
 80013a4:	f00d f8b0 	bl	800e508 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a8:	f107 030c 	add.w	r3, r7, #12
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b8:	2300      	movs	r3, #0
 80013ba:	60bb      	str	r3, [r7, #8]
 80013bc:	4b28      	ldr	r3, [pc, #160]	; (8001460 <SystemClock_Config+0xcc>)
 80013be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c0:	4a27      	ldr	r2, [pc, #156]	; (8001460 <SystemClock_Config+0xcc>)
 80013c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c6:	6413      	str	r3, [r2, #64]	; 0x40
 80013c8:	4b25      	ldr	r3, [pc, #148]	; (8001460 <SystemClock_Config+0xcc>)
 80013ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013d4:	2300      	movs	r3, #0
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	4b22      	ldr	r3, [pc, #136]	; (8001464 <SystemClock_Config+0xd0>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a21      	ldr	r2, [pc, #132]	; (8001464 <SystemClock_Config+0xd0>)
 80013de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e2:	6013      	str	r3, [r2, #0]
 80013e4:	4b1f      	ldr	r3, [pc, #124]	; (8001464 <SystemClock_Config+0xd0>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013f0:	2301      	movs	r3, #1
 80013f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013fa:	2302      	movs	r3, #2
 80013fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001402:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001404:	2308      	movs	r3, #8
 8001406:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001408:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800140c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800140e:	2302      	movs	r3, #2
 8001410:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001412:	2307      	movs	r3, #7
 8001414:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001416:	f107 0320 	add.w	r3, r7, #32
 800141a:	4618      	mov	r0, r3
 800141c:	f002 fe66 	bl	80040ec <HAL_RCC_OscConfig>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001426:	f000 f8cd 	bl	80015c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800142a:	230f      	movs	r3, #15
 800142c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800142e:	2302      	movs	r3, #2
 8001430:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001432:	2300      	movs	r3, #0
 8001434:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001436:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800143a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800143c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001440:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001442:	f107 030c 	add.w	r3, r7, #12
 8001446:	2105      	movs	r1, #5
 8001448:	4618      	mov	r0, r3
 800144a:	f003 f8c7 	bl	80045dc <HAL_RCC_ClockConfig>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001454:	f000 f8b6 	bl	80015c4 <Error_Handler>
  }
}
 8001458:	bf00      	nop
 800145a:	3750      	adds	r7, #80	; 0x50
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40023800 	.word	0x40023800
 8001464:	40007000 	.word	0x40007000

08001468 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800146c:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <MX_USART3_UART_Init+0x4c>)
 800146e:	4a12      	ldr	r2, [pc, #72]	; (80014b8 <MX_USART3_UART_Init+0x50>)
 8001470:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001472:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <MX_USART3_UART_Init+0x4c>)
 8001474:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001478:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800147a:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <MX_USART3_UART_Init+0x4c>)
 800147c:	2200      	movs	r2, #0
 800147e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001480:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <MX_USART3_UART_Init+0x4c>)
 8001482:	2200      	movs	r2, #0
 8001484:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001486:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <MX_USART3_UART_Init+0x4c>)
 8001488:	2200      	movs	r2, #0
 800148a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800148c:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <MX_USART3_UART_Init+0x4c>)
 800148e:	220c      	movs	r2, #12
 8001490:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001492:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <MX_USART3_UART_Init+0x4c>)
 8001494:	2200      	movs	r2, #0
 8001496:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001498:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <MX_USART3_UART_Init+0x4c>)
 800149a:	2200      	movs	r2, #0
 800149c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800149e:	4805      	ldr	r0, [pc, #20]	; (80014b4 <MX_USART3_UART_Init+0x4c>)
 80014a0:	f003 fa98 	bl	80049d4 <HAL_UART_Init>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80014aa:	f000 f88b 	bl	80015c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000a84 	.word	0x20000a84
 80014b8:	40004800 	.word	0x40004800

080014bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08a      	sub	sp, #40	; 0x28
 80014c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c2:	f107 0314 	add.w	r3, r7, #20
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
 80014d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
 80014d6:	4b38      	ldr	r3, [pc, #224]	; (80015b8 <MX_GPIO_Init+0xfc>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a37      	ldr	r2, [pc, #220]	; (80015b8 <MX_GPIO_Init+0xfc>)
 80014dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b35      	ldr	r3, [pc, #212]	; (80015b8 <MX_GPIO_Init+0xfc>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ea:	613b      	str	r3, [r7, #16]
 80014ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	4b31      	ldr	r3, [pc, #196]	; (80015b8 <MX_GPIO_Init+0xfc>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a30      	ldr	r2, [pc, #192]	; (80015b8 <MX_GPIO_Init+0xfc>)
 80014f8:	f043 0304 	orr.w	r3, r3, #4
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b2e      	ldr	r3, [pc, #184]	; (80015b8 <MX_GPIO_Init+0xfc>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f003 0304 	and.w	r3, r3, #4
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	4b2a      	ldr	r3, [pc, #168]	; (80015b8 <MX_GPIO_Init+0xfc>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	4a29      	ldr	r2, [pc, #164]	; (80015b8 <MX_GPIO_Init+0xfc>)
 8001514:	f043 0302 	orr.w	r3, r3, #2
 8001518:	6313      	str	r3, [r2, #48]	; 0x30
 800151a:	4b27      	ldr	r3, [pc, #156]	; (80015b8 <MX_GPIO_Init+0xfc>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	607b      	str	r3, [r7, #4]
 800152a:	4b23      	ldr	r3, [pc, #140]	; (80015b8 <MX_GPIO_Init+0xfc>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	4a22      	ldr	r2, [pc, #136]	; (80015b8 <MX_GPIO_Init+0xfc>)
 8001530:	f043 0308 	orr.w	r3, r3, #8
 8001534:	6313      	str	r3, [r2, #48]	; 0x30
 8001536:	4b20      	ldr	r3, [pc, #128]	; (80015b8 <MX_GPIO_Init+0xfc>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	f003 0308 	and.w	r3, r3, #8
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	603b      	str	r3, [r7, #0]
 8001546:	4b1c      	ldr	r3, [pc, #112]	; (80015b8 <MX_GPIO_Init+0xfc>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	4a1b      	ldr	r2, [pc, #108]	; (80015b8 <MX_GPIO_Init+0xfc>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	6313      	str	r3, [r2, #48]	; 0x30
 8001552:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <MX_GPIO_Init+0xfc>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	603b      	str	r3, [r7, #0]
 800155c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800155e:	2200      	movs	r2, #0
 8001560:	2101      	movs	r1, #1
 8001562:	4816      	ldr	r0, [pc, #88]	; (80015bc <MX_GPIO_Init+0x100>)
 8001564:	f001 f838 	bl	80025d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001568:	2200      	movs	r2, #0
 800156a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800156e:	4814      	ldr	r0, [pc, #80]	; (80015c0 <MX_GPIO_Init+0x104>)
 8001570:	f001 f832 	bl	80025d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001574:	2301      	movs	r3, #1
 8001576:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001578:	2301      	movs	r3, #1
 800157a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001580:	2300      	movs	r3, #0
 8001582:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	4619      	mov	r1, r3
 800158a:	480c      	ldr	r0, [pc, #48]	; (80015bc <MX_GPIO_Init+0x100>)
 800158c:	f000 fe88 	bl	80022a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001590:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001596:	2301      	movs	r3, #1
 8001598:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159e:	2300      	movs	r3, #0
 80015a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015a2:	f107 0314 	add.w	r3, r7, #20
 80015a6:	4619      	mov	r1, r3
 80015a8:	4805      	ldr	r0, [pc, #20]	; (80015c0 <MX_GPIO_Init+0x104>)
 80015aa:	f000 fe79 	bl	80022a0 <HAL_GPIO_Init>

}
 80015ae:	bf00      	nop
 80015b0:	3728      	adds	r7, #40	; 0x28
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40020800 	.word	0x40020800
 80015c0:	40020c00 	.word	0x40020c00

080015c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015c8:	b672      	cpsid	i
}
 80015ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015cc:	e7fe      	b.n	80015cc <Error_Handler+0x8>
	...

080015d0 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80015d8:	4a07      	ldr	r2, [pc, #28]	; (80015f8 <RetargetInit+0x28>)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80015de:	4b07      	ldr	r3, [pc, #28]	; (80015fc <RetargetInit+0x2c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	6898      	ldr	r0, [r3, #8]
 80015e4:	2300      	movs	r3, #0
 80015e6:	2202      	movs	r2, #2
 80015e8:	2100      	movs	r1, #0
 80015ea:	f00d f90b 	bl	800e804 <setvbuf>
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000ac8 	.word	0x20000ac8
 80015fc:	2000002c 	.word	0x2000002c

08001600 <_isatty>:

int _isatty(int fd) {
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2b00      	cmp	r3, #0
 800160c:	db04      	blt.n	8001618 <_isatty+0x18>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2b02      	cmp	r3, #2
 8001612:	dc01      	bgt.n	8001618 <_isatty+0x18>
    return 1;
 8001614:	2301      	movs	r3, #1
 8001616:	e005      	b.n	8001624 <_isatty+0x24>

  errno = EBADF;
 8001618:	f00c ff2e 	bl	800e478 <__errno>
 800161c:	4603      	mov	r3, r0
 800161e:	2209      	movs	r2, #9
 8001620:	601a      	str	r2, [r3, #0]
  return 0;
 8001622:	2300      	movs	r3, #0
}
 8001624:	4618      	mov	r0, r3
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <_write>:

int _write(int fd, char* ptr, int len) {
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d002      	beq.n	8001644 <_write+0x18>
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2b02      	cmp	r3, #2
 8001642:	d111      	bne.n	8001668 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001644:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <_write+0x54>)
 8001646:	6818      	ldr	r0, [r3, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	b29a      	uxth	r2, r3
 800164c:	f04f 33ff 	mov.w	r3, #4294967295
 8001650:	68b9      	ldr	r1, [r7, #8]
 8001652:	f003 fa0c 	bl	8004a6e <HAL_UART_Transmit>
 8001656:	4603      	mov	r3, r0
 8001658:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800165a:	7dfb      	ldrb	r3, [r7, #23]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d101      	bne.n	8001664 <_write+0x38>
      return len;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	e008      	b.n	8001676 <_write+0x4a>
    else
      return EIO;
 8001664:	2305      	movs	r3, #5
 8001666:	e006      	b.n	8001676 <_write+0x4a>
  }
  errno = EBADF;
 8001668:	f00c ff06 	bl	800e478 <__errno>
 800166c:	4603      	mov	r3, r0
 800166e:	2209      	movs	r2, #9
 8001670:	601a      	str	r2, [r3, #0]
  return -1;
 8001672:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001676:	4618      	mov	r0, r3
 8001678:	3718      	adds	r7, #24
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000ac8 	.word	0x20000ac8

08001684 <_close>:

int _close(int fd) {
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	db04      	blt.n	800169c <_close+0x18>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b02      	cmp	r3, #2
 8001696:	dc01      	bgt.n	800169c <_close+0x18>
    return 0;
 8001698:	2300      	movs	r3, #0
 800169a:	e006      	b.n	80016aa <_close+0x26>

  errno = EBADF;
 800169c:	f00c feec 	bl	800e478 <__errno>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2209      	movs	r2, #9
 80016a4:	601a      	str	r2, [r3, #0]
  return -1;
 80016a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b084      	sub	sp, #16
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	60f8      	str	r0, [r7, #12]
 80016ba:	60b9      	str	r1, [r7, #8]
 80016bc:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80016be:	f00c fedb 	bl	800e478 <__errno>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2209      	movs	r2, #9
 80016c6:	601a      	str	r2, [r3, #0]
  return -1;
 80016c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3710      	adds	r7, #16
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <_read>:

int _read(int fd, char* ptr, int len) {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d110      	bne.n	8001708 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80016e6:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <_read+0x4c>)
 80016e8:	6818      	ldr	r0, [r3, #0]
 80016ea:	f04f 33ff 	mov.w	r3, #4294967295
 80016ee:	2201      	movs	r2, #1
 80016f0:	68b9      	ldr	r1, [r7, #8]
 80016f2:	f003 fa4e 	bl	8004b92 <HAL_UART_Receive>
 80016f6:	4603      	mov	r3, r0
 80016f8:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80016fa:	7dfb      	ldrb	r3, [r7, #23]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d101      	bne.n	8001704 <_read+0x30>
      return 1;
 8001700:	2301      	movs	r3, #1
 8001702:	e008      	b.n	8001716 <_read+0x42>
    else
      return EIO;
 8001704:	2305      	movs	r3, #5
 8001706:	e006      	b.n	8001716 <_read+0x42>
  }
  errno = EBADF;
 8001708:	f00c feb6 	bl	800e478 <__errno>
 800170c:	4603      	mov	r3, r0
 800170e:	2209      	movs	r2, #9
 8001710:	601a      	str	r2, [r3, #0]
  return -1;
 8001712:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001716:	4618      	mov	r0, r3
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000ac8 	.word	0x20000ac8

08001724 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b00      	cmp	r3, #0
 8001732:	db08      	blt.n	8001746 <_fstat+0x22>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b02      	cmp	r3, #2
 8001738:	dc05      	bgt.n	8001746 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001740:	605a      	str	r2, [r3, #4]
    return 0;
 8001742:	2300      	movs	r3, #0
 8001744:	e005      	b.n	8001752 <_fstat+0x2e>
  }

  errno = EBADF;
 8001746:	f00c fe97 	bl	800e478 <__errno>
 800174a:	4603      	mov	r3, r0
 800174c:	2209      	movs	r2, #9
 800174e:	601a      	str	r2, [r3, #0]
  return 0;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	607b      	str	r3, [r7, #4]
 8001766:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <HAL_MspInit+0x4c>)
 8001768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176a:	4a0f      	ldr	r2, [pc, #60]	; (80017a8 <HAL_MspInit+0x4c>)
 800176c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001770:	6453      	str	r3, [r2, #68]	; 0x44
 8001772:	4b0d      	ldr	r3, [pc, #52]	; (80017a8 <HAL_MspInit+0x4c>)
 8001774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	603b      	str	r3, [r7, #0]
 8001782:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <HAL_MspInit+0x4c>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	4a08      	ldr	r2, [pc, #32]	; (80017a8 <HAL_MspInit+0x4c>)
 8001788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800178c:	6413      	str	r3, [r2, #64]	; 0x40
 800178e:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <HAL_MspInit+0x4c>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001796:	603b      	str	r3, [r7, #0]
 8001798:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800179a:	2007      	movs	r0, #7
 800179c:	f000 fa5a 	bl	8001c54 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017a0:	bf00      	nop
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40023800 	.word	0x40023800

080017ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08a      	sub	sp, #40	; 0x28
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a19      	ldr	r2, [pc, #100]	; (8001830 <HAL_UART_MspInit+0x84>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d12c      	bne.n	8001828 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	613b      	str	r3, [r7, #16]
 80017d2:	4b18      	ldr	r3, [pc, #96]	; (8001834 <HAL_UART_MspInit+0x88>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	4a17      	ldr	r2, [pc, #92]	; (8001834 <HAL_UART_MspInit+0x88>)
 80017d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017dc:	6413      	str	r3, [r2, #64]	; 0x40
 80017de:	4b15      	ldr	r3, [pc, #84]	; (8001834 <HAL_UART_MspInit+0x88>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	4b11      	ldr	r3, [pc, #68]	; (8001834 <HAL_UART_MspInit+0x88>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	4a10      	ldr	r2, [pc, #64]	; (8001834 <HAL_UART_MspInit+0x88>)
 80017f4:	f043 0302 	orr.w	r3, r3, #2
 80017f8:	6313      	str	r3, [r2, #48]	; 0x30
 80017fa:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <HAL_UART_MspInit+0x88>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001806:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800180a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180c:	2302      	movs	r3, #2
 800180e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001814:	2303      	movs	r3, #3
 8001816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001818:	2307      	movs	r3, #7
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	4619      	mov	r1, r3
 8001822:	4805      	ldr	r0, [pc, #20]	; (8001838 <HAL_UART_MspInit+0x8c>)
 8001824:	f000 fd3c 	bl	80022a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001828:	bf00      	nop
 800182a:	3728      	adds	r7, #40	; 0x28
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40004800 	.word	0x40004800
 8001834:	40023800 	.word	0x40023800
 8001838:	40020400 	.word	0x40020400

0800183c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001840:	e7fe      	b.n	8001840 <NMI_Handler+0x4>

08001842 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001842:	b480      	push	{r7}
 8001844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001846:	e7fe      	b.n	8001846 <HardFault_Handler+0x4>

08001848 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800184c:	e7fe      	b.n	800184c <MemManage_Handler+0x4>

0800184e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001852:	e7fe      	b.n	8001852 <BusFault_Handler+0x4>

08001854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001858:	e7fe      	b.n	8001858 <UsageFault_Handler+0x4>

0800185a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001888:	f000 f8d0 	bl	8001a2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}

08001890 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001894:	4802      	ldr	r0, [pc, #8]	; (80018a0 <OTG_FS_IRQHandler+0x10>)
 8001896:	f001 f923 	bl	8002ae0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20004430 	.word	0x20004430

080018a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018ac:	4a14      	ldr	r2, [pc, #80]	; (8001900 <_sbrk+0x5c>)
 80018ae:	4b15      	ldr	r3, [pc, #84]	; (8001904 <_sbrk+0x60>)
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018b8:	4b13      	ldr	r3, [pc, #76]	; (8001908 <_sbrk+0x64>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d102      	bne.n	80018c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018c0:	4b11      	ldr	r3, [pc, #68]	; (8001908 <_sbrk+0x64>)
 80018c2:	4a12      	ldr	r2, [pc, #72]	; (800190c <_sbrk+0x68>)
 80018c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018c6:	4b10      	ldr	r3, [pc, #64]	; (8001908 <_sbrk+0x64>)
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4413      	add	r3, r2
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d207      	bcs.n	80018e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018d4:	f00c fdd0 	bl	800e478 <__errno>
 80018d8:	4603      	mov	r3, r0
 80018da:	220c      	movs	r2, #12
 80018dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018de:	f04f 33ff 	mov.w	r3, #4294967295
 80018e2:	e009      	b.n	80018f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018e4:	4b08      	ldr	r3, [pc, #32]	; (8001908 <_sbrk+0x64>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ea:	4b07      	ldr	r3, [pc, #28]	; (8001908 <_sbrk+0x64>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4413      	add	r3, r2
 80018f2:	4a05      	ldr	r2, [pc, #20]	; (8001908 <_sbrk+0x64>)
 80018f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;}
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	4618      	mov	r0, r3
 80018fa:	3718      	adds	r7, #24
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20020000 	.word	0x20020000
 8001904:	00002000 	.word	0x00002000
 8001908:	200000c0 	.word	0x200000c0
 800190c:	20004748 	.word	0x20004748

08001910 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <SystemInit+0x20>)
 8001916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800191a:	4a05      	ldr	r2, [pc, #20]	; (8001930 <SystemInit+0x20>)
 800191c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001920:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack     /* set stack pointer */
 8001934:	f8df d034 	ldr.w	sp, [pc, #52]	; 800196c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001938:	480d      	ldr	r0, [pc, #52]	; (8001970 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800193a:	490e      	ldr	r1, [pc, #56]	; (8001974 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800193c:	4a0e      	ldr	r2, [pc, #56]	; (8001978 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800193e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001940:	e002      	b.n	8001948 <LoopCopyDataInit>

08001942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001946:	3304      	adds	r3, #4

08001948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800194a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800194c:	d3f9      	bcc.n	8001942 <CopyDataInit>
  

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800194e:	4a0b      	ldr	r2, [pc, #44]	; (800197c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001950:	4c0b      	ldr	r4, [pc, #44]	; (8001980 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001954:	e001      	b.n	800195a <LoopFillZerobss>

08001956 <FillZerobss>:


FillZerobss:
  str  r3, [r2]
 8001956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001958:	3204      	adds	r2, #4

0800195a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800195a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800195c:	d3fb      	bcc.n	8001956 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800195e:	f7ff ffd7 	bl	8001910 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001962:	f00c fd8f 	bl	800e484 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001966:	f7ff fcff 	bl	8001368 <main>
  bx  lr    
 800196a:	4770      	bx	lr
   ldr   sp, =_estack     /* set stack pointer */
 800196c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001974:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001978:	08011264 	.word	0x08011264
  ldr r2, =_sbss
 800197c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001980:	20004744 	.word	0x20004744

08001984 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001984:	e7fe      	b.n	8001984 <ADC_IRQHandler>
	...

08001988 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800198c:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <HAL_Init+0x40>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a0d      	ldr	r2, [pc, #52]	; (80019c8 <HAL_Init+0x40>)
 8001992:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001996:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001998:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <HAL_Init+0x40>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a0a      	ldr	r2, [pc, #40]	; (80019c8 <HAL_Init+0x40>)
 800199e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019a4:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <HAL_Init+0x40>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a07      	ldr	r2, [pc, #28]	; (80019c8 <HAL_Init+0x40>)
 80019aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b0:	2003      	movs	r0, #3
 80019b2:	f000 f94f 	bl	8001c54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019b6:	2000      	movs	r0, #0
 80019b8:	f000 f808 	bl	80019cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019bc:	f7ff fece 	bl	800175c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40023c00 	.word	0x40023c00

080019cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019d4:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <HAL_InitTick+0x54>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <HAL_InitTick+0x58>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	4619      	mov	r1, r3
 80019de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ea:	4618      	mov	r0, r3
 80019ec:	f000 f967 	bl	8001cbe <HAL_SYSTICK_Config>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e00e      	b.n	8001a18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2b0f      	cmp	r3, #15
 80019fe:	d80a      	bhi.n	8001a16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a00:	2200      	movs	r2, #0
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	f04f 30ff 	mov.w	r0, #4294967295
 8001a08:	f000 f92f 	bl	8001c6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a0c:	4a06      	ldr	r2, [pc, #24]	; (8001a28 <HAL_InitTick+0x5c>)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a12:	2300      	movs	r3, #0
 8001a14:	e000      	b.n	8001a18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20000000 	.word	0x20000000
 8001a24:	20000008 	.word	0x20000008
 8001a28:	20000004 	.word	0x20000004

08001a2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a30:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <HAL_IncTick+0x20>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	461a      	mov	r2, r3
 8001a36:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <HAL_IncTick+0x24>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	4a04      	ldr	r2, [pc, #16]	; (8001a50 <HAL_IncTick+0x24>)
 8001a3e:	6013      	str	r3, [r2, #0]
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	20000008 	.word	0x20000008
 8001a50:	20000acc 	.word	0x20000acc

08001a54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  return uwTick;
 8001a58:	4b03      	ldr	r3, [pc, #12]	; (8001a68 <HAL_GetTick+0x14>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	20000acc 	.word	0x20000acc

08001a6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a74:	f7ff ffee 	bl	8001a54 <HAL_GetTick>
 8001a78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a84:	d005      	beq.n	8001a92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a86:	4b0a      	ldr	r3, [pc, #40]	; (8001ab0 <HAL_Delay+0x44>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	4413      	add	r3, r2
 8001a90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a92:	bf00      	nop
 8001a94:	f7ff ffde 	bl	8001a54 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d8f7      	bhi.n	8001a94 <HAL_Delay+0x28>
  {
  }
}
 8001aa4:	bf00      	nop
 8001aa6:	bf00      	nop
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000008 	.word	0x20000008

08001ab4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aca:	68ba      	ldr	r2, [r7, #8]
 8001acc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001adc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ae6:	4a04      	ldr	r2, [pc, #16]	; (8001af8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	60d3      	str	r3, [r2, #12]
}
 8001aec:	bf00      	nop
 8001aee:	3714      	adds	r7, #20
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b00:	4b04      	ldr	r3, [pc, #16]	; (8001b14 <__NVIC_GetPriorityGrouping+0x18>)
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	0a1b      	lsrs	r3, r3, #8
 8001b06:	f003 0307 	and.w	r3, r3, #7
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	db0b      	blt.n	8001b42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	f003 021f 	and.w	r2, r3, #31
 8001b30:	4907      	ldr	r1, [pc, #28]	; (8001b50 <__NVIC_EnableIRQ+0x38>)
 8001b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b36:	095b      	lsrs	r3, r3, #5
 8001b38:	2001      	movs	r0, #1
 8001b3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	e000e100 	.word	0xe000e100

08001b54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	6039      	str	r1, [r7, #0]
 8001b5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	db0a      	blt.n	8001b7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	490c      	ldr	r1, [pc, #48]	; (8001ba0 <__NVIC_SetPriority+0x4c>)
 8001b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b72:	0112      	lsls	r2, r2, #4
 8001b74:	b2d2      	uxtb	r2, r2
 8001b76:	440b      	add	r3, r1
 8001b78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b7c:	e00a      	b.n	8001b94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	4908      	ldr	r1, [pc, #32]	; (8001ba4 <__NVIC_SetPriority+0x50>)
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	f003 030f 	and.w	r3, r3, #15
 8001b8a:	3b04      	subs	r3, #4
 8001b8c:	0112      	lsls	r2, r2, #4
 8001b8e:	b2d2      	uxtb	r2, r2
 8001b90:	440b      	add	r3, r1
 8001b92:	761a      	strb	r2, [r3, #24]
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	e000e100 	.word	0xe000e100
 8001ba4:	e000ed00 	.word	0xe000ed00

08001ba8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b089      	sub	sp, #36	; 0x24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	f1c3 0307 	rsb	r3, r3, #7
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	bf28      	it	cs
 8001bc6:	2304      	movcs	r3, #4
 8001bc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	3304      	adds	r3, #4
 8001bce:	2b06      	cmp	r3, #6
 8001bd0:	d902      	bls.n	8001bd8 <NVIC_EncodePriority+0x30>
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	3b03      	subs	r3, #3
 8001bd6:	e000      	b.n	8001bda <NVIC_EncodePriority+0x32>
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43da      	mvns	r2, r3
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	401a      	ands	r2, r3
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bf0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfa:	43d9      	mvns	r1, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c00:	4313      	orrs	r3, r2
         );
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3724      	adds	r7, #36	; 0x24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
	...

08001c10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c20:	d301      	bcc.n	8001c26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c22:	2301      	movs	r3, #1
 8001c24:	e00f      	b.n	8001c46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c26:	4a0a      	ldr	r2, [pc, #40]	; (8001c50 <SysTick_Config+0x40>)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c2e:	210f      	movs	r1, #15
 8001c30:	f04f 30ff 	mov.w	r0, #4294967295
 8001c34:	f7ff ff8e 	bl	8001b54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c38:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <SysTick_Config+0x40>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c3e:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <SysTick_Config+0x40>)
 8001c40:	2207      	movs	r2, #7
 8001c42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	e000e010 	.word	0xe000e010

08001c54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7ff ff29 	bl	8001ab4 <__NVIC_SetPriorityGrouping>
}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b086      	sub	sp, #24
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	4603      	mov	r3, r0
 8001c72:	60b9      	str	r1, [r7, #8]
 8001c74:	607a      	str	r2, [r7, #4]
 8001c76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c7c:	f7ff ff3e 	bl	8001afc <__NVIC_GetPriorityGrouping>
 8001c80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	68b9      	ldr	r1, [r7, #8]
 8001c86:	6978      	ldr	r0, [r7, #20]
 8001c88:	f7ff ff8e 	bl	8001ba8 <NVIC_EncodePriority>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c92:	4611      	mov	r1, r2
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff ff5d 	bl	8001b54 <__NVIC_SetPriority>
}
 8001c9a:	bf00      	nop
 8001c9c:	3718      	adds	r7, #24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b082      	sub	sp, #8
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	4603      	mov	r3, r0
 8001caa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff ff31 	bl	8001b18 <__NVIC_EnableIRQ>
}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b082      	sub	sp, #8
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7ff ffa2 	bl	8001c10 <SysTick_Config>
 8001ccc:	4603      	mov	r3, r0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
	...

08001cd8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001cea:	4b23      	ldr	r3, [pc, #140]	; (8001d78 <HAL_FLASH_Program+0xa0>)
 8001cec:	7e1b      	ldrb	r3, [r3, #24]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d101      	bne.n	8001cf6 <HAL_FLASH_Program+0x1e>
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	e03b      	b.n	8001d6e <HAL_FLASH_Program+0x96>
 8001cf6:	4b20      	ldr	r3, [pc, #128]	; (8001d78 <HAL_FLASH_Program+0xa0>)
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001cfc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d00:	f000 f87c 	bl	8001dfc <FLASH_WaitForLastOperation>
 8001d04:	4603      	mov	r3, r0
 8001d06:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001d08:	7dfb      	ldrb	r3, [r7, #23]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d12b      	bne.n	8001d66 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d105      	bne.n	8001d20 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001d14:	783b      	ldrb	r3, [r7, #0]
 8001d16:	4619      	mov	r1, r3
 8001d18:	68b8      	ldr	r0, [r7, #8]
 8001d1a:	f000 f927 	bl	8001f6c <FLASH_Program_Byte>
 8001d1e:	e016      	b.n	8001d4e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d105      	bne.n	8001d32 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001d26:	883b      	ldrh	r3, [r7, #0]
 8001d28:	4619      	mov	r1, r3
 8001d2a:	68b8      	ldr	r0, [r7, #8]
 8001d2c:	f000 f8fa 	bl	8001f24 <FLASH_Program_HalfWord>
 8001d30:	e00d      	b.n	8001d4e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d105      	bne.n	8001d44 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	68b8      	ldr	r0, [r7, #8]
 8001d3e:	f000 f8cf 	bl	8001ee0 <FLASH_Program_Word>
 8001d42:	e004      	b.n	8001d4e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001d44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d48:	68b8      	ldr	r0, [r7, #8]
 8001d4a:	f000 f897 	bl	8001e7c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d4e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d52:	f000 f853 	bl	8001dfc <FLASH_WaitForLastOperation>
 8001d56:	4603      	mov	r3, r0
 8001d58:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001d5a:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <HAL_FLASH_Program+0xa4>)
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	4a07      	ldr	r2, [pc, #28]	; (8001d7c <HAL_FLASH_Program+0xa4>)
 8001d60:	f023 0301 	bic.w	r3, r3, #1
 8001d64:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001d66:	4b04      	ldr	r3, [pc, #16]	; (8001d78 <HAL_FLASH_Program+0xa0>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001d6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3718      	adds	r7, #24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20000ad0 	.word	0x20000ad0
 8001d7c:	40023c00 	.word	0x40023c00

08001d80 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001d86:	2300      	movs	r3, #0
 8001d88:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001d8a:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <HAL_FLASH_Unlock+0x38>)
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	da0b      	bge.n	8001daa <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001d92:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <HAL_FLASH_Unlock+0x38>)
 8001d94:	4a09      	ldr	r2, [pc, #36]	; (8001dbc <HAL_FLASH_Unlock+0x3c>)
 8001d96:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001d98:	4b07      	ldr	r3, [pc, #28]	; (8001db8 <HAL_FLASH_Unlock+0x38>)
 8001d9a:	4a09      	ldr	r2, [pc, #36]	; (8001dc0 <HAL_FLASH_Unlock+0x40>)
 8001d9c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001d9e:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <HAL_FLASH_Unlock+0x38>)
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	da01      	bge.n	8001daa <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001daa:	79fb      	ldrb	r3, [r7, #7]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	40023c00 	.word	0x40023c00
 8001dbc:	45670123 	.word	0x45670123
 8001dc0:	cdef89ab 	.word	0xcdef89ab

08001dc4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001dc8:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <HAL_FLASH_Lock+0x1c>)
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	4a04      	ldr	r2, [pc, #16]	; (8001de0 <HAL_FLASH_Lock+0x1c>)
 8001dce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001dd2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	40023c00 	.word	0x40023c00

08001de4 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8001de8:	4b03      	ldr	r3, [pc, #12]	; (8001df8 <HAL_FLASH_GetError+0x14>)
 8001dea:	69db      	ldr	r3, [r3, #28]
}  
 8001dec:	4618      	mov	r0, r3
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	20000ad0 	.word	0x20000ad0

08001dfc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e04:	2300      	movs	r3, #0
 8001e06:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001e08:	4b1a      	ldr	r3, [pc, #104]	; (8001e74 <FLASH_WaitForLastOperation+0x78>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001e0e:	f7ff fe21 	bl	8001a54 <HAL_GetTick>
 8001e12:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001e14:	e010      	b.n	8001e38 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e1c:	d00c      	beq.n	8001e38 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d007      	beq.n	8001e34 <FLASH_WaitForLastOperation+0x38>
 8001e24:	f7ff fe16 	bl	8001a54 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d201      	bcs.n	8001e38 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e019      	b.n	8001e6c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001e38:	4b0f      	ldr	r3, [pc, #60]	; (8001e78 <FLASH_WaitForLastOperation+0x7c>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d1e8      	bne.n	8001e16 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001e44:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <FLASH_WaitForLastOperation+0x7c>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	f003 0301 	and.w	r3, r3, #1
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d002      	beq.n	8001e56 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001e50:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <FLASH_WaitForLastOperation+0x7c>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001e56:	4b08      	ldr	r3, [pc, #32]	; (8001e78 <FLASH_WaitForLastOperation+0x7c>)
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001e62:	f000 f8a5 	bl	8001fb0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e000      	b.n	8001e6c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
  
}  
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20000ad0 	.word	0x20000ad0
 8001e78:	40023c00 	.word	0x40023c00

08001e7c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e88:	4b14      	ldr	r3, [pc, #80]	; (8001edc <FLASH_Program_DoubleWord+0x60>)
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	4a13      	ldr	r2, [pc, #76]	; (8001edc <FLASH_Program_DoubleWord+0x60>)
 8001e8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e92:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001e94:	4b11      	ldr	r3, [pc, #68]	; (8001edc <FLASH_Program_DoubleWord+0x60>)
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	4a10      	ldr	r2, [pc, #64]	; (8001edc <FLASH_Program_DoubleWord+0x60>)
 8001e9a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001e9e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001ea0:	4b0e      	ldr	r3, [pc, #56]	; (8001edc <FLASH_Program_DoubleWord+0x60>)
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	4a0d      	ldr	r2, [pc, #52]	; (8001edc <FLASH_Program_DoubleWord+0x60>)
 8001ea6:	f043 0301 	orr.w	r3, r3, #1
 8001eaa:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001eb2:	f3bf 8f6f 	isb	sy
}
 8001eb6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001eb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ebc:	f04f 0200 	mov.w	r2, #0
 8001ec0:	f04f 0300 	mov.w	r3, #0
 8001ec4:	000a      	movs	r2, r1
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	68f9      	ldr	r1, [r7, #12]
 8001eca:	3104      	adds	r1, #4
 8001ecc:	4613      	mov	r3, r2
 8001ece:	600b      	str	r3, [r1, #0]
}
 8001ed0:	bf00      	nop
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	40023c00 	.word	0x40023c00

08001ee0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001eea:	4b0d      	ldr	r3, [pc, #52]	; (8001f20 <FLASH_Program_Word+0x40>)
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	4a0c      	ldr	r2, [pc, #48]	; (8001f20 <FLASH_Program_Word+0x40>)
 8001ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ef4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001ef6:	4b0a      	ldr	r3, [pc, #40]	; (8001f20 <FLASH_Program_Word+0x40>)
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	4a09      	ldr	r2, [pc, #36]	; (8001f20 <FLASH_Program_Word+0x40>)
 8001efc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f00:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001f02:	4b07      	ldr	r3, [pc, #28]	; (8001f20 <FLASH_Program_Word+0x40>)
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	4a06      	ldr	r2, [pc, #24]	; (8001f20 <FLASH_Program_Word+0x40>)
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	601a      	str	r2, [r3, #0]
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	40023c00 	.word	0x40023c00

08001f24 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001f30:	4b0d      	ldr	r3, [pc, #52]	; (8001f68 <FLASH_Program_HalfWord+0x44>)
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	4a0c      	ldr	r2, [pc, #48]	; (8001f68 <FLASH_Program_HalfWord+0x44>)
 8001f36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001f3c:	4b0a      	ldr	r3, [pc, #40]	; (8001f68 <FLASH_Program_HalfWord+0x44>)
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	4a09      	ldr	r2, [pc, #36]	; (8001f68 <FLASH_Program_HalfWord+0x44>)
 8001f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001f48:	4b07      	ldr	r3, [pc, #28]	; (8001f68 <FLASH_Program_HalfWord+0x44>)
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	4a06      	ldr	r2, [pc, #24]	; (8001f68 <FLASH_Program_HalfWord+0x44>)
 8001f4e:	f043 0301 	orr.w	r3, r3, #1
 8001f52:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	887a      	ldrh	r2, [r7, #2]
 8001f58:	801a      	strh	r2, [r3, #0]
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	40023c00 	.word	0x40023c00

08001f6c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	460b      	mov	r3, r1
 8001f76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001f78:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <FLASH_Program_Byte+0x40>)
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	4a0b      	ldr	r2, [pc, #44]	; (8001fac <FLASH_Program_Byte+0x40>)
 8001f7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001f84:	4b09      	ldr	r3, [pc, #36]	; (8001fac <FLASH_Program_Byte+0x40>)
 8001f86:	4a09      	ldr	r2, [pc, #36]	; (8001fac <FLASH_Program_Byte+0x40>)
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001f8c:	4b07      	ldr	r3, [pc, #28]	; (8001fac <FLASH_Program_Byte+0x40>)
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	4a06      	ldr	r2, [pc, #24]	; (8001fac <FLASH_Program_Byte+0x40>)
 8001f92:	f043 0301 	orr.w	r3, r3, #1
 8001f96:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	78fa      	ldrb	r2, [r7, #3]
 8001f9c:	701a      	strb	r2, [r3, #0]
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	40023c00 	.word	0x40023c00

08001fb0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001fb4:	4b27      	ldr	r3, [pc, #156]	; (8002054 <FLASH_SetErrorCode+0xa4>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	f003 0310 	and.w	r3, r3, #16
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d008      	beq.n	8001fd2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001fc0:	4b25      	ldr	r3, [pc, #148]	; (8002058 <FLASH_SetErrorCode+0xa8>)
 8001fc2:	69db      	ldr	r3, [r3, #28]
 8001fc4:	f043 0310 	orr.w	r3, r3, #16
 8001fc8:	4a23      	ldr	r2, [pc, #140]	; (8002058 <FLASH_SetErrorCode+0xa8>)
 8001fca:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001fcc:	4b21      	ldr	r3, [pc, #132]	; (8002054 <FLASH_SetErrorCode+0xa4>)
 8001fce:	2210      	movs	r2, #16
 8001fd0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001fd2:	4b20      	ldr	r3, [pc, #128]	; (8002054 <FLASH_SetErrorCode+0xa4>)
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	f003 0320 	and.w	r3, r3, #32
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d008      	beq.n	8001ff0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001fde:	4b1e      	ldr	r3, [pc, #120]	; (8002058 <FLASH_SetErrorCode+0xa8>)
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	f043 0308 	orr.w	r3, r3, #8
 8001fe6:	4a1c      	ldr	r2, [pc, #112]	; (8002058 <FLASH_SetErrorCode+0xa8>)
 8001fe8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001fea:	4b1a      	ldr	r3, [pc, #104]	; (8002054 <FLASH_SetErrorCode+0xa4>)
 8001fec:	2220      	movs	r2, #32
 8001fee:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001ff0:	4b18      	ldr	r3, [pc, #96]	; (8002054 <FLASH_SetErrorCode+0xa4>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d008      	beq.n	800200e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001ffc:	4b16      	ldr	r3, [pc, #88]	; (8002058 <FLASH_SetErrorCode+0xa8>)
 8001ffe:	69db      	ldr	r3, [r3, #28]
 8002000:	f043 0304 	orr.w	r3, r3, #4
 8002004:	4a14      	ldr	r2, [pc, #80]	; (8002058 <FLASH_SetErrorCode+0xa8>)
 8002006:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002008:	4b12      	ldr	r3, [pc, #72]	; (8002054 <FLASH_SetErrorCode+0xa4>)
 800200a:	2240      	movs	r2, #64	; 0x40
 800200c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800200e:	4b11      	ldr	r3, [pc, #68]	; (8002054 <FLASH_SetErrorCode+0xa4>)
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002016:	2b00      	cmp	r3, #0
 8002018:	d008      	beq.n	800202c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800201a:	4b0f      	ldr	r3, [pc, #60]	; (8002058 <FLASH_SetErrorCode+0xa8>)
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	f043 0302 	orr.w	r3, r3, #2
 8002022:	4a0d      	ldr	r2, [pc, #52]	; (8002058 <FLASH_SetErrorCode+0xa8>)
 8002024:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002026:	4b0b      	ldr	r3, [pc, #44]	; (8002054 <FLASH_SetErrorCode+0xa4>)
 8002028:	2280      	movs	r2, #128	; 0x80
 800202a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800202c:	4b09      	ldr	r3, [pc, #36]	; (8002054 <FLASH_SetErrorCode+0xa4>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d008      	beq.n	800204a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002038:	4b07      	ldr	r3, [pc, #28]	; (8002058 <FLASH_SetErrorCode+0xa8>)
 800203a:	69db      	ldr	r3, [r3, #28]
 800203c:	f043 0320 	orr.w	r3, r3, #32
 8002040:	4a05      	ldr	r2, [pc, #20]	; (8002058 <FLASH_SetErrorCode+0xa8>)
 8002042:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002044:	4b03      	ldr	r3, [pc, #12]	; (8002054 <FLASH_SetErrorCode+0xa4>)
 8002046:	2202      	movs	r2, #2
 8002048:	60da      	str	r2, [r3, #12]
  }
}
 800204a:	bf00      	nop
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	40023c00 	.word	0x40023c00
 8002058:	20000ad0 	.word	0x20000ad0

0800205c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800206a:	2300      	movs	r3, #0
 800206c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800206e:	4b31      	ldr	r3, [pc, #196]	; (8002134 <HAL_FLASHEx_Erase+0xd8>)
 8002070:	7e1b      	ldrb	r3, [r3, #24]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d101      	bne.n	800207a <HAL_FLASHEx_Erase+0x1e>
 8002076:	2302      	movs	r3, #2
 8002078:	e058      	b.n	800212c <HAL_FLASHEx_Erase+0xd0>
 800207a:	4b2e      	ldr	r3, [pc, #184]	; (8002134 <HAL_FLASHEx_Erase+0xd8>)
 800207c:	2201      	movs	r2, #1
 800207e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002080:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002084:	f7ff feba 	bl	8001dfc <FLASH_WaitForLastOperation>
 8002088:	4603      	mov	r3, r0
 800208a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800208c:	7bfb      	ldrb	r3, [r7, #15]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d148      	bne.n	8002124 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	f04f 32ff 	mov.w	r2, #4294967295
 8002098:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d115      	bne.n	80020ce <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	4619      	mov	r1, r3
 80020ae:	4610      	mov	r0, r2
 80020b0:	f000 f844 	bl	800213c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80020b4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80020b8:	f7ff fea0 	bl	8001dfc <FLASH_WaitForLastOperation>
 80020bc:	4603      	mov	r3, r0
 80020be:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80020c0:	4b1d      	ldr	r3, [pc, #116]	; (8002138 <HAL_FLASHEx_Erase+0xdc>)
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	4a1c      	ldr	r2, [pc, #112]	; (8002138 <HAL_FLASHEx_Erase+0xdc>)
 80020c6:	f023 0304 	bic.w	r3, r3, #4
 80020ca:	6113      	str	r3, [r2, #16]
 80020cc:	e028      	b.n	8002120 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	60bb      	str	r3, [r7, #8]
 80020d4:	e01c      	b.n	8002110 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	4619      	mov	r1, r3
 80020de:	68b8      	ldr	r0, [r7, #8]
 80020e0:	f000 f850 	bl	8002184 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80020e4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80020e8:	f7ff fe88 	bl	8001dfc <FLASH_WaitForLastOperation>
 80020ec:	4603      	mov	r3, r0
 80020ee:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80020f0:	4b11      	ldr	r3, [pc, #68]	; (8002138 <HAL_FLASHEx_Erase+0xdc>)
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	4a10      	ldr	r2, [pc, #64]	; (8002138 <HAL_FLASHEx_Erase+0xdc>)
 80020f6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80020fa:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	68ba      	ldr	r2, [r7, #8]
 8002106:	601a      	str	r2, [r3, #0]
          break;
 8002108:	e00a      	b.n	8002120 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	3301      	adds	r3, #1
 800210e:	60bb      	str	r3, [r7, #8]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68da      	ldr	r2, [r3, #12]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	4413      	add	r3, r2
 800211a:	68ba      	ldr	r2, [r7, #8]
 800211c:	429a      	cmp	r2, r3
 800211e:	d3da      	bcc.n	80020d6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002120:	f000 f878 	bl	8002214 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002124:	4b03      	ldr	r3, [pc, #12]	; (8002134 <HAL_FLASHEx_Erase+0xd8>)
 8002126:	2200      	movs	r2, #0
 8002128:	761a      	strb	r2, [r3, #24]

  return status;
 800212a:	7bfb      	ldrb	r3, [r7, #15]
}
 800212c:	4618      	mov	r0, r3
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	20000ad0 	.word	0x20000ad0
 8002138:	40023c00 	.word	0x40023c00

0800213c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	6039      	str	r1, [r7, #0]
 8002146:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002148:	4b0d      	ldr	r3, [pc, #52]	; (8002180 <FLASH_MassErase+0x44>)
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	4a0c      	ldr	r2, [pc, #48]	; (8002180 <FLASH_MassErase+0x44>)
 800214e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002152:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002154:	4b0a      	ldr	r3, [pc, #40]	; (8002180 <FLASH_MassErase+0x44>)
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	4a09      	ldr	r2, [pc, #36]	; (8002180 <FLASH_MassErase+0x44>)
 800215a:	f043 0304 	orr.w	r3, r3, #4
 800215e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002160:	4b07      	ldr	r3, [pc, #28]	; (8002180 <FLASH_MassErase+0x44>)
 8002162:	691a      	ldr	r2, [r3, #16]
 8002164:	79fb      	ldrb	r3, [r7, #7]
 8002166:	021b      	lsls	r3, r3, #8
 8002168:	4313      	orrs	r3, r2
 800216a:	4a05      	ldr	r2, [pc, #20]	; (8002180 <FLASH_MassErase+0x44>)
 800216c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002170:	6113      	str	r3, [r2, #16]
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	40023c00 	.word	0x40023c00

08002184 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	460b      	mov	r3, r1
 800218e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002190:	2300      	movs	r3, #0
 8002192:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002194:	78fb      	ldrb	r3, [r7, #3]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d102      	bne.n	80021a0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800219a:	2300      	movs	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	e010      	b.n	80021c2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80021a0:	78fb      	ldrb	r3, [r7, #3]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d103      	bne.n	80021ae <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80021a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	e009      	b.n	80021c2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80021ae:	78fb      	ldrb	r3, [r7, #3]
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d103      	bne.n	80021bc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80021b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	e002      	b.n	80021c2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80021bc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021c0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80021c2:	4b13      	ldr	r3, [pc, #76]	; (8002210 <FLASH_Erase_Sector+0x8c>)
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	4a12      	ldr	r2, [pc, #72]	; (8002210 <FLASH_Erase_Sector+0x8c>)
 80021c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021cc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80021ce:	4b10      	ldr	r3, [pc, #64]	; (8002210 <FLASH_Erase_Sector+0x8c>)
 80021d0:	691a      	ldr	r2, [r3, #16]
 80021d2:	490f      	ldr	r1, [pc, #60]	; (8002210 <FLASH_Erase_Sector+0x8c>)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80021da:	4b0d      	ldr	r3, [pc, #52]	; (8002210 <FLASH_Erase_Sector+0x8c>)
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	4a0c      	ldr	r2, [pc, #48]	; (8002210 <FLASH_Erase_Sector+0x8c>)
 80021e0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80021e4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80021e6:	4b0a      	ldr	r3, [pc, #40]	; (8002210 <FLASH_Erase_Sector+0x8c>)
 80021e8:	691a      	ldr	r2, [r3, #16]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	4313      	orrs	r3, r2
 80021f0:	4a07      	ldr	r2, [pc, #28]	; (8002210 <FLASH_Erase_Sector+0x8c>)
 80021f2:	f043 0302 	orr.w	r3, r3, #2
 80021f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80021f8:	4b05      	ldr	r3, [pc, #20]	; (8002210 <FLASH_Erase_Sector+0x8c>)
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	4a04      	ldr	r2, [pc, #16]	; (8002210 <FLASH_Erase_Sector+0x8c>)
 80021fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002202:	6113      	str	r3, [r2, #16]
}
 8002204:	bf00      	nop
 8002206:	3714      	adds	r7, #20
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	40023c00 	.word	0x40023c00

08002214 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002218:	4b20      	ldr	r3, [pc, #128]	; (800229c <FLASH_FlushCaches+0x88>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002220:	2b00      	cmp	r3, #0
 8002222:	d017      	beq.n	8002254 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002224:	4b1d      	ldr	r3, [pc, #116]	; (800229c <FLASH_FlushCaches+0x88>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a1c      	ldr	r2, [pc, #112]	; (800229c <FLASH_FlushCaches+0x88>)
 800222a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800222e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002230:	4b1a      	ldr	r3, [pc, #104]	; (800229c <FLASH_FlushCaches+0x88>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a19      	ldr	r2, [pc, #100]	; (800229c <FLASH_FlushCaches+0x88>)
 8002236:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800223a:	6013      	str	r3, [r2, #0]
 800223c:	4b17      	ldr	r3, [pc, #92]	; (800229c <FLASH_FlushCaches+0x88>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a16      	ldr	r2, [pc, #88]	; (800229c <FLASH_FlushCaches+0x88>)
 8002242:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002246:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002248:	4b14      	ldr	r3, [pc, #80]	; (800229c <FLASH_FlushCaches+0x88>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a13      	ldr	r2, [pc, #76]	; (800229c <FLASH_FlushCaches+0x88>)
 800224e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002252:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002254:	4b11      	ldr	r3, [pc, #68]	; (800229c <FLASH_FlushCaches+0x88>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800225c:	2b00      	cmp	r3, #0
 800225e:	d017      	beq.n	8002290 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002260:	4b0e      	ldr	r3, [pc, #56]	; (800229c <FLASH_FlushCaches+0x88>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a0d      	ldr	r2, [pc, #52]	; (800229c <FLASH_FlushCaches+0x88>)
 8002266:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800226a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800226c:	4b0b      	ldr	r3, [pc, #44]	; (800229c <FLASH_FlushCaches+0x88>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a0a      	ldr	r2, [pc, #40]	; (800229c <FLASH_FlushCaches+0x88>)
 8002272:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002276:	6013      	str	r3, [r2, #0]
 8002278:	4b08      	ldr	r3, [pc, #32]	; (800229c <FLASH_FlushCaches+0x88>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a07      	ldr	r2, [pc, #28]	; (800229c <FLASH_FlushCaches+0x88>)
 800227e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002282:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002284:	4b05      	ldr	r3, [pc, #20]	; (800229c <FLASH_FlushCaches+0x88>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a04      	ldr	r2, [pc, #16]	; (800229c <FLASH_FlushCaches+0x88>)
 800228a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800228e:	6013      	str	r3, [r2, #0]
  }
}
 8002290:	bf00      	nop
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	40023c00 	.word	0x40023c00

080022a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b089      	sub	sp, #36	; 0x24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022b6:	2300      	movs	r3, #0
 80022b8:	61fb      	str	r3, [r7, #28]
 80022ba:	e16b      	b.n	8002594 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022bc:	2201      	movs	r2, #1
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	4013      	ands	r3, r2
 80022ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	f040 815a 	bne.w	800258e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f003 0303 	and.w	r3, r3, #3
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d005      	beq.n	80022f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d130      	bne.n	8002354 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	2203      	movs	r2, #3
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	43db      	mvns	r3, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4013      	ands	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	68da      	ldr	r2, [r3, #12]
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4313      	orrs	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002328:	2201      	movs	r2, #1
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4013      	ands	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	091b      	lsrs	r3, r3, #4
 800233e:	f003 0201 	and.w	r2, r3, #1
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4313      	orrs	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f003 0303 	and.w	r3, r3, #3
 800235c:	2b03      	cmp	r3, #3
 800235e:	d017      	beq.n	8002390 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	2203      	movs	r2, #3
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4013      	ands	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4313      	orrs	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f003 0303 	and.w	r3, r3, #3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d123      	bne.n	80023e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	08da      	lsrs	r2, r3, #3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3208      	adds	r2, #8
 80023a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	220f      	movs	r2, #15
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	43db      	mvns	r3, r3
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	4013      	ands	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	691a      	ldr	r2, [r3, #16]
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	08da      	lsrs	r2, r3, #3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	3208      	adds	r2, #8
 80023de:	69b9      	ldr	r1, [r7, #24]
 80023e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	2203      	movs	r2, #3
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4013      	ands	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f003 0203 	and.w	r2, r3, #3
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	4313      	orrs	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002420:	2b00      	cmp	r3, #0
 8002422:	f000 80b4 	beq.w	800258e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002426:	2300      	movs	r3, #0
 8002428:	60fb      	str	r3, [r7, #12]
 800242a:	4b60      	ldr	r3, [pc, #384]	; (80025ac <HAL_GPIO_Init+0x30c>)
 800242c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242e:	4a5f      	ldr	r2, [pc, #380]	; (80025ac <HAL_GPIO_Init+0x30c>)
 8002430:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002434:	6453      	str	r3, [r2, #68]	; 0x44
 8002436:	4b5d      	ldr	r3, [pc, #372]	; (80025ac <HAL_GPIO_Init+0x30c>)
 8002438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002442:	4a5b      	ldr	r2, [pc, #364]	; (80025b0 <HAL_GPIO_Init+0x310>)
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	089b      	lsrs	r3, r3, #2
 8002448:	3302      	adds	r3, #2
 800244a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800244e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	f003 0303 	and.w	r3, r3, #3
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	220f      	movs	r2, #15
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43db      	mvns	r3, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4013      	ands	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a52      	ldr	r2, [pc, #328]	; (80025b4 <HAL_GPIO_Init+0x314>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d02b      	beq.n	80024c6 <HAL_GPIO_Init+0x226>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a51      	ldr	r2, [pc, #324]	; (80025b8 <HAL_GPIO_Init+0x318>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d025      	beq.n	80024c2 <HAL_GPIO_Init+0x222>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a50      	ldr	r2, [pc, #320]	; (80025bc <HAL_GPIO_Init+0x31c>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d01f      	beq.n	80024be <HAL_GPIO_Init+0x21e>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a4f      	ldr	r2, [pc, #316]	; (80025c0 <HAL_GPIO_Init+0x320>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d019      	beq.n	80024ba <HAL_GPIO_Init+0x21a>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a4e      	ldr	r2, [pc, #312]	; (80025c4 <HAL_GPIO_Init+0x324>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d013      	beq.n	80024b6 <HAL_GPIO_Init+0x216>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a4d      	ldr	r2, [pc, #308]	; (80025c8 <HAL_GPIO_Init+0x328>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d00d      	beq.n	80024b2 <HAL_GPIO_Init+0x212>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a4c      	ldr	r2, [pc, #304]	; (80025cc <HAL_GPIO_Init+0x32c>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d007      	beq.n	80024ae <HAL_GPIO_Init+0x20e>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a4b      	ldr	r2, [pc, #300]	; (80025d0 <HAL_GPIO_Init+0x330>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d101      	bne.n	80024aa <HAL_GPIO_Init+0x20a>
 80024a6:	2307      	movs	r3, #7
 80024a8:	e00e      	b.n	80024c8 <HAL_GPIO_Init+0x228>
 80024aa:	2308      	movs	r3, #8
 80024ac:	e00c      	b.n	80024c8 <HAL_GPIO_Init+0x228>
 80024ae:	2306      	movs	r3, #6
 80024b0:	e00a      	b.n	80024c8 <HAL_GPIO_Init+0x228>
 80024b2:	2305      	movs	r3, #5
 80024b4:	e008      	b.n	80024c8 <HAL_GPIO_Init+0x228>
 80024b6:	2304      	movs	r3, #4
 80024b8:	e006      	b.n	80024c8 <HAL_GPIO_Init+0x228>
 80024ba:	2303      	movs	r3, #3
 80024bc:	e004      	b.n	80024c8 <HAL_GPIO_Init+0x228>
 80024be:	2302      	movs	r3, #2
 80024c0:	e002      	b.n	80024c8 <HAL_GPIO_Init+0x228>
 80024c2:	2301      	movs	r3, #1
 80024c4:	e000      	b.n	80024c8 <HAL_GPIO_Init+0x228>
 80024c6:	2300      	movs	r3, #0
 80024c8:	69fa      	ldr	r2, [r7, #28]
 80024ca:	f002 0203 	and.w	r2, r2, #3
 80024ce:	0092      	lsls	r2, r2, #2
 80024d0:	4093      	lsls	r3, r2
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024d8:	4935      	ldr	r1, [pc, #212]	; (80025b0 <HAL_GPIO_Init+0x310>)
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	089b      	lsrs	r3, r3, #2
 80024de:	3302      	adds	r3, #2
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024e6:	4b3b      	ldr	r3, [pc, #236]	; (80025d4 <HAL_GPIO_Init+0x334>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	43db      	mvns	r3, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4013      	ands	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d003      	beq.n	800250a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	4313      	orrs	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800250a:	4a32      	ldr	r2, [pc, #200]	; (80025d4 <HAL_GPIO_Init+0x334>)
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002510:	4b30      	ldr	r3, [pc, #192]	; (80025d4 <HAL_GPIO_Init+0x334>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	43db      	mvns	r3, r3
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	4013      	ands	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d003      	beq.n	8002534 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	4313      	orrs	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002534:	4a27      	ldr	r2, [pc, #156]	; (80025d4 <HAL_GPIO_Init+0x334>)
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800253a:	4b26      	ldr	r3, [pc, #152]	; (80025d4 <HAL_GPIO_Init+0x334>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	43db      	mvns	r3, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4013      	ands	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	4313      	orrs	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800255e:	4a1d      	ldr	r2, [pc, #116]	; (80025d4 <HAL_GPIO_Init+0x334>)
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002564:	4b1b      	ldr	r3, [pc, #108]	; (80025d4 <HAL_GPIO_Init+0x334>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	43db      	mvns	r3, r3
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4013      	ands	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d003      	beq.n	8002588 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	4313      	orrs	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002588:	4a12      	ldr	r2, [pc, #72]	; (80025d4 <HAL_GPIO_Init+0x334>)
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	3301      	adds	r3, #1
 8002592:	61fb      	str	r3, [r7, #28]
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	2b0f      	cmp	r3, #15
 8002598:	f67f ae90 	bls.w	80022bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800259c:	bf00      	nop
 800259e:	bf00      	nop
 80025a0:	3724      	adds	r7, #36	; 0x24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	40023800 	.word	0x40023800
 80025b0:	40013800 	.word	0x40013800
 80025b4:	40020000 	.word	0x40020000
 80025b8:	40020400 	.word	0x40020400
 80025bc:	40020800 	.word	0x40020800
 80025c0:	40020c00 	.word	0x40020c00
 80025c4:	40021000 	.word	0x40021000
 80025c8:	40021400 	.word	0x40021400
 80025cc:	40021800 	.word	0x40021800
 80025d0:	40021c00 	.word	0x40021c00
 80025d4:	40013c00 	.word	0x40013c00

080025d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	460b      	mov	r3, r1
 80025e2:	807b      	strh	r3, [r7, #2]
 80025e4:	4613      	mov	r3, r2
 80025e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025e8:	787b      	ldrb	r3, [r7, #1]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025ee:	887a      	ldrh	r2, [r7, #2]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025f4:	e003      	b.n	80025fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025f6:	887b      	ldrh	r3, [r7, #2]
 80025f8:	041a      	lsls	r2, r3, #16
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	619a      	str	r2, [r3, #24]
}
 80025fe:	bf00      	nop
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800260a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800260c:	b08f      	sub	sp, #60	; 0x3c
 800260e:	af0a      	add	r7, sp, #40	; 0x28
 8002610:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d101      	bne.n	800261c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e054      	b.n	80026c6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d106      	bne.n	800263c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f00b fc44 	bl	800dec4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2203      	movs	r2, #3
 8002640:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264c:	2b00      	cmp	r3, #0
 800264e:	d102      	bne.n	8002656 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f002 fde4 	bl	8005228 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	603b      	str	r3, [r7, #0]
 8002666:	687e      	ldr	r6, [r7, #4]
 8002668:	466d      	mov	r5, sp
 800266a:	f106 0410 	add.w	r4, r6, #16
 800266e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002670:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002672:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002674:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002676:	e894 0003 	ldmia.w	r4, {r0, r1}
 800267a:	e885 0003 	stmia.w	r5, {r0, r1}
 800267e:	1d33      	adds	r3, r6, #4
 8002680:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002682:	6838      	ldr	r0, [r7, #0]
 8002684:	f002 fd5e 	bl	8005144 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2101      	movs	r1, #1
 800268e:	4618      	mov	r0, r3
 8002690:	f002 fddb 	bl	800524a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	603b      	str	r3, [r7, #0]
 800269a:	687e      	ldr	r6, [r7, #4]
 800269c:	466d      	mov	r5, sp
 800269e:	f106 0410 	add.w	r4, r6, #16
 80026a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80026b2:	1d33      	adds	r3, r6, #4
 80026b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026b6:	6838      	ldr	r0, [r7, #0]
 80026b8:	f002 ff42 	bl	8005540 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3714      	adds	r7, #20
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080026ce <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80026ce:	b590      	push	{r4, r7, lr}
 80026d0:	b089      	sub	sp, #36	; 0x24
 80026d2:	af04      	add	r7, sp, #16
 80026d4:	6078      	str	r0, [r7, #4]
 80026d6:	4608      	mov	r0, r1
 80026d8:	4611      	mov	r1, r2
 80026da:	461a      	mov	r2, r3
 80026dc:	4603      	mov	r3, r0
 80026de:	70fb      	strb	r3, [r7, #3]
 80026e0:	460b      	mov	r3, r1
 80026e2:	70bb      	strb	r3, [r7, #2]
 80026e4:	4613      	mov	r3, r2
 80026e6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d101      	bne.n	80026f6 <HAL_HCD_HC_Init+0x28>
 80026f2:	2302      	movs	r3, #2
 80026f4:	e076      	b.n	80027e4 <HAL_HCD_HC_Init+0x116>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80026fe:	78fb      	ldrb	r3, [r7, #3]
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	212c      	movs	r1, #44	; 0x2c
 8002704:	fb01 f303 	mul.w	r3, r1, r3
 8002708:	4413      	add	r3, r2
 800270a:	333d      	adds	r3, #61	; 0x3d
 800270c:	2200      	movs	r2, #0
 800270e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002710:	78fb      	ldrb	r3, [r7, #3]
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	212c      	movs	r1, #44	; 0x2c
 8002716:	fb01 f303 	mul.w	r3, r1, r3
 800271a:	4413      	add	r3, r2
 800271c:	3338      	adds	r3, #56	; 0x38
 800271e:	787a      	ldrb	r2, [r7, #1]
 8002720:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002722:	78fb      	ldrb	r3, [r7, #3]
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	212c      	movs	r1, #44	; 0x2c
 8002728:	fb01 f303 	mul.w	r3, r1, r3
 800272c:	4413      	add	r3, r2
 800272e:	3340      	adds	r3, #64	; 0x40
 8002730:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002732:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002734:	78fb      	ldrb	r3, [r7, #3]
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	212c      	movs	r1, #44	; 0x2c
 800273a:	fb01 f303 	mul.w	r3, r1, r3
 800273e:	4413      	add	r3, r2
 8002740:	3339      	adds	r3, #57	; 0x39
 8002742:	78fa      	ldrb	r2, [r7, #3]
 8002744:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002746:	78fb      	ldrb	r3, [r7, #3]
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	212c      	movs	r1, #44	; 0x2c
 800274c:	fb01 f303 	mul.w	r3, r1, r3
 8002750:	4413      	add	r3, r2
 8002752:	333f      	adds	r3, #63	; 0x3f
 8002754:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002758:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800275a:	78fb      	ldrb	r3, [r7, #3]
 800275c:	78ba      	ldrb	r2, [r7, #2]
 800275e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002762:	b2d0      	uxtb	r0, r2
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	212c      	movs	r1, #44	; 0x2c
 8002768:	fb01 f303 	mul.w	r3, r1, r3
 800276c:	4413      	add	r3, r2
 800276e:	333a      	adds	r3, #58	; 0x3a
 8002770:	4602      	mov	r2, r0
 8002772:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002774:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002778:	2b00      	cmp	r3, #0
 800277a:	da09      	bge.n	8002790 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800277c:	78fb      	ldrb	r3, [r7, #3]
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	212c      	movs	r1, #44	; 0x2c
 8002782:	fb01 f303 	mul.w	r3, r1, r3
 8002786:	4413      	add	r3, r2
 8002788:	333b      	adds	r3, #59	; 0x3b
 800278a:	2201      	movs	r2, #1
 800278c:	701a      	strb	r2, [r3, #0]
 800278e:	e008      	b.n	80027a2 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002790:	78fb      	ldrb	r3, [r7, #3]
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	212c      	movs	r1, #44	; 0x2c
 8002796:	fb01 f303 	mul.w	r3, r1, r3
 800279a:	4413      	add	r3, r2
 800279c:	333b      	adds	r3, #59	; 0x3b
 800279e:	2200      	movs	r2, #0
 80027a0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80027a2:	78fb      	ldrb	r3, [r7, #3]
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	212c      	movs	r1, #44	; 0x2c
 80027a8:	fb01 f303 	mul.w	r3, r1, r3
 80027ac:	4413      	add	r3, r2
 80027ae:	333c      	adds	r3, #60	; 0x3c
 80027b0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80027b4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6818      	ldr	r0, [r3, #0]
 80027ba:	787c      	ldrb	r4, [r7, #1]
 80027bc:	78ba      	ldrb	r2, [r7, #2]
 80027be:	78f9      	ldrb	r1, [r7, #3]
 80027c0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80027c2:	9302      	str	r3, [sp, #8]
 80027c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80027c8:	9301      	str	r3, [sp, #4]
 80027ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80027ce:	9300      	str	r3, [sp, #0]
 80027d0:	4623      	mov	r3, r4
 80027d2:	f003 f82f 	bl	8005834 <USB_HC_Init>
 80027d6:	4603      	mov	r3, r0
 80027d8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80027e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3714      	adds	r7, #20
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd90      	pop	{r4, r7, pc}

080027ec <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	460b      	mov	r3, r1
 80027f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80027f8:	2300      	movs	r3, #0
 80027fa:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002802:	2b01      	cmp	r3, #1
 8002804:	d101      	bne.n	800280a <HAL_HCD_HC_Halt+0x1e>
 8002806:	2302      	movs	r3, #2
 8002808:	e00f      	b.n	800282a <HAL_HCD_HC_Halt+0x3e>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	78fa      	ldrb	r2, [r7, #3]
 8002818:	4611      	mov	r1, r2
 800281a:	4618      	mov	r0, r3
 800281c:	f003 fa6b 	bl	8005cf6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002828:	7bfb      	ldrb	r3, [r7, #15]
}
 800282a:	4618      	mov	r0, r3
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
	...

08002834 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	4608      	mov	r0, r1
 800283e:	4611      	mov	r1, r2
 8002840:	461a      	mov	r2, r3
 8002842:	4603      	mov	r3, r0
 8002844:	70fb      	strb	r3, [r7, #3]
 8002846:	460b      	mov	r3, r1
 8002848:	70bb      	strb	r3, [r7, #2]
 800284a:	4613      	mov	r3, r2
 800284c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800284e:	78fb      	ldrb	r3, [r7, #3]
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	212c      	movs	r1, #44	; 0x2c
 8002854:	fb01 f303 	mul.w	r3, r1, r3
 8002858:	4413      	add	r3, r2
 800285a:	333b      	adds	r3, #59	; 0x3b
 800285c:	78ba      	ldrb	r2, [r7, #2]
 800285e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002860:	78fb      	ldrb	r3, [r7, #3]
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	212c      	movs	r1, #44	; 0x2c
 8002866:	fb01 f303 	mul.w	r3, r1, r3
 800286a:	4413      	add	r3, r2
 800286c:	333f      	adds	r3, #63	; 0x3f
 800286e:	787a      	ldrb	r2, [r7, #1]
 8002870:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002872:	7c3b      	ldrb	r3, [r7, #16]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d112      	bne.n	800289e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002878:	78fb      	ldrb	r3, [r7, #3]
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	212c      	movs	r1, #44	; 0x2c
 800287e:	fb01 f303 	mul.w	r3, r1, r3
 8002882:	4413      	add	r3, r2
 8002884:	3342      	adds	r3, #66	; 0x42
 8002886:	2203      	movs	r2, #3
 8002888:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800288a:	78fb      	ldrb	r3, [r7, #3]
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	212c      	movs	r1, #44	; 0x2c
 8002890:	fb01 f303 	mul.w	r3, r1, r3
 8002894:	4413      	add	r3, r2
 8002896:	333d      	adds	r3, #61	; 0x3d
 8002898:	7f3a      	ldrb	r2, [r7, #28]
 800289a:	701a      	strb	r2, [r3, #0]
 800289c:	e008      	b.n	80028b0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800289e:	78fb      	ldrb	r3, [r7, #3]
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	212c      	movs	r1, #44	; 0x2c
 80028a4:	fb01 f303 	mul.w	r3, r1, r3
 80028a8:	4413      	add	r3, r2
 80028aa:	3342      	adds	r3, #66	; 0x42
 80028ac:	2202      	movs	r2, #2
 80028ae:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80028b0:	787b      	ldrb	r3, [r7, #1]
 80028b2:	2b03      	cmp	r3, #3
 80028b4:	f200 80c6 	bhi.w	8002a44 <HAL_HCD_HC_SubmitRequest+0x210>
 80028b8:	a201      	add	r2, pc, #4	; (adr r2, 80028c0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80028ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028be:	bf00      	nop
 80028c0:	080028d1 	.word	0x080028d1
 80028c4:	08002a31 	.word	0x08002a31
 80028c8:	08002935 	.word	0x08002935
 80028cc:	080029b3 	.word	0x080029b3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80028d0:	7c3b      	ldrb	r3, [r7, #16]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	f040 80b8 	bne.w	8002a48 <HAL_HCD_HC_SubmitRequest+0x214>
 80028d8:	78bb      	ldrb	r3, [r7, #2]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f040 80b4 	bne.w	8002a48 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80028e0:	8b3b      	ldrh	r3, [r7, #24]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d108      	bne.n	80028f8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80028e6:	78fb      	ldrb	r3, [r7, #3]
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	212c      	movs	r1, #44	; 0x2c
 80028ec:	fb01 f303 	mul.w	r3, r1, r3
 80028f0:	4413      	add	r3, r2
 80028f2:	3355      	adds	r3, #85	; 0x55
 80028f4:	2201      	movs	r2, #1
 80028f6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80028f8:	78fb      	ldrb	r3, [r7, #3]
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	212c      	movs	r1, #44	; 0x2c
 80028fe:	fb01 f303 	mul.w	r3, r1, r3
 8002902:	4413      	add	r3, r2
 8002904:	3355      	adds	r3, #85	; 0x55
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d109      	bne.n	8002920 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800290c:	78fb      	ldrb	r3, [r7, #3]
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	212c      	movs	r1, #44	; 0x2c
 8002912:	fb01 f303 	mul.w	r3, r1, r3
 8002916:	4413      	add	r3, r2
 8002918:	3342      	adds	r3, #66	; 0x42
 800291a:	2200      	movs	r2, #0
 800291c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800291e:	e093      	b.n	8002a48 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002920:	78fb      	ldrb	r3, [r7, #3]
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	212c      	movs	r1, #44	; 0x2c
 8002926:	fb01 f303 	mul.w	r3, r1, r3
 800292a:	4413      	add	r3, r2
 800292c:	3342      	adds	r3, #66	; 0x42
 800292e:	2202      	movs	r2, #2
 8002930:	701a      	strb	r2, [r3, #0]
      break;
 8002932:	e089      	b.n	8002a48 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002934:	78bb      	ldrb	r3, [r7, #2]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d11d      	bne.n	8002976 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800293a:	78fb      	ldrb	r3, [r7, #3]
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	212c      	movs	r1, #44	; 0x2c
 8002940:	fb01 f303 	mul.w	r3, r1, r3
 8002944:	4413      	add	r3, r2
 8002946:	3355      	adds	r3, #85	; 0x55
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d109      	bne.n	8002962 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800294e:	78fb      	ldrb	r3, [r7, #3]
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	212c      	movs	r1, #44	; 0x2c
 8002954:	fb01 f303 	mul.w	r3, r1, r3
 8002958:	4413      	add	r3, r2
 800295a:	3342      	adds	r3, #66	; 0x42
 800295c:	2200      	movs	r2, #0
 800295e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002960:	e073      	b.n	8002a4a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002962:	78fb      	ldrb	r3, [r7, #3]
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	212c      	movs	r1, #44	; 0x2c
 8002968:	fb01 f303 	mul.w	r3, r1, r3
 800296c:	4413      	add	r3, r2
 800296e:	3342      	adds	r3, #66	; 0x42
 8002970:	2202      	movs	r2, #2
 8002972:	701a      	strb	r2, [r3, #0]
      break;
 8002974:	e069      	b.n	8002a4a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002976:	78fb      	ldrb	r3, [r7, #3]
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	212c      	movs	r1, #44	; 0x2c
 800297c:	fb01 f303 	mul.w	r3, r1, r3
 8002980:	4413      	add	r3, r2
 8002982:	3354      	adds	r3, #84	; 0x54
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d109      	bne.n	800299e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800298a:	78fb      	ldrb	r3, [r7, #3]
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	212c      	movs	r1, #44	; 0x2c
 8002990:	fb01 f303 	mul.w	r3, r1, r3
 8002994:	4413      	add	r3, r2
 8002996:	3342      	adds	r3, #66	; 0x42
 8002998:	2200      	movs	r2, #0
 800299a:	701a      	strb	r2, [r3, #0]
      break;
 800299c:	e055      	b.n	8002a4a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800299e:	78fb      	ldrb	r3, [r7, #3]
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	212c      	movs	r1, #44	; 0x2c
 80029a4:	fb01 f303 	mul.w	r3, r1, r3
 80029a8:	4413      	add	r3, r2
 80029aa:	3342      	adds	r3, #66	; 0x42
 80029ac:	2202      	movs	r2, #2
 80029ae:	701a      	strb	r2, [r3, #0]
      break;
 80029b0:	e04b      	b.n	8002a4a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80029b2:	78bb      	ldrb	r3, [r7, #2]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d11d      	bne.n	80029f4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80029b8:	78fb      	ldrb	r3, [r7, #3]
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	212c      	movs	r1, #44	; 0x2c
 80029be:	fb01 f303 	mul.w	r3, r1, r3
 80029c2:	4413      	add	r3, r2
 80029c4:	3355      	adds	r3, #85	; 0x55
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d109      	bne.n	80029e0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80029cc:	78fb      	ldrb	r3, [r7, #3]
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	212c      	movs	r1, #44	; 0x2c
 80029d2:	fb01 f303 	mul.w	r3, r1, r3
 80029d6:	4413      	add	r3, r2
 80029d8:	3342      	adds	r3, #66	; 0x42
 80029da:	2200      	movs	r2, #0
 80029dc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80029de:	e034      	b.n	8002a4a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80029e0:	78fb      	ldrb	r3, [r7, #3]
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	212c      	movs	r1, #44	; 0x2c
 80029e6:	fb01 f303 	mul.w	r3, r1, r3
 80029ea:	4413      	add	r3, r2
 80029ec:	3342      	adds	r3, #66	; 0x42
 80029ee:	2202      	movs	r2, #2
 80029f0:	701a      	strb	r2, [r3, #0]
      break;
 80029f2:	e02a      	b.n	8002a4a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80029f4:	78fb      	ldrb	r3, [r7, #3]
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	212c      	movs	r1, #44	; 0x2c
 80029fa:	fb01 f303 	mul.w	r3, r1, r3
 80029fe:	4413      	add	r3, r2
 8002a00:	3354      	adds	r3, #84	; 0x54
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d109      	bne.n	8002a1c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a08:	78fb      	ldrb	r3, [r7, #3]
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	212c      	movs	r1, #44	; 0x2c
 8002a0e:	fb01 f303 	mul.w	r3, r1, r3
 8002a12:	4413      	add	r3, r2
 8002a14:	3342      	adds	r3, #66	; 0x42
 8002a16:	2200      	movs	r2, #0
 8002a18:	701a      	strb	r2, [r3, #0]
      break;
 8002a1a:	e016      	b.n	8002a4a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a1c:	78fb      	ldrb	r3, [r7, #3]
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	212c      	movs	r1, #44	; 0x2c
 8002a22:	fb01 f303 	mul.w	r3, r1, r3
 8002a26:	4413      	add	r3, r2
 8002a28:	3342      	adds	r3, #66	; 0x42
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	701a      	strb	r2, [r3, #0]
      break;
 8002a2e:	e00c      	b.n	8002a4a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a30:	78fb      	ldrb	r3, [r7, #3]
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	212c      	movs	r1, #44	; 0x2c
 8002a36:	fb01 f303 	mul.w	r3, r1, r3
 8002a3a:	4413      	add	r3, r2
 8002a3c:	3342      	adds	r3, #66	; 0x42
 8002a3e:	2200      	movs	r2, #0
 8002a40:	701a      	strb	r2, [r3, #0]
      break;
 8002a42:	e002      	b.n	8002a4a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002a44:	bf00      	nop
 8002a46:	e000      	b.n	8002a4a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002a48:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002a4a:	78fb      	ldrb	r3, [r7, #3]
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	212c      	movs	r1, #44	; 0x2c
 8002a50:	fb01 f303 	mul.w	r3, r1, r3
 8002a54:	4413      	add	r3, r2
 8002a56:	3344      	adds	r3, #68	; 0x44
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002a5c:	78fb      	ldrb	r3, [r7, #3]
 8002a5e:	8b3a      	ldrh	r2, [r7, #24]
 8002a60:	6879      	ldr	r1, [r7, #4]
 8002a62:	202c      	movs	r0, #44	; 0x2c
 8002a64:	fb00 f303 	mul.w	r3, r0, r3
 8002a68:	440b      	add	r3, r1
 8002a6a:	334c      	adds	r3, #76	; 0x4c
 8002a6c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002a6e:	78fb      	ldrb	r3, [r7, #3]
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	212c      	movs	r1, #44	; 0x2c
 8002a74:	fb01 f303 	mul.w	r3, r1, r3
 8002a78:	4413      	add	r3, r2
 8002a7a:	3360      	adds	r3, #96	; 0x60
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002a80:	78fb      	ldrb	r3, [r7, #3]
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	212c      	movs	r1, #44	; 0x2c
 8002a86:	fb01 f303 	mul.w	r3, r1, r3
 8002a8a:	4413      	add	r3, r2
 8002a8c:	3350      	adds	r3, #80	; 0x50
 8002a8e:	2200      	movs	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002a92:	78fb      	ldrb	r3, [r7, #3]
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	212c      	movs	r1, #44	; 0x2c
 8002a98:	fb01 f303 	mul.w	r3, r1, r3
 8002a9c:	4413      	add	r3, r2
 8002a9e:	3339      	adds	r3, #57	; 0x39
 8002aa0:	78fa      	ldrb	r2, [r7, #3]
 8002aa2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002aa4:	78fb      	ldrb	r3, [r7, #3]
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	212c      	movs	r1, #44	; 0x2c
 8002aaa:	fb01 f303 	mul.w	r3, r1, r3
 8002aae:	4413      	add	r3, r2
 8002ab0:	3361      	adds	r3, #97	; 0x61
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6818      	ldr	r0, [r3, #0]
 8002aba:	78fb      	ldrb	r3, [r7, #3]
 8002abc:	222c      	movs	r2, #44	; 0x2c
 8002abe:	fb02 f303 	mul.w	r3, r2, r3
 8002ac2:	3338      	adds	r3, #56	; 0x38
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	18d1      	adds	r1, r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	461a      	mov	r2, r3
 8002ad0:	f002 ffbe 	bl	8005a50 <USB_HC_StartXfer>
 8002ad4:	4603      	mov	r3, r0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop

08002ae0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f002 fce1 	bl	80054be <USB_GetMode>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	f040 80f6 	bne.w	8002cf0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f002 fcc5 	bl	8005498 <USB_ReadInterrupts>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f000 80ec 	beq.w	8002cee <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f002 fcbc 	bl	8005498 <USB_ReadInterrupts>
 8002b20:	4603      	mov	r3, r0
 8002b22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b2a:	d104      	bne.n	8002b36 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002b34:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f002 fcac 	bl	8005498 <USB_ReadInterrupts>
 8002b40:	4603      	mov	r3, r0
 8002b42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b4a:	d104      	bne.n	8002b56 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002b54:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f002 fc9c 	bl	8005498 <USB_ReadInterrupts>
 8002b60:	4603      	mov	r3, r0
 8002b62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b6a:	d104      	bne.n	8002b76 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002b74:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f002 fc8c 	bl	8005498 <USB_ReadInterrupts>
 8002b80:	4603      	mov	r3, r0
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d103      	bne.n	8002b92 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2202      	movs	r2, #2
 8002b90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f002 fc7e 	bl	8005498 <USB_ReadInterrupts>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ba2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ba6:	d11c      	bne.n	8002be2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002bb0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10f      	bne.n	8002be2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002bc2:	2110      	movs	r1, #16
 8002bc4:	6938      	ldr	r0, [r7, #16]
 8002bc6:	f002 fb8d 	bl	80052e4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002bca:	6938      	ldr	r0, [r7, #16]
 8002bcc:	f002 fbae 	bl	800532c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f002 fd66 	bl	80056a8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f00b f9ef 	bl	800dfc0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f002 fc56 	bl	8005498 <USB_ReadInterrupts>
 8002bec:	4603      	mov	r3, r0
 8002bee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bf2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bf6:	d102      	bne.n	8002bfe <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f001 fa03 	bl	8004004 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f002 fc48 	bl	8005498 <USB_ReadInterrupts>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	f003 0308 	and.w	r3, r3, #8
 8002c0e:	2b08      	cmp	r3, #8
 8002c10:	d106      	bne.n	8002c20 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f00b f9b8 	bl	800df88 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2208      	movs	r2, #8
 8002c1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f002 fc37 	bl	8005498 <USB_ReadInterrupts>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	f003 0310 	and.w	r3, r3, #16
 8002c30:	2b10      	cmp	r3, #16
 8002c32:	d101      	bne.n	8002c38 <HAL_HCD_IRQHandler+0x158>
 8002c34:	2301      	movs	r3, #1
 8002c36:	e000      	b.n	8002c3a <HAL_HCD_IRQHandler+0x15a>
 8002c38:	2300      	movs	r3, #0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d012      	beq.n	8002c64 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	699a      	ldr	r2, [r3, #24]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 0210 	bic.w	r2, r2, #16
 8002c4c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f001 f906 	bl	8003e60 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	699a      	ldr	r2, [r3, #24]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f042 0210 	orr.w	r2, r2, #16
 8002c62:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f002 fc15 	bl	8005498 <USB_ReadInterrupts>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c78:	d13a      	bne.n	8002cf0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f003 f828 	bl	8005cd4 <USB_HC_ReadInterrupt>
 8002c84:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002c86:	2300      	movs	r3, #0
 8002c88:	617b      	str	r3, [r7, #20]
 8002c8a:	e025      	b.n	8002cd8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	68ba      	ldr	r2, [r7, #8]
 8002c94:	fa22 f303 	lsr.w	r3, r2, r3
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d018      	beq.n	8002cd2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	015a      	lsls	r2, r3, #5
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cb6:	d106      	bne.n	8002cc6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f8ab 	bl	8002e1a <HCD_HC_IN_IRQHandler>
 8002cc4:	e005      	b.n	8002cd2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	4619      	mov	r1, r3
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 fcc6 	bl	800365e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	617b      	str	r3, [r7, #20]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d3d4      	bcc.n	8002c8c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cea:	615a      	str	r2, [r3, #20]
 8002cec:	e000      	b.n	8002cf0 <HAL_HCD_IRQHandler+0x210>
      return;
 8002cee:	bf00      	nop
    }
  }
}
 8002cf0:	3718      	adds	r7, #24
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b082      	sub	sp, #8
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d101      	bne.n	8002d0c <HAL_HCD_Start+0x16>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e013      	b.n	8002d34 <HAL_HCD_Start+0x3e>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2101      	movs	r1, #1
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f002 fd28 	bl	8005770 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f002 fa6e 	bl	8005206 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3708      	adds	r7, #8
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d101      	bne.n	8002d52 <HAL_HCD_Stop+0x16>
 8002d4e:	2302      	movs	r3, #2
 8002d50:	e00d      	b.n	8002d6e <HAL_HCD_Stop+0x32>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f003 f922 	bl	8005fa8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b082      	sub	sp, #8
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f002 fcca 	bl	800571c <USB_ResetPort>
 8002d88:	4603      	mov	r3, r0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002d9e:	78fb      	ldrb	r3, [r7, #3]
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	212c      	movs	r1, #44	; 0x2c
 8002da4:	fb01 f303 	mul.w	r3, r1, r3
 8002da8:	4413      	add	r3, r2
 8002daa:	3360      	adds	r3, #96	; 0x60
 8002dac:	781b      	ldrb	r3, [r3, #0]
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b083      	sub	sp, #12
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002dc6:	78fb      	ldrb	r3, [r7, #3]
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	212c      	movs	r1, #44	; 0x2c
 8002dcc:	fb01 f303 	mul.w	r3, r1, r3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	3350      	adds	r3, #80	; 0x50
 8002dd4:	681b      	ldr	r3, [r3, #0]
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b082      	sub	sp, #8
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f002 fd0e 	bl	8005810 <USB_GetCurrentFrame>
 8002df4:	4603      	mov	r3, r0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b082      	sub	sp, #8
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f002 fce9 	bl	80057e2 <USB_GetHostSpeed>
 8002e10:	4603      	mov	r3, r0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b086      	sub	sp, #24
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
 8002e22:	460b      	mov	r3, r1
 8002e24:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002e30:	78fb      	ldrb	r3, [r7, #3]
 8002e32:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	015a      	lsls	r2, r3, #5
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 0304 	and.w	r3, r3, #4
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	d119      	bne.n	8002e7e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	015a      	lsls	r2, r3, #5
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	4413      	add	r3, r2
 8002e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e56:	461a      	mov	r2, r3
 8002e58:	2304      	movs	r3, #4
 8002e5a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	015a      	lsls	r2, r3, #5
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	4413      	add	r3, r2
 8002e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	0151      	lsls	r1, r2, #5
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	440a      	add	r2, r1
 8002e72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e76:	f043 0302 	orr.w	r3, r3, #2
 8002e7a:	60d3      	str	r3, [r2, #12]
 8002e7c:	e101      	b.n	8003082 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	015a      	lsls	r2, r3, #5
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	4413      	add	r3, r2
 8002e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e94:	d12b      	bne.n	8002eee <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	015a      	lsls	r2, r3, #5
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ea8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	212c      	movs	r1, #44	; 0x2c
 8002eb0:	fb01 f303 	mul.w	r3, r1, r3
 8002eb4:	4413      	add	r3, r2
 8002eb6:	3361      	adds	r3, #97	; 0x61
 8002eb8:	2207      	movs	r2, #7
 8002eba:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	015a      	lsls	r2, r3, #5
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	0151      	lsls	r1, r2, #5
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	440a      	add	r2, r1
 8002ed2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ed6:	f043 0302 	orr.w	r3, r3, #2
 8002eda:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	b2d2      	uxtb	r2, r2
 8002ee4:	4611      	mov	r1, r2
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f002 ff05 	bl	8005cf6 <USB_HC_Halt>
 8002eec:	e0c9      	b.n	8003082 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	015a      	lsls	r2, r3, #5
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f003 0320 	and.w	r3, r3, #32
 8002f00:	2b20      	cmp	r3, #32
 8002f02:	d109      	bne.n	8002f18 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	015a      	lsls	r2, r3, #5
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f10:	461a      	mov	r2, r3
 8002f12:	2320      	movs	r3, #32
 8002f14:	6093      	str	r3, [r2, #8]
 8002f16:	e0b4      	b.n	8003082 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	015a      	lsls	r2, r3, #5
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	4413      	add	r3, r2
 8002f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 0308 	and.w	r3, r3, #8
 8002f2a:	2b08      	cmp	r3, #8
 8002f2c:	d133      	bne.n	8002f96 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	015a      	lsls	r2, r3, #5
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	4413      	add	r3, r2
 8002f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	0151      	lsls	r1, r2, #5
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	440a      	add	r2, r1
 8002f44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f48:	f043 0302 	orr.w	r3, r3, #2
 8002f4c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	212c      	movs	r1, #44	; 0x2c
 8002f54:	fb01 f303 	mul.w	r3, r1, r3
 8002f58:	4413      	add	r3, r2
 8002f5a:	3361      	adds	r3, #97	; 0x61
 8002f5c:	2205      	movs	r2, #5
 8002f5e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	015a      	lsls	r2, r3, #5
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	4413      	add	r3, r2
 8002f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	2310      	movs	r3, #16
 8002f70:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	015a      	lsls	r2, r3, #5
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	4413      	add	r3, r2
 8002f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f7e:	461a      	mov	r2, r3
 8002f80:	2308      	movs	r3, #8
 8002f82:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	b2d2      	uxtb	r2, r2
 8002f8c:	4611      	mov	r1, r2
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f002 feb1 	bl	8005cf6 <USB_HC_Halt>
 8002f94:	e075      	b.n	8003082 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	015a      	lsls	r2, r3, #5
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fac:	d134      	bne.n	8003018 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	015a      	lsls	r2, r3, #5
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	0151      	lsls	r1, r2, #5
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	440a      	add	r2, r1
 8002fc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fc8:	f043 0302 	orr.w	r3, r3, #2
 8002fcc:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	212c      	movs	r1, #44	; 0x2c
 8002fd4:	fb01 f303 	mul.w	r3, r1, r3
 8002fd8:	4413      	add	r3, r2
 8002fda:	3361      	adds	r3, #97	; 0x61
 8002fdc:	2208      	movs	r2, #8
 8002fde:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	015a      	lsls	r2, r3, #5
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fec:	461a      	mov	r2, r3
 8002fee:	2310      	movs	r3, #16
 8002ff0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	015a      	lsls	r2, r3, #5
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ffe:	461a      	mov	r2, r3
 8003000:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003004:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	b2d2      	uxtb	r2, r2
 800300e:	4611      	mov	r1, r2
 8003010:	4618      	mov	r0, r3
 8003012:	f002 fe70 	bl	8005cf6 <USB_HC_Halt>
 8003016:	e034      	b.n	8003082 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	015a      	lsls	r2, r3, #5
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	4413      	add	r3, r2
 8003020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800302a:	2b80      	cmp	r3, #128	; 0x80
 800302c:	d129      	bne.n	8003082 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	015a      	lsls	r2, r3, #5
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	4413      	add	r3, r2
 8003036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	0151      	lsls	r1, r2, #5
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	440a      	add	r2, r1
 8003044:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003048:	f043 0302 	orr.w	r3, r3, #2
 800304c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	212c      	movs	r1, #44	; 0x2c
 8003054:	fb01 f303 	mul.w	r3, r1, r3
 8003058:	4413      	add	r3, r2
 800305a:	3361      	adds	r3, #97	; 0x61
 800305c:	2206      	movs	r2, #6
 800305e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	b2d2      	uxtb	r2, r2
 8003068:	4611      	mov	r1, r2
 800306a:	4618      	mov	r0, r3
 800306c:	f002 fe43 	bl	8005cf6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	015a      	lsls	r2, r3, #5
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	4413      	add	r3, r2
 8003078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800307c:	461a      	mov	r2, r3
 800307e:	2380      	movs	r3, #128	; 0x80
 8003080:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	015a      	lsls	r2, r3, #5
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	4413      	add	r3, r2
 800308a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003094:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003098:	d122      	bne.n	80030e0 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	015a      	lsls	r2, r3, #5
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	4413      	add	r3, r2
 80030a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	0151      	lsls	r1, r2, #5
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	440a      	add	r2, r1
 80030b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030b4:	f043 0302 	orr.w	r3, r3, #2
 80030b8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	b2d2      	uxtb	r2, r2
 80030c2:	4611      	mov	r1, r2
 80030c4:	4618      	mov	r0, r3
 80030c6:	f002 fe16 	bl	8005cf6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	015a      	lsls	r2, r3, #5
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	4413      	add	r3, r2
 80030d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d6:	461a      	mov	r2, r3
 80030d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030dc:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80030de:	e2ba      	b.n	8003656 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	015a      	lsls	r2, r3, #5
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	4413      	add	r3, r2
 80030e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	f040 811b 	bne.w	800332e <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d019      	beq.n	8003134 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	212c      	movs	r1, #44	; 0x2c
 8003106:	fb01 f303 	mul.w	r3, r1, r3
 800310a:	4413      	add	r3, r2
 800310c:	3348      	adds	r3, #72	; 0x48
 800310e:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	0159      	lsls	r1, r3, #5
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	440b      	add	r3, r1
 8003118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003122:	1ad2      	subs	r2, r2, r3
 8003124:	6879      	ldr	r1, [r7, #4]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	202c      	movs	r0, #44	; 0x2c
 800312a:	fb00 f303 	mul.w	r3, r0, r3
 800312e:	440b      	add	r3, r1
 8003130:	3350      	adds	r3, #80	; 0x50
 8003132:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	212c      	movs	r1, #44	; 0x2c
 800313a:	fb01 f303 	mul.w	r3, r1, r3
 800313e:	4413      	add	r3, r2
 8003140:	3361      	adds	r3, #97	; 0x61
 8003142:	2201      	movs	r2, #1
 8003144:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	212c      	movs	r1, #44	; 0x2c
 800314c:	fb01 f303 	mul.w	r3, r1, r3
 8003150:	4413      	add	r3, r2
 8003152:	335c      	adds	r3, #92	; 0x5c
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	015a      	lsls	r2, r3, #5
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	4413      	add	r3, r2
 8003160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003164:	461a      	mov	r2, r3
 8003166:	2301      	movs	r3, #1
 8003168:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	212c      	movs	r1, #44	; 0x2c
 8003170:	fb01 f303 	mul.w	r3, r1, r3
 8003174:	4413      	add	r3, r2
 8003176:	333f      	adds	r3, #63	; 0x3f
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d009      	beq.n	8003192 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	212c      	movs	r1, #44	; 0x2c
 8003184:	fb01 f303 	mul.w	r3, r1, r3
 8003188:	4413      	add	r3, r2
 800318a:	333f      	adds	r3, #63	; 0x3f
 800318c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800318e:	2b02      	cmp	r3, #2
 8003190:	d121      	bne.n	80031d6 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	015a      	lsls	r2, r3, #5
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	4413      	add	r3, r2
 800319a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	0151      	lsls	r1, r2, #5
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	440a      	add	r2, r1
 80031a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031ac:	f043 0302 	orr.w	r3, r3, #2
 80031b0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	b2d2      	uxtb	r2, r2
 80031ba:	4611      	mov	r1, r2
 80031bc:	4618      	mov	r0, r3
 80031be:	f002 fd9a 	bl	8005cf6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	015a      	lsls	r2, r3, #5
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	4413      	add	r3, r2
 80031ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ce:	461a      	mov	r2, r3
 80031d0:	2310      	movs	r3, #16
 80031d2:	6093      	str	r3, [r2, #8]
 80031d4:	e066      	b.n	80032a4 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	212c      	movs	r1, #44	; 0x2c
 80031dc:	fb01 f303 	mul.w	r3, r1, r3
 80031e0:	4413      	add	r3, r2
 80031e2:	333f      	adds	r3, #63	; 0x3f
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	2b03      	cmp	r3, #3
 80031e8:	d127      	bne.n	800323a <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	015a      	lsls	r2, r3, #5
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	4413      	add	r3, r2
 80031f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	0151      	lsls	r1, r2, #5
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	440a      	add	r2, r1
 8003200:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003204:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003208:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	212c      	movs	r1, #44	; 0x2c
 8003210:	fb01 f303 	mul.w	r3, r1, r3
 8003214:	4413      	add	r3, r2
 8003216:	3360      	adds	r3, #96	; 0x60
 8003218:	2201      	movs	r2, #1
 800321a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	b2d9      	uxtb	r1, r3
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	202c      	movs	r0, #44	; 0x2c
 8003226:	fb00 f303 	mul.w	r3, r0, r3
 800322a:	4413      	add	r3, r2
 800322c:	3360      	adds	r3, #96	; 0x60
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	461a      	mov	r2, r3
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f00a fed2 	bl	800dfdc <HAL_HCD_HC_NotifyURBChange_Callback>
 8003238:	e034      	b.n	80032a4 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	212c      	movs	r1, #44	; 0x2c
 8003240:	fb01 f303 	mul.w	r3, r1, r3
 8003244:	4413      	add	r3, r2
 8003246:	333f      	adds	r3, #63	; 0x3f
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d12a      	bne.n	80032a4 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	212c      	movs	r1, #44	; 0x2c
 8003254:	fb01 f303 	mul.w	r3, r1, r3
 8003258:	4413      	add	r3, r2
 800325a:	3360      	adds	r3, #96	; 0x60
 800325c:	2201      	movs	r2, #1
 800325e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	212c      	movs	r1, #44	; 0x2c
 8003266:	fb01 f303 	mul.w	r3, r1, r3
 800326a:	4413      	add	r3, r2
 800326c:	3354      	adds	r3, #84	; 0x54
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	f083 0301 	eor.w	r3, r3, #1
 8003274:	b2d8      	uxtb	r0, r3
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	212c      	movs	r1, #44	; 0x2c
 800327c:	fb01 f303 	mul.w	r3, r1, r3
 8003280:	4413      	add	r3, r2
 8003282:	3354      	adds	r3, #84	; 0x54
 8003284:	4602      	mov	r2, r0
 8003286:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	b2d9      	uxtb	r1, r3
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	202c      	movs	r0, #44	; 0x2c
 8003292:	fb00 f303 	mul.w	r3, r0, r3
 8003296:	4413      	add	r3, r2
 8003298:	3360      	adds	r3, #96	; 0x60
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	461a      	mov	r2, r3
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f00a fe9c 	bl	800dfdc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d12b      	bne.n	8003304 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	212c      	movs	r1, #44	; 0x2c
 80032b2:	fb01 f303 	mul.w	r3, r1, r3
 80032b6:	4413      	add	r3, r2
 80032b8:	3348      	adds	r3, #72	; 0x48
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6879      	ldr	r1, [r7, #4]
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	202c      	movs	r0, #44	; 0x2c
 80032c2:	fb00 f202 	mul.w	r2, r0, r2
 80032c6:	440a      	add	r2, r1
 80032c8:	3240      	adds	r2, #64	; 0x40
 80032ca:	8812      	ldrh	r2, [r2, #0]
 80032cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f000 81be 	beq.w	8003656 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	212c      	movs	r1, #44	; 0x2c
 80032e0:	fb01 f303 	mul.w	r3, r1, r3
 80032e4:	4413      	add	r3, r2
 80032e6:	3354      	adds	r3, #84	; 0x54
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	f083 0301 	eor.w	r3, r3, #1
 80032ee:	b2d8      	uxtb	r0, r3
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	212c      	movs	r1, #44	; 0x2c
 80032f6:	fb01 f303 	mul.w	r3, r1, r3
 80032fa:	4413      	add	r3, r2
 80032fc:	3354      	adds	r3, #84	; 0x54
 80032fe:	4602      	mov	r2, r0
 8003300:	701a      	strb	r2, [r3, #0]
}
 8003302:	e1a8      	b.n	8003656 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	212c      	movs	r1, #44	; 0x2c
 800330a:	fb01 f303 	mul.w	r3, r1, r3
 800330e:	4413      	add	r3, r2
 8003310:	3354      	adds	r3, #84	; 0x54
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	f083 0301 	eor.w	r3, r3, #1
 8003318:	b2d8      	uxtb	r0, r3
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	212c      	movs	r1, #44	; 0x2c
 8003320:	fb01 f303 	mul.w	r3, r1, r3
 8003324:	4413      	add	r3, r2
 8003326:	3354      	adds	r3, #84	; 0x54
 8003328:	4602      	mov	r2, r0
 800332a:	701a      	strb	r2, [r3, #0]
}
 800332c:	e193      	b.n	8003656 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	015a      	lsls	r2, r3, #5
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	4413      	add	r3, r2
 8003336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b02      	cmp	r3, #2
 8003342:	f040 8106 	bne.w	8003552 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	015a      	lsls	r2, r3, #5
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	4413      	add	r3, r2
 800334e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	0151      	lsls	r1, r2, #5
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	440a      	add	r2, r1
 800335c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003360:	f023 0302 	bic.w	r3, r3, #2
 8003364:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	212c      	movs	r1, #44	; 0x2c
 800336c:	fb01 f303 	mul.w	r3, r1, r3
 8003370:	4413      	add	r3, r2
 8003372:	3361      	adds	r3, #97	; 0x61
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d109      	bne.n	800338e <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	212c      	movs	r1, #44	; 0x2c
 8003380:	fb01 f303 	mul.w	r3, r1, r3
 8003384:	4413      	add	r3, r2
 8003386:	3360      	adds	r3, #96	; 0x60
 8003388:	2201      	movs	r2, #1
 800338a:	701a      	strb	r2, [r3, #0]
 800338c:	e0c9      	b.n	8003522 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	212c      	movs	r1, #44	; 0x2c
 8003394:	fb01 f303 	mul.w	r3, r1, r3
 8003398:	4413      	add	r3, r2
 800339a:	3361      	adds	r3, #97	; 0x61
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	2b05      	cmp	r3, #5
 80033a0:	d109      	bne.n	80033b6 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	212c      	movs	r1, #44	; 0x2c
 80033a8:	fb01 f303 	mul.w	r3, r1, r3
 80033ac:	4413      	add	r3, r2
 80033ae:	3360      	adds	r3, #96	; 0x60
 80033b0:	2205      	movs	r2, #5
 80033b2:	701a      	strb	r2, [r3, #0]
 80033b4:	e0b5      	b.n	8003522 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	212c      	movs	r1, #44	; 0x2c
 80033bc:	fb01 f303 	mul.w	r3, r1, r3
 80033c0:	4413      	add	r3, r2
 80033c2:	3361      	adds	r3, #97	; 0x61
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	2b06      	cmp	r3, #6
 80033c8:	d009      	beq.n	80033de <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	212c      	movs	r1, #44	; 0x2c
 80033d0:	fb01 f303 	mul.w	r3, r1, r3
 80033d4:	4413      	add	r3, r2
 80033d6:	3361      	adds	r3, #97	; 0x61
 80033d8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80033da:	2b08      	cmp	r3, #8
 80033dc:	d150      	bne.n	8003480 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	212c      	movs	r1, #44	; 0x2c
 80033e4:	fb01 f303 	mul.w	r3, r1, r3
 80033e8:	4413      	add	r3, r2
 80033ea:	335c      	adds	r3, #92	; 0x5c
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	1c5a      	adds	r2, r3, #1
 80033f0:	6879      	ldr	r1, [r7, #4]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	202c      	movs	r0, #44	; 0x2c
 80033f6:	fb00 f303 	mul.w	r3, r0, r3
 80033fa:	440b      	add	r3, r1
 80033fc:	335c      	adds	r3, #92	; 0x5c
 80033fe:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	212c      	movs	r1, #44	; 0x2c
 8003406:	fb01 f303 	mul.w	r3, r1, r3
 800340a:	4413      	add	r3, r2
 800340c:	335c      	adds	r3, #92	; 0x5c
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2b02      	cmp	r3, #2
 8003412:	d912      	bls.n	800343a <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	212c      	movs	r1, #44	; 0x2c
 800341a:	fb01 f303 	mul.w	r3, r1, r3
 800341e:	4413      	add	r3, r2
 8003420:	335c      	adds	r3, #92	; 0x5c
 8003422:	2200      	movs	r2, #0
 8003424:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	212c      	movs	r1, #44	; 0x2c
 800342c:	fb01 f303 	mul.w	r3, r1, r3
 8003430:	4413      	add	r3, r2
 8003432:	3360      	adds	r3, #96	; 0x60
 8003434:	2204      	movs	r2, #4
 8003436:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003438:	e073      	b.n	8003522 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	212c      	movs	r1, #44	; 0x2c
 8003440:	fb01 f303 	mul.w	r3, r1, r3
 8003444:	4413      	add	r3, r2
 8003446:	3360      	adds	r3, #96	; 0x60
 8003448:	2202      	movs	r2, #2
 800344a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	015a      	lsls	r2, r3, #5
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	4413      	add	r3, r2
 8003454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003462:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800346a:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	015a      	lsls	r2, r3, #5
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	4413      	add	r3, r2
 8003474:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003478:	461a      	mov	r2, r3
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800347e:	e050      	b.n	8003522 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	212c      	movs	r1, #44	; 0x2c
 8003486:	fb01 f303 	mul.w	r3, r1, r3
 800348a:	4413      	add	r3, r2
 800348c:	3361      	adds	r3, #97	; 0x61
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	2b03      	cmp	r3, #3
 8003492:	d122      	bne.n	80034da <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	212c      	movs	r1, #44	; 0x2c
 800349a:	fb01 f303 	mul.w	r3, r1, r3
 800349e:	4413      	add	r3, r2
 80034a0:	3360      	adds	r3, #96	; 0x60
 80034a2:	2202      	movs	r2, #2
 80034a4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	015a      	lsls	r2, r3, #5
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	4413      	add	r3, r2
 80034ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80034bc:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80034c4:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	015a      	lsls	r2, r3, #5
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	4413      	add	r3, r2
 80034ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034d2:	461a      	mov	r2, r3
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	6013      	str	r3, [r2, #0]
 80034d8:	e023      	b.n	8003522 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	212c      	movs	r1, #44	; 0x2c
 80034e0:	fb01 f303 	mul.w	r3, r1, r3
 80034e4:	4413      	add	r3, r2
 80034e6:	3361      	adds	r3, #97	; 0x61
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	2b07      	cmp	r3, #7
 80034ec:	d119      	bne.n	8003522 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	212c      	movs	r1, #44	; 0x2c
 80034f4:	fb01 f303 	mul.w	r3, r1, r3
 80034f8:	4413      	add	r3, r2
 80034fa:	335c      	adds	r3, #92	; 0x5c
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	1c5a      	adds	r2, r3, #1
 8003500:	6879      	ldr	r1, [r7, #4]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	202c      	movs	r0, #44	; 0x2c
 8003506:	fb00 f303 	mul.w	r3, r0, r3
 800350a:	440b      	add	r3, r1
 800350c:	335c      	adds	r3, #92	; 0x5c
 800350e:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	212c      	movs	r1, #44	; 0x2c
 8003516:	fb01 f303 	mul.w	r3, r1, r3
 800351a:	4413      	add	r3, r2
 800351c:	3360      	adds	r3, #96	; 0x60
 800351e:	2204      	movs	r2, #4
 8003520:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	015a      	lsls	r2, r3, #5
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	4413      	add	r3, r2
 800352a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800352e:	461a      	mov	r2, r3
 8003530:	2302      	movs	r3, #2
 8003532:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	b2d9      	uxtb	r1, r3
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	202c      	movs	r0, #44	; 0x2c
 800353e:	fb00 f303 	mul.w	r3, r0, r3
 8003542:	4413      	add	r3, r2
 8003544:	3360      	adds	r3, #96	; 0x60
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	461a      	mov	r2, r3
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f00a fd46 	bl	800dfdc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003550:	e081      	b.n	8003656 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	015a      	lsls	r2, r3, #5
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	4413      	add	r3, r2
 800355a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f003 0310 	and.w	r3, r3, #16
 8003564:	2b10      	cmp	r3, #16
 8003566:	d176      	bne.n	8003656 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	212c      	movs	r1, #44	; 0x2c
 800356e:	fb01 f303 	mul.w	r3, r1, r3
 8003572:	4413      	add	r3, r2
 8003574:	333f      	adds	r3, #63	; 0x3f
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2b03      	cmp	r3, #3
 800357a:	d121      	bne.n	80035c0 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	212c      	movs	r1, #44	; 0x2c
 8003582:	fb01 f303 	mul.w	r3, r1, r3
 8003586:	4413      	add	r3, r2
 8003588:	335c      	adds	r3, #92	; 0x5c
 800358a:	2200      	movs	r2, #0
 800358c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	015a      	lsls	r2, r3, #5
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	4413      	add	r3, r2
 8003596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	0151      	lsls	r1, r2, #5
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	440a      	add	r2, r1
 80035a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035a8:	f043 0302 	orr.w	r3, r3, #2
 80035ac:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	b2d2      	uxtb	r2, r2
 80035b6:	4611      	mov	r1, r2
 80035b8:	4618      	mov	r0, r3
 80035ba:	f002 fb9c 	bl	8005cf6 <USB_HC_Halt>
 80035be:	e041      	b.n	8003644 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	212c      	movs	r1, #44	; 0x2c
 80035c6:	fb01 f303 	mul.w	r3, r1, r3
 80035ca:	4413      	add	r3, r2
 80035cc:	333f      	adds	r3, #63	; 0x3f
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d009      	beq.n	80035e8 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	212c      	movs	r1, #44	; 0x2c
 80035da:	fb01 f303 	mul.w	r3, r1, r3
 80035de:	4413      	add	r3, r2
 80035e0:	333f      	adds	r3, #63	; 0x3f
 80035e2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d12d      	bne.n	8003644 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	212c      	movs	r1, #44	; 0x2c
 80035ee:	fb01 f303 	mul.w	r3, r1, r3
 80035f2:	4413      	add	r3, r2
 80035f4:	335c      	adds	r3, #92	; 0x5c
 80035f6:	2200      	movs	r2, #0
 80035f8:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d120      	bne.n	8003644 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	212c      	movs	r1, #44	; 0x2c
 8003608:	fb01 f303 	mul.w	r3, r1, r3
 800360c:	4413      	add	r3, r2
 800360e:	3361      	adds	r3, #97	; 0x61
 8003610:	2203      	movs	r2, #3
 8003612:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	015a      	lsls	r2, r3, #5
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	4413      	add	r3, r2
 800361c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	0151      	lsls	r1, r2, #5
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	440a      	add	r2, r1
 800362a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800362e:	f043 0302 	orr.w	r3, r3, #2
 8003632:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	b2d2      	uxtb	r2, r2
 800363c:	4611      	mov	r1, r2
 800363e:	4618      	mov	r0, r3
 8003640:	f002 fb59 	bl	8005cf6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	015a      	lsls	r2, r3, #5
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	4413      	add	r3, r2
 800364c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003650:	461a      	mov	r2, r3
 8003652:	2310      	movs	r3, #16
 8003654:	6093      	str	r3, [r2, #8]
}
 8003656:	bf00      	nop
 8003658:	3718      	adds	r7, #24
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b088      	sub	sp, #32
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
 8003666:	460b      	mov	r3, r1
 8003668:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003674:	78fb      	ldrb	r3, [r7, #3]
 8003676:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	015a      	lsls	r2, r3, #5
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	4413      	add	r3, r2
 8003680:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f003 0304 	and.w	r3, r3, #4
 800368a:	2b04      	cmp	r3, #4
 800368c:	d119      	bne.n	80036c2 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	015a      	lsls	r2, r3, #5
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	4413      	add	r3, r2
 8003696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800369a:	461a      	mov	r2, r3
 800369c:	2304      	movs	r3, #4
 800369e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	015a      	lsls	r2, r3, #5
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	4413      	add	r3, r2
 80036a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	0151      	lsls	r1, r2, #5
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	440a      	add	r2, r1
 80036b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036ba:	f043 0302 	orr.w	r3, r3, #2
 80036be:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80036c0:	e3ca      	b.n	8003e58 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	015a      	lsls	r2, r3, #5
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	4413      	add	r3, r2
 80036ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f003 0320 	and.w	r3, r3, #32
 80036d4:	2b20      	cmp	r3, #32
 80036d6:	d13e      	bne.n	8003756 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	015a      	lsls	r2, r3, #5
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	4413      	add	r3, r2
 80036e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e4:	461a      	mov	r2, r3
 80036e6:	2320      	movs	r3, #32
 80036e8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	212c      	movs	r1, #44	; 0x2c
 80036f0:	fb01 f303 	mul.w	r3, r1, r3
 80036f4:	4413      	add	r3, r2
 80036f6:	333d      	adds	r3, #61	; 0x3d
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	f040 83ac 	bne.w	8003e58 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	212c      	movs	r1, #44	; 0x2c
 8003706:	fb01 f303 	mul.w	r3, r1, r3
 800370a:	4413      	add	r3, r2
 800370c:	333d      	adds	r3, #61	; 0x3d
 800370e:	2200      	movs	r2, #0
 8003710:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	212c      	movs	r1, #44	; 0x2c
 8003718:	fb01 f303 	mul.w	r3, r1, r3
 800371c:	4413      	add	r3, r2
 800371e:	3360      	adds	r3, #96	; 0x60
 8003720:	2202      	movs	r2, #2
 8003722:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	015a      	lsls	r2, r3, #5
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	4413      	add	r3, r2
 800372c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	0151      	lsls	r1, r2, #5
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	440a      	add	r2, r1
 800373a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800373e:	f043 0302 	orr.w	r3, r3, #2
 8003742:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	b2d2      	uxtb	r2, r2
 800374c:	4611      	mov	r1, r2
 800374e:	4618      	mov	r0, r3
 8003750:	f002 fad1 	bl	8005cf6 <USB_HC_Halt>
}
 8003754:	e380      	b.n	8003e58 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	015a      	lsls	r2, r3, #5
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	4413      	add	r3, r2
 800375e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800376c:	d122      	bne.n	80037b4 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	015a      	lsls	r2, r3, #5
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	4413      	add	r3, r2
 8003776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	0151      	lsls	r1, r2, #5
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	440a      	add	r2, r1
 8003784:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003788:	f043 0302 	orr.w	r3, r3, #2
 800378c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	b2d2      	uxtb	r2, r2
 8003796:	4611      	mov	r1, r2
 8003798:	4618      	mov	r0, r3
 800379a:	f002 faac 	bl	8005cf6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	015a      	lsls	r2, r3, #5
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	4413      	add	r3, r2
 80037a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037aa:	461a      	mov	r2, r3
 80037ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037b0:	6093      	str	r3, [r2, #8]
}
 80037b2:	e351      	b.n	8003e58 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	015a      	lsls	r2, r3, #5
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	4413      	add	r3, r2
 80037bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d150      	bne.n	800386c <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	212c      	movs	r1, #44	; 0x2c
 80037d0:	fb01 f303 	mul.w	r3, r1, r3
 80037d4:	4413      	add	r3, r2
 80037d6:	335c      	adds	r3, #92	; 0x5c
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	015a      	lsls	r2, r3, #5
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	4413      	add	r3, r2
 80037e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ee:	2b40      	cmp	r3, #64	; 0x40
 80037f0:	d111      	bne.n	8003816 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	212c      	movs	r1, #44	; 0x2c
 80037f8:	fb01 f303 	mul.w	r3, r1, r3
 80037fc:	4413      	add	r3, r2
 80037fe:	333d      	adds	r3, #61	; 0x3d
 8003800:	2201      	movs	r2, #1
 8003802:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	015a      	lsls	r2, r3, #5
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	4413      	add	r3, r2
 800380c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003810:	461a      	mov	r2, r3
 8003812:	2340      	movs	r3, #64	; 0x40
 8003814:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	015a      	lsls	r2, r3, #5
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	4413      	add	r3, r2
 800381e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	0151      	lsls	r1, r2, #5
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	440a      	add	r2, r1
 800382c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003830:	f043 0302 	orr.w	r3, r3, #2
 8003834:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	b2d2      	uxtb	r2, r2
 800383e:	4611      	mov	r1, r2
 8003840:	4618      	mov	r0, r3
 8003842:	f002 fa58 	bl	8005cf6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	015a      	lsls	r2, r3, #5
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	4413      	add	r3, r2
 800384e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003852:	461a      	mov	r2, r3
 8003854:	2301      	movs	r3, #1
 8003856:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	212c      	movs	r1, #44	; 0x2c
 800385e:	fb01 f303 	mul.w	r3, r1, r3
 8003862:	4413      	add	r3, r2
 8003864:	3361      	adds	r3, #97	; 0x61
 8003866:	2201      	movs	r2, #1
 8003868:	701a      	strb	r2, [r3, #0]
}
 800386a:	e2f5      	b.n	8003e58 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	015a      	lsls	r2, r3, #5
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	4413      	add	r3, r2
 8003874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387e:	2b40      	cmp	r3, #64	; 0x40
 8003880:	d13c      	bne.n	80038fc <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	212c      	movs	r1, #44	; 0x2c
 8003888:	fb01 f303 	mul.w	r3, r1, r3
 800388c:	4413      	add	r3, r2
 800388e:	3361      	adds	r3, #97	; 0x61
 8003890:	2204      	movs	r2, #4
 8003892:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	212c      	movs	r1, #44	; 0x2c
 800389a:	fb01 f303 	mul.w	r3, r1, r3
 800389e:	4413      	add	r3, r2
 80038a0:	333d      	adds	r3, #61	; 0x3d
 80038a2:	2201      	movs	r2, #1
 80038a4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	212c      	movs	r1, #44	; 0x2c
 80038ac:	fb01 f303 	mul.w	r3, r1, r3
 80038b0:	4413      	add	r3, r2
 80038b2:	335c      	adds	r3, #92	; 0x5c
 80038b4:	2200      	movs	r2, #0
 80038b6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	015a      	lsls	r2, r3, #5
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	4413      	add	r3, r2
 80038c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	0151      	lsls	r1, r2, #5
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	440a      	add	r2, r1
 80038ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038d2:	f043 0302 	orr.w	r3, r3, #2
 80038d6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	b2d2      	uxtb	r2, r2
 80038e0:	4611      	mov	r1, r2
 80038e2:	4618      	mov	r0, r3
 80038e4:	f002 fa07 	bl	8005cf6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	015a      	lsls	r2, r3, #5
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	4413      	add	r3, r2
 80038f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038f4:	461a      	mov	r2, r3
 80038f6:	2340      	movs	r3, #64	; 0x40
 80038f8:	6093      	str	r3, [r2, #8]
}
 80038fa:	e2ad      	b.n	8003e58 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	015a      	lsls	r2, r3, #5
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	4413      	add	r3, r2
 8003904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f003 0308 	and.w	r3, r3, #8
 800390e:	2b08      	cmp	r3, #8
 8003910:	d12a      	bne.n	8003968 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	015a      	lsls	r2, r3, #5
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	4413      	add	r3, r2
 800391a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800391e:	461a      	mov	r2, r3
 8003920:	2308      	movs	r3, #8
 8003922:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	015a      	lsls	r2, r3, #5
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	4413      	add	r3, r2
 800392c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	697a      	ldr	r2, [r7, #20]
 8003934:	0151      	lsls	r1, r2, #5
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	440a      	add	r2, r1
 800393a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800393e:	f043 0302 	orr.w	r3, r3, #2
 8003942:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	b2d2      	uxtb	r2, r2
 800394c:	4611      	mov	r1, r2
 800394e:	4618      	mov	r0, r3
 8003950:	f002 f9d1 	bl	8005cf6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	212c      	movs	r1, #44	; 0x2c
 800395a:	fb01 f303 	mul.w	r3, r1, r3
 800395e:	4413      	add	r3, r2
 8003960:	3361      	adds	r3, #97	; 0x61
 8003962:	2205      	movs	r2, #5
 8003964:	701a      	strb	r2, [r3, #0]
}
 8003966:	e277      	b.n	8003e58 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	015a      	lsls	r2, r3, #5
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	4413      	add	r3, r2
 8003970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f003 0310 	and.w	r3, r3, #16
 800397a:	2b10      	cmp	r3, #16
 800397c:	d150      	bne.n	8003a20 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	212c      	movs	r1, #44	; 0x2c
 8003984:	fb01 f303 	mul.w	r3, r1, r3
 8003988:	4413      	add	r3, r2
 800398a:	335c      	adds	r3, #92	; 0x5c
 800398c:	2200      	movs	r2, #0
 800398e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	212c      	movs	r1, #44	; 0x2c
 8003996:	fb01 f303 	mul.w	r3, r1, r3
 800399a:	4413      	add	r3, r2
 800399c:	3361      	adds	r3, #97	; 0x61
 800399e:	2203      	movs	r2, #3
 80039a0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	212c      	movs	r1, #44	; 0x2c
 80039a8:	fb01 f303 	mul.w	r3, r1, r3
 80039ac:	4413      	add	r3, r2
 80039ae:	333d      	adds	r3, #61	; 0x3d
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d112      	bne.n	80039dc <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	212c      	movs	r1, #44	; 0x2c
 80039bc:	fb01 f303 	mul.w	r3, r1, r3
 80039c0:	4413      	add	r3, r2
 80039c2:	333c      	adds	r3, #60	; 0x3c
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d108      	bne.n	80039dc <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	212c      	movs	r1, #44	; 0x2c
 80039d0:	fb01 f303 	mul.w	r3, r1, r3
 80039d4:	4413      	add	r3, r2
 80039d6:	333d      	adds	r3, #61	; 0x3d
 80039d8:	2201      	movs	r2, #1
 80039da:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	015a      	lsls	r2, r3, #5
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	4413      	add	r3, r2
 80039e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	0151      	lsls	r1, r2, #5
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	440a      	add	r2, r1
 80039f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039f6:	f043 0302 	orr.w	r3, r3, #2
 80039fa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	b2d2      	uxtb	r2, r2
 8003a04:	4611      	mov	r1, r2
 8003a06:	4618      	mov	r0, r3
 8003a08:	f002 f975 	bl	8005cf6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	015a      	lsls	r2, r3, #5
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	4413      	add	r3, r2
 8003a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a18:	461a      	mov	r2, r3
 8003a1a:	2310      	movs	r3, #16
 8003a1c:	6093      	str	r3, [r2, #8]
}
 8003a1e:	e21b      	b.n	8003e58 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	015a      	lsls	r2, r3, #5
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	4413      	add	r3, r2
 8003a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a32:	2b80      	cmp	r3, #128	; 0x80
 8003a34:	d174      	bne.n	8003b20 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d121      	bne.n	8003a82 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	212c      	movs	r1, #44	; 0x2c
 8003a44:	fb01 f303 	mul.w	r3, r1, r3
 8003a48:	4413      	add	r3, r2
 8003a4a:	3361      	adds	r3, #97	; 0x61
 8003a4c:	2206      	movs	r2, #6
 8003a4e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	015a      	lsls	r2, r3, #5
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	4413      	add	r3, r2
 8003a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	697a      	ldr	r2, [r7, #20]
 8003a60:	0151      	lsls	r1, r2, #5
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	440a      	add	r2, r1
 8003a66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a6a:	f043 0302 	orr.w	r3, r3, #2
 8003a6e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	b2d2      	uxtb	r2, r2
 8003a78:	4611      	mov	r1, r2
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f002 f93b 	bl	8005cf6 <USB_HC_Halt>
 8003a80:	e044      	b.n	8003b0c <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	212c      	movs	r1, #44	; 0x2c
 8003a88:	fb01 f303 	mul.w	r3, r1, r3
 8003a8c:	4413      	add	r3, r2
 8003a8e:	335c      	adds	r3, #92	; 0x5c
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	1c5a      	adds	r2, r3, #1
 8003a94:	6879      	ldr	r1, [r7, #4]
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	202c      	movs	r0, #44	; 0x2c
 8003a9a:	fb00 f303 	mul.w	r3, r0, r3
 8003a9e:	440b      	add	r3, r1
 8003aa0:	335c      	adds	r3, #92	; 0x5c
 8003aa2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	212c      	movs	r1, #44	; 0x2c
 8003aaa:	fb01 f303 	mul.w	r3, r1, r3
 8003aae:	4413      	add	r3, r2
 8003ab0:	335c      	adds	r3, #92	; 0x5c
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d920      	bls.n	8003afa <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	212c      	movs	r1, #44	; 0x2c
 8003abe:	fb01 f303 	mul.w	r3, r1, r3
 8003ac2:	4413      	add	r3, r2
 8003ac4:	335c      	adds	r3, #92	; 0x5c
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	212c      	movs	r1, #44	; 0x2c
 8003ad0:	fb01 f303 	mul.w	r3, r1, r3
 8003ad4:	4413      	add	r3, r2
 8003ad6:	3360      	adds	r3, #96	; 0x60
 8003ad8:	2204      	movs	r2, #4
 8003ada:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	b2d9      	uxtb	r1, r3
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	202c      	movs	r0, #44	; 0x2c
 8003ae6:	fb00 f303 	mul.w	r3, r0, r3
 8003aea:	4413      	add	r3, r2
 8003aec:	3360      	adds	r3, #96	; 0x60
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	461a      	mov	r2, r3
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f00a fa72 	bl	800dfdc <HAL_HCD_HC_NotifyURBChange_Callback>
 8003af8:	e008      	b.n	8003b0c <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	212c      	movs	r1, #44	; 0x2c
 8003b00:	fb01 f303 	mul.w	r3, r1, r3
 8003b04:	4413      	add	r3, r2
 8003b06:	3360      	adds	r3, #96	; 0x60
 8003b08:	2202      	movs	r2, #2
 8003b0a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	015a      	lsls	r2, r3, #5
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	4413      	add	r3, r2
 8003b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b18:	461a      	mov	r2, r3
 8003b1a:	2380      	movs	r3, #128	; 0x80
 8003b1c:	6093      	str	r3, [r2, #8]
}
 8003b1e:	e19b      	b.n	8003e58 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	015a      	lsls	r2, r3, #5
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	4413      	add	r3, r2
 8003b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b36:	d134      	bne.n	8003ba2 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	015a      	lsls	r2, r3, #5
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	4413      	add	r3, r2
 8003b40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	0151      	lsls	r1, r2, #5
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	440a      	add	r2, r1
 8003b4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b52:	f043 0302 	orr.w	r3, r3, #2
 8003b56:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	b2d2      	uxtb	r2, r2
 8003b60:	4611      	mov	r1, r2
 8003b62:	4618      	mov	r0, r3
 8003b64:	f002 f8c7 	bl	8005cf6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	015a      	lsls	r2, r3, #5
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	4413      	add	r3, r2
 8003b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b74:	461a      	mov	r2, r3
 8003b76:	2310      	movs	r3, #16
 8003b78:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	015a      	lsls	r2, r3, #5
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	4413      	add	r3, r2
 8003b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b86:	461a      	mov	r2, r3
 8003b88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b8c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	212c      	movs	r1, #44	; 0x2c
 8003b94:	fb01 f303 	mul.w	r3, r1, r3
 8003b98:	4413      	add	r3, r2
 8003b9a:	3361      	adds	r3, #97	; 0x61
 8003b9c:	2208      	movs	r2, #8
 8003b9e:	701a      	strb	r2, [r3, #0]
}
 8003ba0:	e15a      	b.n	8003e58 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	015a      	lsls	r2, r3, #5
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	4413      	add	r3, r2
 8003baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	f040 814f 	bne.w	8003e58 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	015a      	lsls	r2, r3, #5
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	0151      	lsls	r1, r2, #5
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	440a      	add	r2, r1
 8003bd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bd4:	f023 0302 	bic.w	r3, r3, #2
 8003bd8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	212c      	movs	r1, #44	; 0x2c
 8003be0:	fb01 f303 	mul.w	r3, r1, r3
 8003be4:	4413      	add	r3, r2
 8003be6:	3361      	adds	r3, #97	; 0x61
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d17d      	bne.n	8003cea <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	212c      	movs	r1, #44	; 0x2c
 8003bf4:	fb01 f303 	mul.w	r3, r1, r3
 8003bf8:	4413      	add	r3, r2
 8003bfa:	3360      	adds	r3, #96	; 0x60
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	212c      	movs	r1, #44	; 0x2c
 8003c06:	fb01 f303 	mul.w	r3, r1, r3
 8003c0a:	4413      	add	r3, r2
 8003c0c:	333f      	adds	r3, #63	; 0x3f
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d00a      	beq.n	8003c2a <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	212c      	movs	r1, #44	; 0x2c
 8003c1a:	fb01 f303 	mul.w	r3, r1, r3
 8003c1e:	4413      	add	r3, r2
 8003c20:	333f      	adds	r3, #63	; 0x3f
 8003c22:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003c24:	2b03      	cmp	r3, #3
 8003c26:	f040 8100 	bne.w	8003e2a <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d113      	bne.n	8003c5a <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	212c      	movs	r1, #44	; 0x2c
 8003c38:	fb01 f303 	mul.w	r3, r1, r3
 8003c3c:	4413      	add	r3, r2
 8003c3e:	3355      	adds	r3, #85	; 0x55
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	f083 0301 	eor.w	r3, r3, #1
 8003c46:	b2d8      	uxtb	r0, r3
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	212c      	movs	r1, #44	; 0x2c
 8003c4e:	fb01 f303 	mul.w	r3, r1, r3
 8003c52:	4413      	add	r3, r2
 8003c54:	3355      	adds	r3, #85	; 0x55
 8003c56:	4602      	mov	r2, r0
 8003c58:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	f040 80e3 	bne.w	8003e2a <HCD_HC_OUT_IRQHandler+0x7cc>
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	212c      	movs	r1, #44	; 0x2c
 8003c6a:	fb01 f303 	mul.w	r3, r1, r3
 8003c6e:	4413      	add	r3, r2
 8003c70:	334c      	adds	r3, #76	; 0x4c
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f000 80d8 	beq.w	8003e2a <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	212c      	movs	r1, #44	; 0x2c
 8003c80:	fb01 f303 	mul.w	r3, r1, r3
 8003c84:	4413      	add	r3, r2
 8003c86:	334c      	adds	r3, #76	; 0x4c
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	6879      	ldr	r1, [r7, #4]
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	202c      	movs	r0, #44	; 0x2c
 8003c90:	fb00 f202 	mul.w	r2, r0, r2
 8003c94:	440a      	add	r2, r1
 8003c96:	3240      	adds	r2, #64	; 0x40
 8003c98:	8812      	ldrh	r2, [r2, #0]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	6879      	ldr	r1, [r7, #4]
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	202c      	movs	r0, #44	; 0x2c
 8003ca4:	fb00 f202 	mul.w	r2, r0, r2
 8003ca8:	440a      	add	r2, r1
 8003caa:	3240      	adds	r2, #64	; 0x40
 8003cac:	8812      	ldrh	r2, [r2, #0]
 8003cae:	fbb3 f3f2 	udiv	r3, r3, r2
 8003cb2:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f000 80b5 	beq.w	8003e2a <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	212c      	movs	r1, #44	; 0x2c
 8003cc6:	fb01 f303 	mul.w	r3, r1, r3
 8003cca:	4413      	add	r3, r2
 8003ccc:	3355      	adds	r3, #85	; 0x55
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	f083 0301 	eor.w	r3, r3, #1
 8003cd4:	b2d8      	uxtb	r0, r3
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	212c      	movs	r1, #44	; 0x2c
 8003cdc:	fb01 f303 	mul.w	r3, r1, r3
 8003ce0:	4413      	add	r3, r2
 8003ce2:	3355      	adds	r3, #85	; 0x55
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	701a      	strb	r2, [r3, #0]
 8003ce8:	e09f      	b.n	8003e2a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	212c      	movs	r1, #44	; 0x2c
 8003cf0:	fb01 f303 	mul.w	r3, r1, r3
 8003cf4:	4413      	add	r3, r2
 8003cf6:	3361      	adds	r3, #97	; 0x61
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	2b03      	cmp	r3, #3
 8003cfc:	d109      	bne.n	8003d12 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	212c      	movs	r1, #44	; 0x2c
 8003d04:	fb01 f303 	mul.w	r3, r1, r3
 8003d08:	4413      	add	r3, r2
 8003d0a:	3360      	adds	r3, #96	; 0x60
 8003d0c:	2202      	movs	r2, #2
 8003d0e:	701a      	strb	r2, [r3, #0]
 8003d10:	e08b      	b.n	8003e2a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	212c      	movs	r1, #44	; 0x2c
 8003d18:	fb01 f303 	mul.w	r3, r1, r3
 8003d1c:	4413      	add	r3, r2
 8003d1e:	3361      	adds	r3, #97	; 0x61
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	2b04      	cmp	r3, #4
 8003d24:	d109      	bne.n	8003d3a <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	212c      	movs	r1, #44	; 0x2c
 8003d2c:	fb01 f303 	mul.w	r3, r1, r3
 8003d30:	4413      	add	r3, r2
 8003d32:	3360      	adds	r3, #96	; 0x60
 8003d34:	2202      	movs	r2, #2
 8003d36:	701a      	strb	r2, [r3, #0]
 8003d38:	e077      	b.n	8003e2a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	212c      	movs	r1, #44	; 0x2c
 8003d40:	fb01 f303 	mul.w	r3, r1, r3
 8003d44:	4413      	add	r3, r2
 8003d46:	3361      	adds	r3, #97	; 0x61
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	2b05      	cmp	r3, #5
 8003d4c:	d109      	bne.n	8003d62 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	212c      	movs	r1, #44	; 0x2c
 8003d54:	fb01 f303 	mul.w	r3, r1, r3
 8003d58:	4413      	add	r3, r2
 8003d5a:	3360      	adds	r3, #96	; 0x60
 8003d5c:	2205      	movs	r2, #5
 8003d5e:	701a      	strb	r2, [r3, #0]
 8003d60:	e063      	b.n	8003e2a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	212c      	movs	r1, #44	; 0x2c
 8003d68:	fb01 f303 	mul.w	r3, r1, r3
 8003d6c:	4413      	add	r3, r2
 8003d6e:	3361      	adds	r3, #97	; 0x61
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	2b06      	cmp	r3, #6
 8003d74:	d009      	beq.n	8003d8a <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	212c      	movs	r1, #44	; 0x2c
 8003d7c:	fb01 f303 	mul.w	r3, r1, r3
 8003d80:	4413      	add	r3, r2
 8003d82:	3361      	adds	r3, #97	; 0x61
 8003d84:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003d86:	2b08      	cmp	r3, #8
 8003d88:	d14f      	bne.n	8003e2a <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	212c      	movs	r1, #44	; 0x2c
 8003d90:	fb01 f303 	mul.w	r3, r1, r3
 8003d94:	4413      	add	r3, r2
 8003d96:	335c      	adds	r3, #92	; 0x5c
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	1c5a      	adds	r2, r3, #1
 8003d9c:	6879      	ldr	r1, [r7, #4]
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	202c      	movs	r0, #44	; 0x2c
 8003da2:	fb00 f303 	mul.w	r3, r0, r3
 8003da6:	440b      	add	r3, r1
 8003da8:	335c      	adds	r3, #92	; 0x5c
 8003daa:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	212c      	movs	r1, #44	; 0x2c
 8003db2:	fb01 f303 	mul.w	r3, r1, r3
 8003db6:	4413      	add	r3, r2
 8003db8:	335c      	adds	r3, #92	; 0x5c
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d912      	bls.n	8003de6 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	212c      	movs	r1, #44	; 0x2c
 8003dc6:	fb01 f303 	mul.w	r3, r1, r3
 8003dca:	4413      	add	r3, r2
 8003dcc:	335c      	adds	r3, #92	; 0x5c
 8003dce:	2200      	movs	r2, #0
 8003dd0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	212c      	movs	r1, #44	; 0x2c
 8003dd8:	fb01 f303 	mul.w	r3, r1, r3
 8003ddc:	4413      	add	r3, r2
 8003dde:	3360      	adds	r3, #96	; 0x60
 8003de0:	2204      	movs	r2, #4
 8003de2:	701a      	strb	r2, [r3, #0]
 8003de4:	e021      	b.n	8003e2a <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	212c      	movs	r1, #44	; 0x2c
 8003dec:	fb01 f303 	mul.w	r3, r1, r3
 8003df0:	4413      	add	r3, r2
 8003df2:	3360      	adds	r3, #96	; 0x60
 8003df4:	2202      	movs	r2, #2
 8003df6:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	015a      	lsls	r2, r3, #5
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	4413      	add	r3, r2
 8003e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e0e:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e16:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	015a      	lsls	r2, r3, #5
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	4413      	add	r3, r2
 8003e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e24:	461a      	mov	r2, r3
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	015a      	lsls	r2, r3, #5
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	4413      	add	r3, r2
 8003e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e36:	461a      	mov	r2, r3
 8003e38:	2302      	movs	r3, #2
 8003e3a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	b2d9      	uxtb	r1, r3
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	202c      	movs	r0, #44	; 0x2c
 8003e46:	fb00 f303 	mul.w	r3, r0, r3
 8003e4a:	4413      	add	r3, r2
 8003e4c:	3360      	adds	r3, #96	; 0x60
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	461a      	mov	r2, r3
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f00a f8c2 	bl	800dfdc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003e58:	bf00      	nop
 8003e5a:	3720      	adds	r7, #32
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b08a      	sub	sp, #40	; 0x28
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e70:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	f003 030f 	and.w	r3, r3, #15
 8003e80:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	0c5b      	lsrs	r3, r3, #17
 8003e86:	f003 030f 	and.w	r3, r3, #15
 8003e8a:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	091b      	lsrs	r3, r3, #4
 8003e90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e94:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d004      	beq.n	8003ea6 <HCD_RXQLVL_IRQHandler+0x46>
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	2b05      	cmp	r3, #5
 8003ea0:	f000 80a9 	beq.w	8003ff6 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003ea4:	e0aa      	b.n	8003ffc <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f000 80a6 	beq.w	8003ffa <HCD_RXQLVL_IRQHandler+0x19a>
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	212c      	movs	r1, #44	; 0x2c
 8003eb4:	fb01 f303 	mul.w	r3, r1, r3
 8003eb8:	4413      	add	r3, r2
 8003eba:	3344      	adds	r3, #68	; 0x44
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f000 809b 	beq.w	8003ffa <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	212c      	movs	r1, #44	; 0x2c
 8003eca:	fb01 f303 	mul.w	r3, r1, r3
 8003ece:	4413      	add	r3, r2
 8003ed0:	3350      	adds	r3, #80	; 0x50
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	441a      	add	r2, r3
 8003ed8:	6879      	ldr	r1, [r7, #4]
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	202c      	movs	r0, #44	; 0x2c
 8003ede:	fb00 f303 	mul.w	r3, r0, r3
 8003ee2:	440b      	add	r3, r1
 8003ee4:	334c      	adds	r3, #76	; 0x4c
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d87a      	bhi.n	8003fe2 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6818      	ldr	r0, [r3, #0]
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	212c      	movs	r1, #44	; 0x2c
 8003ef6:	fb01 f303 	mul.w	r3, r1, r3
 8003efa:	4413      	add	r3, r2
 8003efc:	3344      	adds	r3, #68	; 0x44
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	b292      	uxth	r2, r2
 8003f04:	4619      	mov	r1, r3
 8003f06:	f001 fa6f 	bl	80053e8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	212c      	movs	r1, #44	; 0x2c
 8003f10:	fb01 f303 	mul.w	r3, r1, r3
 8003f14:	4413      	add	r3, r2
 8003f16:	3344      	adds	r3, #68	; 0x44
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	441a      	add	r2, r3
 8003f1e:	6879      	ldr	r1, [r7, #4]
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	202c      	movs	r0, #44	; 0x2c
 8003f24:	fb00 f303 	mul.w	r3, r0, r3
 8003f28:	440b      	add	r3, r1
 8003f2a:	3344      	adds	r3, #68	; 0x44
 8003f2c:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	212c      	movs	r1, #44	; 0x2c
 8003f34:	fb01 f303 	mul.w	r3, r1, r3
 8003f38:	4413      	add	r3, r2
 8003f3a:	3350      	adds	r3, #80	; 0x50
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	441a      	add	r2, r3
 8003f42:	6879      	ldr	r1, [r7, #4]
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	202c      	movs	r0, #44	; 0x2c
 8003f48:	fb00 f303 	mul.w	r3, r0, r3
 8003f4c:	440b      	add	r3, r1
 8003f4e:	3350      	adds	r3, #80	; 0x50
 8003f50:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	015a      	lsls	r2, r3, #5
 8003f56:	6a3b      	ldr	r3, [r7, #32]
 8003f58:	4413      	add	r3, r2
 8003f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	0cdb      	lsrs	r3, r3, #19
 8003f62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f66:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	212c      	movs	r1, #44	; 0x2c
 8003f6e:	fb01 f303 	mul.w	r3, r1, r3
 8003f72:	4413      	add	r3, r2
 8003f74:	3340      	adds	r3, #64	; 0x40
 8003f76:	881b      	ldrh	r3, [r3, #0]
 8003f78:	461a      	mov	r2, r3
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d13c      	bne.n	8003ffa <HCD_RXQLVL_IRQHandler+0x19a>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d039      	beq.n	8003ffa <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	015a      	lsls	r2, r3, #5
 8003f8a:	6a3b      	ldr	r3, [r7, #32]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f9c:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003fa4:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	015a      	lsls	r2, r3, #5
 8003faa:	6a3b      	ldr	r3, [r7, #32]
 8003fac:	4413      	add	r3, r2
 8003fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	212c      	movs	r1, #44	; 0x2c
 8003fbe:	fb01 f303 	mul.w	r3, r1, r3
 8003fc2:	4413      	add	r3, r2
 8003fc4:	3354      	adds	r3, #84	; 0x54
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	f083 0301 	eor.w	r3, r3, #1
 8003fcc:	b2d8      	uxtb	r0, r3
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	212c      	movs	r1, #44	; 0x2c
 8003fd4:	fb01 f303 	mul.w	r3, r1, r3
 8003fd8:	4413      	add	r3, r2
 8003fda:	3354      	adds	r3, #84	; 0x54
 8003fdc:	4602      	mov	r2, r0
 8003fde:	701a      	strb	r2, [r3, #0]
      break;
 8003fe0:	e00b      	b.n	8003ffa <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	212c      	movs	r1, #44	; 0x2c
 8003fe8:	fb01 f303 	mul.w	r3, r1, r3
 8003fec:	4413      	add	r3, r2
 8003fee:	3360      	adds	r3, #96	; 0x60
 8003ff0:	2204      	movs	r2, #4
 8003ff2:	701a      	strb	r2, [r3, #0]
      break;
 8003ff4:	e001      	b.n	8003ffa <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003ff6:	bf00      	nop
 8003ff8:	e000      	b.n	8003ffc <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003ffa:	bf00      	nop
  }
}
 8003ffc:	bf00      	nop
 8003ffe:	3728      	adds	r7, #40	; 0x28
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004030:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b02      	cmp	r3, #2
 800403a:	d10b      	bne.n	8004054 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b01      	cmp	r3, #1
 8004044:	d102      	bne.n	800404c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f009 ffac 	bl	800dfa4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	f043 0302 	orr.w	r3, r3, #2
 8004052:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f003 0308 	and.w	r3, r3, #8
 800405a:	2b08      	cmp	r3, #8
 800405c:	d132      	bne.n	80040c4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	f043 0308 	orr.w	r3, r3, #8
 8004064:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f003 0304 	and.w	r3, r3, #4
 800406c:	2b04      	cmp	r3, #4
 800406e:	d126      	bne.n	80040be <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	2b02      	cmp	r3, #2
 8004076:	d113      	bne.n	80040a0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800407e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004082:	d106      	bne.n	8004092 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2102      	movs	r1, #2
 800408a:	4618      	mov	r0, r3
 800408c:	f001 fb0c 	bl	80056a8 <USB_InitFSLSPClkSel>
 8004090:	e011      	b.n	80040b6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2101      	movs	r1, #1
 8004098:	4618      	mov	r0, r3
 800409a:	f001 fb05 	bl	80056a8 <USB_InitFSLSPClkSel>
 800409e:	e00a      	b.n	80040b6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d106      	bne.n	80040b6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040ae:	461a      	mov	r2, r3
 80040b0:	f64e 2360 	movw	r3, #60000	; 0xea60
 80040b4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f009 ff9e 	bl	800dff8 <HAL_HCD_PortEnabled_Callback>
 80040bc:	e002      	b.n	80040c4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f009 ffa8 	bl	800e014 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f003 0320 	and.w	r3, r3, #32
 80040ca:	2b20      	cmp	r3, #32
 80040cc:	d103      	bne.n	80040d6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	f043 0320 	orr.w	r3, r3, #32
 80040d4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80040dc:	461a      	mov	r2, r3
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	6013      	str	r3, [r2, #0]
}
 80040e2:	bf00      	nop
 80040e4:	3718      	adds	r7, #24
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
	...

080040ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e264      	b.n	80045c8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b00      	cmp	r3, #0
 8004108:	d075      	beq.n	80041f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800410a:	4ba3      	ldr	r3, [pc, #652]	; (8004398 <HAL_RCC_OscConfig+0x2ac>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f003 030c 	and.w	r3, r3, #12
 8004112:	2b04      	cmp	r3, #4
 8004114:	d00c      	beq.n	8004130 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004116:	4ba0      	ldr	r3, [pc, #640]	; (8004398 <HAL_RCC_OscConfig+0x2ac>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800411e:	2b08      	cmp	r3, #8
 8004120:	d112      	bne.n	8004148 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004122:	4b9d      	ldr	r3, [pc, #628]	; (8004398 <HAL_RCC_OscConfig+0x2ac>)
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800412a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800412e:	d10b      	bne.n	8004148 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004130:	4b99      	ldr	r3, [pc, #612]	; (8004398 <HAL_RCC_OscConfig+0x2ac>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d05b      	beq.n	80041f4 <HAL_RCC_OscConfig+0x108>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d157      	bne.n	80041f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e23f      	b.n	80045c8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004150:	d106      	bne.n	8004160 <HAL_RCC_OscConfig+0x74>
 8004152:	4b91      	ldr	r3, [pc, #580]	; (8004398 <HAL_RCC_OscConfig+0x2ac>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a90      	ldr	r2, [pc, #576]	; (8004398 <HAL_RCC_OscConfig+0x2ac>)
 8004158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800415c:	6013      	str	r3, [r2, #0]
 800415e:	e01d      	b.n	800419c <HAL_RCC_OscConfig+0xb0>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004168:	d10c      	bne.n	8004184 <HAL_RCC_OscConfig+0x98>
 800416a:	4b8b      	ldr	r3, [pc, #556]	; (8004398 <HAL_RCC_OscConfig+0x2ac>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a8a      	ldr	r2, [pc, #552]	; (8004398 <HAL_RCC_OscConfig+0x2ac>)
 8004170:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004174:	6013      	str	r3, [r2, #0]
 8004176:	4b88      	ldr	r3, [pc, #544]	; (8004398 <HAL_RCC_OscConfig+0x2ac>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a87      	ldr	r2, [pc, #540]	; (8004398 <HAL_RCC_OscConfig+0x2ac>)
 800417c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004180:	6013      	str	r3, [r2, #0]
 8004182:	e00b      	b.n	800419c <HAL_RCC_OscConfig+0xb0>
 8004184:	4b84      	ldr	r3, [pc, #528]	; (8004398 <HAL_RCC_OscConfig+0x2ac>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a83      	ldr	r2, [pc, #524]	; (8004398 <HAL_RCC_OscConfig+0x2ac>)
 800418a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800418e:	6013      	str	r3, [r2, #0]
 8004190:	4b81      	ldr	r3, [pc, #516]	; (8004398 <HAL_RCC_OscConfig+0x2ac>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a80      	ldr	r2, [pc, #512]	; (8004398 <HAL_RCC_OscConfig+0x2ac>)
 8004196:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800419a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d013      	beq.n	80041cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a4:	f7fd fc56 	bl	8001a54 <HAL_GetTick>
 80041a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041aa:	e008      	b.n	80041be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041ac:	f7fd fc52 	bl	8001a54 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b64      	cmp	r3, #100	; 0x64
 80041b8:	d901      	bls.n	80041be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e204      	b.n	80045c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041be:	4b76      	ldr	r3, [pc, #472]	; (8004398 <HAL_RCC_OscConfig+0x2ac>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d0f0      	beq.n	80041ac <HAL_RCC_OscConfig+0xc0>
 80041ca:	e014      	b.n	80041f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041cc:	f7fd fc42 	bl	8001a54 <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041d2:	e008      	b.n	80041e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041d4:	f7fd fc3e 	bl	8001a54 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b64      	cmp	r3, #100	; 0x64
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e1f0      	b.n	80045c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041e6:	4b6c      	ldr	r3, [pc, #432]	; (8004398 <HAL_RCC_OscConfig+0x2ac>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1f0      	bne.n	80041d4 <HAL_RCC_OscConfig+0xe8>
 80041f2:	e000      	b.n	80041f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d063      	beq.n	80042ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004202:	4b65      	ldr	r3, [pc, #404]	; (8004398 <HAL_RCC_OscConfig+0x2ac>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 030c 	and.w	r3, r3, #12
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00b      	beq.n	8004226 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800420e:	4b62      	ldr	r3, [pc, #392]	; (8004398 <HAL_RCC_OscConfig+0x2ac>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004216:	2b08      	cmp	r3, #8
 8004218:	d11c      	bne.n	8004254 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800421a:	4b5f      	ldr	r3, [pc, #380]	; (8004398 <HAL_RCC_OscConfig+0x2ac>)
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d116      	bne.n	8004254 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004226:	4b5c      	ldr	r3, [pc, #368]	; (8004398 <HAL_RCC_OscConfig+0x2ac>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d005      	beq.n	800423e <HAL_RCC_OscConfig+0x152>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d001      	beq.n	800423e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e1c4      	b.n	80045c8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800423e:	4b56      	ldr	r3, [pc, #344]	; (8004398 <HAL_RCC_OscConfig+0x2ac>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	4952      	ldr	r1, [pc, #328]	; (8004398 <HAL_RCC_OscConfig+0x2ac>)
 800424e:	4313      	orrs	r3, r2
 8004250:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004252:	e03a      	b.n	80042ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d020      	beq.n	800429e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800425c:	4b4f      	ldr	r3, [pc, #316]	; (800439c <HAL_RCC_OscConfig+0x2b0>)
 800425e:	2201      	movs	r2, #1
 8004260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004262:	f7fd fbf7 	bl	8001a54 <HAL_GetTick>
 8004266:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004268:	e008      	b.n	800427c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800426a:	f7fd fbf3 	bl	8001a54 <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	2b02      	cmp	r3, #2
 8004276:	d901      	bls.n	800427c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e1a5      	b.n	80045c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800427c:	4b46      	ldr	r3, [pc, #280]	; (8004398 <HAL_RCC_OscConfig+0x2ac>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0302 	and.w	r3, r3, #2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d0f0      	beq.n	800426a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004288:	4b43      	ldr	r3, [pc, #268]	; (8004398 <HAL_RCC_OscConfig+0x2ac>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	00db      	lsls	r3, r3, #3
 8004296:	4940      	ldr	r1, [pc, #256]	; (8004398 <HAL_RCC_OscConfig+0x2ac>)
 8004298:	4313      	orrs	r3, r2
 800429a:	600b      	str	r3, [r1, #0]
 800429c:	e015      	b.n	80042ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800429e:	4b3f      	ldr	r3, [pc, #252]	; (800439c <HAL_RCC_OscConfig+0x2b0>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a4:	f7fd fbd6 	bl	8001a54 <HAL_GetTick>
 80042a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042aa:	e008      	b.n	80042be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042ac:	f7fd fbd2 	bl	8001a54 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d901      	bls.n	80042be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e184      	b.n	80045c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042be:	4b36      	ldr	r3, [pc, #216]	; (8004398 <HAL_RCC_OscConfig+0x2ac>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1f0      	bne.n	80042ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0308 	and.w	r3, r3, #8
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d030      	beq.n	8004338 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d016      	beq.n	800430c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042de:	4b30      	ldr	r3, [pc, #192]	; (80043a0 <HAL_RCC_OscConfig+0x2b4>)
 80042e0:	2201      	movs	r2, #1
 80042e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e4:	f7fd fbb6 	bl	8001a54 <HAL_GetTick>
 80042e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042ea:	e008      	b.n	80042fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042ec:	f7fd fbb2 	bl	8001a54 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e164      	b.n	80045c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042fe:	4b26      	ldr	r3, [pc, #152]	; (8004398 <HAL_RCC_OscConfig+0x2ac>)
 8004300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d0f0      	beq.n	80042ec <HAL_RCC_OscConfig+0x200>
 800430a:	e015      	b.n	8004338 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800430c:	4b24      	ldr	r3, [pc, #144]	; (80043a0 <HAL_RCC_OscConfig+0x2b4>)
 800430e:	2200      	movs	r2, #0
 8004310:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004312:	f7fd fb9f 	bl	8001a54 <HAL_GetTick>
 8004316:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004318:	e008      	b.n	800432c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800431a:	f7fd fb9b 	bl	8001a54 <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	2b02      	cmp	r3, #2
 8004326:	d901      	bls.n	800432c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e14d      	b.n	80045c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800432c:	4b1a      	ldr	r3, [pc, #104]	; (8004398 <HAL_RCC_OscConfig+0x2ac>)
 800432e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1f0      	bne.n	800431a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0304 	and.w	r3, r3, #4
 8004340:	2b00      	cmp	r3, #0
 8004342:	f000 80a0 	beq.w	8004486 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004346:	2300      	movs	r3, #0
 8004348:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800434a:	4b13      	ldr	r3, [pc, #76]	; (8004398 <HAL_RCC_OscConfig+0x2ac>)
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d10f      	bne.n	8004376 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004356:	2300      	movs	r3, #0
 8004358:	60bb      	str	r3, [r7, #8]
 800435a:	4b0f      	ldr	r3, [pc, #60]	; (8004398 <HAL_RCC_OscConfig+0x2ac>)
 800435c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435e:	4a0e      	ldr	r2, [pc, #56]	; (8004398 <HAL_RCC_OscConfig+0x2ac>)
 8004360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004364:	6413      	str	r3, [r2, #64]	; 0x40
 8004366:	4b0c      	ldr	r3, [pc, #48]	; (8004398 <HAL_RCC_OscConfig+0x2ac>)
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800436e:	60bb      	str	r3, [r7, #8]
 8004370:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004372:	2301      	movs	r3, #1
 8004374:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004376:	4b0b      	ldr	r3, [pc, #44]	; (80043a4 <HAL_RCC_OscConfig+0x2b8>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800437e:	2b00      	cmp	r3, #0
 8004380:	d121      	bne.n	80043c6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004382:	4b08      	ldr	r3, [pc, #32]	; (80043a4 <HAL_RCC_OscConfig+0x2b8>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a07      	ldr	r2, [pc, #28]	; (80043a4 <HAL_RCC_OscConfig+0x2b8>)
 8004388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800438c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800438e:	f7fd fb61 	bl	8001a54 <HAL_GetTick>
 8004392:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004394:	e011      	b.n	80043ba <HAL_RCC_OscConfig+0x2ce>
 8004396:	bf00      	nop
 8004398:	40023800 	.word	0x40023800
 800439c:	42470000 	.word	0x42470000
 80043a0:	42470e80 	.word	0x42470e80
 80043a4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043a8:	f7fd fb54 	bl	8001a54 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e106      	b.n	80045c8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043ba:	4b85      	ldr	r3, [pc, #532]	; (80045d0 <HAL_RCC_OscConfig+0x4e4>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d0f0      	beq.n	80043a8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d106      	bne.n	80043dc <HAL_RCC_OscConfig+0x2f0>
 80043ce:	4b81      	ldr	r3, [pc, #516]	; (80045d4 <HAL_RCC_OscConfig+0x4e8>)
 80043d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d2:	4a80      	ldr	r2, [pc, #512]	; (80045d4 <HAL_RCC_OscConfig+0x4e8>)
 80043d4:	f043 0301 	orr.w	r3, r3, #1
 80043d8:	6713      	str	r3, [r2, #112]	; 0x70
 80043da:	e01c      	b.n	8004416 <HAL_RCC_OscConfig+0x32a>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	2b05      	cmp	r3, #5
 80043e2:	d10c      	bne.n	80043fe <HAL_RCC_OscConfig+0x312>
 80043e4:	4b7b      	ldr	r3, [pc, #492]	; (80045d4 <HAL_RCC_OscConfig+0x4e8>)
 80043e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e8:	4a7a      	ldr	r2, [pc, #488]	; (80045d4 <HAL_RCC_OscConfig+0x4e8>)
 80043ea:	f043 0304 	orr.w	r3, r3, #4
 80043ee:	6713      	str	r3, [r2, #112]	; 0x70
 80043f0:	4b78      	ldr	r3, [pc, #480]	; (80045d4 <HAL_RCC_OscConfig+0x4e8>)
 80043f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f4:	4a77      	ldr	r2, [pc, #476]	; (80045d4 <HAL_RCC_OscConfig+0x4e8>)
 80043f6:	f043 0301 	orr.w	r3, r3, #1
 80043fa:	6713      	str	r3, [r2, #112]	; 0x70
 80043fc:	e00b      	b.n	8004416 <HAL_RCC_OscConfig+0x32a>
 80043fe:	4b75      	ldr	r3, [pc, #468]	; (80045d4 <HAL_RCC_OscConfig+0x4e8>)
 8004400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004402:	4a74      	ldr	r2, [pc, #464]	; (80045d4 <HAL_RCC_OscConfig+0x4e8>)
 8004404:	f023 0301 	bic.w	r3, r3, #1
 8004408:	6713      	str	r3, [r2, #112]	; 0x70
 800440a:	4b72      	ldr	r3, [pc, #456]	; (80045d4 <HAL_RCC_OscConfig+0x4e8>)
 800440c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440e:	4a71      	ldr	r2, [pc, #452]	; (80045d4 <HAL_RCC_OscConfig+0x4e8>)
 8004410:	f023 0304 	bic.w	r3, r3, #4
 8004414:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d015      	beq.n	800444a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800441e:	f7fd fb19 	bl	8001a54 <HAL_GetTick>
 8004422:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004424:	e00a      	b.n	800443c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004426:	f7fd fb15 	bl	8001a54 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	f241 3288 	movw	r2, #5000	; 0x1388
 8004434:	4293      	cmp	r3, r2
 8004436:	d901      	bls.n	800443c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e0c5      	b.n	80045c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800443c:	4b65      	ldr	r3, [pc, #404]	; (80045d4 <HAL_RCC_OscConfig+0x4e8>)
 800443e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004440:	f003 0302 	and.w	r3, r3, #2
 8004444:	2b00      	cmp	r3, #0
 8004446:	d0ee      	beq.n	8004426 <HAL_RCC_OscConfig+0x33a>
 8004448:	e014      	b.n	8004474 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800444a:	f7fd fb03 	bl	8001a54 <HAL_GetTick>
 800444e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004450:	e00a      	b.n	8004468 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004452:	f7fd faff 	bl	8001a54 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004460:	4293      	cmp	r3, r2
 8004462:	d901      	bls.n	8004468 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e0af      	b.n	80045c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004468:	4b5a      	ldr	r3, [pc, #360]	; (80045d4 <HAL_RCC_OscConfig+0x4e8>)
 800446a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1ee      	bne.n	8004452 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004474:	7dfb      	ldrb	r3, [r7, #23]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d105      	bne.n	8004486 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800447a:	4b56      	ldr	r3, [pc, #344]	; (80045d4 <HAL_RCC_OscConfig+0x4e8>)
 800447c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447e:	4a55      	ldr	r2, [pc, #340]	; (80045d4 <HAL_RCC_OscConfig+0x4e8>)
 8004480:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004484:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	2b00      	cmp	r3, #0
 800448c:	f000 809b 	beq.w	80045c6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004490:	4b50      	ldr	r3, [pc, #320]	; (80045d4 <HAL_RCC_OscConfig+0x4e8>)
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f003 030c 	and.w	r3, r3, #12
 8004498:	2b08      	cmp	r3, #8
 800449a:	d05c      	beq.n	8004556 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d141      	bne.n	8004528 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044a4:	4b4c      	ldr	r3, [pc, #304]	; (80045d8 <HAL_RCC_OscConfig+0x4ec>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044aa:	f7fd fad3 	bl	8001a54 <HAL_GetTick>
 80044ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044b0:	e008      	b.n	80044c4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044b2:	f7fd facf 	bl	8001a54 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d901      	bls.n	80044c4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e081      	b.n	80045c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044c4:	4b43      	ldr	r3, [pc, #268]	; (80045d4 <HAL_RCC_OscConfig+0x4e8>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1f0      	bne.n	80044b2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	69da      	ldr	r2, [r3, #28]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a1b      	ldr	r3, [r3, #32]
 80044d8:	431a      	orrs	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044de:	019b      	lsls	r3, r3, #6
 80044e0:	431a      	orrs	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e6:	085b      	lsrs	r3, r3, #1
 80044e8:	3b01      	subs	r3, #1
 80044ea:	041b      	lsls	r3, r3, #16
 80044ec:	431a      	orrs	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f2:	061b      	lsls	r3, r3, #24
 80044f4:	4937      	ldr	r1, [pc, #220]	; (80045d4 <HAL_RCC_OscConfig+0x4e8>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044fa:	4b37      	ldr	r3, [pc, #220]	; (80045d8 <HAL_RCC_OscConfig+0x4ec>)
 80044fc:	2201      	movs	r2, #1
 80044fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004500:	f7fd faa8 	bl	8001a54 <HAL_GetTick>
 8004504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004506:	e008      	b.n	800451a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004508:	f7fd faa4 	bl	8001a54 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b02      	cmp	r3, #2
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e056      	b.n	80045c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800451a:	4b2e      	ldr	r3, [pc, #184]	; (80045d4 <HAL_RCC_OscConfig+0x4e8>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d0f0      	beq.n	8004508 <HAL_RCC_OscConfig+0x41c>
 8004526:	e04e      	b.n	80045c6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004528:	4b2b      	ldr	r3, [pc, #172]	; (80045d8 <HAL_RCC_OscConfig+0x4ec>)
 800452a:	2200      	movs	r2, #0
 800452c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800452e:	f7fd fa91 	bl	8001a54 <HAL_GetTick>
 8004532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004534:	e008      	b.n	8004548 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004536:	f7fd fa8d 	bl	8001a54 <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	2b02      	cmp	r3, #2
 8004542:	d901      	bls.n	8004548 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e03f      	b.n	80045c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004548:	4b22      	ldr	r3, [pc, #136]	; (80045d4 <HAL_RCC_OscConfig+0x4e8>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1f0      	bne.n	8004536 <HAL_RCC_OscConfig+0x44a>
 8004554:	e037      	b.n	80045c6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d101      	bne.n	8004562 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e032      	b.n	80045c8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004562:	4b1c      	ldr	r3, [pc, #112]	; (80045d4 <HAL_RCC_OscConfig+0x4e8>)
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d028      	beq.n	80045c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800457a:	429a      	cmp	r2, r3
 800457c:	d121      	bne.n	80045c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004588:	429a      	cmp	r2, r3
 800458a:	d11a      	bne.n	80045c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800458c:	68fa      	ldr	r2, [r7, #12]
 800458e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004592:	4013      	ands	r3, r2
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004598:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800459a:	4293      	cmp	r3, r2
 800459c:	d111      	bne.n	80045c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a8:	085b      	lsrs	r3, r3, #1
 80045aa:	3b01      	subs	r3, #1
 80045ac:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d107      	bne.n	80045c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045bc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045be:	429a      	cmp	r2, r3
 80045c0:	d001      	beq.n	80045c6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e000      	b.n	80045c8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3718      	adds	r7, #24
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	40007000 	.word	0x40007000
 80045d4:	40023800 	.word	0x40023800
 80045d8:	42470060 	.word	0x42470060

080045dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d101      	bne.n	80045f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e0cc      	b.n	800478a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045f0:	4b68      	ldr	r3, [pc, #416]	; (8004794 <HAL_RCC_ClockConfig+0x1b8>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0307 	and.w	r3, r3, #7
 80045f8:	683a      	ldr	r2, [r7, #0]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d90c      	bls.n	8004618 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045fe:	4b65      	ldr	r3, [pc, #404]	; (8004794 <HAL_RCC_ClockConfig+0x1b8>)
 8004600:	683a      	ldr	r2, [r7, #0]
 8004602:	b2d2      	uxtb	r2, r2
 8004604:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004606:	4b63      	ldr	r3, [pc, #396]	; (8004794 <HAL_RCC_ClockConfig+0x1b8>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0307 	and.w	r3, r3, #7
 800460e:	683a      	ldr	r2, [r7, #0]
 8004610:	429a      	cmp	r2, r3
 8004612:	d001      	beq.n	8004618 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e0b8      	b.n	800478a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	2b00      	cmp	r3, #0
 8004622:	d020      	beq.n	8004666 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0304 	and.w	r3, r3, #4
 800462c:	2b00      	cmp	r3, #0
 800462e:	d005      	beq.n	800463c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004630:	4b59      	ldr	r3, [pc, #356]	; (8004798 <HAL_RCC_ClockConfig+0x1bc>)
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	4a58      	ldr	r2, [pc, #352]	; (8004798 <HAL_RCC_ClockConfig+0x1bc>)
 8004636:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800463a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0308 	and.w	r3, r3, #8
 8004644:	2b00      	cmp	r3, #0
 8004646:	d005      	beq.n	8004654 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004648:	4b53      	ldr	r3, [pc, #332]	; (8004798 <HAL_RCC_ClockConfig+0x1bc>)
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	4a52      	ldr	r2, [pc, #328]	; (8004798 <HAL_RCC_ClockConfig+0x1bc>)
 800464e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004652:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004654:	4b50      	ldr	r3, [pc, #320]	; (8004798 <HAL_RCC_ClockConfig+0x1bc>)
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	494d      	ldr	r1, [pc, #308]	; (8004798 <HAL_RCC_ClockConfig+0x1bc>)
 8004662:	4313      	orrs	r3, r2
 8004664:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	2b00      	cmp	r3, #0
 8004670:	d044      	beq.n	80046fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d107      	bne.n	800468a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800467a:	4b47      	ldr	r3, [pc, #284]	; (8004798 <HAL_RCC_ClockConfig+0x1bc>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d119      	bne.n	80046ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e07f      	b.n	800478a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	2b02      	cmp	r3, #2
 8004690:	d003      	beq.n	800469a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004696:	2b03      	cmp	r3, #3
 8004698:	d107      	bne.n	80046aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800469a:	4b3f      	ldr	r3, [pc, #252]	; (8004798 <HAL_RCC_ClockConfig+0x1bc>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d109      	bne.n	80046ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e06f      	b.n	800478a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046aa:	4b3b      	ldr	r3, [pc, #236]	; (8004798 <HAL_RCC_ClockConfig+0x1bc>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e067      	b.n	800478a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046ba:	4b37      	ldr	r3, [pc, #220]	; (8004798 <HAL_RCC_ClockConfig+0x1bc>)
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f023 0203 	bic.w	r2, r3, #3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	4934      	ldr	r1, [pc, #208]	; (8004798 <HAL_RCC_ClockConfig+0x1bc>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046cc:	f7fd f9c2 	bl	8001a54 <HAL_GetTick>
 80046d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046d2:	e00a      	b.n	80046ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046d4:	f7fd f9be 	bl	8001a54 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e04f      	b.n	800478a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ea:	4b2b      	ldr	r3, [pc, #172]	; (8004798 <HAL_RCC_ClockConfig+0x1bc>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f003 020c 	and.w	r2, r3, #12
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d1eb      	bne.n	80046d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046fc:	4b25      	ldr	r3, [pc, #148]	; (8004794 <HAL_RCC_ClockConfig+0x1b8>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0307 	and.w	r3, r3, #7
 8004704:	683a      	ldr	r2, [r7, #0]
 8004706:	429a      	cmp	r2, r3
 8004708:	d20c      	bcs.n	8004724 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800470a:	4b22      	ldr	r3, [pc, #136]	; (8004794 <HAL_RCC_ClockConfig+0x1b8>)
 800470c:	683a      	ldr	r2, [r7, #0]
 800470e:	b2d2      	uxtb	r2, r2
 8004710:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004712:	4b20      	ldr	r3, [pc, #128]	; (8004794 <HAL_RCC_ClockConfig+0x1b8>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0307 	and.w	r3, r3, #7
 800471a:	683a      	ldr	r2, [r7, #0]
 800471c:	429a      	cmp	r2, r3
 800471e:	d001      	beq.n	8004724 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e032      	b.n	800478a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0304 	and.w	r3, r3, #4
 800472c:	2b00      	cmp	r3, #0
 800472e:	d008      	beq.n	8004742 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004730:	4b19      	ldr	r3, [pc, #100]	; (8004798 <HAL_RCC_ClockConfig+0x1bc>)
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	4916      	ldr	r1, [pc, #88]	; (8004798 <HAL_RCC_ClockConfig+0x1bc>)
 800473e:	4313      	orrs	r3, r2
 8004740:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0308 	and.w	r3, r3, #8
 800474a:	2b00      	cmp	r3, #0
 800474c:	d009      	beq.n	8004762 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800474e:	4b12      	ldr	r3, [pc, #72]	; (8004798 <HAL_RCC_ClockConfig+0x1bc>)
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	00db      	lsls	r3, r3, #3
 800475c:	490e      	ldr	r1, [pc, #56]	; (8004798 <HAL_RCC_ClockConfig+0x1bc>)
 800475e:	4313      	orrs	r3, r2
 8004760:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004762:	f000 f821 	bl	80047a8 <HAL_RCC_GetSysClockFreq>
 8004766:	4602      	mov	r2, r0
 8004768:	4b0b      	ldr	r3, [pc, #44]	; (8004798 <HAL_RCC_ClockConfig+0x1bc>)
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	091b      	lsrs	r3, r3, #4
 800476e:	f003 030f 	and.w	r3, r3, #15
 8004772:	490a      	ldr	r1, [pc, #40]	; (800479c <HAL_RCC_ClockConfig+0x1c0>)
 8004774:	5ccb      	ldrb	r3, [r1, r3]
 8004776:	fa22 f303 	lsr.w	r3, r2, r3
 800477a:	4a09      	ldr	r2, [pc, #36]	; (80047a0 <HAL_RCC_ClockConfig+0x1c4>)
 800477c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800477e:	4b09      	ldr	r3, [pc, #36]	; (80047a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4618      	mov	r0, r3
 8004784:	f7fd f922 	bl	80019cc <HAL_InitTick>

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	40023c00 	.word	0x40023c00
 8004798:	40023800 	.word	0x40023800
 800479c:	08010c34 	.word	0x08010c34
 80047a0:	20000000 	.word	0x20000000
 80047a4:	20000004 	.word	0x20000004

080047a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80047ac:	b084      	sub	sp, #16
 80047ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80047b0:	2300      	movs	r3, #0
 80047b2:	607b      	str	r3, [r7, #4]
 80047b4:	2300      	movs	r3, #0
 80047b6:	60fb      	str	r3, [r7, #12]
 80047b8:	2300      	movs	r3, #0
 80047ba:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80047bc:	2300      	movs	r3, #0
 80047be:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047c0:	4b67      	ldr	r3, [pc, #412]	; (8004960 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f003 030c 	and.w	r3, r3, #12
 80047c8:	2b08      	cmp	r3, #8
 80047ca:	d00d      	beq.n	80047e8 <HAL_RCC_GetSysClockFreq+0x40>
 80047cc:	2b08      	cmp	r3, #8
 80047ce:	f200 80bd 	bhi.w	800494c <HAL_RCC_GetSysClockFreq+0x1a4>
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d002      	beq.n	80047dc <HAL_RCC_GetSysClockFreq+0x34>
 80047d6:	2b04      	cmp	r3, #4
 80047d8:	d003      	beq.n	80047e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80047da:	e0b7      	b.n	800494c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047dc:	4b61      	ldr	r3, [pc, #388]	; (8004964 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80047de:	60bb      	str	r3, [r7, #8]
       break;
 80047e0:	e0b7      	b.n	8004952 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047e2:	4b61      	ldr	r3, [pc, #388]	; (8004968 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80047e4:	60bb      	str	r3, [r7, #8]
      break;
 80047e6:	e0b4      	b.n	8004952 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047e8:	4b5d      	ldr	r3, [pc, #372]	; (8004960 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047f0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047f2:	4b5b      	ldr	r3, [pc, #364]	; (8004960 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d04d      	beq.n	800489a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047fe:	4b58      	ldr	r3, [pc, #352]	; (8004960 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	099b      	lsrs	r3, r3, #6
 8004804:	461a      	mov	r2, r3
 8004806:	f04f 0300 	mov.w	r3, #0
 800480a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800480e:	f04f 0100 	mov.w	r1, #0
 8004812:	ea02 0800 	and.w	r8, r2, r0
 8004816:	ea03 0901 	and.w	r9, r3, r1
 800481a:	4640      	mov	r0, r8
 800481c:	4649      	mov	r1, r9
 800481e:	f04f 0200 	mov.w	r2, #0
 8004822:	f04f 0300 	mov.w	r3, #0
 8004826:	014b      	lsls	r3, r1, #5
 8004828:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800482c:	0142      	lsls	r2, r0, #5
 800482e:	4610      	mov	r0, r2
 8004830:	4619      	mov	r1, r3
 8004832:	ebb0 0008 	subs.w	r0, r0, r8
 8004836:	eb61 0109 	sbc.w	r1, r1, r9
 800483a:	f04f 0200 	mov.w	r2, #0
 800483e:	f04f 0300 	mov.w	r3, #0
 8004842:	018b      	lsls	r3, r1, #6
 8004844:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004848:	0182      	lsls	r2, r0, #6
 800484a:	1a12      	subs	r2, r2, r0
 800484c:	eb63 0301 	sbc.w	r3, r3, r1
 8004850:	f04f 0000 	mov.w	r0, #0
 8004854:	f04f 0100 	mov.w	r1, #0
 8004858:	00d9      	lsls	r1, r3, #3
 800485a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800485e:	00d0      	lsls	r0, r2, #3
 8004860:	4602      	mov	r2, r0
 8004862:	460b      	mov	r3, r1
 8004864:	eb12 0208 	adds.w	r2, r2, r8
 8004868:	eb43 0309 	adc.w	r3, r3, r9
 800486c:	f04f 0000 	mov.w	r0, #0
 8004870:	f04f 0100 	mov.w	r1, #0
 8004874:	0259      	lsls	r1, r3, #9
 8004876:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800487a:	0250      	lsls	r0, r2, #9
 800487c:	4602      	mov	r2, r0
 800487e:	460b      	mov	r3, r1
 8004880:	4610      	mov	r0, r2
 8004882:	4619      	mov	r1, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	461a      	mov	r2, r3
 8004888:	f04f 0300 	mov.w	r3, #0
 800488c:	f7fc f80e 	bl	80008ac <__aeabi_uldivmod>
 8004890:	4602      	mov	r2, r0
 8004892:	460b      	mov	r3, r1
 8004894:	4613      	mov	r3, r2
 8004896:	60fb      	str	r3, [r7, #12]
 8004898:	e04a      	b.n	8004930 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800489a:	4b31      	ldr	r3, [pc, #196]	; (8004960 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	099b      	lsrs	r3, r3, #6
 80048a0:	461a      	mov	r2, r3
 80048a2:	f04f 0300 	mov.w	r3, #0
 80048a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80048aa:	f04f 0100 	mov.w	r1, #0
 80048ae:	ea02 0400 	and.w	r4, r2, r0
 80048b2:	ea03 0501 	and.w	r5, r3, r1
 80048b6:	4620      	mov	r0, r4
 80048b8:	4629      	mov	r1, r5
 80048ba:	f04f 0200 	mov.w	r2, #0
 80048be:	f04f 0300 	mov.w	r3, #0
 80048c2:	014b      	lsls	r3, r1, #5
 80048c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80048c8:	0142      	lsls	r2, r0, #5
 80048ca:	4610      	mov	r0, r2
 80048cc:	4619      	mov	r1, r3
 80048ce:	1b00      	subs	r0, r0, r4
 80048d0:	eb61 0105 	sbc.w	r1, r1, r5
 80048d4:	f04f 0200 	mov.w	r2, #0
 80048d8:	f04f 0300 	mov.w	r3, #0
 80048dc:	018b      	lsls	r3, r1, #6
 80048de:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80048e2:	0182      	lsls	r2, r0, #6
 80048e4:	1a12      	subs	r2, r2, r0
 80048e6:	eb63 0301 	sbc.w	r3, r3, r1
 80048ea:	f04f 0000 	mov.w	r0, #0
 80048ee:	f04f 0100 	mov.w	r1, #0
 80048f2:	00d9      	lsls	r1, r3, #3
 80048f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048f8:	00d0      	lsls	r0, r2, #3
 80048fa:	4602      	mov	r2, r0
 80048fc:	460b      	mov	r3, r1
 80048fe:	1912      	adds	r2, r2, r4
 8004900:	eb45 0303 	adc.w	r3, r5, r3
 8004904:	f04f 0000 	mov.w	r0, #0
 8004908:	f04f 0100 	mov.w	r1, #0
 800490c:	0299      	lsls	r1, r3, #10
 800490e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004912:	0290      	lsls	r0, r2, #10
 8004914:	4602      	mov	r2, r0
 8004916:	460b      	mov	r3, r1
 8004918:	4610      	mov	r0, r2
 800491a:	4619      	mov	r1, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	461a      	mov	r2, r3
 8004920:	f04f 0300 	mov.w	r3, #0
 8004924:	f7fb ffc2 	bl	80008ac <__aeabi_uldivmod>
 8004928:	4602      	mov	r2, r0
 800492a:	460b      	mov	r3, r1
 800492c:	4613      	mov	r3, r2
 800492e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004930:	4b0b      	ldr	r3, [pc, #44]	; (8004960 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	0c1b      	lsrs	r3, r3, #16
 8004936:	f003 0303 	and.w	r3, r3, #3
 800493a:	3301      	adds	r3, #1
 800493c:	005b      	lsls	r3, r3, #1
 800493e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	fbb2 f3f3 	udiv	r3, r2, r3
 8004948:	60bb      	str	r3, [r7, #8]
      break;
 800494a:	e002      	b.n	8004952 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800494c:	4b05      	ldr	r3, [pc, #20]	; (8004964 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800494e:	60bb      	str	r3, [r7, #8]
      break;
 8004950:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004952:	68bb      	ldr	r3, [r7, #8]
}
 8004954:	4618      	mov	r0, r3
 8004956:	3710      	adds	r7, #16
 8004958:	46bd      	mov	sp, r7
 800495a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800495e:	bf00      	nop
 8004960:	40023800 	.word	0x40023800
 8004964:	00f42400 	.word	0x00f42400
 8004968:	007a1200 	.word	0x007a1200

0800496c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004970:	4b03      	ldr	r3, [pc, #12]	; (8004980 <HAL_RCC_GetHCLKFreq+0x14>)
 8004972:	681b      	ldr	r3, [r3, #0]
}
 8004974:	4618      	mov	r0, r3
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	20000000 	.word	0x20000000

08004984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004988:	f7ff fff0 	bl	800496c <HAL_RCC_GetHCLKFreq>
 800498c:	4602      	mov	r2, r0
 800498e:	4b05      	ldr	r3, [pc, #20]	; (80049a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	0a9b      	lsrs	r3, r3, #10
 8004994:	f003 0307 	and.w	r3, r3, #7
 8004998:	4903      	ldr	r1, [pc, #12]	; (80049a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800499a:	5ccb      	ldrb	r3, [r1, r3]
 800499c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	40023800 	.word	0x40023800
 80049a8:	08010c44 	.word	0x08010c44

080049ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80049b0:	f7ff ffdc 	bl	800496c <HAL_RCC_GetHCLKFreq>
 80049b4:	4602      	mov	r2, r0
 80049b6:	4b05      	ldr	r3, [pc, #20]	; (80049cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	0b5b      	lsrs	r3, r3, #13
 80049bc:	f003 0307 	and.w	r3, r3, #7
 80049c0:	4903      	ldr	r1, [pc, #12]	; (80049d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049c2:	5ccb      	ldrb	r3, [r1, r3]
 80049c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	40023800 	.word	0x40023800
 80049d0:	08010c44 	.word	0x08010c44

080049d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e03f      	b.n	8004a66 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d106      	bne.n	8004a00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f7fc fed6 	bl	80017ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2224      	movs	r2, #36	; 0x24
 8004a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68da      	ldr	r2, [r3, #12]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 f9cb 	bl	8004db4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	691a      	ldr	r2, [r3, #16]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	695a      	ldr	r2, [r3, #20]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68da      	ldr	r2, [r3, #12]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2220      	movs	r2, #32
 8004a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2220      	movs	r2, #32
 8004a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3708      	adds	r7, #8
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b08a      	sub	sp, #40	; 0x28
 8004a72:	af02      	add	r7, sp, #8
 8004a74:	60f8      	str	r0, [r7, #12]
 8004a76:	60b9      	str	r1, [r7, #8]
 8004a78:	603b      	str	r3, [r7, #0]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b20      	cmp	r3, #32
 8004a8c:	d17c      	bne.n	8004b88 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d002      	beq.n	8004a9a <HAL_UART_Transmit+0x2c>
 8004a94:	88fb      	ldrh	r3, [r7, #6]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e075      	b.n	8004b8a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d101      	bne.n	8004aac <HAL_UART_Transmit+0x3e>
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	e06e      	b.n	8004b8a <HAL_UART_Transmit+0x11c>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2221      	movs	r2, #33	; 0x21
 8004abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ac2:	f7fc ffc7 	bl	8001a54 <HAL_GetTick>
 8004ac6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	88fa      	ldrh	r2, [r7, #6]
 8004acc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	88fa      	ldrh	r2, [r7, #6]
 8004ad2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004adc:	d108      	bne.n	8004af0 <HAL_UART_Transmit+0x82>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d104      	bne.n	8004af0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	61bb      	str	r3, [r7, #24]
 8004aee:	e003      	b.n	8004af8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004af4:	2300      	movs	r3, #0
 8004af6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004b00:	e02a      	b.n	8004b58 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	9300      	str	r3, [sp, #0]
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	2180      	movs	r1, #128	; 0x80
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f000 f8e2 	bl	8004cd6 <UART_WaitOnFlagUntilTimeout>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d001      	beq.n	8004b1c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e036      	b.n	8004b8a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10b      	bne.n	8004b3a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	881b      	ldrh	r3, [r3, #0]
 8004b26:	461a      	mov	r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	3302      	adds	r3, #2
 8004b36:	61bb      	str	r3, [r7, #24]
 8004b38:	e007      	b.n	8004b4a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	781a      	ldrb	r2, [r3, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	3301      	adds	r3, #1
 8004b48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	3b01      	subs	r3, #1
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1cf      	bne.n	8004b02 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	9300      	str	r3, [sp, #0]
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	2140      	movs	r1, #64	; 0x40
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f000 f8b2 	bl	8004cd6 <UART_WaitOnFlagUntilTimeout>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d001      	beq.n	8004b7c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e006      	b.n	8004b8a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004b84:	2300      	movs	r3, #0
 8004b86:	e000      	b.n	8004b8a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004b88:	2302      	movs	r3, #2
  }
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3720      	adds	r7, #32
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b08a      	sub	sp, #40	; 0x28
 8004b96:	af02      	add	r7, sp, #8
 8004b98:	60f8      	str	r0, [r7, #12]
 8004b9a:	60b9      	str	r1, [r7, #8]
 8004b9c:	603b      	str	r3, [r7, #0]
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	2b20      	cmp	r3, #32
 8004bb0:	f040 808c 	bne.w	8004ccc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d002      	beq.n	8004bc0 <HAL_UART_Receive+0x2e>
 8004bba:	88fb      	ldrh	r3, [r7, #6]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d101      	bne.n	8004bc4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e084      	b.n	8004cce <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d101      	bne.n	8004bd2 <HAL_UART_Receive+0x40>
 8004bce:	2302      	movs	r3, #2
 8004bd0:	e07d      	b.n	8004cce <HAL_UART_Receive+0x13c>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2222      	movs	r2, #34	; 0x22
 8004be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2200      	movs	r2, #0
 8004bec:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bee:	f7fc ff31 	bl	8001a54 <HAL_GetTick>
 8004bf2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	88fa      	ldrh	r2, [r7, #6]
 8004bf8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	88fa      	ldrh	r2, [r7, #6]
 8004bfe:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c08:	d108      	bne.n	8004c1c <HAL_UART_Receive+0x8a>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d104      	bne.n	8004c1c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004c12:	2300      	movs	r3, #0
 8004c14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	61bb      	str	r3, [r7, #24]
 8004c1a:	e003      	b.n	8004c24 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c20:	2300      	movs	r3, #0
 8004c22:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004c2c:	e043      	b.n	8004cb6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	9300      	str	r3, [sp, #0]
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	2200      	movs	r2, #0
 8004c36:	2120      	movs	r1, #32
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f000 f84c 	bl	8004cd6 <UART_WaitOnFlagUntilTimeout>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d001      	beq.n	8004c48 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e042      	b.n	8004cce <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d10c      	bne.n	8004c68 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	3302      	adds	r3, #2
 8004c64:	61bb      	str	r3, [r7, #24]
 8004c66:	e01f      	b.n	8004ca8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c70:	d007      	beq.n	8004c82 <HAL_UART_Receive+0xf0>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d10a      	bne.n	8004c90 <HAL_UART_Receive+0xfe>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d106      	bne.n	8004c90 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	b2da      	uxtb	r2, r3
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	701a      	strb	r2, [r3, #0]
 8004c8e:	e008      	b.n	8004ca2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c9c:	b2da      	uxtb	r2, r3
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1b6      	bne.n	8004c2e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	e000      	b.n	8004cce <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004ccc:	2302      	movs	r3, #2
  }
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3720      	adds	r7, #32
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b090      	sub	sp, #64	; 0x40
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	60f8      	str	r0, [r7, #12]
 8004cde:	60b9      	str	r1, [r7, #8]
 8004ce0:	603b      	str	r3, [r7, #0]
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ce6:	e050      	b.n	8004d8a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ce8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cee:	d04c      	beq.n	8004d8a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004cf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d007      	beq.n	8004d06 <UART_WaitOnFlagUntilTimeout+0x30>
 8004cf6:	f7fc fead 	bl	8001a54 <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d241      	bcs.n	8004d8a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	330c      	adds	r3, #12
 8004d0c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d10:	e853 3f00 	ldrex	r3, [r3]
 8004d14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	330c      	adds	r3, #12
 8004d24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d26:	637a      	str	r2, [r7, #52]	; 0x34
 8004d28:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d2e:	e841 2300 	strex	r3, r2, [r1]
 8004d32:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1e5      	bne.n	8004d06 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	3314      	adds	r3, #20
 8004d40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	e853 3f00 	ldrex	r3, [r3]
 8004d48:	613b      	str	r3, [r7, #16]
   return(result);
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	f023 0301 	bic.w	r3, r3, #1
 8004d50:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	3314      	adds	r3, #20
 8004d58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d5a:	623a      	str	r2, [r7, #32]
 8004d5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5e:	69f9      	ldr	r1, [r7, #28]
 8004d60:	6a3a      	ldr	r2, [r7, #32]
 8004d62:	e841 2300 	strex	r3, r2, [r1]
 8004d66:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1e5      	bne.n	8004d3a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2220      	movs	r2, #32
 8004d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2220      	movs	r2, #32
 8004d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e00f      	b.n	8004daa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	4013      	ands	r3, r2
 8004d94:	68ba      	ldr	r2, [r7, #8]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	bf0c      	ite	eq
 8004d9a:	2301      	moveq	r3, #1
 8004d9c:	2300      	movne	r3, #0
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	461a      	mov	r2, r3
 8004da2:	79fb      	ldrb	r3, [r7, #7]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d09f      	beq.n	8004ce8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3740      	adds	r7, #64	; 0x40
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
	...

08004db4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004db8:	b09f      	sub	sp, #124	; 0x7c
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004dc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dca:	68d9      	ldr	r1, [r3, #12]
 8004dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	ea40 0301 	orr.w	r3, r0, r1
 8004dd4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dd8:	689a      	ldr	r2, [r3, #8]
 8004dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	431a      	orrs	r2, r3
 8004de0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004de2:	695b      	ldr	r3, [r3, #20]
 8004de4:	431a      	orrs	r2, r3
 8004de6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004de8:	69db      	ldr	r3, [r3, #28]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004df8:	f021 010c 	bic.w	r1, r1, #12
 8004dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e02:	430b      	orrs	r3, r1
 8004e04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e12:	6999      	ldr	r1, [r3, #24]
 8004e14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	ea40 0301 	orr.w	r3, r0, r1
 8004e1c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	4bc5      	ldr	r3, [pc, #788]	; (8005138 <UART_SetConfig+0x384>)
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d004      	beq.n	8004e32 <UART_SetConfig+0x7e>
 8004e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	4bc3      	ldr	r3, [pc, #780]	; (800513c <UART_SetConfig+0x388>)
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d103      	bne.n	8004e3a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e32:	f7ff fdbb 	bl	80049ac <HAL_RCC_GetPCLK2Freq>
 8004e36:	6778      	str	r0, [r7, #116]	; 0x74
 8004e38:	e002      	b.n	8004e40 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e3a:	f7ff fda3 	bl	8004984 <HAL_RCC_GetPCLK1Freq>
 8004e3e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e42:	69db      	ldr	r3, [r3, #28]
 8004e44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e48:	f040 80b6 	bne.w	8004fb8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e4e:	461c      	mov	r4, r3
 8004e50:	f04f 0500 	mov.w	r5, #0
 8004e54:	4622      	mov	r2, r4
 8004e56:	462b      	mov	r3, r5
 8004e58:	1891      	adds	r1, r2, r2
 8004e5a:	6439      	str	r1, [r7, #64]	; 0x40
 8004e5c:	415b      	adcs	r3, r3
 8004e5e:	647b      	str	r3, [r7, #68]	; 0x44
 8004e60:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e64:	1912      	adds	r2, r2, r4
 8004e66:	eb45 0303 	adc.w	r3, r5, r3
 8004e6a:	f04f 0000 	mov.w	r0, #0
 8004e6e:	f04f 0100 	mov.w	r1, #0
 8004e72:	00d9      	lsls	r1, r3, #3
 8004e74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e78:	00d0      	lsls	r0, r2, #3
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	1911      	adds	r1, r2, r4
 8004e80:	6639      	str	r1, [r7, #96]	; 0x60
 8004e82:	416b      	adcs	r3, r5
 8004e84:	667b      	str	r3, [r7, #100]	; 0x64
 8004e86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	f04f 0300 	mov.w	r3, #0
 8004e90:	1891      	adds	r1, r2, r2
 8004e92:	63b9      	str	r1, [r7, #56]	; 0x38
 8004e94:	415b      	adcs	r3, r3
 8004e96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004e9c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004ea0:	f7fb fd04 	bl	80008ac <__aeabi_uldivmod>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	4ba5      	ldr	r3, [pc, #660]	; (8005140 <UART_SetConfig+0x38c>)
 8004eaa:	fba3 2302 	umull	r2, r3, r3, r2
 8004eae:	095b      	lsrs	r3, r3, #5
 8004eb0:	011e      	lsls	r6, r3, #4
 8004eb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004eb4:	461c      	mov	r4, r3
 8004eb6:	f04f 0500 	mov.w	r5, #0
 8004eba:	4622      	mov	r2, r4
 8004ebc:	462b      	mov	r3, r5
 8004ebe:	1891      	adds	r1, r2, r2
 8004ec0:	6339      	str	r1, [r7, #48]	; 0x30
 8004ec2:	415b      	adcs	r3, r3
 8004ec4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ec6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004eca:	1912      	adds	r2, r2, r4
 8004ecc:	eb45 0303 	adc.w	r3, r5, r3
 8004ed0:	f04f 0000 	mov.w	r0, #0
 8004ed4:	f04f 0100 	mov.w	r1, #0
 8004ed8:	00d9      	lsls	r1, r3, #3
 8004eda:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ede:	00d0      	lsls	r0, r2, #3
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	1911      	adds	r1, r2, r4
 8004ee6:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ee8:	416b      	adcs	r3, r5
 8004eea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004eec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	f04f 0300 	mov.w	r3, #0
 8004ef6:	1891      	adds	r1, r2, r2
 8004ef8:	62b9      	str	r1, [r7, #40]	; 0x28
 8004efa:	415b      	adcs	r3, r3
 8004efc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004efe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f02:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004f06:	f7fb fcd1 	bl	80008ac <__aeabi_uldivmod>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	4b8c      	ldr	r3, [pc, #560]	; (8005140 <UART_SetConfig+0x38c>)
 8004f10:	fba3 1302 	umull	r1, r3, r3, r2
 8004f14:	095b      	lsrs	r3, r3, #5
 8004f16:	2164      	movs	r1, #100	; 0x64
 8004f18:	fb01 f303 	mul.w	r3, r1, r3
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	00db      	lsls	r3, r3, #3
 8004f20:	3332      	adds	r3, #50	; 0x32
 8004f22:	4a87      	ldr	r2, [pc, #540]	; (8005140 <UART_SetConfig+0x38c>)
 8004f24:	fba2 2303 	umull	r2, r3, r2, r3
 8004f28:	095b      	lsrs	r3, r3, #5
 8004f2a:	005b      	lsls	r3, r3, #1
 8004f2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f30:	441e      	add	r6, r3
 8004f32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f34:	4618      	mov	r0, r3
 8004f36:	f04f 0100 	mov.w	r1, #0
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	1894      	adds	r4, r2, r2
 8004f40:	623c      	str	r4, [r7, #32]
 8004f42:	415b      	adcs	r3, r3
 8004f44:	627b      	str	r3, [r7, #36]	; 0x24
 8004f46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f4a:	1812      	adds	r2, r2, r0
 8004f4c:	eb41 0303 	adc.w	r3, r1, r3
 8004f50:	f04f 0400 	mov.w	r4, #0
 8004f54:	f04f 0500 	mov.w	r5, #0
 8004f58:	00dd      	lsls	r5, r3, #3
 8004f5a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004f5e:	00d4      	lsls	r4, r2, #3
 8004f60:	4622      	mov	r2, r4
 8004f62:	462b      	mov	r3, r5
 8004f64:	1814      	adds	r4, r2, r0
 8004f66:	653c      	str	r4, [r7, #80]	; 0x50
 8004f68:	414b      	adcs	r3, r1
 8004f6a:	657b      	str	r3, [r7, #84]	; 0x54
 8004f6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	461a      	mov	r2, r3
 8004f72:	f04f 0300 	mov.w	r3, #0
 8004f76:	1891      	adds	r1, r2, r2
 8004f78:	61b9      	str	r1, [r7, #24]
 8004f7a:	415b      	adcs	r3, r3
 8004f7c:	61fb      	str	r3, [r7, #28]
 8004f7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f82:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004f86:	f7fb fc91 	bl	80008ac <__aeabi_uldivmod>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	4b6c      	ldr	r3, [pc, #432]	; (8005140 <UART_SetConfig+0x38c>)
 8004f90:	fba3 1302 	umull	r1, r3, r3, r2
 8004f94:	095b      	lsrs	r3, r3, #5
 8004f96:	2164      	movs	r1, #100	; 0x64
 8004f98:	fb01 f303 	mul.w	r3, r1, r3
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	00db      	lsls	r3, r3, #3
 8004fa0:	3332      	adds	r3, #50	; 0x32
 8004fa2:	4a67      	ldr	r2, [pc, #412]	; (8005140 <UART_SetConfig+0x38c>)
 8004fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa8:	095b      	lsrs	r3, r3, #5
 8004faa:	f003 0207 	and.w	r2, r3, #7
 8004fae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4432      	add	r2, r6
 8004fb4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004fb6:	e0b9      	b.n	800512c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fba:	461c      	mov	r4, r3
 8004fbc:	f04f 0500 	mov.w	r5, #0
 8004fc0:	4622      	mov	r2, r4
 8004fc2:	462b      	mov	r3, r5
 8004fc4:	1891      	adds	r1, r2, r2
 8004fc6:	6139      	str	r1, [r7, #16]
 8004fc8:	415b      	adcs	r3, r3
 8004fca:	617b      	str	r3, [r7, #20]
 8004fcc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004fd0:	1912      	adds	r2, r2, r4
 8004fd2:	eb45 0303 	adc.w	r3, r5, r3
 8004fd6:	f04f 0000 	mov.w	r0, #0
 8004fda:	f04f 0100 	mov.w	r1, #0
 8004fde:	00d9      	lsls	r1, r3, #3
 8004fe0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004fe4:	00d0      	lsls	r0, r2, #3
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	460b      	mov	r3, r1
 8004fea:	eb12 0804 	adds.w	r8, r2, r4
 8004fee:	eb43 0905 	adc.w	r9, r3, r5
 8004ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f04f 0100 	mov.w	r1, #0
 8004ffc:	f04f 0200 	mov.w	r2, #0
 8005000:	f04f 0300 	mov.w	r3, #0
 8005004:	008b      	lsls	r3, r1, #2
 8005006:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800500a:	0082      	lsls	r2, r0, #2
 800500c:	4640      	mov	r0, r8
 800500e:	4649      	mov	r1, r9
 8005010:	f7fb fc4c 	bl	80008ac <__aeabi_uldivmod>
 8005014:	4602      	mov	r2, r0
 8005016:	460b      	mov	r3, r1
 8005018:	4b49      	ldr	r3, [pc, #292]	; (8005140 <UART_SetConfig+0x38c>)
 800501a:	fba3 2302 	umull	r2, r3, r3, r2
 800501e:	095b      	lsrs	r3, r3, #5
 8005020:	011e      	lsls	r6, r3, #4
 8005022:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005024:	4618      	mov	r0, r3
 8005026:	f04f 0100 	mov.w	r1, #0
 800502a:	4602      	mov	r2, r0
 800502c:	460b      	mov	r3, r1
 800502e:	1894      	adds	r4, r2, r2
 8005030:	60bc      	str	r4, [r7, #8]
 8005032:	415b      	adcs	r3, r3
 8005034:	60fb      	str	r3, [r7, #12]
 8005036:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800503a:	1812      	adds	r2, r2, r0
 800503c:	eb41 0303 	adc.w	r3, r1, r3
 8005040:	f04f 0400 	mov.w	r4, #0
 8005044:	f04f 0500 	mov.w	r5, #0
 8005048:	00dd      	lsls	r5, r3, #3
 800504a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800504e:	00d4      	lsls	r4, r2, #3
 8005050:	4622      	mov	r2, r4
 8005052:	462b      	mov	r3, r5
 8005054:	1814      	adds	r4, r2, r0
 8005056:	64bc      	str	r4, [r7, #72]	; 0x48
 8005058:	414b      	adcs	r3, r1
 800505a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800505c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	4618      	mov	r0, r3
 8005062:	f04f 0100 	mov.w	r1, #0
 8005066:	f04f 0200 	mov.w	r2, #0
 800506a:	f04f 0300 	mov.w	r3, #0
 800506e:	008b      	lsls	r3, r1, #2
 8005070:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005074:	0082      	lsls	r2, r0, #2
 8005076:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800507a:	f7fb fc17 	bl	80008ac <__aeabi_uldivmod>
 800507e:	4602      	mov	r2, r0
 8005080:	460b      	mov	r3, r1
 8005082:	4b2f      	ldr	r3, [pc, #188]	; (8005140 <UART_SetConfig+0x38c>)
 8005084:	fba3 1302 	umull	r1, r3, r3, r2
 8005088:	095b      	lsrs	r3, r3, #5
 800508a:	2164      	movs	r1, #100	; 0x64
 800508c:	fb01 f303 	mul.w	r3, r1, r3
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	011b      	lsls	r3, r3, #4
 8005094:	3332      	adds	r3, #50	; 0x32
 8005096:	4a2a      	ldr	r2, [pc, #168]	; (8005140 <UART_SetConfig+0x38c>)
 8005098:	fba2 2303 	umull	r2, r3, r2, r3
 800509c:	095b      	lsrs	r3, r3, #5
 800509e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050a2:	441e      	add	r6, r3
 80050a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050a6:	4618      	mov	r0, r3
 80050a8:	f04f 0100 	mov.w	r1, #0
 80050ac:	4602      	mov	r2, r0
 80050ae:	460b      	mov	r3, r1
 80050b0:	1894      	adds	r4, r2, r2
 80050b2:	603c      	str	r4, [r7, #0]
 80050b4:	415b      	adcs	r3, r3
 80050b6:	607b      	str	r3, [r7, #4]
 80050b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050bc:	1812      	adds	r2, r2, r0
 80050be:	eb41 0303 	adc.w	r3, r1, r3
 80050c2:	f04f 0400 	mov.w	r4, #0
 80050c6:	f04f 0500 	mov.w	r5, #0
 80050ca:	00dd      	lsls	r5, r3, #3
 80050cc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80050d0:	00d4      	lsls	r4, r2, #3
 80050d2:	4622      	mov	r2, r4
 80050d4:	462b      	mov	r3, r5
 80050d6:	eb12 0a00 	adds.w	sl, r2, r0
 80050da:	eb43 0b01 	adc.w	fp, r3, r1
 80050de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f04f 0100 	mov.w	r1, #0
 80050e8:	f04f 0200 	mov.w	r2, #0
 80050ec:	f04f 0300 	mov.w	r3, #0
 80050f0:	008b      	lsls	r3, r1, #2
 80050f2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80050f6:	0082      	lsls	r2, r0, #2
 80050f8:	4650      	mov	r0, sl
 80050fa:	4659      	mov	r1, fp
 80050fc:	f7fb fbd6 	bl	80008ac <__aeabi_uldivmod>
 8005100:	4602      	mov	r2, r0
 8005102:	460b      	mov	r3, r1
 8005104:	4b0e      	ldr	r3, [pc, #56]	; (8005140 <UART_SetConfig+0x38c>)
 8005106:	fba3 1302 	umull	r1, r3, r3, r2
 800510a:	095b      	lsrs	r3, r3, #5
 800510c:	2164      	movs	r1, #100	; 0x64
 800510e:	fb01 f303 	mul.w	r3, r1, r3
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	011b      	lsls	r3, r3, #4
 8005116:	3332      	adds	r3, #50	; 0x32
 8005118:	4a09      	ldr	r2, [pc, #36]	; (8005140 <UART_SetConfig+0x38c>)
 800511a:	fba2 2303 	umull	r2, r3, r2, r3
 800511e:	095b      	lsrs	r3, r3, #5
 8005120:	f003 020f 	and.w	r2, r3, #15
 8005124:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4432      	add	r2, r6
 800512a:	609a      	str	r2, [r3, #8]
}
 800512c:	bf00      	nop
 800512e:	377c      	adds	r7, #124	; 0x7c
 8005130:	46bd      	mov	sp, r7
 8005132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005136:	bf00      	nop
 8005138:	40011000 	.word	0x40011000
 800513c:	40011400 	.word	0x40011400
 8005140:	51eb851f 	.word	0x51eb851f

08005144 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005144:	b084      	sub	sp, #16
 8005146:	b580      	push	{r7, lr}
 8005148:	b084      	sub	sp, #16
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
 800514e:	f107 001c 	add.w	r0, r7, #28
 8005152:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005158:	2b01      	cmp	r3, #1
 800515a:	d122      	bne.n	80051a2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005160:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005170:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005186:	2b01      	cmp	r3, #1
 8005188:	d105      	bne.n	8005196 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 f9a0 	bl	80054dc <USB_CoreReset>
 800519c:	4603      	mov	r3, r0
 800519e:	73fb      	strb	r3, [r7, #15]
 80051a0:	e01a      	b.n	80051d8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 f994 	bl	80054dc <USB_CoreReset>
 80051b4:	4603      	mov	r3, r0
 80051b6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80051b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d106      	bne.n	80051cc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	639a      	str	r2, [r3, #56]	; 0x38
 80051ca:	e005      	b.n	80051d8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80051d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d10b      	bne.n	80051f6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f043 0206 	orr.w	r2, r3, #6
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f043 0220 	orr.w	r2, r3, #32
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80051f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3710      	adds	r7, #16
 80051fc:	46bd      	mov	sp, r7
 80051fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005202:	b004      	add	sp, #16
 8005204:	4770      	bx	lr

08005206 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005206:	b480      	push	{r7}
 8005208:	b083      	sub	sp, #12
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f043 0201 	orr.w	r2, r3, #1
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f023 0201 	bic.w	r2, r3, #1
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	370c      	adds	r7, #12
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800524a:	b580      	push	{r7, lr}
 800524c:	b084      	sub	sp, #16
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
 8005252:	460b      	mov	r3, r1
 8005254:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005256:	2300      	movs	r3, #0
 8005258:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005266:	78fb      	ldrb	r3, [r7, #3]
 8005268:	2b01      	cmp	r3, #1
 800526a:	d115      	bne.n	8005298 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005278:	2001      	movs	r0, #1
 800527a:	f7fc fbf7 	bl	8001a6c <HAL_Delay>
      ms++;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	3301      	adds	r3, #1
 8005282:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 f91a 	bl	80054be <USB_GetMode>
 800528a:	4603      	mov	r3, r0
 800528c:	2b01      	cmp	r3, #1
 800528e:	d01e      	beq.n	80052ce <USB_SetCurrentMode+0x84>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2b31      	cmp	r3, #49	; 0x31
 8005294:	d9f0      	bls.n	8005278 <USB_SetCurrentMode+0x2e>
 8005296:	e01a      	b.n	80052ce <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005298:	78fb      	ldrb	r3, [r7, #3]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d115      	bne.n	80052ca <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80052aa:	2001      	movs	r0, #1
 80052ac:	f7fc fbde 	bl	8001a6c <HAL_Delay>
      ms++;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	3301      	adds	r3, #1
 80052b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 f901 	bl	80054be <USB_GetMode>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d005      	beq.n	80052ce <USB_SetCurrentMode+0x84>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2b31      	cmp	r3, #49	; 0x31
 80052c6:	d9f0      	bls.n	80052aa <USB_SetCurrentMode+0x60>
 80052c8:	e001      	b.n	80052ce <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e005      	b.n	80052da <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2b32      	cmp	r3, #50	; 0x32
 80052d2:	d101      	bne.n	80052d8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e000      	b.n	80052da <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
	...

080052e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80052ee:	2300      	movs	r3, #0
 80052f0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	019b      	lsls	r3, r3, #6
 80052f6:	f043 0220 	orr.w	r2, r3, #32
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	3301      	adds	r3, #1
 8005302:	60fb      	str	r3, [r7, #12]
 8005304:	4a08      	ldr	r2, [pc, #32]	; (8005328 <USB_FlushTxFifo+0x44>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d901      	bls.n	800530e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e006      	b.n	800531c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	f003 0320 	and.w	r3, r3, #32
 8005316:	2b20      	cmp	r3, #32
 8005318:	d0f1      	beq.n	80052fe <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3714      	adds	r7, #20
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr
 8005328:	00030d40 	.word	0x00030d40

0800532c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005334:	2300      	movs	r3, #0
 8005336:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2210      	movs	r2, #16
 800533c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	3301      	adds	r3, #1
 8005342:	60fb      	str	r3, [r7, #12]
 8005344:	4a08      	ldr	r2, [pc, #32]	; (8005368 <USB_FlushRxFifo+0x3c>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d901      	bls.n	800534e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e006      	b.n	800535c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	f003 0310 	and.w	r3, r3, #16
 8005356:	2b10      	cmp	r3, #16
 8005358:	d0f1      	beq.n	800533e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3714      	adds	r7, #20
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr
 8005368:	00030d40 	.word	0x00030d40

0800536c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800536c:	b480      	push	{r7}
 800536e:	b089      	sub	sp, #36	; 0x24
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	4611      	mov	r1, r2
 8005378:	461a      	mov	r2, r3
 800537a:	460b      	mov	r3, r1
 800537c:	71fb      	strb	r3, [r7, #7]
 800537e:	4613      	mov	r3, r2
 8005380:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800538a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800538e:	2b00      	cmp	r3, #0
 8005390:	d123      	bne.n	80053da <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005392:	88bb      	ldrh	r3, [r7, #4]
 8005394:	3303      	adds	r3, #3
 8005396:	089b      	lsrs	r3, r3, #2
 8005398:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800539a:	2300      	movs	r3, #0
 800539c:	61bb      	str	r3, [r7, #24]
 800539e:	e018      	b.n	80053d2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80053a0:	79fb      	ldrb	r3, [r7, #7]
 80053a2:	031a      	lsls	r2, r3, #12
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	4413      	add	r3, r2
 80053a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053ac:	461a      	mov	r2, r3
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	3301      	adds	r3, #1
 80053b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	3301      	adds	r3, #1
 80053be:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	3301      	adds	r3, #1
 80053c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	3301      	adds	r3, #1
 80053ca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	3301      	adds	r3, #1
 80053d0:	61bb      	str	r3, [r7, #24]
 80053d2:	69ba      	ldr	r2, [r7, #24]
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d3e2      	bcc.n	80053a0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3724      	adds	r7, #36	; 0x24
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b08b      	sub	sp, #44	; 0x2c
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	4613      	mov	r3, r2
 80053f4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80053fe:	88fb      	ldrh	r3, [r7, #6]
 8005400:	089b      	lsrs	r3, r3, #2
 8005402:	b29b      	uxth	r3, r3
 8005404:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005406:	88fb      	ldrh	r3, [r7, #6]
 8005408:	f003 0303 	and.w	r3, r3, #3
 800540c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800540e:	2300      	movs	r3, #0
 8005410:	623b      	str	r3, [r7, #32]
 8005412:	e014      	b.n	800543e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005422:	3301      	adds	r3, #1
 8005424:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005428:	3301      	adds	r3, #1
 800542a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800542c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542e:	3301      	adds	r3, #1
 8005430:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005434:	3301      	adds	r3, #1
 8005436:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005438:	6a3b      	ldr	r3, [r7, #32]
 800543a:	3301      	adds	r3, #1
 800543c:	623b      	str	r3, [r7, #32]
 800543e:	6a3a      	ldr	r2, [r7, #32]
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	429a      	cmp	r2, r3
 8005444:	d3e6      	bcc.n	8005414 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005446:	8bfb      	ldrh	r3, [r7, #30]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d01e      	beq.n	800548a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800544c:	2300      	movs	r3, #0
 800544e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005456:	461a      	mov	r2, r3
 8005458:	f107 0310 	add.w	r3, r7, #16
 800545c:	6812      	ldr	r2, [r2, #0]
 800545e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005460:	693a      	ldr	r2, [r7, #16]
 8005462:	6a3b      	ldr	r3, [r7, #32]
 8005464:	b2db      	uxtb	r3, r3
 8005466:	00db      	lsls	r3, r3, #3
 8005468:	fa22 f303 	lsr.w	r3, r2, r3
 800546c:	b2da      	uxtb	r2, r3
 800546e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005470:	701a      	strb	r2, [r3, #0]
      i++;
 8005472:	6a3b      	ldr	r3, [r7, #32]
 8005474:	3301      	adds	r3, #1
 8005476:	623b      	str	r3, [r7, #32]
      pDest++;
 8005478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547a:	3301      	adds	r3, #1
 800547c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800547e:	8bfb      	ldrh	r3, [r7, #30]
 8005480:	3b01      	subs	r3, #1
 8005482:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005484:	8bfb      	ldrh	r3, [r7, #30]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1ea      	bne.n	8005460 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800548a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800548c:	4618      	mov	r0, r3
 800548e:	372c      	adds	r7, #44	; 0x2c
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	695b      	ldr	r3, [r3, #20]
 80054a4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	4013      	ands	r3, r2
 80054ae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80054b0:	68fb      	ldr	r3, [r7, #12]
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3714      	adds	r7, #20
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr

080054be <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80054be:	b480      	push	{r7}
 80054c0:	b083      	sub	sp, #12
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	695b      	ldr	r3, [r3, #20]
 80054ca:	f003 0301 	and.w	r3, r3, #1
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	370c      	adds	r7, #12
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
	...

080054dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80054dc:	b480      	push	{r7}
 80054de:	b085      	sub	sp, #20
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054e4:	2300      	movs	r3, #0
 80054e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	3301      	adds	r3, #1
 80054ec:	60fb      	str	r3, [r7, #12]
 80054ee:	4a13      	ldr	r2, [pc, #76]	; (800553c <USB_CoreReset+0x60>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d901      	bls.n	80054f8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e01a      	b.n	800552e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	daf3      	bge.n	80054e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005500:	2300      	movs	r3, #0
 8005502:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	f043 0201 	orr.w	r2, r3, #1
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	3301      	adds	r3, #1
 8005514:	60fb      	str	r3, [r7, #12]
 8005516:	4a09      	ldr	r2, [pc, #36]	; (800553c <USB_CoreReset+0x60>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d901      	bls.n	8005520 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	e006      	b.n	800552e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	f003 0301 	and.w	r3, r3, #1
 8005528:	2b01      	cmp	r3, #1
 800552a:	d0f1      	beq.n	8005510 <USB_CoreReset+0x34>

  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3714      	adds	r7, #20
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	00030d40 	.word	0x00030d40

08005540 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005540:	b084      	sub	sp, #16
 8005542:	b580      	push	{r7, lr}
 8005544:	b084      	sub	sp, #16
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
 800554a:	f107 001c 	add.w	r0, r7, #28
 800554e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800555c:	461a      	mov	r2, r3
 800555e:	2300      	movs	r3, #0
 8005560:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005566:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005572:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800558a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800558e:	2b00      	cmp	r3, #0
 8005590:	d018      	beq.n	80055c4 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005594:	2b01      	cmp	r3, #1
 8005596:	d10a      	bne.n	80055ae <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68ba      	ldr	r2, [r7, #8]
 80055a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055a6:	f043 0304 	orr.w	r3, r3, #4
 80055aa:	6013      	str	r3, [r2, #0]
 80055ac:	e014      	b.n	80055d8 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68ba      	ldr	r2, [r7, #8]
 80055b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055bc:	f023 0304 	bic.w	r3, r3, #4
 80055c0:	6013      	str	r3, [r2, #0]
 80055c2:	e009      	b.n	80055d8 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68ba      	ldr	r2, [r7, #8]
 80055ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055d2:	f023 0304 	bic.w	r3, r3, #4
 80055d6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80055d8:	2110      	movs	r1, #16
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f7ff fe82 	bl	80052e4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f7ff fea3 	bl	800532c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80055e6:	2300      	movs	r3, #0
 80055e8:	60fb      	str	r3, [r7, #12]
 80055ea:	e015      	b.n	8005618 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	015a      	lsls	r2, r3, #5
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	4413      	add	r3, r2
 80055f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055f8:	461a      	mov	r2, r3
 80055fa:	f04f 33ff 	mov.w	r3, #4294967295
 80055fe:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	015a      	lsls	r2, r3, #5
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	4413      	add	r3, r2
 8005608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800560c:	461a      	mov	r2, r3
 800560e:	2300      	movs	r3, #0
 8005610:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	3301      	adds	r3, #1
 8005616:	60fb      	str	r3, [r7, #12]
 8005618:	6a3b      	ldr	r3, [r7, #32]
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	429a      	cmp	r2, r3
 800561e:	d3e5      	bcc.n	80055ec <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f04f 32ff 	mov.w	r2, #4294967295
 800562c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00b      	beq.n	8005652 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005640:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a13      	ldr	r2, [pc, #76]	; (8005694 <USB_HostInit+0x154>)
 8005646:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a13      	ldr	r2, [pc, #76]	; (8005698 <USB_HostInit+0x158>)
 800564c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005650:	e009      	b.n	8005666 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2280      	movs	r2, #128	; 0x80
 8005656:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a10      	ldr	r2, [pc, #64]	; (800569c <USB_HostInit+0x15c>)
 800565c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a0f      	ldr	r2, [pc, #60]	; (80056a0 <USB_HostInit+0x160>)
 8005662:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005668:	2b00      	cmp	r3, #0
 800566a:	d105      	bne.n	8005678 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	f043 0210 	orr.w	r2, r3, #16
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	699a      	ldr	r2, [r3, #24]
 800567c:	4b09      	ldr	r3, [pc, #36]	; (80056a4 <USB_HostInit+0x164>)
 800567e:	4313      	orrs	r3, r2
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3710      	adds	r7, #16
 800568a:	46bd      	mov	sp, r7
 800568c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005690:	b004      	add	sp, #16
 8005692:	4770      	bx	lr
 8005694:	01000200 	.word	0x01000200
 8005698:	00e00300 	.word	0x00e00300
 800569c:	00600080 	.word	0x00600080
 80056a0:	004000e0 	.word	0x004000e0
 80056a4:	a3200008 	.word	0xa3200008

080056a8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	460b      	mov	r3, r1
 80056b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80056c6:	f023 0303 	bic.w	r3, r3, #3
 80056ca:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	78fb      	ldrb	r3, [r7, #3]
 80056d6:	f003 0303 	and.w	r3, r3, #3
 80056da:	68f9      	ldr	r1, [r7, #12]
 80056dc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80056e0:	4313      	orrs	r3, r2
 80056e2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80056e4:	78fb      	ldrb	r3, [r7, #3]
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d107      	bne.n	80056fa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056f0:	461a      	mov	r2, r3
 80056f2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80056f6:	6053      	str	r3, [r2, #4]
 80056f8:	e009      	b.n	800570e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80056fa:	78fb      	ldrb	r3, [r7, #3]
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d106      	bne.n	800570e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005706:	461a      	mov	r2, r3
 8005708:	f241 7370 	movw	r3, #6000	; 0x1770
 800570c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	3714      	adds	r7, #20
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005728:	2300      	movs	r3, #0
 800572a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800573c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800574a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800574c:	2064      	movs	r0, #100	; 0x64
 800574e:	f7fc f98d 	bl	8001a6c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800575a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800575e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005760:	200a      	movs	r0, #10
 8005762:	f7fc f983 	bl	8001a6c <HAL_Delay>

  return HAL_OK;
 8005766:	2300      	movs	r3, #0
}
 8005768:	4618      	mov	r0, r3
 800576a:	3710      	adds	r7, #16
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	460b      	mov	r3, r1
 800577a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005780:	2300      	movs	r3, #0
 8005782:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005794:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800579c:	2b00      	cmp	r3, #0
 800579e:	d109      	bne.n	80057b4 <USB_DriveVbus+0x44>
 80057a0:	78fb      	ldrb	r3, [r7, #3]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d106      	bne.n	80057b4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80057ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80057b2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057be:	d109      	bne.n	80057d4 <USB_DriveVbus+0x64>
 80057c0:	78fb      	ldrb	r3, [r7, #3]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d106      	bne.n	80057d4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80057ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057d2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3714      	adds	r7, #20
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr

080057e2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80057e2:	b480      	push	{r7}
 80057e4:	b085      	sub	sp, #20
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80057ee:	2300      	movs	r3, #0
 80057f0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	0c5b      	lsrs	r3, r3, #17
 8005800:	f003 0303 	and.w	r3, r3, #3
}
 8005804:	4618      	mov	r0, r3
 8005806:	3714      	adds	r7, #20
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	b29b      	uxth	r3, r3
}
 8005826:	4618      	mov	r0, r3
 8005828:	3714      	adds	r7, #20
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
	...

08005834 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b088      	sub	sp, #32
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	4608      	mov	r0, r1
 800583e:	4611      	mov	r1, r2
 8005840:	461a      	mov	r2, r3
 8005842:	4603      	mov	r3, r0
 8005844:	70fb      	strb	r3, [r7, #3]
 8005846:	460b      	mov	r3, r1
 8005848:	70bb      	strb	r3, [r7, #2]
 800584a:	4613      	mov	r3, r2
 800584c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800584e:	2300      	movs	r3, #0
 8005850:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005856:	78fb      	ldrb	r3, [r7, #3]
 8005858:	015a      	lsls	r2, r3, #5
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	4413      	add	r3, r2
 800585e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005862:	461a      	mov	r2, r3
 8005864:	f04f 33ff 	mov.w	r3, #4294967295
 8005868:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800586a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800586e:	2b03      	cmp	r3, #3
 8005870:	d87e      	bhi.n	8005970 <USB_HC_Init+0x13c>
 8005872:	a201      	add	r2, pc, #4	; (adr r2, 8005878 <USB_HC_Init+0x44>)
 8005874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005878:	08005889 	.word	0x08005889
 800587c:	08005933 	.word	0x08005933
 8005880:	08005889 	.word	0x08005889
 8005884:	080058f5 	.word	0x080058f5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005888:	78fb      	ldrb	r3, [r7, #3]
 800588a:	015a      	lsls	r2, r3, #5
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	4413      	add	r3, r2
 8005890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005894:	461a      	mov	r2, r3
 8005896:	f240 439d 	movw	r3, #1181	; 0x49d
 800589a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800589c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	da10      	bge.n	80058c6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80058a4:	78fb      	ldrb	r3, [r7, #3]
 80058a6:	015a      	lsls	r2, r3, #5
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	4413      	add	r3, r2
 80058ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	78fa      	ldrb	r2, [r7, #3]
 80058b4:	0151      	lsls	r1, r2, #5
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	440a      	add	r2, r1
 80058ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058c2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80058c4:	e057      	b.n	8005976 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d051      	beq.n	8005976 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80058d2:	78fb      	ldrb	r3, [r7, #3]
 80058d4:	015a      	lsls	r2, r3, #5
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	4413      	add	r3, r2
 80058da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	78fa      	ldrb	r2, [r7, #3]
 80058e2:	0151      	lsls	r1, r2, #5
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	440a      	add	r2, r1
 80058e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058ec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80058f0:	60d3      	str	r3, [r2, #12]
      break;
 80058f2:	e040      	b.n	8005976 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80058f4:	78fb      	ldrb	r3, [r7, #3]
 80058f6:	015a      	lsls	r2, r3, #5
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	4413      	add	r3, r2
 80058fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005900:	461a      	mov	r2, r3
 8005902:	f240 639d 	movw	r3, #1693	; 0x69d
 8005906:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005908:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800590c:	2b00      	cmp	r3, #0
 800590e:	da34      	bge.n	800597a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005910:	78fb      	ldrb	r3, [r7, #3]
 8005912:	015a      	lsls	r2, r3, #5
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	4413      	add	r3, r2
 8005918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	78fa      	ldrb	r2, [r7, #3]
 8005920:	0151      	lsls	r1, r2, #5
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	440a      	add	r2, r1
 8005926:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800592a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800592e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005930:	e023      	b.n	800597a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005932:	78fb      	ldrb	r3, [r7, #3]
 8005934:	015a      	lsls	r2, r3, #5
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	4413      	add	r3, r2
 800593a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800593e:	461a      	mov	r2, r3
 8005940:	f240 2325 	movw	r3, #549	; 0x225
 8005944:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005946:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800594a:	2b00      	cmp	r3, #0
 800594c:	da17      	bge.n	800597e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800594e:	78fb      	ldrb	r3, [r7, #3]
 8005950:	015a      	lsls	r2, r3, #5
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	4413      	add	r3, r2
 8005956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	78fa      	ldrb	r2, [r7, #3]
 800595e:	0151      	lsls	r1, r2, #5
 8005960:	693a      	ldr	r2, [r7, #16]
 8005962:	440a      	add	r2, r1
 8005964:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005968:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800596c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800596e:	e006      	b.n	800597e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	77fb      	strb	r3, [r7, #31]
      break;
 8005974:	e004      	b.n	8005980 <USB_HC_Init+0x14c>
      break;
 8005976:	bf00      	nop
 8005978:	e002      	b.n	8005980 <USB_HC_Init+0x14c>
      break;
 800597a:	bf00      	nop
 800597c:	e000      	b.n	8005980 <USB_HC_Init+0x14c>
      break;
 800597e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005986:	699a      	ldr	r2, [r3, #24]
 8005988:	78fb      	ldrb	r3, [r7, #3]
 800598a:	f003 030f 	and.w	r3, r3, #15
 800598e:	2101      	movs	r1, #1
 8005990:	fa01 f303 	lsl.w	r3, r1, r3
 8005994:	6939      	ldr	r1, [r7, #16]
 8005996:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800599a:	4313      	orrs	r3, r2
 800599c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80059aa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	da03      	bge.n	80059ba <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80059b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059b6:	61bb      	str	r3, [r7, #24]
 80059b8:	e001      	b.n	80059be <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80059ba:	2300      	movs	r3, #0
 80059bc:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f7ff ff0f 	bl	80057e2 <USB_GetHostSpeed>
 80059c4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80059c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d106      	bne.n	80059dc <USB_HC_Init+0x1a8>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d003      	beq.n	80059dc <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80059d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80059d8:	617b      	str	r3, [r7, #20]
 80059da:	e001      	b.n	80059e0 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80059dc:	2300      	movs	r3, #0
 80059de:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80059e0:	787b      	ldrb	r3, [r7, #1]
 80059e2:	059b      	lsls	r3, r3, #22
 80059e4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80059e8:	78bb      	ldrb	r3, [r7, #2]
 80059ea:	02db      	lsls	r3, r3, #11
 80059ec:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80059f0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80059f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80059f6:	049b      	lsls	r3, r3, #18
 80059f8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80059fc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80059fe:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005a00:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005a04:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005a0a:	78fb      	ldrb	r3, [r7, #3]
 8005a0c:	0159      	lsls	r1, r3, #5
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	440b      	add	r3, r1
 8005a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a16:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005a1c:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005a1e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005a22:	2b03      	cmp	r3, #3
 8005a24:	d10f      	bne.n	8005a46 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005a26:	78fb      	ldrb	r3, [r7, #3]
 8005a28:	015a      	lsls	r2, r3, #5
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	78fa      	ldrb	r2, [r7, #3]
 8005a36:	0151      	lsls	r1, r2, #5
 8005a38:	693a      	ldr	r2, [r7, #16]
 8005a3a:	440a      	add	r2, r1
 8005a3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a44:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005a46:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3720      	adds	r7, #32
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b08c      	sub	sp, #48	; 0x30
 8005a54:	af02      	add	r7, sp, #8
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	785b      	ldrb	r3, [r3, #1]
 8005a66:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005a68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a6c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d02d      	beq.n	8005ad6 <USB_HC_StartXfer+0x86>
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	791b      	ldrb	r3, [r3, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d129      	bne.n	8005ad6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005a82:	79fb      	ldrb	r3, [r7, #7]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d117      	bne.n	8005ab8 <USB_HC_StartXfer+0x68>
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	79db      	ldrb	r3, [r3, #7]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d003      	beq.n	8005a98 <USB_HC_StartXfer+0x48>
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	79db      	ldrb	r3, [r3, #7]
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d10f      	bne.n	8005ab8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	015a      	lsls	r2, r3, #5
 8005a9c:	6a3b      	ldr	r3, [r7, #32]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	69fa      	ldr	r2, [r7, #28]
 8005aa8:	0151      	lsls	r1, r2, #5
 8005aaa:	6a3a      	ldr	r2, [r7, #32]
 8005aac:	440a      	add	r2, r1
 8005aae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ab6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005ab8:	79fb      	ldrb	r3, [r7, #7]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d10b      	bne.n	8005ad6 <USB_HC_StartXfer+0x86>
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	795b      	ldrb	r3, [r3, #5]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d107      	bne.n	8005ad6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	785b      	ldrb	r3, [r3, #1]
 8005aca:	4619      	mov	r1, r3
 8005acc:	68f8      	ldr	r0, [r7, #12]
 8005ace:	f000 fa2f 	bl	8005f30 <USB_DoPing>
      return HAL_OK;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	e0f8      	b.n	8005cc8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d018      	beq.n	8005b10 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	68ba      	ldr	r2, [r7, #8]
 8005ae4:	8912      	ldrh	r2, [r2, #8]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	68ba      	ldr	r2, [r7, #8]
 8005aec:	8912      	ldrh	r2, [r2, #8]
 8005aee:	fbb3 f3f2 	udiv	r3, r3, r2
 8005af2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005af4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005af6:	8b7b      	ldrh	r3, [r7, #26]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d90b      	bls.n	8005b14 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005afc:	8b7b      	ldrh	r3, [r7, #26]
 8005afe:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005b00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005b02:	68ba      	ldr	r2, [r7, #8]
 8005b04:	8912      	ldrh	r2, [r2, #8]
 8005b06:	fb02 f203 	mul.w	r2, r2, r3
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	611a      	str	r2, [r3, #16]
 8005b0e:	e001      	b.n	8005b14 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005b10:	2301      	movs	r3, #1
 8005b12:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	78db      	ldrb	r3, [r3, #3]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d007      	beq.n	8005b2c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005b1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005b1e:	68ba      	ldr	r2, [r7, #8]
 8005b20:	8912      	ldrh	r2, [r2, #8]
 8005b22:	fb02 f203 	mul.w	r2, r2, r3
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	611a      	str	r2, [r3, #16]
 8005b2a:	e003      	b.n	8005b34 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	695a      	ldr	r2, [r3, #20]
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005b3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005b3e:	04d9      	lsls	r1, r3, #19
 8005b40:	4b63      	ldr	r3, [pc, #396]	; (8005cd0 <USB_HC_StartXfer+0x280>)
 8005b42:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005b44:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	7a9b      	ldrb	r3, [r3, #10]
 8005b4a:	075b      	lsls	r3, r3, #29
 8005b4c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005b50:	69f9      	ldr	r1, [r7, #28]
 8005b52:	0148      	lsls	r0, r1, #5
 8005b54:	6a39      	ldr	r1, [r7, #32]
 8005b56:	4401      	add	r1, r0
 8005b58:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005b5c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005b5e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005b60:	79fb      	ldrb	r3, [r7, #7]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d009      	beq.n	8005b7a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	68d9      	ldr	r1, [r3, #12]
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	015a      	lsls	r2, r3, #5
 8005b6e:	6a3b      	ldr	r3, [r7, #32]
 8005b70:	4413      	add	r3, r2
 8005b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b76:	460a      	mov	r2, r1
 8005b78:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005b7a:	6a3b      	ldr	r3, [r7, #32]
 8005b7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	bf0c      	ite	eq
 8005b8a:	2301      	moveq	r3, #1
 8005b8c:	2300      	movne	r3, #0
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	015a      	lsls	r2, r3, #5
 8005b96:	6a3b      	ldr	r3, [r7, #32]
 8005b98:	4413      	add	r3, r2
 8005b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	69fa      	ldr	r2, [r7, #28]
 8005ba2:	0151      	lsls	r1, r2, #5
 8005ba4:	6a3a      	ldr	r2, [r7, #32]
 8005ba6:	440a      	add	r2, r1
 8005ba8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005bb0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	015a      	lsls	r2, r3, #5
 8005bb6:	6a3b      	ldr	r3, [r7, #32]
 8005bb8:	4413      	add	r3, r2
 8005bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	7e7b      	ldrb	r3, [r7, #25]
 8005bc2:	075b      	lsls	r3, r3, #29
 8005bc4:	69f9      	ldr	r1, [r7, #28]
 8005bc6:	0148      	lsls	r0, r1, #5
 8005bc8:	6a39      	ldr	r1, [r7, #32]
 8005bca:	4401      	add	r1, r0
 8005bcc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	015a      	lsls	r2, r3, #5
 8005bd8:	6a3b      	ldr	r3, [r7, #32]
 8005bda:	4413      	add	r3, r2
 8005bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005bea:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	78db      	ldrb	r3, [r3, #3]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d004      	beq.n	8005bfe <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bfa:	613b      	str	r3, [r7, #16]
 8005bfc:	e003      	b.n	8005c06 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c04:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c0c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	015a      	lsls	r2, r3, #5
 8005c12:	6a3b      	ldr	r3, [r7, #32]
 8005c14:	4413      	add	r3, r2
 8005c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005c20:	79fb      	ldrb	r3, [r7, #7]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d001      	beq.n	8005c2a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005c26:	2300      	movs	r3, #0
 8005c28:	e04e      	b.n	8005cc8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	78db      	ldrb	r3, [r3, #3]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d149      	bne.n	8005cc6 <USB_HC_StartXfer+0x276>
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	695b      	ldr	r3, [r3, #20]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d045      	beq.n	8005cc6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	79db      	ldrb	r3, [r3, #7]
 8005c3e:	2b03      	cmp	r3, #3
 8005c40:	d830      	bhi.n	8005ca4 <USB_HC_StartXfer+0x254>
 8005c42:	a201      	add	r2, pc, #4	; (adr r2, 8005c48 <USB_HC_StartXfer+0x1f8>)
 8005c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c48:	08005c59 	.word	0x08005c59
 8005c4c:	08005c7d 	.word	0x08005c7d
 8005c50:	08005c59 	.word	0x08005c59
 8005c54:	08005c7d 	.word	0x08005c7d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	695b      	ldr	r3, [r3, #20]
 8005c5c:	3303      	adds	r3, #3
 8005c5e:	089b      	lsrs	r3, r3, #2
 8005c60:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005c62:	8afa      	ldrh	r2, [r7, #22]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d91c      	bls.n	8005ca8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	f043 0220 	orr.w	r2, r3, #32
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	619a      	str	r2, [r3, #24]
        }
        break;
 8005c7a:	e015      	b.n	8005ca8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	695b      	ldr	r3, [r3, #20]
 8005c80:	3303      	adds	r3, #3
 8005c82:	089b      	lsrs	r3, r3, #2
 8005c84:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005c86:	8afa      	ldrh	r2, [r7, #22]
 8005c88:	6a3b      	ldr	r3, [r7, #32]
 8005c8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d90a      	bls.n	8005cac <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	619a      	str	r2, [r3, #24]
        }
        break;
 8005ca2:	e003      	b.n	8005cac <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005ca4:	bf00      	nop
 8005ca6:	e002      	b.n	8005cae <USB_HC_StartXfer+0x25e>
        break;
 8005ca8:	bf00      	nop
 8005caa:	e000      	b.n	8005cae <USB_HC_StartXfer+0x25e>
        break;
 8005cac:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	68d9      	ldr	r1, [r3, #12]
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	785a      	ldrb	r2, [r3, #1]
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	2000      	movs	r0, #0
 8005cbe:	9000      	str	r0, [sp, #0]
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f7ff fb53 	bl	800536c <USB_WritePacket>
  }

  return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3728      	adds	r7, #40	; 0x28
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	1ff80000 	.word	0x1ff80000

08005cd4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ce6:	695b      	ldr	r3, [r3, #20]
 8005ce8:	b29b      	uxth	r3, r3
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3714      	adds	r7, #20
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr

08005cf6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005cf6:	b480      	push	{r7}
 8005cf8:	b089      	sub	sp, #36	; 0x24
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
 8005cfe:	460b      	mov	r3, r1
 8005d00:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8005d06:	78fb      	ldrb	r3, [r7, #3]
 8005d08:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	015a      	lsls	r2, r3, #5
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	4413      	add	r3, r2
 8005d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	0c9b      	lsrs	r3, r3, #18
 8005d1e:	f003 0303 	and.w	r3, r3, #3
 8005d22:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	015a      	lsls	r2, r3, #5
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	0fdb      	lsrs	r3, r3, #31
 8005d34:	f003 0301 	and.w	r3, r3, #1
 8005d38:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f003 0320 	and.w	r3, r3, #32
 8005d42:	2b20      	cmp	r3, #32
 8005d44:	d104      	bne.n	8005d50 <USB_HC_Halt+0x5a>
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d101      	bne.n	8005d50 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	e0e8      	b.n	8005f22 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d002      	beq.n	8005d5c <USB_HC_Halt+0x66>
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d173      	bne.n	8005e44 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	015a      	lsls	r2, r3, #5
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	4413      	add	r3, r2
 8005d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	0151      	lsls	r1, r2, #5
 8005d6e:	69ba      	ldr	r2, [r7, #24]
 8005d70:	440a      	add	r2, r1
 8005d72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d7a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f003 0320 	and.w	r3, r3, #32
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f040 80cb 	bne.w	8005f20 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d8e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d143      	bne.n	8005e1e <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	015a      	lsls	r2, r3, #5
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	0151      	lsls	r1, r2, #5
 8005da8:	69ba      	ldr	r2, [r7, #24]
 8005daa:	440a      	add	r2, r1
 8005dac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005db0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005db4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	015a      	lsls	r2, r3, #5
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	0151      	lsls	r1, r2, #5
 8005dc8:	69ba      	ldr	r2, [r7, #24]
 8005dca:	440a      	add	r2, r1
 8005dcc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005dd4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	015a      	lsls	r2, r3, #5
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	4413      	add	r3, r2
 8005dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	697a      	ldr	r2, [r7, #20]
 8005de6:	0151      	lsls	r1, r2, #5
 8005de8:	69ba      	ldr	r2, [r7, #24]
 8005dea:	440a      	add	r2, r1
 8005dec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005df0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005df4:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	3301      	adds	r3, #1
 8005dfa:	61fb      	str	r3, [r7, #28]
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e02:	d81d      	bhi.n	8005e40 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	015a      	lsls	r2, r3, #5
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e1a:	d0ec      	beq.n	8005df6 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005e1c:	e080      	b.n	8005f20 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	015a      	lsls	r2, r3, #5
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	4413      	add	r3, r2
 8005e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	0151      	lsls	r1, r2, #5
 8005e30:	69ba      	ldr	r2, [r7, #24]
 8005e32:	440a      	add	r2, r1
 8005e34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e3c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005e3e:	e06f      	b.n	8005f20 <USB_HC_Halt+0x22a>
            break;
 8005e40:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005e42:	e06d      	b.n	8005f20 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	015a      	lsls	r2, r3, #5
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	697a      	ldr	r2, [r7, #20]
 8005e54:	0151      	lsls	r1, r2, #5
 8005e56:	69ba      	ldr	r2, [r7, #24]
 8005e58:	440a      	add	r2, r1
 8005e5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e62:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d143      	bne.n	8005efc <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	015a      	lsls	r2, r3, #5
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	697a      	ldr	r2, [r7, #20]
 8005e84:	0151      	lsls	r1, r2, #5
 8005e86:	69ba      	ldr	r2, [r7, #24]
 8005e88:	440a      	add	r2, r1
 8005e8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e92:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	015a      	lsls	r2, r3, #5
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	697a      	ldr	r2, [r7, #20]
 8005ea4:	0151      	lsls	r1, r2, #5
 8005ea6:	69ba      	ldr	r2, [r7, #24]
 8005ea8:	440a      	add	r2, r1
 8005eaa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005eae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005eb2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	015a      	lsls	r2, r3, #5
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	4413      	add	r3, r2
 8005ebc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	0151      	lsls	r1, r2, #5
 8005ec6:	69ba      	ldr	r2, [r7, #24]
 8005ec8:	440a      	add	r2, r1
 8005eca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ece:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ed2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	61fb      	str	r3, [r7, #28]
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ee0:	d81d      	bhi.n	8005f1e <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	015a      	lsls	r2, r3, #5
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	4413      	add	r3, r2
 8005eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ef4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ef8:	d0ec      	beq.n	8005ed4 <USB_HC_Halt+0x1de>
 8005efa:	e011      	b.n	8005f20 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	015a      	lsls	r2, r3, #5
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	4413      	add	r3, r2
 8005f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	0151      	lsls	r1, r2, #5
 8005f0e:	69ba      	ldr	r2, [r7, #24]
 8005f10:	440a      	add	r2, r1
 8005f12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f1a:	6013      	str	r3, [r2, #0]
 8005f1c:	e000      	b.n	8005f20 <USB_HC_Halt+0x22a>
          break;
 8005f1e:	bf00      	nop
    }
  }

  return HAL_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3724      	adds	r7, #36	; 0x24
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
	...

08005f30 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b087      	sub	sp, #28
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	460b      	mov	r3, r1
 8005f3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005f40:	78fb      	ldrb	r3, [r7, #3]
 8005f42:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005f44:	2301      	movs	r3, #1
 8005f46:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	04da      	lsls	r2, r3, #19
 8005f4c:	4b15      	ldr	r3, [pc, #84]	; (8005fa4 <USB_DoPing+0x74>)
 8005f4e:	4013      	ands	r3, r2
 8005f50:	693a      	ldr	r2, [r7, #16]
 8005f52:	0151      	lsls	r1, r2, #5
 8005f54:	697a      	ldr	r2, [r7, #20]
 8005f56:	440a      	add	r2, r1
 8005f58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f60:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	015a      	lsls	r2, r3, #5
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	4413      	add	r3, r2
 8005f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f78:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f80:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	015a      	lsls	r2, r3, #5
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	4413      	add	r3, r2
 8005f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f8e:	461a      	mov	r2, r3
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	371c      	adds	r7, #28
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	1ff80000 	.word	0x1ff80000

08005fa8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b086      	sub	sp, #24
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f7ff f935 	bl	8005228 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005fbe:	2110      	movs	r1, #16
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f7ff f98f 	bl	80052e4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f7ff f9b0 	bl	800532c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005fcc:	2300      	movs	r3, #0
 8005fce:	613b      	str	r3, [r7, #16]
 8005fd0:	e01f      	b.n	8006012 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	015a      	lsls	r2, r3, #5
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	4413      	add	r3, r2
 8005fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fe8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ff0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ff8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	015a      	lsls	r2, r3, #5
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	4413      	add	r3, r2
 8006002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006006:	461a      	mov	r2, r3
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	3301      	adds	r3, #1
 8006010:	613b      	str	r3, [r7, #16]
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	2b0f      	cmp	r3, #15
 8006016:	d9dc      	bls.n	8005fd2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006018:	2300      	movs	r3, #0
 800601a:	613b      	str	r3, [r7, #16]
 800601c:	e034      	b.n	8006088 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	015a      	lsls	r2, r3, #5
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	4413      	add	r3, r2
 8006026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006034:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800603c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006044:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	015a      	lsls	r2, r3, #5
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	4413      	add	r3, r2
 800604e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006052:	461a      	mov	r2, r3
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	3301      	adds	r3, #1
 800605c:	617b      	str	r3, [r7, #20]
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006064:	d80c      	bhi.n	8006080 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	015a      	lsls	r2, r3, #5
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	4413      	add	r3, r2
 800606e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006078:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800607c:	d0ec      	beq.n	8006058 <USB_StopHost+0xb0>
 800607e:	e000      	b.n	8006082 <USB_StopHost+0xda>
        break;
 8006080:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	3301      	adds	r3, #1
 8006086:	613b      	str	r3, [r7, #16]
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	2b0f      	cmp	r3, #15
 800608c:	d9c7      	bls.n	800601e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006094:	461a      	mov	r2, r3
 8006096:	f04f 33ff 	mov.w	r3, #4294967295
 800609a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f04f 32ff 	mov.w	r2, #4294967295
 80060a2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f7ff f8ae 	bl	8005206 <USB_EnableGlobalInt>

  return HAL_OK;
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3718      	adds	r7, #24
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 80060b8:	4904      	ldr	r1, [pc, #16]	; (80060cc <MX_FATFS_Init+0x18>)
 80060ba:	4805      	ldr	r0, [pc, #20]	; (80060d0 <MX_FATFS_Init+0x1c>)
 80060bc:	f007 fd80 	bl	800dbc0 <FATFS_LinkDriver>
 80060c0:	4603      	mov	r3, r0
 80060c2:	461a      	mov	r2, r3
 80060c4:	4b03      	ldr	r3, [pc, #12]	; (80060d4 <MX_FATFS_Init+0x20>)
 80060c6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80060c8:	bf00      	nop
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	20000af0 	.word	0x20000af0
 80060d0:	08010c4c 	.word	0x08010c4c
 80060d4:	20002b8c 	.word	0x20002b8c

080060d8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80060d8:	b480      	push	{r7}
 80060da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80060dc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80060de:	4618      	mov	r0, r3
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	4603      	mov	r3, r0
 80060f0:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	4603      	mov	r3, r0
 8006108:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800610e:	79fb      	ldrb	r3, [r7, #7]
 8006110:	4619      	mov	r1, r3
 8006112:	4808      	ldr	r0, [pc, #32]	; (8006134 <USBH_status+0x34>)
 8006114:	f000 fe1a 	bl	8006d4c <USBH_MSC_UnitIsReady>
 8006118:	4603      	mov	r3, r0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d002      	beq.n	8006124 <USBH_status+0x24>
  {
    res = RES_OK;
 800611e:	2300      	movs	r3, #0
 8006120:	73fb      	strb	r3, [r7, #15]
 8006122:	e001      	b.n	8006128 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8006128:	7bfb      	ldrb	r3, [r7, #15]
}
 800612a:	4618      	mov	r0, r3
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	20002c20 	.word	0x20002c20

08006138 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b094      	sub	sp, #80	; 0x50
 800613c:	af02      	add	r7, sp, #8
 800613e:	60b9      	str	r1, [r7, #8]
 8006140:	607a      	str	r2, [r7, #4]
 8006142:	603b      	str	r3, [r7, #0]
 8006144:	4603      	mov	r3, r0
 8006146:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800614e:	7bf9      	ldrb	r1, [r7, #15]
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	9300      	str	r3, [sp, #0]
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	4813      	ldr	r0, [pc, #76]	; (80061a8 <USBH_read+0x70>)
 800615a:	f000 fe41 	bl	8006de0 <USBH_MSC_Read>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d103      	bne.n	800616c <USBH_read+0x34>
  {
    res = RES_OK;
 8006164:	2300      	movs	r3, #0
 8006166:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800616a:	e017      	b.n	800619c <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800616c:	f107 0210 	add.w	r2, r7, #16
 8006170:	7bfb      	ldrb	r3, [r7, #15]
 8006172:	4619      	mov	r1, r3
 8006174:	480c      	ldr	r0, [pc, #48]	; (80061a8 <USBH_read+0x70>)
 8006176:	f000 fe0f 	bl	8006d98 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800617a:	7f7b      	ldrb	r3, [r7, #29]
 800617c:	2b3a      	cmp	r3, #58	; 0x3a
 800617e:	d005      	beq.n	800618c <USBH_read+0x54>
 8006180:	2b3a      	cmp	r3, #58	; 0x3a
 8006182:	dc07      	bgt.n	8006194 <USBH_read+0x5c>
 8006184:	2b04      	cmp	r3, #4
 8006186:	d001      	beq.n	800618c <USBH_read+0x54>
 8006188:	2b28      	cmp	r3, #40	; 0x28
 800618a:	d103      	bne.n	8006194 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 800618c:	2303      	movs	r3, #3
 800618e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006192:	e003      	b.n	800619c <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800619a:	bf00      	nop
    }
  }

  return res;
 800619c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3748      	adds	r7, #72	; 0x48
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	20002c20 	.word	0x20002c20

080061ac <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b094      	sub	sp, #80	; 0x50
 80061b0:	af02      	add	r7, sp, #8
 80061b2:	60b9      	str	r1, [r7, #8]
 80061b4:	607a      	str	r2, [r7, #4]
 80061b6:	603b      	str	r3, [r7, #0]
 80061b8:	4603      	mov	r3, r0
 80061ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 80061c2:	7bf9      	ldrb	r1, [r7, #15]
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	9300      	str	r3, [sp, #0]
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	4817      	ldr	r0, [pc, #92]	; (800622c <USBH_write+0x80>)
 80061ce:	f000 fe70 	bl	8006eb2 <USBH_MSC_Write>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d103      	bne.n	80061e0 <USBH_write+0x34>
  {
    res = RES_OK;
 80061d8:	2300      	movs	r3, #0
 80061da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80061de:	e01f      	b.n	8006220 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80061e0:	f107 0210 	add.w	r2, r7, #16
 80061e4:	7bfb      	ldrb	r3, [r7, #15]
 80061e6:	4619      	mov	r1, r3
 80061e8:	4810      	ldr	r0, [pc, #64]	; (800622c <USBH_write+0x80>)
 80061ea:	f000 fdd5 	bl	8006d98 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80061ee:	7f7b      	ldrb	r3, [r7, #29]
 80061f0:	2b3a      	cmp	r3, #58	; 0x3a
 80061f2:	d00d      	beq.n	8006210 <USBH_write+0x64>
 80061f4:	2b3a      	cmp	r3, #58	; 0x3a
 80061f6:	dc0f      	bgt.n	8006218 <USBH_write+0x6c>
 80061f8:	2b28      	cmp	r3, #40	; 0x28
 80061fa:	d009      	beq.n	8006210 <USBH_write+0x64>
 80061fc:	2b28      	cmp	r3, #40	; 0x28
 80061fe:	dc0b      	bgt.n	8006218 <USBH_write+0x6c>
 8006200:	2b04      	cmp	r3, #4
 8006202:	d005      	beq.n	8006210 <USBH_write+0x64>
 8006204:	2b27      	cmp	r3, #39	; 0x27
 8006206:	d107      	bne.n	8006218 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8006208:	2302      	movs	r3, #2
 800620a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800620e:	e007      	b.n	8006220 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8006210:	2303      	movs	r3, #3
 8006212:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006216:	e003      	b.n	8006220 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800621e:	bf00      	nop
    }
  }

  return res;
 8006220:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006224:	4618      	mov	r0, r3
 8006226:	3748      	adds	r7, #72	; 0x48
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}
 800622c:	20002c20 	.word	0x20002c20

08006230 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b090      	sub	sp, #64	; 0x40
 8006234:	af00      	add	r7, sp, #0
 8006236:	4603      	mov	r3, r0
 8006238:	603a      	str	r2, [r7, #0]
 800623a:	71fb      	strb	r3, [r7, #7]
 800623c:	460b      	mov	r3, r1
 800623e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8006246:	79bb      	ldrb	r3, [r7, #6]
 8006248:	2b03      	cmp	r3, #3
 800624a:	d852      	bhi.n	80062f2 <USBH_ioctl+0xc2>
 800624c:	a201      	add	r2, pc, #4	; (adr r2, 8006254 <USBH_ioctl+0x24>)
 800624e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006252:	bf00      	nop
 8006254:	08006265 	.word	0x08006265
 8006258:	0800626d 	.word	0x0800626d
 800625c:	08006297 	.word	0x08006297
 8006260:	080062c3 	.word	0x080062c3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8006264:	2300      	movs	r3, #0
 8006266:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800626a:	e045      	b.n	80062f8 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800626c:	f107 0208 	add.w	r2, r7, #8
 8006270:	79fb      	ldrb	r3, [r7, #7]
 8006272:	4619      	mov	r1, r3
 8006274:	4823      	ldr	r0, [pc, #140]	; (8006304 <USBH_ioctl+0xd4>)
 8006276:	f000 fd8f 	bl	8006d98 <USBH_MSC_GetLUNInfo>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d106      	bne.n	800628e <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8006286:	2300      	movs	r3, #0
 8006288:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800628c:	e034      	b.n	80062f8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006294:	e030      	b.n	80062f8 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8006296:	f107 0208 	add.w	r2, r7, #8
 800629a:	79fb      	ldrb	r3, [r7, #7]
 800629c:	4619      	mov	r1, r3
 800629e:	4819      	ldr	r0, [pc, #100]	; (8006304 <USBH_ioctl+0xd4>)
 80062a0:	f000 fd7a 	bl	8006d98 <USBH_MSC_GetLUNInfo>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d107      	bne.n	80062ba <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 80062aa:	8a3b      	ldrh	r3, [r7, #16]
 80062ac:	461a      	mov	r2, r3
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80062b2:	2300      	movs	r3, #0
 80062b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80062b8:	e01e      	b.n	80062f8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80062c0:	e01a      	b.n	80062f8 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80062c2:	f107 0208 	add.w	r2, r7, #8
 80062c6:	79fb      	ldrb	r3, [r7, #7]
 80062c8:	4619      	mov	r1, r3
 80062ca:	480e      	ldr	r0, [pc, #56]	; (8006304 <USBH_ioctl+0xd4>)
 80062cc:	f000 fd64 	bl	8006d98 <USBH_MSC_GetLUNInfo>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d109      	bne.n	80062ea <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 80062d6:	8a3b      	ldrh	r3, [r7, #16]
 80062d8:	0a5b      	lsrs	r3, r3, #9
 80062da:	b29b      	uxth	r3, r3
 80062dc:	461a      	mov	r2, r3
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80062e2:	2300      	movs	r3, #0
 80062e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80062e8:	e006      	b.n	80062f8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80062f0:	e002      	b.n	80062f8 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 80062f2:	2304      	movs	r3, #4
 80062f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 80062f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3740      	adds	r7, #64	; 0x40
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	20002c20 	.word	0x20002c20

08006308 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006308:	b590      	push	{r4, r7, lr}
 800630a:	b089      	sub	sp, #36	; 0x24
 800630c:	af04      	add	r7, sp, #16
 800630e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006316:	7919      	ldrb	r1, [r3, #4]
 8006318:	2350      	movs	r3, #80	; 0x50
 800631a:	2206      	movs	r2, #6
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f001 fc53 	bl	8007bc8 <USBH_FindInterface>
 8006322:	4603      	mov	r3, r0
 8006324:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8006326:	7bfb      	ldrb	r3, [r7, #15]
 8006328:	2bff      	cmp	r3, #255	; 0xff
 800632a:	d002      	beq.n	8006332 <USBH_MSC_InterfaceInit+0x2a>
 800632c:	7bfb      	ldrb	r3, [r7, #15]
 800632e:	2b01      	cmp	r3, #1
 8006330:	d901      	bls.n	8006336 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006332:	2302      	movs	r3, #2
 8006334:	e0ef      	b.n	8006516 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8006336:	7bfb      	ldrb	r3, [r7, #15]
 8006338:	4619      	mov	r1, r3
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f001 fc28 	bl	8007b90 <USBH_SelectInterface>
 8006340:	4603      	mov	r3, r0
 8006342:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006344:	7bbb      	ldrb	r3, [r7, #14]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d001      	beq.n	800634e <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800634a:	2302      	movs	r3, #2
 800634c:	e0e3      	b.n	8006516 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006354:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006358:	f008 f8b8 	bl	800e4cc <malloc>
 800635c:	4603      	mov	r3, r0
 800635e:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006366:	69db      	ldr	r3, [r3, #28]
 8006368:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d101      	bne.n	8006374 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8006370:	2302      	movs	r3, #2
 8006372:	e0d0      	b.n	8006516 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8006374:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006378:	2100      	movs	r1, #0
 800637a:	68b8      	ldr	r0, [r7, #8]
 800637c:	f008 f8c4 	bl	800e508 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006380:	7bfb      	ldrb	r3, [r7, #15]
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	211a      	movs	r1, #26
 8006386:	fb01 f303 	mul.w	r3, r1, r3
 800638a:	4413      	add	r3, r2
 800638c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	b25b      	sxtb	r3, r3
 8006394:	2b00      	cmp	r3, #0
 8006396:	da16      	bge.n	80063c6 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8006398:	7bfb      	ldrb	r3, [r7, #15]
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	211a      	movs	r1, #26
 800639e:	fb01 f303 	mul.w	r3, r1, r3
 80063a2:	4413      	add	r3, r2
 80063a4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80063a8:	781a      	ldrb	r2, [r3, #0]
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80063ae:	7bfb      	ldrb	r3, [r7, #15]
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	211a      	movs	r1, #26
 80063b4:	fb01 f303 	mul.w	r3, r1, r3
 80063b8:	4413      	add	r3, r2
 80063ba:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80063be:	881a      	ldrh	r2, [r3, #0]
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	815a      	strh	r2, [r3, #10]
 80063c4:	e015      	b.n	80063f2 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80063c6:	7bfb      	ldrb	r3, [r7, #15]
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	211a      	movs	r1, #26
 80063cc:	fb01 f303 	mul.w	r3, r1, r3
 80063d0:	4413      	add	r3, r2
 80063d2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80063d6:	781a      	ldrb	r2, [r3, #0]
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80063dc:	7bfb      	ldrb	r3, [r7, #15]
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	211a      	movs	r1, #26
 80063e2:	fb01 f303 	mul.w	r3, r1, r3
 80063e6:	4413      	add	r3, r2
 80063e8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80063ec:	881a      	ldrh	r2, [r3, #0]
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80063f2:	7bfb      	ldrb	r3, [r7, #15]
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	211a      	movs	r1, #26
 80063f8:	fb01 f303 	mul.w	r3, r1, r3
 80063fc:	4413      	add	r3, r2
 80063fe:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	b25b      	sxtb	r3, r3
 8006406:	2b00      	cmp	r3, #0
 8006408:	da16      	bge.n	8006438 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800640a:	7bfb      	ldrb	r3, [r7, #15]
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	211a      	movs	r1, #26
 8006410:	fb01 f303 	mul.w	r3, r1, r3
 8006414:	4413      	add	r3, r2
 8006416:	f203 3356 	addw	r3, r3, #854	; 0x356
 800641a:	781a      	ldrb	r2, [r3, #0]
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006420:	7bfb      	ldrb	r3, [r7, #15]
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	211a      	movs	r1, #26
 8006426:	fb01 f303 	mul.w	r3, r1, r3
 800642a:	4413      	add	r3, r2
 800642c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006430:	881a      	ldrh	r2, [r3, #0]
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	815a      	strh	r2, [r3, #10]
 8006436:	e015      	b.n	8006464 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8006438:	7bfb      	ldrb	r3, [r7, #15]
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	211a      	movs	r1, #26
 800643e:	fb01 f303 	mul.w	r3, r1, r3
 8006442:	4413      	add	r3, r2
 8006444:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006448:	781a      	ldrb	r2, [r3, #0]
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800644e:	7bfb      	ldrb	r3, [r7, #15]
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	211a      	movs	r1, #26
 8006454:	fb01 f303 	mul.w	r3, r1, r3
 8006458:	4413      	add	r3, r2
 800645a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800645e:	881a      	ldrh	r2, [r3, #0]
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	2200      	movs	r2, #0
 8006468:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	2200      	movs	r2, #0
 800646e:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	2200      	movs	r2, #0
 8006474:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	799b      	ldrb	r3, [r3, #6]
 800647a:	4619      	mov	r1, r3
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f002 fdc4 	bl	800900a <USBH_AllocPipe>
 8006482:	4603      	mov	r3, r0
 8006484:	461a      	mov	r2, r3
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	79db      	ldrb	r3, [r3, #7]
 800648e:	4619      	mov	r1, r3
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f002 fdba 	bl	800900a <USBH_AllocPipe>
 8006496:	4603      	mov	r3, r0
 8006498:	461a      	mov	r2, r3
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 fdac 	bl	8006ffc <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	7959      	ldrb	r1, [r3, #5]
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	7998      	ldrb	r0, [r3, #6]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80064b8:	68ba      	ldr	r2, [r7, #8]
 80064ba:	8912      	ldrh	r2, [r2, #8]
 80064bc:	9202      	str	r2, [sp, #8]
 80064be:	2202      	movs	r2, #2
 80064c0:	9201      	str	r2, [sp, #4]
 80064c2:	9300      	str	r3, [sp, #0]
 80064c4:	4623      	mov	r3, r4
 80064c6:	4602      	mov	r2, r0
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f002 fd6f 	bl	8008fac <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	7919      	ldrb	r1, [r3, #4]
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	79d8      	ldrb	r0, [r3, #7]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80064e2:	68ba      	ldr	r2, [r7, #8]
 80064e4:	8952      	ldrh	r2, [r2, #10]
 80064e6:	9202      	str	r2, [sp, #8]
 80064e8:	2202      	movs	r2, #2
 80064ea:	9201      	str	r2, [sp, #4]
 80064ec:	9300      	str	r3, [sp, #0]
 80064ee:	4623      	mov	r3, r4
 80064f0:	4602      	mov	r2, r0
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f002 fd5a 	bl	8008fac <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	791b      	ldrb	r3, [r3, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	4619      	mov	r1, r3
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f007 ff05 	bl	800e310 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	795b      	ldrb	r3, [r3, #5]
 800650a:	2200      	movs	r2, #0
 800650c:	4619      	mov	r1, r3
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f007 fefe 	bl	800e310 <USBH_LL_SetToggle>

  return USBH_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3714      	adds	r7, #20
 800651a:	46bd      	mov	sp, r7
 800651c:	bd90      	pop	{r4, r7, pc}

0800651e <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800651e:	b580      	push	{r7, lr}
 8006520:	b084      	sub	sp, #16
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800652c:	69db      	ldr	r3, [r3, #28]
 800652e:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	795b      	ldrb	r3, [r3, #5]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d00e      	beq.n	8006556 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	795b      	ldrb	r3, [r3, #5]
 800653c:	4619      	mov	r1, r3
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f002 fd53 	bl	8008fea <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	795b      	ldrb	r3, [r3, #5]
 8006548:	4619      	mov	r1, r3
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f002 fd7e 	bl	800904c <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2200      	movs	r2, #0
 8006554:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	791b      	ldrb	r3, [r3, #4]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00e      	beq.n	800657c <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	791b      	ldrb	r3, [r3, #4]
 8006562:	4619      	mov	r1, r3
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f002 fd40 	bl	8008fea <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	791b      	ldrb	r3, [r3, #4]
 800656e:	4619      	mov	r1, r3
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f002 fd6b 	bl	800904c <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2200      	movs	r2, #0
 800657a:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006582:	69db      	ldr	r3, [r3, #28]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d00b      	beq.n	80065a0 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800658e:	69db      	ldr	r3, [r3, #28]
 8006590:	4618      	mov	r0, r3
 8006592:	f007 ffa3 	bl	800e4dc <free>
    phost->pActiveClass->pData = 0U;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800659c:	2200      	movs	r2, #0
 800659e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3710      	adds	r7, #16
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}

080065aa <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80065aa:	b580      	push	{r7, lr}
 80065ac:	b084      	sub	sp, #16
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065b8:	69db      	ldr	r3, [r3, #28]
 80065ba:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 80065bc:	2301      	movs	r3, #1
 80065be:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	7b9b      	ldrb	r3, [r3, #14]
 80065c4:	2b03      	cmp	r3, #3
 80065c6:	d041      	beq.n	800664c <USBH_MSC_ClassRequest+0xa2>
 80065c8:	2b03      	cmp	r3, #3
 80065ca:	dc4b      	bgt.n	8006664 <USBH_MSC_ClassRequest+0xba>
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d001      	beq.n	80065d4 <USBH_MSC_ClassRequest+0x2a>
 80065d0:	2b02      	cmp	r3, #2
 80065d2:	d147      	bne.n	8006664 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	4619      	mov	r1, r3
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 fcf0 	bl	8006fbe <USBH_MSC_BOT_REQ_GetMaxLUN>
 80065de:	4603      	mov	r3, r0
 80065e0:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 80065e2:	7bfb      	ldrb	r3, [r7, #15]
 80065e4:	2b03      	cmp	r3, #3
 80065e6:	d104      	bne.n	80065f2 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	2200      	movs	r2, #0
 80065ec:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 80065ee:	2300      	movs	r3, #0
 80065f0:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 80065f2:	7bfb      	ldrb	r3, [r7, #15]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d137      	bne.n	8006668 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	2b02      	cmp	r3, #2
 80065fe:	d804      	bhi.n	800660a <USBH_MSC_ClassRequest+0x60>
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	3301      	adds	r3, #1
 8006606:	b2da      	uxtb	r2, r3
 8006608:	e000      	b.n	800660c <USBH_MSC_ClassRequest+0x62>
 800660a:	2202      	movs	r2, #2
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8006610:	2300      	movs	r3, #0
 8006612:	73bb      	strb	r3, [r7, #14]
 8006614:	e014      	b.n	8006640 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8006616:	7bbb      	ldrb	r3, [r7, #14]
 8006618:	68ba      	ldr	r2, [r7, #8]
 800661a:	2134      	movs	r1, #52	; 0x34
 800661c:	fb01 f303 	mul.w	r3, r1, r3
 8006620:	4413      	add	r3, r2
 8006622:	3392      	adds	r3, #146	; 0x92
 8006624:	2202      	movs	r2, #2
 8006626:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8006628:	7bbb      	ldrb	r3, [r7, #14]
 800662a:	68ba      	ldr	r2, [r7, #8]
 800662c:	2134      	movs	r1, #52	; 0x34
 800662e:	fb01 f303 	mul.w	r3, r1, r3
 8006632:	4413      	add	r3, r2
 8006634:	33c1      	adds	r3, #193	; 0xc1
 8006636:	2200      	movs	r2, #0
 8006638:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800663a:	7bbb      	ldrb	r3, [r7, #14]
 800663c:	3301      	adds	r3, #1
 800663e:	73bb      	strb	r3, [r7, #14]
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	7bba      	ldrb	r2, [r7, #14]
 8006646:	429a      	cmp	r2, r3
 8006648:	d3e5      	bcc.n	8006616 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 800664a:	e00d      	b.n	8006668 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800664c:	2100      	movs	r1, #0
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f002 f87b 	bl	800874a <USBH_ClrFeature>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d108      	bne.n	800666c <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	7bda      	ldrb	r2, [r3, #15]
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	739a      	strb	r2, [r3, #14]
      }
      break;
 8006662:	e003      	b.n	800666c <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8006664:	bf00      	nop
 8006666:	e002      	b.n	800666e <USBH_MSC_ClassRequest+0xc4>
      break;
 8006668:	bf00      	nop
 800666a:	e000      	b.n	800666e <USBH_MSC_ClassRequest+0xc4>
      break;
 800666c:	bf00      	nop
  }

  return status;
 800666e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006670:	4618      	mov	r0, r3
 8006672:	3710      	adds	r7, #16
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b086      	sub	sp, #24
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006686:	69db      	ldr	r3, [r3, #28]
 8006688:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800668a:	2301      	movs	r3, #1
 800668c:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800668e:	2301      	movs	r3, #1
 8006690:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8006692:	2301      	movs	r3, #1
 8006694:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	7b1b      	ldrb	r3, [r3, #12]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d003      	beq.n	80066a6 <USBH_MSC_Process+0x2e>
 800669e:	2b01      	cmp	r3, #1
 80066a0:	f000 8271 	beq.w	8006b86 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 80066a4:	e272      	b.n	8006b8c <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	429a      	cmp	r2, r3
 80066b4:	f080 824f 	bcs.w	8006b56 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80066be:	4619      	mov	r1, r3
 80066c0:	693a      	ldr	r2, [r7, #16]
 80066c2:	2334      	movs	r3, #52	; 0x34
 80066c4:	fb03 f301 	mul.w	r3, r3, r1
 80066c8:	4413      	add	r3, r2
 80066ca:	3391      	adds	r3, #145	; 0x91
 80066cc:	2201      	movs	r2, #1
 80066ce:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80066d6:	4619      	mov	r1, r3
 80066d8:	693a      	ldr	r2, [r7, #16]
 80066da:	2334      	movs	r3, #52	; 0x34
 80066dc:	fb03 f301 	mul.w	r3, r3, r1
 80066e0:	4413      	add	r3, r2
 80066e2:	3390      	adds	r3, #144	; 0x90
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	2b08      	cmp	r3, #8
 80066e8:	f200 8243 	bhi.w	8006b72 <USBH_MSC_Process+0x4fa>
 80066ec:	a201      	add	r2, pc, #4	; (adr r2, 80066f4 <USBH_MSC_Process+0x7c>)
 80066ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f2:	bf00      	nop
 80066f4:	08006719 	.word	0x08006719
 80066f8:	08006b73 	.word	0x08006b73
 80066fc:	080067e1 	.word	0x080067e1
 8006700:	08006965 	.word	0x08006965
 8006704:	0800673f 	.word	0x0800673f
 8006708:	08006a31 	.word	0x08006a31
 800670c:	08006b73 	.word	0x08006b73
 8006710:	08006b73 	.word	0x08006b73
 8006714:	08006b45 	.word	0x08006b45
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800671e:	4619      	mov	r1, r3
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	2334      	movs	r3, #52	; 0x34
 8006724:	fb03 f301 	mul.w	r3, r3, r1
 8006728:	4413      	add	r3, r2
 800672a:	3390      	adds	r3, #144	; 0x90
 800672c:	2204      	movs	r2, #4
 800672e:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800673c:	e222      	b.n	8006b84 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006744:	b2d9      	uxtb	r1, r3
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800674c:	461a      	mov	r2, r3
 800674e:	2334      	movs	r3, #52	; 0x34
 8006750:	fb03 f302 	mul.w	r3, r3, r2
 8006754:	3398      	adds	r3, #152	; 0x98
 8006756:	693a      	ldr	r2, [r7, #16]
 8006758:	4413      	add	r3, r2
 800675a:	3307      	adds	r3, #7
 800675c:	461a      	mov	r2, r3
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 ff6a 	bl	8007638 <USBH_MSC_SCSI_Inquiry>
 8006764:	4603      	mov	r3, r0
 8006766:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8006768:	7bfb      	ldrb	r3, [r7, #15]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d10b      	bne.n	8006786 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006774:	4619      	mov	r1, r3
 8006776:	693a      	ldr	r2, [r7, #16]
 8006778:	2334      	movs	r3, #52	; 0x34
 800677a:	fb03 f301 	mul.w	r3, r3, r1
 800677e:	4413      	add	r3, r2
 8006780:	3390      	adds	r3, #144	; 0x90
 8006782:	2202      	movs	r2, #2
 8006784:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8006786:	7bfb      	ldrb	r3, [r7, #15]
 8006788:	2b02      	cmp	r3, #2
 800678a:	d10c      	bne.n	80067a6 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006792:	4619      	mov	r1, r3
 8006794:	693a      	ldr	r2, [r7, #16]
 8006796:	2334      	movs	r3, #52	; 0x34
 8006798:	fb03 f301 	mul.w	r3, r3, r1
 800679c:	4413      	add	r3, r2
 800679e:	3390      	adds	r3, #144	; 0x90
 80067a0:	2205      	movs	r2, #5
 80067a2:	701a      	strb	r2, [r3, #0]
            break;
 80067a4:	e1e7      	b.n	8006b76 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80067a6:	7bfb      	ldrb	r3, [r7, #15]
 80067a8:	2b04      	cmp	r3, #4
 80067aa:	f040 81e4 	bne.w	8006b76 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80067b4:	4619      	mov	r1, r3
 80067b6:	693a      	ldr	r2, [r7, #16]
 80067b8:	2334      	movs	r3, #52	; 0x34
 80067ba:	fb03 f301 	mul.w	r3, r3, r1
 80067be:	4413      	add	r3, r2
 80067c0:	3390      	adds	r3, #144	; 0x90
 80067c2:	2201      	movs	r2, #1
 80067c4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80067cc:	4619      	mov	r1, r3
 80067ce:	693a      	ldr	r2, [r7, #16]
 80067d0:	2334      	movs	r3, #52	; 0x34
 80067d2:	fb03 f301 	mul.w	r3, r3, r1
 80067d6:	4413      	add	r3, r2
 80067d8:	3391      	adds	r3, #145	; 0x91
 80067da:	2202      	movs	r2, #2
 80067dc:	701a      	strb	r2, [r3, #0]
            break;
 80067de:	e1ca      	b.n	8006b76 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	4619      	mov	r1, r3
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 fe66 	bl	80074bc <USBH_MSC_SCSI_TestUnitReady>
 80067f0:	4603      	mov	r3, r0
 80067f2:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 80067f4:	7bbb      	ldrb	r3, [r7, #14]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d149      	bne.n	800688e <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006800:	4619      	mov	r1, r3
 8006802:	693a      	ldr	r2, [r7, #16]
 8006804:	2334      	movs	r3, #52	; 0x34
 8006806:	fb03 f301 	mul.w	r3, r3, r1
 800680a:	4413      	add	r3, r2
 800680c:	3392      	adds	r3, #146	; 0x92
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00c      	beq.n	800682e <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800681a:	4619      	mov	r1, r3
 800681c:	693a      	ldr	r2, [r7, #16]
 800681e:	2334      	movs	r3, #52	; 0x34
 8006820:	fb03 f301 	mul.w	r3, r3, r1
 8006824:	4413      	add	r3, r2
 8006826:	33c1      	adds	r3, #193	; 0xc1
 8006828:	2201      	movs	r2, #1
 800682a:	701a      	strb	r2, [r3, #0]
 800682c:	e00b      	b.n	8006846 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006834:	4619      	mov	r1, r3
 8006836:	693a      	ldr	r2, [r7, #16]
 8006838:	2334      	movs	r3, #52	; 0x34
 800683a:	fb03 f301 	mul.w	r3, r3, r1
 800683e:	4413      	add	r3, r2
 8006840:	33c1      	adds	r3, #193	; 0xc1
 8006842:	2200      	movs	r2, #0
 8006844:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800684c:	4619      	mov	r1, r3
 800684e:	693a      	ldr	r2, [r7, #16]
 8006850:	2334      	movs	r3, #52	; 0x34
 8006852:	fb03 f301 	mul.w	r3, r3, r1
 8006856:	4413      	add	r3, r2
 8006858:	3390      	adds	r3, #144	; 0x90
 800685a:	2203      	movs	r2, #3
 800685c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006864:	4619      	mov	r1, r3
 8006866:	693a      	ldr	r2, [r7, #16]
 8006868:	2334      	movs	r3, #52	; 0x34
 800686a:	fb03 f301 	mul.w	r3, r3, r1
 800686e:	4413      	add	r3, r2
 8006870:	3391      	adds	r3, #145	; 0x91
 8006872:	2200      	movs	r2, #0
 8006874:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800687c:	4619      	mov	r1, r3
 800687e:	693a      	ldr	r2, [r7, #16]
 8006880:	2334      	movs	r3, #52	; 0x34
 8006882:	fb03 f301 	mul.w	r3, r3, r1
 8006886:	4413      	add	r3, r2
 8006888:	3392      	adds	r3, #146	; 0x92
 800688a:	2200      	movs	r2, #0
 800688c:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800688e:	7bbb      	ldrb	r3, [r7, #14]
 8006890:	2b02      	cmp	r3, #2
 8006892:	d14a      	bne.n	800692a <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800689a:	4619      	mov	r1, r3
 800689c:	693a      	ldr	r2, [r7, #16]
 800689e:	2334      	movs	r3, #52	; 0x34
 80068a0:	fb03 f301 	mul.w	r3, r3, r1
 80068a4:	4413      	add	r3, r2
 80068a6:	3392      	adds	r3, #146	; 0x92
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	2b02      	cmp	r3, #2
 80068ac:	d00c      	beq.n	80068c8 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80068b4:	4619      	mov	r1, r3
 80068b6:	693a      	ldr	r2, [r7, #16]
 80068b8:	2334      	movs	r3, #52	; 0x34
 80068ba:	fb03 f301 	mul.w	r3, r3, r1
 80068be:	4413      	add	r3, r2
 80068c0:	33c1      	adds	r3, #193	; 0xc1
 80068c2:	2201      	movs	r2, #1
 80068c4:	701a      	strb	r2, [r3, #0]
 80068c6:	e00b      	b.n	80068e0 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80068ce:	4619      	mov	r1, r3
 80068d0:	693a      	ldr	r2, [r7, #16]
 80068d2:	2334      	movs	r3, #52	; 0x34
 80068d4:	fb03 f301 	mul.w	r3, r3, r1
 80068d8:	4413      	add	r3, r2
 80068da:	33c1      	adds	r3, #193	; 0xc1
 80068dc:	2200      	movs	r2, #0
 80068de:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80068e6:	4619      	mov	r1, r3
 80068e8:	693a      	ldr	r2, [r7, #16]
 80068ea:	2334      	movs	r3, #52	; 0x34
 80068ec:	fb03 f301 	mul.w	r3, r3, r1
 80068f0:	4413      	add	r3, r2
 80068f2:	3390      	adds	r3, #144	; 0x90
 80068f4:	2205      	movs	r2, #5
 80068f6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80068fe:	4619      	mov	r1, r3
 8006900:	693a      	ldr	r2, [r7, #16]
 8006902:	2334      	movs	r3, #52	; 0x34
 8006904:	fb03 f301 	mul.w	r3, r3, r1
 8006908:	4413      	add	r3, r2
 800690a:	3391      	adds	r3, #145	; 0x91
 800690c:	2201      	movs	r2, #1
 800690e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006916:	4619      	mov	r1, r3
 8006918:	693a      	ldr	r2, [r7, #16]
 800691a:	2334      	movs	r3, #52	; 0x34
 800691c:	fb03 f301 	mul.w	r3, r3, r1
 8006920:	4413      	add	r3, r2
 8006922:	3392      	adds	r3, #146	; 0x92
 8006924:	2202      	movs	r2, #2
 8006926:	701a      	strb	r2, [r3, #0]
            break;
 8006928:	e127      	b.n	8006b7a <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800692a:	7bbb      	ldrb	r3, [r7, #14]
 800692c:	2b04      	cmp	r3, #4
 800692e:	f040 8124 	bne.w	8006b7a <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006938:	4619      	mov	r1, r3
 800693a:	693a      	ldr	r2, [r7, #16]
 800693c:	2334      	movs	r3, #52	; 0x34
 800693e:	fb03 f301 	mul.w	r3, r3, r1
 8006942:	4413      	add	r3, r2
 8006944:	3390      	adds	r3, #144	; 0x90
 8006946:	2201      	movs	r2, #1
 8006948:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006950:	4619      	mov	r1, r3
 8006952:	693a      	ldr	r2, [r7, #16]
 8006954:	2334      	movs	r3, #52	; 0x34
 8006956:	fb03 f301 	mul.w	r3, r3, r1
 800695a:	4413      	add	r3, r2
 800695c:	3391      	adds	r3, #145	; 0x91
 800695e:	2202      	movs	r2, #2
 8006960:	701a      	strb	r2, [r3, #0]
            break;
 8006962:	e10a      	b.n	8006b7a <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800696a:	b2d9      	uxtb	r1, r3
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006972:	461a      	mov	r2, r3
 8006974:	2334      	movs	r3, #52	; 0x34
 8006976:	fb03 f302 	mul.w	r3, r3, r2
 800697a:	3390      	adds	r3, #144	; 0x90
 800697c:	693a      	ldr	r2, [r7, #16]
 800697e:	4413      	add	r3, r2
 8006980:	3304      	adds	r3, #4
 8006982:	461a      	mov	r2, r3
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 fddc 	bl	8007542 <USBH_MSC_SCSI_ReadCapacity>
 800698a:	4603      	mov	r3, r0
 800698c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800698e:	7bfb      	ldrb	r3, [r7, #15]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d120      	bne.n	80069d6 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800699a:	4619      	mov	r1, r3
 800699c:	693a      	ldr	r2, [r7, #16]
 800699e:	2334      	movs	r3, #52	; 0x34
 80069a0:	fb03 f301 	mul.w	r3, r3, r1
 80069a4:	4413      	add	r3, r2
 80069a6:	3390      	adds	r3, #144	; 0x90
 80069a8:	2201      	movs	r2, #1
 80069aa:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80069b2:	4619      	mov	r1, r3
 80069b4:	693a      	ldr	r2, [r7, #16]
 80069b6:	2334      	movs	r3, #52	; 0x34
 80069b8:	fb03 f301 	mul.w	r3, r3, r1
 80069bc:	4413      	add	r3, r2
 80069be:	3391      	adds	r3, #145	; 0x91
 80069c0:	2200      	movs	r2, #0
 80069c2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80069ca:	3301      	adds	r3, #1
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80069d4:	e0d3      	b.n	8006b7e <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 80069d6:	7bfb      	ldrb	r3, [r7, #15]
 80069d8:	2b02      	cmp	r3, #2
 80069da:	d10c      	bne.n	80069f6 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80069e2:	4619      	mov	r1, r3
 80069e4:	693a      	ldr	r2, [r7, #16]
 80069e6:	2334      	movs	r3, #52	; 0x34
 80069e8:	fb03 f301 	mul.w	r3, r3, r1
 80069ec:	4413      	add	r3, r2
 80069ee:	3390      	adds	r3, #144	; 0x90
 80069f0:	2205      	movs	r2, #5
 80069f2:	701a      	strb	r2, [r3, #0]
            break;
 80069f4:	e0c3      	b.n	8006b7e <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80069f6:	7bfb      	ldrb	r3, [r7, #15]
 80069f8:	2b04      	cmp	r3, #4
 80069fa:	f040 80c0 	bne.w	8006b7e <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006a04:	4619      	mov	r1, r3
 8006a06:	693a      	ldr	r2, [r7, #16]
 8006a08:	2334      	movs	r3, #52	; 0x34
 8006a0a:	fb03 f301 	mul.w	r3, r3, r1
 8006a0e:	4413      	add	r3, r2
 8006a10:	3390      	adds	r3, #144	; 0x90
 8006a12:	2201      	movs	r2, #1
 8006a14:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	693a      	ldr	r2, [r7, #16]
 8006a20:	2334      	movs	r3, #52	; 0x34
 8006a22:	fb03 f301 	mul.w	r3, r3, r1
 8006a26:	4413      	add	r3, r2
 8006a28:	3391      	adds	r3, #145	; 0x91
 8006a2a:	2202      	movs	r2, #2
 8006a2c:	701a      	strb	r2, [r3, #0]
            break;
 8006a2e:	e0a6      	b.n	8006b7e <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006a36:	b2d9      	uxtb	r1, r3
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006a3e:	461a      	mov	r2, r3
 8006a40:	2334      	movs	r3, #52	; 0x34
 8006a42:	fb03 f302 	mul.w	r3, r3, r2
 8006a46:	3398      	adds	r3, #152	; 0x98
 8006a48:	693a      	ldr	r2, [r7, #16]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	3304      	adds	r3, #4
 8006a4e:	461a      	mov	r2, r3
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 fe96 	bl	8007782 <USBH_MSC_SCSI_RequestSense>
 8006a56:	4603      	mov	r3, r0
 8006a58:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8006a5a:	7bfb      	ldrb	r3, [r7, #15]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d145      	bne.n	8006aec <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006a66:	4619      	mov	r1, r3
 8006a68:	693a      	ldr	r2, [r7, #16]
 8006a6a:	2334      	movs	r3, #52	; 0x34
 8006a6c:	fb03 f301 	mul.w	r3, r3, r1
 8006a70:	4413      	add	r3, r2
 8006a72:	339c      	adds	r3, #156	; 0x9c
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	2b06      	cmp	r3, #6
 8006a78:	d00c      	beq.n	8006a94 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006a80:	4619      	mov	r1, r3
 8006a82:	693a      	ldr	r2, [r7, #16]
 8006a84:	2334      	movs	r3, #52	; 0x34
 8006a86:	fb03 f301 	mul.w	r3, r3, r1
 8006a8a:	4413      	add	r3, r2
 8006a8c:	339c      	adds	r3, #156	; 0x9c
 8006a8e:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8006a90:	2b02      	cmp	r3, #2
 8006a92:	d117      	bne.n	8006ac4 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	f242 720f 	movw	r2, #9999	; 0x270f
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d80c      	bhi.n	8006ac4 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	693a      	ldr	r2, [r7, #16]
 8006ab4:	2334      	movs	r3, #52	; 0x34
 8006ab6:	fb03 f301 	mul.w	r3, r3, r1
 8006aba:	4413      	add	r3, r2
 8006abc:	3390      	adds	r3, #144	; 0x90
 8006abe:	2202      	movs	r2, #2
 8006ac0:	701a      	strb	r2, [r3, #0]
                  break;
 8006ac2:	e05f      	b.n	8006b84 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006aca:	4619      	mov	r1, r3
 8006acc:	693a      	ldr	r2, [r7, #16]
 8006ace:	2334      	movs	r3, #52	; 0x34
 8006ad0:	fb03 f301 	mul.w	r3, r3, r1
 8006ad4:	4413      	add	r3, r2
 8006ad6:	3390      	adds	r3, #144	; 0x90
 8006ad8:	2201      	movs	r2, #1
 8006ada:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	b29a      	uxth	r2, r3
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8006aec:	7bfb      	ldrb	r3, [r7, #15]
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	d10c      	bne.n	8006b0c <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006af8:	4619      	mov	r1, r3
 8006afa:	693a      	ldr	r2, [r7, #16]
 8006afc:	2334      	movs	r3, #52	; 0x34
 8006afe:	fb03 f301 	mul.w	r3, r3, r1
 8006b02:	4413      	add	r3, r2
 8006b04:	3390      	adds	r3, #144	; 0x90
 8006b06:	2208      	movs	r2, #8
 8006b08:	701a      	strb	r2, [r3, #0]
            break;
 8006b0a:	e03a      	b.n	8006b82 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006b0c:	7bfb      	ldrb	r3, [r7, #15]
 8006b0e:	2b04      	cmp	r3, #4
 8006b10:	d137      	bne.n	8006b82 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006b18:	4619      	mov	r1, r3
 8006b1a:	693a      	ldr	r2, [r7, #16]
 8006b1c:	2334      	movs	r3, #52	; 0x34
 8006b1e:	fb03 f301 	mul.w	r3, r3, r1
 8006b22:	4413      	add	r3, r2
 8006b24:	3390      	adds	r3, #144	; 0x90
 8006b26:	2201      	movs	r2, #1
 8006b28:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006b30:	4619      	mov	r1, r3
 8006b32:	693a      	ldr	r2, [r7, #16]
 8006b34:	2334      	movs	r3, #52	; 0x34
 8006b36:	fb03 f301 	mul.w	r3, r3, r1
 8006b3a:	4413      	add	r3, r2
 8006b3c:	3391      	adds	r3, #145	; 0x91
 8006b3e:	2202      	movs	r2, #2
 8006b40:	701a      	strb	r2, [r3, #0]
            break;
 8006b42:	e01e      	b.n	8006b82 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	b29a      	uxth	r2, r3
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8006b54:	e016      	b.n	8006b84 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	2201      	movs	r2, #1
 8006b62:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b6a:	2102      	movs	r1, #2
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	4798      	blx	r3
      break;
 8006b70:	e00c      	b.n	8006b8c <USBH_MSC_Process+0x514>
            break;
 8006b72:	bf00      	nop
 8006b74:	e00a      	b.n	8006b8c <USBH_MSC_Process+0x514>
            break;
 8006b76:	bf00      	nop
 8006b78:	e008      	b.n	8006b8c <USBH_MSC_Process+0x514>
            break;
 8006b7a:	bf00      	nop
 8006b7c:	e006      	b.n	8006b8c <USBH_MSC_Process+0x514>
            break;
 8006b7e:	bf00      	nop
 8006b80:	e004      	b.n	8006b8c <USBH_MSC_Process+0x514>
            break;
 8006b82:	bf00      	nop
      break;
 8006b84:	e002      	b.n	8006b8c <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8006b86:	2300      	movs	r3, #0
 8006b88:	75fb      	strb	r3, [r7, #23]
      break;
 8006b8a:	bf00      	nop
  }
  return error;
 8006b8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3718      	adds	r7, #24
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop

08006b98 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	370c      	adds	r7, #12
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr

08006bae <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b088      	sub	sp, #32
 8006bb2:	af02      	add	r7, sp, #8
 8006bb4:	6078      	str	r0, [r7, #4]
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bc0:	69db      	ldr	r3, [r3, #28]
 8006bc2:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8006bcc:	78fb      	ldrb	r3, [r7, #3]
 8006bce:	693a      	ldr	r2, [r7, #16]
 8006bd0:	2134      	movs	r1, #52	; 0x34
 8006bd2:	fb01 f303 	mul.w	r3, r1, r3
 8006bd6:	4413      	add	r3, r2
 8006bd8:	3390      	adds	r3, #144	; 0x90
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	2b07      	cmp	r3, #7
 8006bde:	d03c      	beq.n	8006c5a <USBH_MSC_RdWrProcess+0xac>
 8006be0:	2b07      	cmp	r3, #7
 8006be2:	f300 80a7 	bgt.w	8006d34 <USBH_MSC_RdWrProcess+0x186>
 8006be6:	2b05      	cmp	r3, #5
 8006be8:	d06c      	beq.n	8006cc4 <USBH_MSC_RdWrProcess+0x116>
 8006bea:	2b06      	cmp	r3, #6
 8006bec:	f040 80a2 	bne.w	8006d34 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8006bf0:	78f9      	ldrb	r1, [r7, #3]
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	9300      	str	r3, [sp, #0]
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 fea5 	bl	800794a <USBH_MSC_SCSI_Read>
 8006c00:	4603      	mov	r3, r0
 8006c02:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8006c04:	7bfb      	ldrb	r3, [r7, #15]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d10b      	bne.n	8006c22 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8006c0a:	78fb      	ldrb	r3, [r7, #3]
 8006c0c:	693a      	ldr	r2, [r7, #16]
 8006c0e:	2134      	movs	r1, #52	; 0x34
 8006c10:	fb01 f303 	mul.w	r3, r1, r3
 8006c14:	4413      	add	r3, r2
 8006c16:	3390      	adds	r3, #144	; 0x90
 8006c18:	2201      	movs	r2, #1
 8006c1a:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006c20:	e08a      	b.n	8006d38 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 8006c22:	7bfb      	ldrb	r3, [r7, #15]
 8006c24:	2b02      	cmp	r3, #2
 8006c26:	d109      	bne.n	8006c3c <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8006c28:	78fb      	ldrb	r3, [r7, #3]
 8006c2a:	693a      	ldr	r2, [r7, #16]
 8006c2c:	2134      	movs	r1, #52	; 0x34
 8006c2e:	fb01 f303 	mul.w	r3, r1, r3
 8006c32:	4413      	add	r3, r2
 8006c34:	3390      	adds	r3, #144	; 0x90
 8006c36:	2205      	movs	r2, #5
 8006c38:	701a      	strb	r2, [r3, #0]
      break;
 8006c3a:	e07d      	b.n	8006d38 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006c3c:	7bfb      	ldrb	r3, [r7, #15]
 8006c3e:	2b04      	cmp	r3, #4
 8006c40:	d17a      	bne.n	8006d38 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8006c42:	78fb      	ldrb	r3, [r7, #3]
 8006c44:	693a      	ldr	r2, [r7, #16]
 8006c46:	2134      	movs	r1, #52	; 0x34
 8006c48:	fb01 f303 	mul.w	r3, r1, r3
 8006c4c:	4413      	add	r3, r2
 8006c4e:	3390      	adds	r3, #144	; 0x90
 8006c50:	2208      	movs	r2, #8
 8006c52:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8006c54:	2302      	movs	r3, #2
 8006c56:	75fb      	strb	r3, [r7, #23]
      break;
 8006c58:	e06e      	b.n	8006d38 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8006c5a:	78f9      	ldrb	r1, [r7, #3]
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	9300      	str	r3, [sp, #0]
 8006c60:	2300      	movs	r3, #0
 8006c62:	2200      	movs	r2, #0
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 fe05 	bl	8007874 <USBH_MSC_SCSI_Write>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8006c6e:	7bfb      	ldrb	r3, [r7, #15]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d10b      	bne.n	8006c8c <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8006c74:	78fb      	ldrb	r3, [r7, #3]
 8006c76:	693a      	ldr	r2, [r7, #16]
 8006c78:	2134      	movs	r1, #52	; 0x34
 8006c7a:	fb01 f303 	mul.w	r3, r1, r3
 8006c7e:	4413      	add	r3, r2
 8006c80:	3390      	adds	r3, #144	; 0x90
 8006c82:	2201      	movs	r2, #1
 8006c84:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8006c86:	2300      	movs	r3, #0
 8006c88:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006c8a:	e057      	b.n	8006d3c <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 8006c8c:	7bfb      	ldrb	r3, [r7, #15]
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	d109      	bne.n	8006ca6 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8006c92:	78fb      	ldrb	r3, [r7, #3]
 8006c94:	693a      	ldr	r2, [r7, #16]
 8006c96:	2134      	movs	r1, #52	; 0x34
 8006c98:	fb01 f303 	mul.w	r3, r1, r3
 8006c9c:	4413      	add	r3, r2
 8006c9e:	3390      	adds	r3, #144	; 0x90
 8006ca0:	2205      	movs	r2, #5
 8006ca2:	701a      	strb	r2, [r3, #0]
      break;
 8006ca4:	e04a      	b.n	8006d3c <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006ca6:	7bfb      	ldrb	r3, [r7, #15]
 8006ca8:	2b04      	cmp	r3, #4
 8006caa:	d147      	bne.n	8006d3c <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8006cac:	78fb      	ldrb	r3, [r7, #3]
 8006cae:	693a      	ldr	r2, [r7, #16]
 8006cb0:	2134      	movs	r1, #52	; 0x34
 8006cb2:	fb01 f303 	mul.w	r3, r1, r3
 8006cb6:	4413      	add	r3, r2
 8006cb8:	3390      	adds	r3, #144	; 0x90
 8006cba:	2208      	movs	r2, #8
 8006cbc:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8006cbe:	2302      	movs	r3, #2
 8006cc0:	75fb      	strb	r3, [r7, #23]
      break;
 8006cc2:	e03b      	b.n	8006d3c <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8006cc4:	78fb      	ldrb	r3, [r7, #3]
 8006cc6:	2234      	movs	r2, #52	; 0x34
 8006cc8:	fb02 f303 	mul.w	r3, r2, r3
 8006ccc:	3398      	adds	r3, #152	; 0x98
 8006cce:	693a      	ldr	r2, [r7, #16]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	1d1a      	adds	r2, r3, #4
 8006cd4:	78fb      	ldrb	r3, [r7, #3]
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 fd52 	bl	8007782 <USBH_MSC_SCSI_RequestSense>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8006ce2:	7bfb      	ldrb	r3, [r7, #15]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d113      	bne.n	8006d10 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8006ce8:	78fb      	ldrb	r3, [r7, #3]
 8006cea:	693a      	ldr	r2, [r7, #16]
 8006cec:	2134      	movs	r1, #52	; 0x34
 8006cee:	fb01 f303 	mul.w	r3, r1, r3
 8006cf2:	4413      	add	r3, r2
 8006cf4:	3390      	adds	r3, #144	; 0x90
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8006cfa:	78fb      	ldrb	r3, [r7, #3]
 8006cfc:	693a      	ldr	r2, [r7, #16]
 8006cfe:	2134      	movs	r1, #52	; 0x34
 8006d00:	fb01 f303 	mul.w	r3, r1, r3
 8006d04:	4413      	add	r3, r2
 8006d06:	3391      	adds	r3, #145	; 0x91
 8006d08:	2202      	movs	r2, #2
 8006d0a:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8006d0c:	2302      	movs	r3, #2
 8006d0e:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8006d10:	7bfb      	ldrb	r3, [r7, #15]
 8006d12:	2b02      	cmp	r3, #2
 8006d14:	d014      	beq.n	8006d40 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006d16:	7bfb      	ldrb	r3, [r7, #15]
 8006d18:	2b04      	cmp	r3, #4
 8006d1a:	d111      	bne.n	8006d40 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8006d1c:	78fb      	ldrb	r3, [r7, #3]
 8006d1e:	693a      	ldr	r2, [r7, #16]
 8006d20:	2134      	movs	r1, #52	; 0x34
 8006d22:	fb01 f303 	mul.w	r3, r1, r3
 8006d26:	4413      	add	r3, r2
 8006d28:	3390      	adds	r3, #144	; 0x90
 8006d2a:	2208      	movs	r2, #8
 8006d2c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8006d2e:	2302      	movs	r3, #2
 8006d30:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006d32:	e005      	b.n	8006d40 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 8006d34:	bf00      	nop
 8006d36:	e004      	b.n	8006d42 <USBH_MSC_RdWrProcess+0x194>
      break;
 8006d38:	bf00      	nop
 8006d3a:	e002      	b.n	8006d42 <USBH_MSC_RdWrProcess+0x194>
      break;
 8006d3c:	bf00      	nop
 8006d3e:	e000      	b.n	8006d42 <USBH_MSC_RdWrProcess+0x194>
      break;
 8006d40:	bf00      	nop

  }
  return error;
 8006d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3718      	adds	r7, #24
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b085      	sub	sp, #20
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	460b      	mov	r3, r1
 8006d56:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d5e:	69db      	ldr	r3, [r3, #28]
 8006d60:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	2b0b      	cmp	r3, #11
 8006d6a:	d10c      	bne.n	8006d86 <USBH_MSC_UnitIsReady+0x3a>
 8006d6c:	78fb      	ldrb	r3, [r7, #3]
 8006d6e:	68ba      	ldr	r2, [r7, #8]
 8006d70:	2134      	movs	r1, #52	; 0x34
 8006d72:	fb01 f303 	mul.w	r3, r1, r3
 8006d76:	4413      	add	r3, r2
 8006d78:	3391      	adds	r3, #145	; 0x91
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d102      	bne.n	8006d86 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8006d80:	2301      	movs	r3, #1
 8006d82:	73fb      	strb	r3, [r7, #15]
 8006d84:	e001      	b.n	8006d8a <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8006d86:	2300      	movs	r3, #0
 8006d88:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8006d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3714      	adds	r7, #20
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b086      	sub	sp, #24
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	460b      	mov	r3, r1
 8006da2:	607a      	str	r2, [r7, #4]
 8006da4:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006dac:	69db      	ldr	r3, [r3, #28]
 8006dae:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	2b0b      	cmp	r3, #11
 8006db8:	d10d      	bne.n	8006dd6 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8006dba:	7afb      	ldrb	r3, [r7, #11]
 8006dbc:	2234      	movs	r2, #52	; 0x34
 8006dbe:	fb02 f303 	mul.w	r3, r2, r3
 8006dc2:	3390      	adds	r3, #144	; 0x90
 8006dc4:	697a      	ldr	r2, [r7, #20]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	2234      	movs	r2, #52	; 0x34
 8006dca:	4619      	mov	r1, r3
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f007 fb8d 	bl	800e4ec <memcpy>
    return USBH_OK;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	e000      	b.n	8006dd8 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8006dd6:	2302      	movs	r3, #2
  }
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3718      	adds	r7, #24
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b088      	sub	sp, #32
 8006de4:	af02      	add	r7, sp, #8
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	607a      	str	r2, [r7, #4]
 8006dea:	603b      	str	r3, [r7, #0]
 8006dec:	460b      	mov	r3, r1
 8006dee:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006df6:	69db      	ldr	r3, [r3, #28]
 8006df8:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00e      	beq.n	8006e24 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8006e0c:	2b0b      	cmp	r3, #11
 8006e0e:	d109      	bne.n	8006e24 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8006e10:	7afb      	ldrb	r3, [r7, #11]
 8006e12:	697a      	ldr	r2, [r7, #20]
 8006e14:	2134      	movs	r1, #52	; 0x34
 8006e16:	fb01 f303 	mul.w	r3, r1, r3
 8006e1a:	4413      	add	r3, r2
 8006e1c:	3390      	adds	r3, #144	; 0x90
 8006e1e:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d001      	beq.n	8006e28 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8006e24:	2302      	movs	r3, #2
 8006e26:	e040      	b.n	8006eaa <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	2206      	movs	r2, #6
 8006e2c:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8006e2e:	7afb      	ldrb	r3, [r7, #11]
 8006e30:	697a      	ldr	r2, [r7, #20]
 8006e32:	2134      	movs	r1, #52	; 0x34
 8006e34:	fb01 f303 	mul.w	r3, r1, r3
 8006e38:	4413      	add	r3, r2
 8006e3a:	3390      	adds	r3, #144	; 0x90
 8006e3c:	2206      	movs	r2, #6
 8006e3e:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8006e40:	7afb      	ldrb	r3, [r7, #11]
 8006e42:	b29a      	uxth	r2, r3
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8006e4a:	7af9      	ldrb	r1, [r7, #11]
 8006e4c:	6a3b      	ldr	r3, [r7, #32]
 8006e4e:	9300      	str	r3, [sp, #0]
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	68f8      	ldr	r0, [r7, #12]
 8006e56:	f000 fd78 	bl	800794a <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006e60:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006e62:	e016      	b.n	8006e92 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	1ad2      	subs	r2, r2, r3
 8006e6e:	6a3b      	ldr	r3, [r7, #32]
 8006e70:	f242 7110 	movw	r1, #10000	; 0x2710
 8006e74:	fb01 f303 	mul.w	r3, r1, r3
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d805      	bhi.n	8006e88 <USBH_MSC_Read+0xa8>
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d104      	bne.n	8006e92 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8006e8e:	2302      	movs	r3, #2
 8006e90:	e00b      	b.n	8006eaa <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006e92:	7afb      	ldrb	r3, [r7, #11]
 8006e94:	4619      	mov	r1, r3
 8006e96:	68f8      	ldr	r0, [r7, #12]
 8006e98:	f7ff fe89 	bl	8006bae <USBH_MSC_RdWrProcess>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d0e0      	beq.n	8006e64 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3718      	adds	r7, #24
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b088      	sub	sp, #32
 8006eb6:	af02      	add	r7, sp, #8
 8006eb8:	60f8      	str	r0, [r7, #12]
 8006eba:	607a      	str	r2, [r7, #4]
 8006ebc:	603b      	str	r3, [r7, #0]
 8006ebe:	460b      	mov	r3, r1
 8006ec0:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ec8:	69db      	ldr	r3, [r3, #28]
 8006eca:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d00e      	beq.n	8006ef6 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8006ede:	2b0b      	cmp	r3, #11
 8006ee0:	d109      	bne.n	8006ef6 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8006ee2:	7afb      	ldrb	r3, [r7, #11]
 8006ee4:	697a      	ldr	r2, [r7, #20]
 8006ee6:	2134      	movs	r1, #52	; 0x34
 8006ee8:	fb01 f303 	mul.w	r3, r1, r3
 8006eec:	4413      	add	r3, r2
 8006eee:	3390      	adds	r3, #144	; 0x90
 8006ef0:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d001      	beq.n	8006efa <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8006ef6:	2302      	movs	r3, #2
 8006ef8:	e040      	b.n	8006f7c <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	2207      	movs	r2, #7
 8006efe:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8006f00:	7afb      	ldrb	r3, [r7, #11]
 8006f02:	697a      	ldr	r2, [r7, #20]
 8006f04:	2134      	movs	r1, #52	; 0x34
 8006f06:	fb01 f303 	mul.w	r3, r1, r3
 8006f0a:	4413      	add	r3, r2
 8006f0c:	3390      	adds	r3, #144	; 0x90
 8006f0e:	2207      	movs	r2, #7
 8006f10:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8006f12:	7afb      	ldrb	r3, [r7, #11]
 8006f14:	b29a      	uxth	r2, r3
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8006f1c:	7af9      	ldrb	r1, [r7, #11]
 8006f1e:	6a3b      	ldr	r3, [r7, #32]
 8006f20:	9300      	str	r3, [sp, #0]
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	68f8      	ldr	r0, [r7, #12]
 8006f28:	f000 fca4 	bl	8007874 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006f32:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006f34:	e016      	b.n	8006f64 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	1ad2      	subs	r2, r2, r3
 8006f40:	6a3b      	ldr	r3, [r7, #32]
 8006f42:	f242 7110 	movw	r1, #10000	; 0x2710
 8006f46:	fb01 f303 	mul.w	r3, r1, r3
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d805      	bhi.n	8006f5a <USBH_MSC_Write+0xa8>
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d104      	bne.n	8006f64 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8006f60:	2302      	movs	r3, #2
 8006f62:	e00b      	b.n	8006f7c <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006f64:	7afb      	ldrb	r3, [r7, #11]
 8006f66:	4619      	mov	r1, r3
 8006f68:	68f8      	ldr	r0, [r7, #12]
 8006f6a:	f7ff fe20 	bl	8006bae <USBH_MSC_RdWrProcess>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d0e0      	beq.n	8006f36 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	2201      	movs	r2, #1
 8006f78:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3718      	adds	r7, #24
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2221      	movs	r2, #33	; 0x21
 8006f90:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	22ff      	movs	r2, #255	; 0xff
 8006f96:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8006faa:	2200      	movs	r2, #0
 8006fac:	2100      	movs	r1, #0
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f001 fdab 	bl	8008b0a <USBH_CtlReq>
 8006fb4:	4603      	mov	r3, r0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3708      	adds	r7, #8
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}

08006fbe <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b082      	sub	sp, #8
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
 8006fc6:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	22a1      	movs	r2, #161	; 0xa1
 8006fcc:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	22fe      	movs	r2, #254	; 0xfe
 8006fd2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	6839      	ldr	r1, [r7, #0]
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f001 fd8d 	bl	8008b0a <USBH_CtlReq>
 8006ff0:	4603      	mov	r3, r0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3708      	adds	r7, #8
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
	...

08006ffc <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b085      	sub	sp, #20
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800700a:	69db      	ldr	r3, [r3, #28]
 800700c:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	4a09      	ldr	r2, [pc, #36]	; (8007038 <USBH_MSC_BOT_Init+0x3c>)
 8007012:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	4a09      	ldr	r2, [pc, #36]	; (800703c <USBH_MSC_BOT_Init+0x40>)
 8007018:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2201      	movs	r2, #1
 800701e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2201      	movs	r2, #1
 8007026:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3714      	adds	r7, #20
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr
 8007038:	43425355 	.word	0x43425355
 800703c:	20304050 	.word	0x20304050

08007040 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b088      	sub	sp, #32
 8007044:	af02      	add	r7, sp, #8
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	460b      	mov	r3, r1
 800704a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800704c:	2301      	movs	r3, #1
 800704e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8007050:	2301      	movs	r3, #1
 8007052:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8007054:	2301      	movs	r3, #1
 8007056:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007058:	2300      	movs	r3, #0
 800705a:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007062:	69db      	ldr	r3, [r3, #28]
 8007064:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8007066:	2300      	movs	r3, #0
 8007068:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007070:	3b01      	subs	r3, #1
 8007072:	2b0a      	cmp	r3, #10
 8007074:	f200 819e 	bhi.w	80073b4 <USBH_MSC_BOT_Process+0x374>
 8007078:	a201      	add	r2, pc, #4	; (adr r2, 8007080 <USBH_MSC_BOT_Process+0x40>)
 800707a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800707e:	bf00      	nop
 8007080:	080070ad 	.word	0x080070ad
 8007084:	080070d5 	.word	0x080070d5
 8007088:	0800713f 	.word	0x0800713f
 800708c:	0800715d 	.word	0x0800715d
 8007090:	080071e1 	.word	0x080071e1
 8007094:	08007203 	.word	0x08007203
 8007098:	0800729b 	.word	0x0800729b
 800709c:	080072b7 	.word	0x080072b7
 80070a0:	08007309 	.word	0x08007309
 80070a4:	08007339 	.word	0x08007339
 80070a8:	0800739b 	.word	0x0800739b
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	78fa      	ldrb	r2, [r7, #3]
 80070b0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	2202      	movs	r2, #2
 80070b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	795b      	ldrb	r3, [r3, #5]
 80070c6:	2201      	movs	r2, #1
 80070c8:	9200      	str	r2, [sp, #0]
 80070ca:	221f      	movs	r2, #31
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f001 ff2a 	bl	8008f26 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 80070d2:	e17e      	b.n	80073d2 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	795b      	ldrb	r3, [r3, #5]
 80070d8:	4619      	mov	r1, r3
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f007 f8ee 	bl	800e2bc <USBH_LL_GetURBState>
 80070e0:	4603      	mov	r3, r0
 80070e2:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80070e4:	7d3b      	ldrb	r3, [r7, #20]
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d118      	bne.n	800711c <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00f      	beq.n	8007112 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80070f8:	b25b      	sxtb	r3, r3
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	da04      	bge.n	8007108 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	2203      	movs	r2, #3
 8007102:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007106:	e157      	b.n	80073b8 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	2205      	movs	r2, #5
 800710c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007110:	e152      	b.n	80073b8 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	2207      	movs	r2, #7
 8007116:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800711a:	e14d      	b.n	80073b8 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800711c:	7d3b      	ldrb	r3, [r7, #20]
 800711e:	2b02      	cmp	r3, #2
 8007120:	d104      	bne.n	800712c <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	2201      	movs	r2, #1
 8007126:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800712a:	e145      	b.n	80073b8 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800712c:	7d3b      	ldrb	r3, [r7, #20]
 800712e:	2b05      	cmp	r3, #5
 8007130:	f040 8142 	bne.w	80073b8 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	220a      	movs	r2, #10
 8007138:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800713c:	e13c      	b.n	80073b8 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	895a      	ldrh	r2, [r3, #10]
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	791b      	ldrb	r3, [r3, #4]
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f001 ff0f 	bl	8008f70 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	2204      	movs	r2, #4
 8007156:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800715a:	e13a      	b.n	80073d2 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	791b      	ldrb	r3, [r3, #4]
 8007160:	4619      	mov	r1, r3
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f007 f8aa 	bl	800e2bc <USBH_LL_GetURBState>
 8007168:	4603      	mov	r3, r0
 800716a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800716c:	7d3b      	ldrb	r3, [r7, #20]
 800716e:	2b01      	cmp	r3, #1
 8007170:	d12d      	bne.n	80071ce <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007176:	693a      	ldr	r2, [r7, #16]
 8007178:	8952      	ldrh	r2, [r2, #10]
 800717a:	4293      	cmp	r3, r2
 800717c:	d910      	bls.n	80071a0 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007184:	693a      	ldr	r2, [r7, #16]
 8007186:	8952      	ldrh	r2, [r2, #10]
 8007188:	441a      	add	r2, r3
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007194:	693a      	ldr	r2, [r7, #16]
 8007196:	8952      	ldrh	r2, [r2, #10]
 8007198:	1a9a      	subs	r2, r3, r2
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	65da      	str	r2, [r3, #92]	; 0x5c
 800719e:	e002      	b.n	80071a6 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	2200      	movs	r2, #0
 80071a4:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00a      	beq.n	80071c4 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	895a      	ldrh	r2, [r3, #10]
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	791b      	ldrb	r3, [r3, #4]
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f001 fed7 	bl	8008f70 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 80071c2:	e0fb      	b.n	80073bc <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	2207      	movs	r2, #7
 80071c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80071cc:	e0f6      	b.n	80073bc <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 80071ce:	7d3b      	ldrb	r3, [r7, #20]
 80071d0:	2b05      	cmp	r3, #5
 80071d2:	f040 80f3 	bne.w	80073bc <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	2209      	movs	r2, #9
 80071da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80071de:	e0ed      	b.n	80073bc <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	891a      	ldrh	r2, [r3, #8]
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	795b      	ldrb	r3, [r3, #5]
 80071ee:	2001      	movs	r0, #1
 80071f0:	9000      	str	r0, [sp, #0]
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f001 fe97 	bl	8008f26 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	2206      	movs	r2, #6
 80071fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007200:	e0e7      	b.n	80073d2 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	795b      	ldrb	r3, [r3, #5]
 8007206:	4619      	mov	r1, r3
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f007 f857 	bl	800e2bc <USBH_LL_GetURBState>
 800720e:	4603      	mov	r3, r0
 8007210:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8007212:	7d3b      	ldrb	r3, [r7, #20]
 8007214:	2b01      	cmp	r3, #1
 8007216:	d12f      	bne.n	8007278 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800721c:	693a      	ldr	r2, [r7, #16]
 800721e:	8912      	ldrh	r2, [r2, #8]
 8007220:	4293      	cmp	r3, r2
 8007222:	d910      	bls.n	8007246 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800722a:	693a      	ldr	r2, [r7, #16]
 800722c:	8912      	ldrh	r2, [r2, #8]
 800722e:	441a      	add	r2, r3
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800723a:	693a      	ldr	r2, [r7, #16]
 800723c:	8912      	ldrh	r2, [r2, #8]
 800723e:	1a9a      	subs	r2, r3, r2
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	65da      	str	r2, [r3, #92]	; 0x5c
 8007244:	e002      	b.n	800724c <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	2200      	movs	r2, #0
 800724a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007250:	2b00      	cmp	r3, #0
 8007252:	d00c      	beq.n	800726e <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	891a      	ldrh	r2, [r3, #8]
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	795b      	ldrb	r3, [r3, #5]
 8007262:	2001      	movs	r0, #1
 8007264:	9000      	str	r0, [sp, #0]
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f001 fe5d 	bl	8008f26 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800726c:	e0a8      	b.n	80073c0 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	2207      	movs	r2, #7
 8007272:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007276:	e0a3      	b.n	80073c0 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007278:	7d3b      	ldrb	r3, [r7, #20]
 800727a:	2b02      	cmp	r3, #2
 800727c:	d104      	bne.n	8007288 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	2205      	movs	r2, #5
 8007282:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007286:	e09b      	b.n	80073c0 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8007288:	7d3b      	ldrb	r3, [r7, #20]
 800728a:	2b05      	cmp	r3, #5
 800728c:	f040 8098 	bne.w	80073c0 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	220a      	movs	r2, #10
 8007294:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007298:	e092      	b.n	80073c0 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	f103 0178 	add.w	r1, r3, #120	; 0x78
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	791b      	ldrb	r3, [r3, #4]
 80072a4:	220d      	movs	r2, #13
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f001 fe62 	bl	8008f70 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	2208      	movs	r2, #8
 80072b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80072b4:	e08d      	b.n	80073d2 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	791b      	ldrb	r3, [r3, #4]
 80072ba:	4619      	mov	r1, r3
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f006 fffd 	bl	800e2bc <USBH_LL_GetURBState>
 80072c2:	4603      	mov	r3, r0
 80072c4:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 80072c6:	7d3b      	ldrb	r3, [r7, #20]
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d115      	bne.n	80072f8 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	2201      	movs	r2, #1
 80072d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	2201      	movs	r2, #1
 80072d8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 f8a9 	bl	8007434 <USBH_MSC_DecodeCSW>
 80072e2:	4603      	mov	r3, r0
 80072e4:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 80072e6:	7d7b      	ldrb	r3, [r7, #21]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d102      	bne.n	80072f2 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 80072ec:	2300      	movs	r3, #0
 80072ee:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 80072f0:	e068      	b.n	80073c4 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 80072f2:	2302      	movs	r3, #2
 80072f4:	75fb      	strb	r3, [r7, #23]
      break;
 80072f6:	e065      	b.n	80073c4 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 80072f8:	7d3b      	ldrb	r3, [r7, #20]
 80072fa:	2b05      	cmp	r3, #5
 80072fc:	d162      	bne.n	80073c4 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	2209      	movs	r2, #9
 8007302:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007306:	e05d      	b.n	80073c4 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8007308:	78fb      	ldrb	r3, [r7, #3]
 800730a:	2200      	movs	r2, #0
 800730c:	4619      	mov	r1, r3
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f864 	bl	80073dc <USBH_MSC_BOT_Abort>
 8007314:	4603      	mov	r3, r0
 8007316:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8007318:	7dbb      	ldrb	r3, [r7, #22]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d104      	bne.n	8007328 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	2207      	movs	r2, #7
 8007322:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8007326:	e04f      	b.n	80073c8 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8007328:	7dbb      	ldrb	r3, [r7, #22]
 800732a:	2b04      	cmp	r3, #4
 800732c:	d14c      	bne.n	80073c8 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	220b      	movs	r2, #11
 8007332:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007336:	e047      	b.n	80073c8 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8007338:	78fb      	ldrb	r3, [r7, #3]
 800733a:	2201      	movs	r2, #1
 800733c:	4619      	mov	r1, r3
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 f84c 	bl	80073dc <USBH_MSC_BOT_Abort>
 8007344:	4603      	mov	r3, r0
 8007346:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8007348:	7dbb      	ldrb	r3, [r7, #22]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d11d      	bne.n	800738a <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	795b      	ldrb	r3, [r3, #5]
 8007352:	4619      	mov	r1, r3
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f007 f80b 	bl	800e370 <USBH_LL_GetToggle>
 800735a:	4603      	mov	r3, r0
 800735c:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	7959      	ldrb	r1, [r3, #5]
 8007362:	7bfb      	ldrb	r3, [r7, #15]
 8007364:	f1c3 0301 	rsb	r3, r3, #1
 8007368:	b2db      	uxtb	r3, r3
 800736a:	461a      	mov	r2, r3
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f006 ffcf 	bl	800e310 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	791b      	ldrb	r3, [r3, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	4619      	mov	r1, r3
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f006 ffc8 	bl	800e310 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	2209      	movs	r2, #9
 8007384:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8007388:	e020      	b.n	80073cc <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800738a:	7dbb      	ldrb	r3, [r7, #22]
 800738c:	2b04      	cmp	r3, #4
 800738e:	d11d      	bne.n	80073cc <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	220b      	movs	r2, #11
 8007394:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007398:	e018      	b.n	80073cc <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f7ff fdf2 	bl	8006f84 <USBH_MSC_BOT_REQ_Reset>
 80073a0:	4603      	mov	r3, r0
 80073a2:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80073a4:	7dfb      	ldrb	r3, [r7, #23]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d112      	bne.n	80073d0 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	2201      	movs	r2, #1
 80073ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 80073b2:	e00d      	b.n	80073d0 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 80073b4:	bf00      	nop
 80073b6:	e00c      	b.n	80073d2 <USBH_MSC_BOT_Process+0x392>
      break;
 80073b8:	bf00      	nop
 80073ba:	e00a      	b.n	80073d2 <USBH_MSC_BOT_Process+0x392>
      break;
 80073bc:	bf00      	nop
 80073be:	e008      	b.n	80073d2 <USBH_MSC_BOT_Process+0x392>
      break;
 80073c0:	bf00      	nop
 80073c2:	e006      	b.n	80073d2 <USBH_MSC_BOT_Process+0x392>
      break;
 80073c4:	bf00      	nop
 80073c6:	e004      	b.n	80073d2 <USBH_MSC_BOT_Process+0x392>
      break;
 80073c8:	bf00      	nop
 80073ca:	e002      	b.n	80073d2 <USBH_MSC_BOT_Process+0x392>
      break;
 80073cc:	bf00      	nop
 80073ce:	e000      	b.n	80073d2 <USBH_MSC_BOT_Process+0x392>
      break;
 80073d0:	bf00      	nop
  }
  return status;
 80073d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3718      	adds	r7, #24
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	460b      	mov	r3, r1
 80073e6:	70fb      	strb	r3, [r7, #3]
 80073e8:	4613      	mov	r3, r2
 80073ea:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 80073ec:	2302      	movs	r3, #2
 80073ee:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073f6:	69db      	ldr	r3, [r3, #28]
 80073f8:	60bb      	str	r3, [r7, #8]

  switch (dir)
 80073fa:	78bb      	ldrb	r3, [r7, #2]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d002      	beq.n	8007406 <USBH_MSC_BOT_Abort+0x2a>
 8007400:	2b01      	cmp	r3, #1
 8007402:	d009      	beq.n	8007418 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8007404:	e011      	b.n	800742a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	79db      	ldrb	r3, [r3, #7]
 800740a:	4619      	mov	r1, r3
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f001 f99c 	bl	800874a <USBH_ClrFeature>
 8007412:	4603      	mov	r3, r0
 8007414:	73fb      	strb	r3, [r7, #15]
      break;
 8007416:	e008      	b.n	800742a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	799b      	ldrb	r3, [r3, #6]
 800741c:	4619      	mov	r1, r3
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f001 f993 	bl	800874a <USBH_ClrFeature>
 8007424:	4603      	mov	r3, r0
 8007426:	73fb      	strb	r3, [r7, #15]
      break;
 8007428:	bf00      	nop
  }
  return status;
 800742a:	7bfb      	ldrb	r3, [r7, #15]
}
 800742c:	4618      	mov	r0, r3
 800742e:	3710      	adds	r7, #16
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b084      	sub	sp, #16
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007442:	69db      	ldr	r3, [r3, #28]
 8007444:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8007446:	2301      	movs	r3, #1
 8007448:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	791b      	ldrb	r3, [r3, #4]
 800744e:	4619      	mov	r1, r3
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f006 fea1 	bl	800e198 <USBH_LL_GetLastXferSize>
 8007456:	4603      	mov	r3, r0
 8007458:	2b0d      	cmp	r3, #13
 800745a:	d002      	beq.n	8007462 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800745c:	2302      	movs	r3, #2
 800745e:	73fb      	strb	r3, [r7, #15]
 8007460:	e024      	b.n	80074ac <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007466:	4a14      	ldr	r2, [pc, #80]	; (80074b8 <USBH_MSC_DecodeCSW+0x84>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d11d      	bne.n	80074a8 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007474:	429a      	cmp	r2, r3
 8007476:	d119      	bne.n	80074ac <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800747e:	2b00      	cmp	r3, #0
 8007480:	d102      	bne.n	8007488 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8007482:	2300      	movs	r3, #0
 8007484:	73fb      	strb	r3, [r7, #15]
 8007486:	e011      	b.n	80074ac <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800748e:	2b01      	cmp	r3, #1
 8007490:	d102      	bne.n	8007498 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8007492:	2301      	movs	r3, #1
 8007494:	73fb      	strb	r3, [r7, #15]
 8007496:	e009      	b.n	80074ac <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800749e:	2b02      	cmp	r3, #2
 80074a0:	d104      	bne.n	80074ac <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 80074a2:	2302      	movs	r3, #2
 80074a4:	73fb      	strb	r3, [r7, #15]
 80074a6:	e001      	b.n	80074ac <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 80074a8:	2302      	movs	r3, #2
 80074aa:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 80074ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3710      	adds	r7, #16
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop
 80074b8:	53425355 	.word	0x53425355

080074bc <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	460b      	mov	r3, r1
 80074c6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80074c8:	2302      	movs	r3, #2
 80074ca:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074d2:	69db      	ldr	r3, [r3, #28]
 80074d4:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d002      	beq.n	80074e6 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 80074e0:	2b02      	cmp	r3, #2
 80074e2:	d021      	beq.n	8007528 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80074e4:	e028      	b.n	8007538 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	2200      	movs	r2, #0
 80074ea:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	220a      	movs	r2, #10
 80074f8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	3363      	adds	r3, #99	; 0x63
 8007500:	2210      	movs	r2, #16
 8007502:	2100      	movs	r1, #0
 8007504:	4618      	mov	r0, r3
 8007506:	f006 ffff 	bl	800e508 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	2200      	movs	r2, #0
 800750e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	2201      	movs	r2, #1
 8007516:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	2202      	movs	r2, #2
 800751e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8007522:	2301      	movs	r3, #1
 8007524:	73fb      	strb	r3, [r7, #15]
      break;
 8007526:	e007      	b.n	8007538 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007528:	78fb      	ldrb	r3, [r7, #3]
 800752a:	4619      	mov	r1, r3
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f7ff fd87 	bl	8007040 <USBH_MSC_BOT_Process>
 8007532:	4603      	mov	r3, r0
 8007534:	73fb      	strb	r3, [r7, #15]
      break;
 8007536:	bf00      	nop
  }

  return error;
 8007538:	7bfb      	ldrb	r3, [r7, #15]
}
 800753a:	4618      	mov	r0, r3
 800753c:	3710      	adds	r7, #16
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}

08007542 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8007542:	b580      	push	{r7, lr}
 8007544:	b086      	sub	sp, #24
 8007546:	af00      	add	r7, sp, #0
 8007548:	60f8      	str	r0, [r7, #12]
 800754a:	460b      	mov	r3, r1
 800754c:	607a      	str	r2, [r7, #4]
 800754e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8007550:	2301      	movs	r3, #1
 8007552:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800755a:	69db      	ldr	r3, [r3, #28]
 800755c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007564:	2b01      	cmp	r3, #1
 8007566:	d002      	beq.n	800756e <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8007568:	2b02      	cmp	r3, #2
 800756a:	d027      	beq.n	80075bc <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800756c:	e05f      	b.n	800762e <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	2208      	movs	r2, #8
 8007572:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	2280      	movs	r2, #128	; 0x80
 8007578:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	220a      	movs	r2, #10
 8007580:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	3363      	adds	r3, #99	; 0x63
 8007588:	2210      	movs	r2, #16
 800758a:	2100      	movs	r1, #0
 800758c:	4618      	mov	r0, r3
 800758e:	f006 ffbb 	bl	800e508 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	2225      	movs	r2, #37	; 0x25
 8007596:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	2201      	movs	r2, #1
 800759e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	2202      	movs	r2, #2
 80075a6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	f103 0210 	add.w	r2, r3, #16
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80075b6:	2301      	movs	r3, #1
 80075b8:	75fb      	strb	r3, [r7, #23]
      break;
 80075ba:	e038      	b.n	800762e <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 80075bc:	7afb      	ldrb	r3, [r7, #11]
 80075be:	4619      	mov	r1, r3
 80075c0:	68f8      	ldr	r0, [r7, #12]
 80075c2:	f7ff fd3d 	bl	8007040 <USBH_MSC_BOT_Process>
 80075c6:	4603      	mov	r3, r0
 80075c8:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80075ca:	7dfb      	ldrb	r3, [r7, #23]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d12d      	bne.n	800762c <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075d6:	3303      	adds	r3, #3
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	461a      	mov	r2, r3
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075e2:	3302      	adds	r3, #2
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	021b      	lsls	r3, r3, #8
 80075e8:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075f0:	3301      	adds	r3, #1
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80075f6:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	061b      	lsls	r3, r3, #24
 8007602:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800760e:	3307      	adds	r3, #7
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	b29a      	uxth	r2, r3
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800761a:	3306      	adds	r3, #6
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	b29b      	uxth	r3, r3
 8007620:	021b      	lsls	r3, r3, #8
 8007622:	b29b      	uxth	r3, r3
 8007624:	4313      	orrs	r3, r2
 8007626:	b29a      	uxth	r2, r3
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	809a      	strh	r2, [r3, #4]
      break;
 800762c:	bf00      	nop
  }

  return error;
 800762e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007630:	4618      	mov	r0, r3
 8007632:	3718      	adds	r7, #24
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b086      	sub	sp, #24
 800763c:	af00      	add	r7, sp, #0
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	460b      	mov	r3, r1
 8007642:	607a      	str	r2, [r7, #4]
 8007644:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8007646:	2302      	movs	r3, #2
 8007648:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007650:	69db      	ldr	r3, [r3, #28]
 8007652:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800765a:	2b01      	cmp	r3, #1
 800765c:	d002      	beq.n	8007664 <USBH_MSC_SCSI_Inquiry+0x2c>
 800765e:	2b02      	cmp	r3, #2
 8007660:	d03d      	beq.n	80076de <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8007662:	e089      	b.n	8007778 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	2224      	movs	r2, #36	; 0x24
 8007668:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	2280      	movs	r2, #128	; 0x80
 800766e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	220a      	movs	r2, #10
 8007676:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	3363      	adds	r3, #99	; 0x63
 800767e:	220a      	movs	r2, #10
 8007680:	2100      	movs	r1, #0
 8007682:	4618      	mov	r0, r3
 8007684:	f006 ff40 	bl	800e508 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	2212      	movs	r2, #18
 800768c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8007690:	7afb      	ldrb	r3, [r7, #11]
 8007692:	015b      	lsls	r3, r3, #5
 8007694:	b2da      	uxtb	r2, r3
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	2224      	movs	r2, #36	; 0x24
 80076b0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	2200      	movs	r2, #0
 80076b8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	2202      	movs	r2, #2
 80076c8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	f103 0210 	add.w	r2, r3, #16
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80076d8:	2301      	movs	r3, #1
 80076da:	75fb      	strb	r3, [r7, #23]
      break;
 80076dc:	e04c      	b.n	8007778 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 80076de:	7afb      	ldrb	r3, [r7, #11]
 80076e0:	4619      	mov	r1, r3
 80076e2:	68f8      	ldr	r0, [r7, #12]
 80076e4:	f7ff fcac 	bl	8007040 <USBH_MSC_BOT_Process>
 80076e8:	4603      	mov	r3, r0
 80076ea:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80076ec:	7dfb      	ldrb	r3, [r7, #23]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d141      	bne.n	8007776 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 80076f2:	2222      	movs	r2, #34	; 0x22
 80076f4:	2100      	movs	r1, #0
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f006 ff06 	bl	800e508 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	f003 031f 	and.w	r3, r3, #31
 8007708:	b2da      	uxtb	r2, r3
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	095b      	lsrs	r3, r3, #5
 8007718:	b2da      	uxtb	r2, r3
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007724:	3301      	adds	r3, #1
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	b25b      	sxtb	r3, r3
 800772a:	2b00      	cmp	r3, #0
 800772c:	da03      	bge.n	8007736 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2201      	movs	r2, #1
 8007732:	709a      	strb	r2, [r3, #2]
 8007734:	e002      	b.n	800773c <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	1cd8      	adds	r0, r3, #3
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007746:	3308      	adds	r3, #8
 8007748:	2208      	movs	r2, #8
 800774a:	4619      	mov	r1, r3
 800774c:	f006 fece 	bl	800e4ec <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f103 000c 	add.w	r0, r3, #12
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800775c:	3310      	adds	r3, #16
 800775e:	2210      	movs	r2, #16
 8007760:	4619      	mov	r1, r3
 8007762:	f006 fec3 	bl	800e4ec <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	331d      	adds	r3, #29
 800776a:	693a      	ldr	r2, [r7, #16]
 800776c:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8007770:	3220      	adds	r2, #32
 8007772:	6812      	ldr	r2, [r2, #0]
 8007774:	601a      	str	r2, [r3, #0]
      break;
 8007776:	bf00      	nop
  }

  return error;
 8007778:	7dfb      	ldrb	r3, [r7, #23]
}
 800777a:	4618      	mov	r0, r3
 800777c:	3718      	adds	r7, #24
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b086      	sub	sp, #24
 8007786:	af00      	add	r7, sp, #0
 8007788:	60f8      	str	r0, [r7, #12]
 800778a:	460b      	mov	r3, r1
 800778c:	607a      	str	r2, [r7, #4]
 800778e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8007790:	2302      	movs	r3, #2
 8007792:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800779a:	69db      	ldr	r3, [r3, #28]
 800779c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d002      	beq.n	80077ae <USBH_MSC_SCSI_RequestSense+0x2c>
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	d03d      	beq.n	8007828 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 80077ac:	e05d      	b.n	800786a <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	220e      	movs	r2, #14
 80077b2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	2280      	movs	r2, #128	; 0x80
 80077b8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	220a      	movs	r2, #10
 80077c0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	3363      	adds	r3, #99	; 0x63
 80077c8:	2210      	movs	r2, #16
 80077ca:	2100      	movs	r1, #0
 80077cc:	4618      	mov	r0, r3
 80077ce:	f006 fe9b 	bl	800e508 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	2203      	movs	r2, #3
 80077d6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80077da:	7afb      	ldrb	r3, [r7, #11]
 80077dc:	015b      	lsls	r3, r3, #5
 80077de:	b2da      	uxtb	r2, r3
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	2200      	movs	r2, #0
 80077ea:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	2200      	movs	r2, #0
 80077f2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	220e      	movs	r2, #14
 80077fa:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	2200      	movs	r2, #0
 8007802:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	2201      	movs	r2, #1
 800780a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	2202      	movs	r2, #2
 8007812:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	f103 0210 	add.w	r2, r3, #16
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8007822:	2301      	movs	r3, #1
 8007824:	75fb      	strb	r3, [r7, #23]
      break;
 8007826:	e020      	b.n	800786a <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007828:	7afb      	ldrb	r3, [r7, #11]
 800782a:	4619      	mov	r1, r3
 800782c:	68f8      	ldr	r0, [r7, #12]
 800782e:	f7ff fc07 	bl	8007040 <USBH_MSC_BOT_Process>
 8007832:	4603      	mov	r3, r0
 8007834:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8007836:	7dfb      	ldrb	r3, [r7, #23]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d115      	bne.n	8007868 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007842:	3302      	adds	r3, #2
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	f003 030f 	and.w	r3, r3, #15
 800784a:	b2da      	uxtb	r2, r3
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007856:	7b1a      	ldrb	r2, [r3, #12]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007862:	7b5a      	ldrb	r2, [r3, #13]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	709a      	strb	r2, [r3, #2]
      break;
 8007868:	bf00      	nop
  }

  return error;
 800786a:	7dfb      	ldrb	r3, [r7, #23]
}
 800786c:	4618      	mov	r0, r3
 800786e:	3718      	adds	r7, #24
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b086      	sub	sp, #24
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	607a      	str	r2, [r7, #4]
 800787e:	603b      	str	r3, [r7, #0]
 8007880:	460b      	mov	r3, r1
 8007882:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8007884:	2302      	movs	r3, #2
 8007886:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800788e:	69db      	ldr	r3, [r3, #28]
 8007890:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007898:	2b01      	cmp	r3, #1
 800789a:	d002      	beq.n	80078a2 <USBH_MSC_SCSI_Write+0x2e>
 800789c:	2b02      	cmp	r3, #2
 800789e:	d047      	beq.n	8007930 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80078a0:	e04e      	b.n	8007940 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80078a8:	461a      	mov	r2, r3
 80078aa:	6a3b      	ldr	r3, [r7, #32]
 80078ac:	fb03 f202 	mul.w	r2, r3, r2
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	220a      	movs	r2, #10
 80078c0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	3363      	adds	r3, #99	; 0x63
 80078c8:	2210      	movs	r2, #16
 80078ca:	2100      	movs	r1, #0
 80078cc:	4618      	mov	r0, r3
 80078ce:	f006 fe1b 	bl	800e508 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	222a      	movs	r2, #42	; 0x2a
 80078d6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 80078da:	79fa      	ldrb	r2, [r7, #7]
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 80078e2:	79ba      	ldrb	r2, [r7, #6]
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 80078ea:	797a      	ldrb	r2, [r7, #5]
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 80078f2:	1d3b      	adds	r3, r7, #4
 80078f4:	781a      	ldrb	r2, [r3, #0]
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 80078fc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8007906:	f107 0320 	add.w	r3, r7, #32
 800790a:	781a      	ldrb	r2, [r3, #0]
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	2201      	movs	r2, #1
 8007916:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	2202      	movs	r2, #2
 800791e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	683a      	ldr	r2, [r7, #0]
 8007926:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800792a:	2301      	movs	r3, #1
 800792c:	75fb      	strb	r3, [r7, #23]
      break;
 800792e:	e007      	b.n	8007940 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007930:	7afb      	ldrb	r3, [r7, #11]
 8007932:	4619      	mov	r1, r3
 8007934:	68f8      	ldr	r0, [r7, #12]
 8007936:	f7ff fb83 	bl	8007040 <USBH_MSC_BOT_Process>
 800793a:	4603      	mov	r3, r0
 800793c:	75fb      	strb	r3, [r7, #23]
      break;
 800793e:	bf00      	nop
  }

  return error;
 8007940:	7dfb      	ldrb	r3, [r7, #23]
}
 8007942:	4618      	mov	r0, r3
 8007944:	3718      	adds	r7, #24
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}

0800794a <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800794a:	b580      	push	{r7, lr}
 800794c:	b086      	sub	sp, #24
 800794e:	af00      	add	r7, sp, #0
 8007950:	60f8      	str	r0, [r7, #12]
 8007952:	607a      	str	r2, [r7, #4]
 8007954:	603b      	str	r3, [r7, #0]
 8007956:	460b      	mov	r3, r1
 8007958:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800795a:	2302      	movs	r3, #2
 800795c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007964:	69db      	ldr	r3, [r3, #28]
 8007966:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800796e:	2b01      	cmp	r3, #1
 8007970:	d002      	beq.n	8007978 <USBH_MSC_SCSI_Read+0x2e>
 8007972:	2b02      	cmp	r3, #2
 8007974:	d047      	beq.n	8007a06 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8007976:	e04e      	b.n	8007a16 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800797e:	461a      	mov	r2, r3
 8007980:	6a3b      	ldr	r3, [r7, #32]
 8007982:	fb03 f202 	mul.w	r2, r3, r2
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	2280      	movs	r2, #128	; 0x80
 800798e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	220a      	movs	r2, #10
 8007996:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	3363      	adds	r3, #99	; 0x63
 800799e:	2210      	movs	r2, #16
 80079a0:	2100      	movs	r1, #0
 80079a2:	4618      	mov	r0, r3
 80079a4:	f006 fdb0 	bl	800e508 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	2228      	movs	r2, #40	; 0x28
 80079ac:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 80079b0:	79fa      	ldrb	r2, [r7, #7]
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 80079b8:	79ba      	ldrb	r2, [r7, #6]
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 80079c0:	797a      	ldrb	r2, [r7, #5]
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 80079c8:	1d3b      	adds	r3, r7, #4
 80079ca:	781a      	ldrb	r2, [r3, #0]
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 80079d2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 80079dc:	f107 0320 	add.w	r3, r7, #32
 80079e0:	781a      	ldrb	r2, [r3, #0]
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	2202      	movs	r2, #2
 80079f4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	683a      	ldr	r2, [r7, #0]
 80079fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8007a00:	2301      	movs	r3, #1
 8007a02:	75fb      	strb	r3, [r7, #23]
      break;
 8007a04:	e007      	b.n	8007a16 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007a06:	7afb      	ldrb	r3, [r7, #11]
 8007a08:	4619      	mov	r1, r3
 8007a0a:	68f8      	ldr	r0, [r7, #12]
 8007a0c:	f7ff fb18 	bl	8007040 <USBH_MSC_BOT_Process>
 8007a10:	4603      	mov	r3, r0
 8007a12:	75fb      	strb	r3, [r7, #23]
      break;
 8007a14:	bf00      	nop
  }

  return error;
 8007a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3718      	adds	r7, #24
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	60b9      	str	r1, [r7, #8]
 8007a2a:	4613      	mov	r3, r2
 8007a2c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d101      	bne.n	8007a38 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007a34:	2302      	movs	r3, #2
 8007a36:	e029      	b.n	8007a8c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	79fa      	ldrb	r2, [r7, #7]
 8007a3c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007a50:	68f8      	ldr	r0, [r7, #12]
 8007a52:	f000 f81f 	bl	8007a94 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2200      	movs	r2, #0
 8007a72:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d003      	beq.n	8007a84 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	68ba      	ldr	r2, [r7, #8]
 8007a80:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007a84:	68f8      	ldr	r0, [r7, #12]
 8007a86:	f006 fad3 	bl	800e030 <USBH_LL_Init>

  return USBH_OK;
 8007a8a:	2300      	movs	r3, #0
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3710      	adds	r7, #16
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b085      	sub	sp, #20
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	60fb      	str	r3, [r7, #12]
 8007aa4:	e009      	b.n	8007aba <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	33e0      	adds	r3, #224	; 0xe0
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	4413      	add	r3, r2
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	60fb      	str	r3, [r7, #12]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2b0e      	cmp	r3, #14
 8007abe:	d9f2      	bls.n	8007aa6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	60fb      	str	r3, [r7, #12]
 8007ac4:	e009      	b.n	8007ada <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	4413      	add	r3, r2
 8007acc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	60fb      	str	r3, [r7, #12]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ae0:	d3f1      	bcc.n	8007ac6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2201      	movs	r2, #1
 8007af2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2201      	movs	r2, #1
 8007b00:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2240      	movs	r2, #64	; 0x40
 8007b06:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2201      	movs	r2, #1
 8007b1a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007b2e:	2300      	movs	r3, #0
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3714      	adds	r7, #20
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b085      	sub	sp, #20
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007b46:	2300      	movs	r3, #0
 8007b48:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d016      	beq.n	8007b7e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d10e      	bne.n	8007b78 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007b60:	1c59      	adds	r1, r3, #1
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	33de      	adds	r3, #222	; 0xde
 8007b6c:	6839      	ldr	r1, [r7, #0]
 8007b6e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007b72:	2300      	movs	r3, #0
 8007b74:	73fb      	strb	r3, [r7, #15]
 8007b76:	e004      	b.n	8007b82 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007b78:	2302      	movs	r3, #2
 8007b7a:	73fb      	strb	r3, [r7, #15]
 8007b7c:	e001      	b.n	8007b82 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007b7e:	2302      	movs	r3, #2
 8007b80:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3714      	adds	r7, #20
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr

08007b90 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b085      	sub	sp, #20
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	460b      	mov	r3, r1
 8007b9a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007ba6:	78fa      	ldrb	r2, [r7, #3]
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d204      	bcs.n	8007bb6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	78fa      	ldrb	r2, [r7, #3]
 8007bb0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007bb4:	e001      	b.n	8007bba <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007bb6:	2302      	movs	r3, #2
 8007bb8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3714      	adds	r7, #20
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr

08007bc8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b087      	sub	sp, #28
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	4608      	mov	r0, r1
 8007bd2:	4611      	mov	r1, r2
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	70fb      	strb	r3, [r7, #3]
 8007bda:	460b      	mov	r3, r1
 8007bdc:	70bb      	strb	r3, [r7, #2]
 8007bde:	4613      	mov	r3, r2
 8007be0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007be2:	2300      	movs	r3, #0
 8007be4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007be6:	2300      	movs	r3, #0
 8007be8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007bf0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007bf2:	e025      	b.n	8007c40 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007bf4:	7dfb      	ldrb	r3, [r7, #23]
 8007bf6:	221a      	movs	r2, #26
 8007bf8:	fb02 f303 	mul.w	r3, r2, r3
 8007bfc:	3308      	adds	r3, #8
 8007bfe:	68fa      	ldr	r2, [r7, #12]
 8007c00:	4413      	add	r3, r2
 8007c02:	3302      	adds	r3, #2
 8007c04:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	795b      	ldrb	r3, [r3, #5]
 8007c0a:	78fa      	ldrb	r2, [r7, #3]
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d002      	beq.n	8007c16 <USBH_FindInterface+0x4e>
 8007c10:	78fb      	ldrb	r3, [r7, #3]
 8007c12:	2bff      	cmp	r3, #255	; 0xff
 8007c14:	d111      	bne.n	8007c3a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007c1a:	78ba      	ldrb	r2, [r7, #2]
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d002      	beq.n	8007c26 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007c20:	78bb      	ldrb	r3, [r7, #2]
 8007c22:	2bff      	cmp	r3, #255	; 0xff
 8007c24:	d109      	bne.n	8007c3a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007c2a:	787a      	ldrb	r2, [r7, #1]
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d002      	beq.n	8007c36 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007c30:	787b      	ldrb	r3, [r7, #1]
 8007c32:	2bff      	cmp	r3, #255	; 0xff
 8007c34:	d101      	bne.n	8007c3a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007c36:	7dfb      	ldrb	r3, [r7, #23]
 8007c38:	e006      	b.n	8007c48 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007c3a:	7dfb      	ldrb	r3, [r7, #23]
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007c40:	7dfb      	ldrb	r3, [r7, #23]
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d9d6      	bls.n	8007bf4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007c46:	23ff      	movs	r3, #255	; 0xff
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	371c      	adds	r7, #28
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b082      	sub	sp, #8
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f006 fa23 	bl	800e0a8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007c62:	2101      	movs	r1, #1
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f006 fb3c 	bl	800e2e2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007c6a:	2300      	movs	r3, #0
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3708      	adds	r7, #8
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b088      	sub	sp, #32
 8007c78:	af04      	add	r7, sp, #16
 8007c7a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007c7c:	2302      	movs	r3, #2
 8007c7e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007c80:	2300      	movs	r3, #0
 8007c82:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d102      	bne.n	8007c96 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2203      	movs	r2, #3
 8007c94:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	2b0b      	cmp	r3, #11
 8007c9e:	f200 81b3 	bhi.w	8008008 <USBH_Process+0x394>
 8007ca2:	a201      	add	r2, pc, #4	; (adr r2, 8007ca8 <USBH_Process+0x34>)
 8007ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca8:	08007cd9 	.word	0x08007cd9
 8007cac:	08007d0b 	.word	0x08007d0b
 8007cb0:	08007d73 	.word	0x08007d73
 8007cb4:	08007fa3 	.word	0x08007fa3
 8007cb8:	08008009 	.word	0x08008009
 8007cbc:	08007e17 	.word	0x08007e17
 8007cc0:	08007f49 	.word	0x08007f49
 8007cc4:	08007e4d 	.word	0x08007e4d
 8007cc8:	08007e6d 	.word	0x08007e6d
 8007ccc:	08007e8d 	.word	0x08007e8d
 8007cd0:	08007ebb 	.word	0x08007ebb
 8007cd4:	08007f8b 	.word	0x08007f8b
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	f000 8193 	beq.w	800800c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2201      	movs	r2, #1
 8007cea:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007cec:	20c8      	movs	r0, #200	; 0xc8
 8007cee:	f006 fb6f 	bl	800e3d0 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f006 fa35 	bl	800e162 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007d08:	e180      	b.n	800800c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d107      	bne.n	8007d24 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2202      	movs	r2, #2
 8007d20:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007d22:	e182      	b.n	800802a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007d2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d2e:	d914      	bls.n	8007d5a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007d36:	3301      	adds	r3, #1
 8007d38:	b2da      	uxtb	r2, r3
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007d46:	2b03      	cmp	r3, #3
 8007d48:	d903      	bls.n	8007d52 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	220d      	movs	r2, #13
 8007d4e:	701a      	strb	r2, [r3, #0]
      break;
 8007d50:	e16b      	b.n	800802a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	701a      	strb	r2, [r3, #0]
      break;
 8007d58:	e167      	b.n	800802a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007d60:	f103 020a 	add.w	r2, r3, #10
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007d6a:	200a      	movs	r0, #10
 8007d6c:	f006 fb30 	bl	800e3d0 <USBH_Delay>
      break;
 8007d70:	e15b      	b.n	800802a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d005      	beq.n	8007d88 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d82:	2104      	movs	r1, #4
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007d88:	2064      	movs	r0, #100	; 0x64
 8007d8a:	f006 fb21 	bl	800e3d0 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f006 f9c0 	bl	800e114 <USBH_LL_GetSpeed>
 8007d94:	4603      	mov	r3, r0
 8007d96:	461a      	mov	r2, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2205      	movs	r2, #5
 8007da2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007da4:	2100      	movs	r1, #0
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f001 f92f 	bl	800900a <USBH_AllocPipe>
 8007dac:	4603      	mov	r3, r0
 8007dae:	461a      	mov	r2, r3
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007db4:	2180      	movs	r1, #128	; 0x80
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f001 f927 	bl	800900a <USBH_AllocPipe>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	7919      	ldrb	r1, [r3, #4]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007dd8:	b292      	uxth	r2, r2
 8007dda:	9202      	str	r2, [sp, #8]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	9201      	str	r2, [sp, #4]
 8007de0:	9300      	str	r3, [sp, #0]
 8007de2:	4603      	mov	r3, r0
 8007de4:	2280      	movs	r2, #128	; 0x80
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f001 f8e0 	bl	8008fac <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	7959      	ldrb	r1, [r3, #5]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007e00:	b292      	uxth	r2, r2
 8007e02:	9202      	str	r2, [sp, #8]
 8007e04:	2200      	movs	r2, #0
 8007e06:	9201      	str	r2, [sp, #4]
 8007e08:	9300      	str	r3, [sp, #0]
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f001 f8cc 	bl	8008fac <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007e14:	e109      	b.n	800802a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 f90c 	bl	8008034 <USBH_HandleEnum>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007e20:	7bbb      	ldrb	r3, [r7, #14]
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	f040 80f3 	bne.w	8008010 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d103      	bne.n	8007e44 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2208      	movs	r2, #8
 8007e40:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007e42:	e0e5      	b.n	8008010 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2207      	movs	r2, #7
 8007e48:	701a      	strb	r2, [r3, #0]
      break;
 8007e4a:	e0e1      	b.n	8008010 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	f000 80de 	beq.w	8008014 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007e5e:	2101      	movs	r1, #1
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2208      	movs	r2, #8
 8007e68:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007e6a:	e0d3      	b.n	8008014 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	4619      	mov	r1, r3
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 fc20 	bl	80086bc <USBH_SetCfg>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	f040 80ca 	bne.w	8008018 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2209      	movs	r2, #9
 8007e88:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007e8a:	e0c5      	b.n	8008018 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007e92:	f003 0320 	and.w	r3, r3, #32
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d00b      	beq.n	8007eb2 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007e9a:	2101      	movs	r1, #1
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 fc30 	bl	8008702 <USBH_SetFeature>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	f040 80b9 	bne.w	800801c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	220a      	movs	r2, #10
 8007eae:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007eb0:	e0b4      	b.n	800801c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	220a      	movs	r2, #10
 8007eb6:	701a      	strb	r2, [r3, #0]
      break;
 8007eb8:	e0b0      	b.n	800801c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	f000 80ad 	beq.w	8008020 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007ece:	2300      	movs	r3, #0
 8007ed0:	73fb      	strb	r3, [r7, #15]
 8007ed2:	e016      	b.n	8007f02 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007ed4:	7bfa      	ldrb	r2, [r7, #15]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	32de      	adds	r2, #222	; 0xde
 8007eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ede:	791a      	ldrb	r2, [r3, #4]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d108      	bne.n	8007efc <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007eea:	7bfa      	ldrb	r2, [r7, #15]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	32de      	adds	r2, #222	; 0xde
 8007ef0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007efa:	e005      	b.n	8007f08 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007efc:	7bfb      	ldrb	r3, [r7, #15]
 8007efe:	3301      	adds	r3, #1
 8007f00:	73fb      	strb	r3, [r7, #15]
 8007f02:	7bfb      	ldrb	r3, [r7, #15]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d0e5      	beq.n	8007ed4 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d016      	beq.n	8007f40 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	4798      	blx	r3
 8007f1e:	4603      	mov	r3, r0
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d109      	bne.n	8007f38 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2206      	movs	r2, #6
 8007f28:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f30:	2103      	movs	r1, #3
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007f36:	e073      	b.n	8008020 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	220d      	movs	r2, #13
 8007f3c:	701a      	strb	r2, [r3, #0]
      break;
 8007f3e:	e06f      	b.n	8008020 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	220d      	movs	r2, #13
 8007f44:	701a      	strb	r2, [r3, #0]
      break;
 8007f46:	e06b      	b.n	8008020 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d017      	beq.n	8007f82 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f58:	691b      	ldr	r3, [r3, #16]
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	4798      	blx	r3
 8007f5e:	4603      	mov	r3, r0
 8007f60:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007f62:	7bbb      	ldrb	r3, [r7, #14]
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d103      	bne.n	8007f72 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	220b      	movs	r2, #11
 8007f6e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007f70:	e058      	b.n	8008024 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8007f72:	7bbb      	ldrb	r3, [r7, #14]
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	2b02      	cmp	r3, #2
 8007f78:	d154      	bne.n	8008024 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	220d      	movs	r2, #13
 8007f7e:	701a      	strb	r2, [r3, #0]
      break;
 8007f80:	e050      	b.n	8008024 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	220d      	movs	r2, #13
 8007f86:	701a      	strb	r2, [r3, #0]
      break;
 8007f88:	e04c      	b.n	8008024 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d049      	beq.n	8008028 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f9a:	695b      	ldr	r3, [r3, #20]
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	4798      	blx	r3
      }
      break;
 8007fa0:	e042      	b.n	8008028 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f7ff fd72 	bl	8007a94 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d009      	beq.n	8007fce <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007fc0:	68db      	ldr	r3, [r3, #12]
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d005      	beq.n	8007fe4 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007fde:	2105      	movs	r1, #5
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d107      	bne.n	8008000 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f7ff fe2b 	bl	8007c54 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007ffe:	e014      	b.n	800802a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f006 f851 	bl	800e0a8 <USBH_LL_Start>
      break;
 8008006:	e010      	b.n	800802a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008008:	bf00      	nop
 800800a:	e00e      	b.n	800802a <USBH_Process+0x3b6>
      break;
 800800c:	bf00      	nop
 800800e:	e00c      	b.n	800802a <USBH_Process+0x3b6>
      break;
 8008010:	bf00      	nop
 8008012:	e00a      	b.n	800802a <USBH_Process+0x3b6>
    break;
 8008014:	bf00      	nop
 8008016:	e008      	b.n	800802a <USBH_Process+0x3b6>
      break;
 8008018:	bf00      	nop
 800801a:	e006      	b.n	800802a <USBH_Process+0x3b6>
      break;
 800801c:	bf00      	nop
 800801e:	e004      	b.n	800802a <USBH_Process+0x3b6>
      break;
 8008020:	bf00      	nop
 8008022:	e002      	b.n	800802a <USBH_Process+0x3b6>
      break;
 8008024:	bf00      	nop
 8008026:	e000      	b.n	800802a <USBH_Process+0x3b6>
      break;
 8008028:	bf00      	nop
  }
  return USBH_OK;
 800802a:	2300      	movs	r3, #0
}
 800802c:	4618      	mov	r0, r3
 800802e:	3710      	adds	r7, #16
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b088      	sub	sp, #32
 8008038:	af04      	add	r7, sp, #16
 800803a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800803c:	2301      	movs	r3, #1
 800803e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008040:	2301      	movs	r3, #1
 8008042:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	785b      	ldrb	r3, [r3, #1]
 8008048:	2b07      	cmp	r3, #7
 800804a:	f200 81c1 	bhi.w	80083d0 <USBH_HandleEnum+0x39c>
 800804e:	a201      	add	r2, pc, #4	; (adr r2, 8008054 <USBH_HandleEnum+0x20>)
 8008050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008054:	08008075 	.word	0x08008075
 8008058:	08008133 	.word	0x08008133
 800805c:	0800819d 	.word	0x0800819d
 8008060:	0800822b 	.word	0x0800822b
 8008064:	08008295 	.word	0x08008295
 8008068:	08008305 	.word	0x08008305
 800806c:	0800834b 	.word	0x0800834b
 8008070:	08008391 	.word	0x08008391
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008074:	2108      	movs	r1, #8
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 fa50 	bl	800851c <USBH_Get_DevDesc>
 800807c:	4603      	mov	r3, r0
 800807e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008080:	7bbb      	ldrb	r3, [r7, #14]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d130      	bne.n	80080e8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2201      	movs	r2, #1
 8008094:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	7919      	ldrb	r1, [r3, #4]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80080aa:	b292      	uxth	r2, r2
 80080ac:	9202      	str	r2, [sp, #8]
 80080ae:	2200      	movs	r2, #0
 80080b0:	9201      	str	r2, [sp, #4]
 80080b2:	9300      	str	r3, [sp, #0]
 80080b4:	4603      	mov	r3, r0
 80080b6:	2280      	movs	r2, #128	; 0x80
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 ff77 	bl	8008fac <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	7959      	ldrb	r1, [r3, #5]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80080d2:	b292      	uxth	r2, r2
 80080d4:	9202      	str	r2, [sp, #8]
 80080d6:	2200      	movs	r2, #0
 80080d8:	9201      	str	r2, [sp, #4]
 80080da:	9300      	str	r3, [sp, #0]
 80080dc:	4603      	mov	r3, r0
 80080de:	2200      	movs	r2, #0
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 ff63 	bl	8008fac <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80080e6:	e175      	b.n	80083d4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80080e8:	7bbb      	ldrb	r3, [r7, #14]
 80080ea:	2b03      	cmp	r3, #3
 80080ec:	f040 8172 	bne.w	80083d4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80080f6:	3301      	adds	r3, #1
 80080f8:	b2da      	uxtb	r2, r3
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008106:	2b03      	cmp	r3, #3
 8008108:	d903      	bls.n	8008112 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	220d      	movs	r2, #13
 800810e:	701a      	strb	r2, [r3, #0]
      break;
 8008110:	e160      	b.n	80083d4 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	795b      	ldrb	r3, [r3, #5]
 8008116:	4619      	mov	r1, r3
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 ff97 	bl	800904c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	791b      	ldrb	r3, [r3, #4]
 8008122:	4619      	mov	r1, r3
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 ff91 	bl	800904c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	701a      	strb	r2, [r3, #0]
      break;
 8008130:	e150      	b.n	80083d4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008132:	2112      	movs	r1, #18
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 f9f1 	bl	800851c <USBH_Get_DevDesc>
 800813a:	4603      	mov	r3, r0
 800813c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800813e:	7bbb      	ldrb	r3, [r7, #14]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d103      	bne.n	800814c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2202      	movs	r2, #2
 8008148:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800814a:	e145      	b.n	80083d8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800814c:	7bbb      	ldrb	r3, [r7, #14]
 800814e:	2b03      	cmp	r3, #3
 8008150:	f040 8142 	bne.w	80083d8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800815a:	3301      	adds	r3, #1
 800815c:	b2da      	uxtb	r2, r3
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800816a:	2b03      	cmp	r3, #3
 800816c:	d903      	bls.n	8008176 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	220d      	movs	r2, #13
 8008172:	701a      	strb	r2, [r3, #0]
      break;
 8008174:	e130      	b.n	80083d8 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	795b      	ldrb	r3, [r3, #5]
 800817a:	4619      	mov	r1, r3
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 ff65 	bl	800904c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	791b      	ldrb	r3, [r3, #4]
 8008186:	4619      	mov	r1, r3
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 ff5f 	bl	800904c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2200      	movs	r2, #0
 8008192:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2200      	movs	r2, #0
 8008198:	701a      	strb	r2, [r3, #0]
      break;
 800819a:	e11d      	b.n	80083d8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800819c:	2101      	movs	r1, #1
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 fa68 	bl	8008674 <USBH_SetAddress>
 80081a4:	4603      	mov	r3, r0
 80081a6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80081a8:	7bbb      	ldrb	r3, [r7, #14]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d132      	bne.n	8008214 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80081ae:	2002      	movs	r0, #2
 80081b0:	f006 f90e 	bl	800e3d0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2203      	movs	r2, #3
 80081c0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	7919      	ldrb	r1, [r3, #4]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80081d6:	b292      	uxth	r2, r2
 80081d8:	9202      	str	r2, [sp, #8]
 80081da:	2200      	movs	r2, #0
 80081dc:	9201      	str	r2, [sp, #4]
 80081de:	9300      	str	r3, [sp, #0]
 80081e0:	4603      	mov	r3, r0
 80081e2:	2280      	movs	r2, #128	; 0x80
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f000 fee1 	bl	8008fac <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	7959      	ldrb	r1, [r3, #5]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80081fa:	687a      	ldr	r2, [r7, #4]
 80081fc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80081fe:	b292      	uxth	r2, r2
 8008200:	9202      	str	r2, [sp, #8]
 8008202:	2200      	movs	r2, #0
 8008204:	9201      	str	r2, [sp, #4]
 8008206:	9300      	str	r3, [sp, #0]
 8008208:	4603      	mov	r3, r0
 800820a:	2200      	movs	r2, #0
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 fecd 	bl	8008fac <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008212:	e0e3      	b.n	80083dc <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008214:	7bbb      	ldrb	r3, [r7, #14]
 8008216:	2b03      	cmp	r3, #3
 8008218:	f040 80e0 	bne.w	80083dc <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	220d      	movs	r2, #13
 8008220:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	705a      	strb	r2, [r3, #1]
      break;
 8008228:	e0d8      	b.n	80083dc <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800822a:	2109      	movs	r1, #9
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f000 f99d 	bl	800856c <USBH_Get_CfgDesc>
 8008232:	4603      	mov	r3, r0
 8008234:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008236:	7bbb      	ldrb	r3, [r7, #14]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d103      	bne.n	8008244 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2204      	movs	r2, #4
 8008240:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008242:	e0cd      	b.n	80083e0 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008244:	7bbb      	ldrb	r3, [r7, #14]
 8008246:	2b03      	cmp	r3, #3
 8008248:	f040 80ca 	bne.w	80083e0 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008252:	3301      	adds	r3, #1
 8008254:	b2da      	uxtb	r2, r3
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008262:	2b03      	cmp	r3, #3
 8008264:	d903      	bls.n	800826e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	220d      	movs	r2, #13
 800826a:	701a      	strb	r2, [r3, #0]
      break;
 800826c:	e0b8      	b.n	80083e0 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	795b      	ldrb	r3, [r3, #5]
 8008272:	4619      	mov	r1, r3
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f000 fee9 	bl	800904c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	791b      	ldrb	r3, [r3, #4]
 800827e:	4619      	mov	r1, r3
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 fee3 	bl	800904c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	701a      	strb	r2, [r3, #0]
      break;
 8008292:	e0a5      	b.n	80083e0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800829a:	4619      	mov	r1, r3
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 f965 	bl	800856c <USBH_Get_CfgDesc>
 80082a2:	4603      	mov	r3, r0
 80082a4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80082a6:	7bbb      	ldrb	r3, [r7, #14]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d103      	bne.n	80082b4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2205      	movs	r2, #5
 80082b0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80082b2:	e097      	b.n	80083e4 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80082b4:	7bbb      	ldrb	r3, [r7, #14]
 80082b6:	2b03      	cmp	r3, #3
 80082b8:	f040 8094 	bne.w	80083e4 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80082c2:	3301      	adds	r3, #1
 80082c4:	b2da      	uxtb	r2, r3
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80082d2:	2b03      	cmp	r3, #3
 80082d4:	d903      	bls.n	80082de <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	220d      	movs	r2, #13
 80082da:	701a      	strb	r2, [r3, #0]
      break;
 80082dc:	e082      	b.n	80083e4 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	795b      	ldrb	r3, [r3, #5]
 80082e2:	4619      	mov	r1, r3
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 feb1 	bl	800904c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	791b      	ldrb	r3, [r3, #4]
 80082ee:	4619      	mov	r1, r3
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 feab 	bl	800904c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2200      	movs	r2, #0
 80082fa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2200      	movs	r2, #0
 8008300:	701a      	strb	r2, [r3, #0]
      break;
 8008302:	e06f      	b.n	80083e4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800830a:	2b00      	cmp	r3, #0
 800830c:	d019      	beq.n	8008342 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800831a:	23ff      	movs	r3, #255	; 0xff
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 f949 	bl	80085b4 <USBH_Get_StringDesc>
 8008322:	4603      	mov	r3, r0
 8008324:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008326:	7bbb      	ldrb	r3, [r7, #14]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d103      	bne.n	8008334 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2206      	movs	r2, #6
 8008330:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008332:	e059      	b.n	80083e8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008334:	7bbb      	ldrb	r3, [r7, #14]
 8008336:	2b03      	cmp	r3, #3
 8008338:	d156      	bne.n	80083e8 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2206      	movs	r2, #6
 800833e:	705a      	strb	r2, [r3, #1]
      break;
 8008340:	e052      	b.n	80083e8 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2206      	movs	r2, #6
 8008346:	705a      	strb	r2, [r3, #1]
      break;
 8008348:	e04e      	b.n	80083e8 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008350:	2b00      	cmp	r3, #0
 8008352:	d019      	beq.n	8008388 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008360:	23ff      	movs	r3, #255	; 0xff
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 f926 	bl	80085b4 <USBH_Get_StringDesc>
 8008368:	4603      	mov	r3, r0
 800836a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800836c:	7bbb      	ldrb	r3, [r7, #14]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d103      	bne.n	800837a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2207      	movs	r2, #7
 8008376:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008378:	e038      	b.n	80083ec <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800837a:	7bbb      	ldrb	r3, [r7, #14]
 800837c:	2b03      	cmp	r3, #3
 800837e:	d135      	bne.n	80083ec <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2207      	movs	r2, #7
 8008384:	705a      	strb	r2, [r3, #1]
      break;
 8008386:	e031      	b.n	80083ec <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2207      	movs	r2, #7
 800838c:	705a      	strb	r2, [r3, #1]
      break;
 800838e:	e02d      	b.n	80083ec <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008396:	2b00      	cmp	r3, #0
 8008398:	d017      	beq.n	80083ca <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80083a6:	23ff      	movs	r3, #255	; 0xff
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 f903 	bl	80085b4 <USBH_Get_StringDesc>
 80083ae:	4603      	mov	r3, r0
 80083b0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80083b2:	7bbb      	ldrb	r3, [r7, #14]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d102      	bne.n	80083be <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80083b8:	2300      	movs	r3, #0
 80083ba:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80083bc:	e018      	b.n	80083f0 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80083be:	7bbb      	ldrb	r3, [r7, #14]
 80083c0:	2b03      	cmp	r3, #3
 80083c2:	d115      	bne.n	80083f0 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80083c4:	2300      	movs	r3, #0
 80083c6:	73fb      	strb	r3, [r7, #15]
      break;
 80083c8:	e012      	b.n	80083f0 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80083ca:	2300      	movs	r3, #0
 80083cc:	73fb      	strb	r3, [r7, #15]
      break;
 80083ce:	e00f      	b.n	80083f0 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80083d0:	bf00      	nop
 80083d2:	e00e      	b.n	80083f2 <USBH_HandleEnum+0x3be>
      break;
 80083d4:	bf00      	nop
 80083d6:	e00c      	b.n	80083f2 <USBH_HandleEnum+0x3be>
      break;
 80083d8:	bf00      	nop
 80083da:	e00a      	b.n	80083f2 <USBH_HandleEnum+0x3be>
      break;
 80083dc:	bf00      	nop
 80083de:	e008      	b.n	80083f2 <USBH_HandleEnum+0x3be>
      break;
 80083e0:	bf00      	nop
 80083e2:	e006      	b.n	80083f2 <USBH_HandleEnum+0x3be>
      break;
 80083e4:	bf00      	nop
 80083e6:	e004      	b.n	80083f2 <USBH_HandleEnum+0x3be>
      break;
 80083e8:	bf00      	nop
 80083ea:	e002      	b.n	80083f2 <USBH_HandleEnum+0x3be>
      break;
 80083ec:	bf00      	nop
 80083ee:	e000      	b.n	80083f2 <USBH_HandleEnum+0x3be>
      break;
 80083f0:	bf00      	nop
  }
  return Status;
 80083f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3710      	adds	r7, #16
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b083      	sub	sp, #12
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	683a      	ldr	r2, [r7, #0]
 800840a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800840e:	bf00      	nop
 8008410:	370c      	adds	r7, #12
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr

0800841a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800841a:	b580      	push	{r7, lr}
 800841c:	b082      	sub	sp, #8
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008428:	1c5a      	adds	r2, r3, #1
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 f804 	bl	800843e <USBH_HandleSof>
}
 8008436:	bf00      	nop
 8008438:	3708      	adds	r7, #8
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}

0800843e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800843e:	b580      	push	{r7, lr}
 8008440:	b082      	sub	sp, #8
 8008442:	af00      	add	r7, sp, #0
 8008444:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	b2db      	uxtb	r3, r3
 800844c:	2b0b      	cmp	r3, #11
 800844e:	d10a      	bne.n	8008466 <USBH_HandleSof+0x28>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008456:	2b00      	cmp	r3, #0
 8008458:	d005      	beq.n	8008466 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008460:	699b      	ldr	r3, [r3, #24]
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	4798      	blx	r3
  }
}
 8008466:	bf00      	nop
 8008468:	3708      	adds	r7, #8
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}

0800846e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800846e:	b480      	push	{r7}
 8008470:	b083      	sub	sp, #12
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2201      	movs	r2, #1
 800847a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800847e:	bf00      	nop
}
 8008480:	370c      	adds	r7, #12
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr

0800848a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800848a:	b480      	push	{r7}
 800848c:	b083      	sub	sp, #12
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2200      	movs	r2, #0
 8008496:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800849a:	bf00      	nop
}
 800849c:	370c      	adds	r7, #12
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr

080084a6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80084a6:	b480      	push	{r7}
 80084a8:	b083      	sub	sp, #12
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2201      	movs	r2, #1
 80084b2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2200      	movs	r2, #0
 80084ba:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2200      	movs	r2, #0
 80084c2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80084c6:	2300      	movs	r3, #0
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	370c      	adds	r7, #12
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr

080084d4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2201      	movs	r2, #1
 80084e0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2200      	movs	r2, #0
 80084f0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f005 fdf2 	bl	800e0de <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	791b      	ldrb	r3, [r3, #4]
 80084fe:	4619      	mov	r1, r3
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 fda3 	bl	800904c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	795b      	ldrb	r3, [r3, #5]
 800850a:	4619      	mov	r1, r3
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 fd9d 	bl	800904c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008512:	2300      	movs	r3, #0
}
 8008514:	4618      	mov	r0, r3
 8008516:	3708      	adds	r7, #8
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b086      	sub	sp, #24
 8008520:	af02      	add	r7, sp, #8
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	460b      	mov	r3, r1
 8008526:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800852e:	78fb      	ldrb	r3, [r7, #3]
 8008530:	b29b      	uxth	r3, r3
 8008532:	9300      	str	r3, [sp, #0]
 8008534:	4613      	mov	r3, r2
 8008536:	f44f 7280 	mov.w	r2, #256	; 0x100
 800853a:	2100      	movs	r1, #0
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f000 f864 	bl	800860a <USBH_GetDescriptor>
 8008542:	4603      	mov	r3, r0
 8008544:	73fb      	strb	r3, [r7, #15]
 8008546:	7bfb      	ldrb	r3, [r7, #15]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d10a      	bne.n	8008562 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008558:	78fa      	ldrb	r2, [r7, #3]
 800855a:	b292      	uxth	r2, r2
 800855c:	4619      	mov	r1, r3
 800855e:	f000 f918 	bl	8008792 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008562:	7bfb      	ldrb	r3, [r7, #15]
}
 8008564:	4618      	mov	r0, r3
 8008566:	3710      	adds	r7, #16
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800856c:	b580      	push	{r7, lr}
 800856e:	b086      	sub	sp, #24
 8008570:	af02      	add	r7, sp, #8
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	460b      	mov	r3, r1
 8008576:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	331c      	adds	r3, #28
 800857c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800857e:	887b      	ldrh	r3, [r7, #2]
 8008580:	9300      	str	r3, [sp, #0]
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008588:	2100      	movs	r1, #0
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 f83d 	bl	800860a <USBH_GetDescriptor>
 8008590:	4603      	mov	r3, r0
 8008592:	72fb      	strb	r3, [r7, #11]
 8008594:	7afb      	ldrb	r3, [r7, #11]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d107      	bne.n	80085aa <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80085a0:	887a      	ldrh	r2, [r7, #2]
 80085a2:	68f9      	ldr	r1, [r7, #12]
 80085a4:	4618      	mov	r0, r3
 80085a6:	f000 f964 	bl	8008872 <USBH_ParseCfgDesc>
  }

  return status;
 80085aa:	7afb      	ldrb	r3, [r7, #11]
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3710      	adds	r7, #16
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b088      	sub	sp, #32
 80085b8:	af02      	add	r7, sp, #8
 80085ba:	60f8      	str	r0, [r7, #12]
 80085bc:	607a      	str	r2, [r7, #4]
 80085be:	461a      	mov	r2, r3
 80085c0:	460b      	mov	r3, r1
 80085c2:	72fb      	strb	r3, [r7, #11]
 80085c4:	4613      	mov	r3, r2
 80085c6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80085c8:	7afb      	ldrb	r3, [r7, #11]
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80085d0:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80085d8:	893b      	ldrh	r3, [r7, #8]
 80085da:	9300      	str	r3, [sp, #0]
 80085dc:	460b      	mov	r3, r1
 80085de:	2100      	movs	r1, #0
 80085e0:	68f8      	ldr	r0, [r7, #12]
 80085e2:	f000 f812 	bl	800860a <USBH_GetDescriptor>
 80085e6:	4603      	mov	r3, r0
 80085e8:	75fb      	strb	r3, [r7, #23]
 80085ea:	7dfb      	ldrb	r3, [r7, #23]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d107      	bne.n	8008600 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80085f6:	893a      	ldrh	r2, [r7, #8]
 80085f8:	6879      	ldr	r1, [r7, #4]
 80085fa:	4618      	mov	r0, r3
 80085fc:	f000 fa37 	bl	8008a6e <USBH_ParseStringDesc>
  }

  return status;
 8008600:	7dfb      	ldrb	r3, [r7, #23]
}
 8008602:	4618      	mov	r0, r3
 8008604:	3718      	adds	r7, #24
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}

0800860a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800860a:	b580      	push	{r7, lr}
 800860c:	b084      	sub	sp, #16
 800860e:	af00      	add	r7, sp, #0
 8008610:	60f8      	str	r0, [r7, #12]
 8008612:	607b      	str	r3, [r7, #4]
 8008614:	460b      	mov	r3, r1
 8008616:	72fb      	strb	r3, [r7, #11]
 8008618:	4613      	mov	r3, r2
 800861a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	789b      	ldrb	r3, [r3, #2]
 8008620:	2b01      	cmp	r3, #1
 8008622:	d11c      	bne.n	800865e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008624:	7afb      	ldrb	r3, [r7, #11]
 8008626:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800862a:	b2da      	uxtb	r2, r3
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2206      	movs	r2, #6
 8008634:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	893a      	ldrh	r2, [r7, #8]
 800863a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800863c:	893b      	ldrh	r3, [r7, #8]
 800863e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008642:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008646:	d104      	bne.n	8008652 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	f240 4209 	movw	r2, #1033	; 0x409
 800864e:	829a      	strh	r2, [r3, #20]
 8008650:	e002      	b.n	8008658 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2200      	movs	r2, #0
 8008656:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	8b3a      	ldrh	r2, [r7, #24]
 800865c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800865e:	8b3b      	ldrh	r3, [r7, #24]
 8008660:	461a      	mov	r2, r3
 8008662:	6879      	ldr	r1, [r7, #4]
 8008664:	68f8      	ldr	r0, [r7, #12]
 8008666:	f000 fa50 	bl	8008b0a <USBH_CtlReq>
 800866a:	4603      	mov	r3, r0
}
 800866c:	4618      	mov	r0, r3
 800866e:	3710      	adds	r7, #16
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b082      	sub	sp, #8
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	460b      	mov	r3, r1
 800867e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	789b      	ldrb	r3, [r3, #2]
 8008684:	2b01      	cmp	r3, #1
 8008686:	d10f      	bne.n	80086a8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2200      	movs	r2, #0
 800868c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2205      	movs	r2, #5
 8008692:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008694:	78fb      	ldrb	r3, [r7, #3]
 8008696:	b29a      	uxth	r2, r3
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2200      	movs	r2, #0
 80086a0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2200      	movs	r2, #0
 80086a6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80086a8:	2200      	movs	r2, #0
 80086aa:	2100      	movs	r1, #0
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 fa2c 	bl	8008b0a <USBH_CtlReq>
 80086b2:	4603      	mov	r3, r0
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3708      	adds	r7, #8
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b082      	sub	sp, #8
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	460b      	mov	r3, r1
 80086c6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	789b      	ldrb	r3, [r3, #2]
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d10e      	bne.n	80086ee <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2209      	movs	r2, #9
 80086da:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	887a      	ldrh	r2, [r7, #2]
 80086e0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2200      	movs	r2, #0
 80086e6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80086ee:	2200      	movs	r2, #0
 80086f0:	2100      	movs	r1, #0
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 fa09 	bl	8008b0a <USBH_CtlReq>
 80086f8:	4603      	mov	r3, r0
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3708      	adds	r7, #8
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}

08008702 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008702:	b580      	push	{r7, lr}
 8008704:	b082      	sub	sp, #8
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
 800870a:	460b      	mov	r3, r1
 800870c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	789b      	ldrb	r3, [r3, #2]
 8008712:	2b01      	cmp	r3, #1
 8008714:	d10f      	bne.n	8008736 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2200      	movs	r2, #0
 800871a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2203      	movs	r2, #3
 8008720:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008722:	78fb      	ldrb	r3, [r7, #3]
 8008724:	b29a      	uxth	r2, r3
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2200      	movs	r2, #0
 800872e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2200      	movs	r2, #0
 8008734:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008736:	2200      	movs	r2, #0
 8008738:	2100      	movs	r1, #0
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f000 f9e5 	bl	8008b0a <USBH_CtlReq>
 8008740:	4603      	mov	r3, r0
}
 8008742:	4618      	mov	r0, r3
 8008744:	3708      	adds	r7, #8
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800874a:	b580      	push	{r7, lr}
 800874c:	b082      	sub	sp, #8
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
 8008752:	460b      	mov	r3, r1
 8008754:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	789b      	ldrb	r3, [r3, #2]
 800875a:	2b01      	cmp	r3, #1
 800875c:	d10f      	bne.n	800877e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2202      	movs	r2, #2
 8008762:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2201      	movs	r2, #1
 8008768:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2200      	movs	r2, #0
 800876e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008770:	78fb      	ldrb	r3, [r7, #3]
 8008772:	b29a      	uxth	r2, r3
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2200      	movs	r2, #0
 800877c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800877e:	2200      	movs	r2, #0
 8008780:	2100      	movs	r1, #0
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 f9c1 	bl	8008b0a <USBH_CtlReq>
 8008788:	4603      	mov	r3, r0
}
 800878a:	4618      	mov	r0, r3
 800878c:	3708      	adds	r7, #8
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}

08008792 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008792:	b480      	push	{r7}
 8008794:	b085      	sub	sp, #20
 8008796:	af00      	add	r7, sp, #0
 8008798:	60f8      	str	r0, [r7, #12]
 800879a:	60b9      	str	r1, [r7, #8]
 800879c:	4613      	mov	r3, r2
 800879e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	781a      	ldrb	r2, [r3, #0]
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	785a      	ldrb	r2, [r3, #1]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	3302      	adds	r3, #2
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	b29a      	uxth	r2, r3
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	3303      	adds	r3, #3
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	b29b      	uxth	r3, r3
 80087c0:	021b      	lsls	r3, r3, #8
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	4313      	orrs	r3, r2
 80087c6:	b29a      	uxth	r2, r3
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	791a      	ldrb	r2, [r3, #4]
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	795a      	ldrb	r2, [r3, #5]
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	799a      	ldrb	r2, [r3, #6]
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	79da      	ldrb	r2, [r3, #7]
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80087ec:	88fb      	ldrh	r3, [r7, #6]
 80087ee:	2b08      	cmp	r3, #8
 80087f0:	d939      	bls.n	8008866 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	3308      	adds	r3, #8
 80087f6:	781b      	ldrb	r3, [r3, #0]
 80087f8:	b29a      	uxth	r2, r3
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	3309      	adds	r3, #9
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	b29b      	uxth	r3, r3
 8008802:	021b      	lsls	r3, r3, #8
 8008804:	b29b      	uxth	r3, r3
 8008806:	4313      	orrs	r3, r2
 8008808:	b29a      	uxth	r2, r3
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	330a      	adds	r3, #10
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	b29a      	uxth	r2, r3
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	330b      	adds	r3, #11
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	b29b      	uxth	r3, r3
 800881e:	021b      	lsls	r3, r3, #8
 8008820:	b29b      	uxth	r3, r3
 8008822:	4313      	orrs	r3, r2
 8008824:	b29a      	uxth	r2, r3
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	330c      	adds	r3, #12
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	b29a      	uxth	r2, r3
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	330d      	adds	r3, #13
 8008836:	781b      	ldrb	r3, [r3, #0]
 8008838:	b29b      	uxth	r3, r3
 800883a:	021b      	lsls	r3, r3, #8
 800883c:	b29b      	uxth	r3, r3
 800883e:	4313      	orrs	r3, r2
 8008840:	b29a      	uxth	r2, r3
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	7b9a      	ldrb	r2, [r3, #14]
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	7bda      	ldrb	r2, [r3, #15]
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	7c1a      	ldrb	r2, [r3, #16]
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	7c5a      	ldrb	r2, [r3, #17]
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	745a      	strb	r2, [r3, #17]
  }
}
 8008866:	bf00      	nop
 8008868:	3714      	adds	r7, #20
 800886a:	46bd      	mov	sp, r7
 800886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008870:	4770      	bx	lr

08008872 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8008872:	b580      	push	{r7, lr}
 8008874:	b08a      	sub	sp, #40	; 0x28
 8008876:	af00      	add	r7, sp, #0
 8008878:	60f8      	str	r0, [r7, #12]
 800887a:	60b9      	str	r1, [r7, #8]
 800887c:	4613      	mov	r3, r2
 800887e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008884:	2300      	movs	r3, #0
 8008886:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800888a:	2300      	movs	r3, #0
 800888c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	781a      	ldrb	r2, [r3, #0]
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	785a      	ldrb	r2, [r3, #1]
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	3302      	adds	r3, #2
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	b29a      	uxth	r2, r3
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	3303      	adds	r3, #3
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	021b      	lsls	r3, r3, #8
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	4313      	orrs	r3, r2
 80088ba:	b29a      	uxth	r2, r3
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	791a      	ldrb	r2, [r3, #4]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	795a      	ldrb	r2, [r3, #5]
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	799a      	ldrb	r2, [r3, #6]
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	79da      	ldrb	r2, [r3, #7]
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	7a1a      	ldrb	r2, [r3, #8]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80088e8:	88fb      	ldrh	r3, [r7, #6]
 80088ea:	2b09      	cmp	r3, #9
 80088ec:	d95f      	bls.n	80089ae <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80088ee:	2309      	movs	r3, #9
 80088f0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80088f2:	2300      	movs	r3, #0
 80088f4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80088f6:	e051      	b.n	800899c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80088f8:	f107 0316 	add.w	r3, r7, #22
 80088fc:	4619      	mov	r1, r3
 80088fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008900:	f000 f8e8 	bl	8008ad4 <USBH_GetNextDesc>
 8008904:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008908:	785b      	ldrb	r3, [r3, #1]
 800890a:	2b04      	cmp	r3, #4
 800890c:	d146      	bne.n	800899c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800890e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008912:	221a      	movs	r2, #26
 8008914:	fb02 f303 	mul.w	r3, r2, r3
 8008918:	3308      	adds	r3, #8
 800891a:	68fa      	ldr	r2, [r7, #12]
 800891c:	4413      	add	r3, r2
 800891e:	3302      	adds	r3, #2
 8008920:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008922:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008924:	69f8      	ldr	r0, [r7, #28]
 8008926:	f000 f846 	bl	80089b6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800892a:	2300      	movs	r3, #0
 800892c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008930:	2300      	movs	r3, #0
 8008932:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008934:	e022      	b.n	800897c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008936:	f107 0316 	add.w	r3, r7, #22
 800893a:	4619      	mov	r1, r3
 800893c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800893e:	f000 f8c9 	bl	8008ad4 <USBH_GetNextDesc>
 8008942:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008946:	785b      	ldrb	r3, [r3, #1]
 8008948:	2b05      	cmp	r3, #5
 800894a:	d117      	bne.n	800897c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800894c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008950:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008954:	3201      	adds	r2, #1
 8008956:	00d2      	lsls	r2, r2, #3
 8008958:	211a      	movs	r1, #26
 800895a:	fb01 f303 	mul.w	r3, r1, r3
 800895e:	4413      	add	r3, r2
 8008960:	3308      	adds	r3, #8
 8008962:	68fa      	ldr	r2, [r7, #12]
 8008964:	4413      	add	r3, r2
 8008966:	3304      	adds	r3, #4
 8008968:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800896a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800896c:	69b8      	ldr	r0, [r7, #24]
 800896e:	f000 f851 	bl	8008a14 <USBH_ParseEPDesc>
            ep_ix++;
 8008972:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008976:	3301      	adds	r3, #1
 8008978:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800897c:	69fb      	ldr	r3, [r7, #28]
 800897e:	791b      	ldrb	r3, [r3, #4]
 8008980:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008984:	429a      	cmp	r2, r3
 8008986:	d204      	bcs.n	8008992 <USBH_ParseCfgDesc+0x120>
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	885a      	ldrh	r2, [r3, #2]
 800898c:	8afb      	ldrh	r3, [r7, #22]
 800898e:	429a      	cmp	r2, r3
 8008990:	d8d1      	bhi.n	8008936 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008992:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008996:	3301      	adds	r3, #1
 8008998:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800899c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	d804      	bhi.n	80089ae <USBH_ParseCfgDesc+0x13c>
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	885a      	ldrh	r2, [r3, #2]
 80089a8:	8afb      	ldrh	r3, [r7, #22]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d8a4      	bhi.n	80088f8 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80089ae:	bf00      	nop
 80089b0:	3728      	adds	r7, #40	; 0x28
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}

080089b6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80089b6:	b480      	push	{r7}
 80089b8:	b083      	sub	sp, #12
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]
 80089be:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	781a      	ldrb	r2, [r3, #0]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	785a      	ldrb	r2, [r3, #1]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	789a      	ldrb	r2, [r3, #2]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	78da      	ldrb	r2, [r3, #3]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	791a      	ldrb	r2, [r3, #4]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	795a      	ldrb	r2, [r3, #5]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	799a      	ldrb	r2, [r3, #6]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	79da      	ldrb	r2, [r3, #7]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	7a1a      	ldrb	r2, [r3, #8]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	721a      	strb	r2, [r3, #8]
}
 8008a08:	bf00      	nop
 8008a0a:	370c      	adds	r7, #12
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr

08008a14 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b083      	sub	sp, #12
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	781a      	ldrb	r2, [r3, #0]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	785a      	ldrb	r2, [r3, #1]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	789a      	ldrb	r2, [r3, #2]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	78da      	ldrb	r2, [r3, #3]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	3304      	adds	r3, #4
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	b29a      	uxth	r2, r3
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	3305      	adds	r3, #5
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	021b      	lsls	r3, r3, #8
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	4313      	orrs	r3, r2
 8008a54:	b29a      	uxth	r2, r3
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	799a      	ldrb	r2, [r3, #6]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	719a      	strb	r2, [r3, #6]
}
 8008a62:	bf00      	nop
 8008a64:	370c      	adds	r7, #12
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr

08008a6e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008a6e:	b480      	push	{r7}
 8008a70:	b087      	sub	sp, #28
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	60f8      	str	r0, [r7, #12]
 8008a76:	60b9      	str	r1, [r7, #8]
 8008a78:	4613      	mov	r3, r2
 8008a7a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	3301      	adds	r3, #1
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	2b03      	cmp	r3, #3
 8008a84:	d120      	bne.n	8008ac8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	1e9a      	subs	r2, r3, #2
 8008a8c:	88fb      	ldrh	r3, [r7, #6]
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	bf28      	it	cs
 8008a92:	4613      	movcs	r3, r2
 8008a94:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	3302      	adds	r3, #2
 8008a9a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	82fb      	strh	r3, [r7, #22]
 8008aa0:	e00b      	b.n	8008aba <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008aa2:	8afb      	ldrh	r3, [r7, #22]
 8008aa4:	68fa      	ldr	r2, [r7, #12]
 8008aa6:	4413      	add	r3, r2
 8008aa8:	781a      	ldrb	r2, [r3, #0]
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	3301      	adds	r3, #1
 8008ab2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008ab4:	8afb      	ldrh	r3, [r7, #22]
 8008ab6:	3302      	adds	r3, #2
 8008ab8:	82fb      	strh	r3, [r7, #22]
 8008aba:	8afa      	ldrh	r2, [r7, #22]
 8008abc:	8abb      	ldrh	r3, [r7, #20]
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d3ef      	bcc.n	8008aa2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	701a      	strb	r2, [r3, #0]
  }
}
 8008ac8:	bf00      	nop
 8008aca:	371c      	adds	r7, #28
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr

08008ad4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b085      	sub	sp, #20
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	881a      	ldrh	r2, [r3, #0]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	4413      	add	r3, r2
 8008aea:	b29a      	uxth	r2, r3
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	4413      	add	r3, r2
 8008afa:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008afc:	68fb      	ldr	r3, [r7, #12]
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3714      	adds	r7, #20
 8008b02:	46bd      	mov	sp, r7
 8008b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b08:	4770      	bx	lr

08008b0a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	b086      	sub	sp, #24
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	60f8      	str	r0, [r7, #12]
 8008b12:	60b9      	str	r1, [r7, #8]
 8008b14:	4613      	mov	r3, r2
 8008b16:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	789b      	ldrb	r3, [r3, #2]
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d002      	beq.n	8008b2a <USBH_CtlReq+0x20>
 8008b24:	2b02      	cmp	r3, #2
 8008b26:	d00f      	beq.n	8008b48 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008b28:	e027      	b.n	8008b7a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	68ba      	ldr	r2, [r7, #8]
 8008b2e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	88fa      	ldrh	r2, [r7, #6]
 8008b34:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2201      	movs	r2, #1
 8008b3a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2202      	movs	r2, #2
 8008b40:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008b42:	2301      	movs	r3, #1
 8008b44:	75fb      	strb	r3, [r7, #23]
      break;
 8008b46:	e018      	b.n	8008b7a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008b48:	68f8      	ldr	r0, [r7, #12]
 8008b4a:	f000 f81b 	bl	8008b84 <USBH_HandleControl>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008b52:	7dfb      	ldrb	r3, [r7, #23]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d002      	beq.n	8008b5e <USBH_CtlReq+0x54>
 8008b58:	7dfb      	ldrb	r3, [r7, #23]
 8008b5a:	2b03      	cmp	r3, #3
 8008b5c:	d106      	bne.n	8008b6c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2201      	movs	r2, #1
 8008b62:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2200      	movs	r2, #0
 8008b68:	761a      	strb	r2, [r3, #24]
      break;
 8008b6a:	e005      	b.n	8008b78 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008b6c:	7dfb      	ldrb	r3, [r7, #23]
 8008b6e:	2b02      	cmp	r3, #2
 8008b70:	d102      	bne.n	8008b78 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2201      	movs	r2, #1
 8008b76:	709a      	strb	r2, [r3, #2]
      break;
 8008b78:	bf00      	nop
  }
  return status;
 8008b7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3718      	adds	r7, #24
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b086      	sub	sp, #24
 8008b88:	af02      	add	r7, sp, #8
 8008b8a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008b90:	2300      	movs	r3, #0
 8008b92:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	7e1b      	ldrb	r3, [r3, #24]
 8008b98:	3b01      	subs	r3, #1
 8008b9a:	2b0a      	cmp	r3, #10
 8008b9c:	f200 8156 	bhi.w	8008e4c <USBH_HandleControl+0x2c8>
 8008ba0:	a201      	add	r2, pc, #4	; (adr r2, 8008ba8 <USBH_HandleControl+0x24>)
 8008ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba6:	bf00      	nop
 8008ba8:	08008bd5 	.word	0x08008bd5
 8008bac:	08008bef 	.word	0x08008bef
 8008bb0:	08008c59 	.word	0x08008c59
 8008bb4:	08008c7f 	.word	0x08008c7f
 8008bb8:	08008cb7 	.word	0x08008cb7
 8008bbc:	08008ce1 	.word	0x08008ce1
 8008bc0:	08008d33 	.word	0x08008d33
 8008bc4:	08008d55 	.word	0x08008d55
 8008bc8:	08008d91 	.word	0x08008d91
 8008bcc:	08008db7 	.word	0x08008db7
 8008bd0:	08008df5 	.word	0x08008df5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f103 0110 	add.w	r1, r3, #16
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	795b      	ldrb	r3, [r3, #5]
 8008bde:	461a      	mov	r2, r3
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f000 f943 	bl	8008e6c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2202      	movs	r2, #2
 8008bea:	761a      	strb	r2, [r3, #24]
      break;
 8008bec:	e139      	b.n	8008e62 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	795b      	ldrb	r3, [r3, #5]
 8008bf2:	4619      	mov	r1, r3
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f005 fb61 	bl	800e2bc <USBH_LL_GetURBState>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008bfe:	7bbb      	ldrb	r3, [r7, #14]
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d11e      	bne.n	8008c42 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	7c1b      	ldrb	r3, [r3, #16]
 8008c08:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008c0c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	8adb      	ldrh	r3, [r3, #22]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d00a      	beq.n	8008c2c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008c16:	7b7b      	ldrb	r3, [r7, #13]
 8008c18:	2b80      	cmp	r3, #128	; 0x80
 8008c1a:	d103      	bne.n	8008c24 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2203      	movs	r2, #3
 8008c20:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008c22:	e115      	b.n	8008e50 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2205      	movs	r2, #5
 8008c28:	761a      	strb	r2, [r3, #24]
      break;
 8008c2a:	e111      	b.n	8008e50 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008c2c:	7b7b      	ldrb	r3, [r7, #13]
 8008c2e:	2b80      	cmp	r3, #128	; 0x80
 8008c30:	d103      	bne.n	8008c3a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2209      	movs	r2, #9
 8008c36:	761a      	strb	r2, [r3, #24]
      break;
 8008c38:	e10a      	b.n	8008e50 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2207      	movs	r2, #7
 8008c3e:	761a      	strb	r2, [r3, #24]
      break;
 8008c40:	e106      	b.n	8008e50 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008c42:	7bbb      	ldrb	r3, [r7, #14]
 8008c44:	2b04      	cmp	r3, #4
 8008c46:	d003      	beq.n	8008c50 <USBH_HandleControl+0xcc>
 8008c48:	7bbb      	ldrb	r3, [r7, #14]
 8008c4a:	2b02      	cmp	r3, #2
 8008c4c:	f040 8100 	bne.w	8008e50 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	220b      	movs	r2, #11
 8008c54:	761a      	strb	r2, [r3, #24]
      break;
 8008c56:	e0fb      	b.n	8008e50 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008c5e:	b29a      	uxth	r2, r3
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6899      	ldr	r1, [r3, #8]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	899a      	ldrh	r2, [r3, #12]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	791b      	ldrb	r3, [r3, #4]
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f000 f93a 	bl	8008eea <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2204      	movs	r2, #4
 8008c7a:	761a      	strb	r2, [r3, #24]
      break;
 8008c7c:	e0f1      	b.n	8008e62 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	791b      	ldrb	r3, [r3, #4]
 8008c82:	4619      	mov	r1, r3
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f005 fb19 	bl	800e2bc <USBH_LL_GetURBState>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008c8e:	7bbb      	ldrb	r3, [r7, #14]
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d102      	bne.n	8008c9a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2209      	movs	r2, #9
 8008c98:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008c9a:	7bbb      	ldrb	r3, [r7, #14]
 8008c9c:	2b05      	cmp	r3, #5
 8008c9e:	d102      	bne.n	8008ca6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008ca0:	2303      	movs	r3, #3
 8008ca2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008ca4:	e0d6      	b.n	8008e54 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008ca6:	7bbb      	ldrb	r3, [r7, #14]
 8008ca8:	2b04      	cmp	r3, #4
 8008caa:	f040 80d3 	bne.w	8008e54 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	220b      	movs	r2, #11
 8008cb2:	761a      	strb	r2, [r3, #24]
      break;
 8008cb4:	e0ce      	b.n	8008e54 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6899      	ldr	r1, [r3, #8]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	899a      	ldrh	r2, [r3, #12]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	795b      	ldrb	r3, [r3, #5]
 8008cc2:	2001      	movs	r0, #1
 8008cc4:	9000      	str	r0, [sp, #0]
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 f8ea 	bl	8008ea0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008cd2:	b29a      	uxth	r2, r3
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2206      	movs	r2, #6
 8008cdc:	761a      	strb	r2, [r3, #24]
      break;
 8008cde:	e0c0      	b.n	8008e62 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	795b      	ldrb	r3, [r3, #5]
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f005 fae8 	bl	800e2bc <USBH_LL_GetURBState>
 8008cec:	4603      	mov	r3, r0
 8008cee:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008cf0:	7bbb      	ldrb	r3, [r7, #14]
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	d103      	bne.n	8008cfe <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2207      	movs	r2, #7
 8008cfa:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008cfc:	e0ac      	b.n	8008e58 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008cfe:	7bbb      	ldrb	r3, [r7, #14]
 8008d00:	2b05      	cmp	r3, #5
 8008d02:	d105      	bne.n	8008d10 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	220c      	movs	r2, #12
 8008d08:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008d0a:	2303      	movs	r3, #3
 8008d0c:	73fb      	strb	r3, [r7, #15]
      break;
 8008d0e:	e0a3      	b.n	8008e58 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008d10:	7bbb      	ldrb	r3, [r7, #14]
 8008d12:	2b02      	cmp	r3, #2
 8008d14:	d103      	bne.n	8008d1e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2205      	movs	r2, #5
 8008d1a:	761a      	strb	r2, [r3, #24]
      break;
 8008d1c:	e09c      	b.n	8008e58 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008d1e:	7bbb      	ldrb	r3, [r7, #14]
 8008d20:	2b04      	cmp	r3, #4
 8008d22:	f040 8099 	bne.w	8008e58 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	220b      	movs	r2, #11
 8008d2a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008d2c:	2302      	movs	r3, #2
 8008d2e:	73fb      	strb	r3, [r7, #15]
      break;
 8008d30:	e092      	b.n	8008e58 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	791b      	ldrb	r3, [r3, #4]
 8008d36:	2200      	movs	r2, #0
 8008d38:	2100      	movs	r1, #0
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 f8d5 	bl	8008eea <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008d46:	b29a      	uxth	r2, r3
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2208      	movs	r2, #8
 8008d50:	761a      	strb	r2, [r3, #24]

      break;
 8008d52:	e086      	b.n	8008e62 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	791b      	ldrb	r3, [r3, #4]
 8008d58:	4619      	mov	r1, r3
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f005 faae 	bl	800e2bc <USBH_LL_GetURBState>
 8008d60:	4603      	mov	r3, r0
 8008d62:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008d64:	7bbb      	ldrb	r3, [r7, #14]
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d105      	bne.n	8008d76 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	220d      	movs	r2, #13
 8008d6e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008d70:	2300      	movs	r3, #0
 8008d72:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008d74:	e072      	b.n	8008e5c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008d76:	7bbb      	ldrb	r3, [r7, #14]
 8008d78:	2b04      	cmp	r3, #4
 8008d7a:	d103      	bne.n	8008d84 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	220b      	movs	r2, #11
 8008d80:	761a      	strb	r2, [r3, #24]
      break;
 8008d82:	e06b      	b.n	8008e5c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008d84:	7bbb      	ldrb	r3, [r7, #14]
 8008d86:	2b05      	cmp	r3, #5
 8008d88:	d168      	bne.n	8008e5c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008d8a:	2303      	movs	r3, #3
 8008d8c:	73fb      	strb	r3, [r7, #15]
      break;
 8008d8e:	e065      	b.n	8008e5c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	795b      	ldrb	r3, [r3, #5]
 8008d94:	2201      	movs	r2, #1
 8008d96:	9200      	str	r2, [sp, #0]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	2100      	movs	r1, #0
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 f87f 	bl	8008ea0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008da8:	b29a      	uxth	r2, r3
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	220a      	movs	r2, #10
 8008db2:	761a      	strb	r2, [r3, #24]
      break;
 8008db4:	e055      	b.n	8008e62 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	795b      	ldrb	r3, [r3, #5]
 8008dba:	4619      	mov	r1, r3
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f005 fa7d 	bl	800e2bc <USBH_LL_GetURBState>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008dc6:	7bbb      	ldrb	r3, [r7, #14]
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d105      	bne.n	8008dd8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	220d      	movs	r2, #13
 8008dd4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008dd6:	e043      	b.n	8008e60 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008dd8:	7bbb      	ldrb	r3, [r7, #14]
 8008dda:	2b02      	cmp	r3, #2
 8008ddc:	d103      	bne.n	8008de6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2209      	movs	r2, #9
 8008de2:	761a      	strb	r2, [r3, #24]
      break;
 8008de4:	e03c      	b.n	8008e60 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008de6:	7bbb      	ldrb	r3, [r7, #14]
 8008de8:	2b04      	cmp	r3, #4
 8008dea:	d139      	bne.n	8008e60 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	220b      	movs	r2, #11
 8008df0:	761a      	strb	r2, [r3, #24]
      break;
 8008df2:	e035      	b.n	8008e60 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	7e5b      	ldrb	r3, [r3, #25]
 8008df8:	3301      	adds	r3, #1
 8008dfa:	b2da      	uxtb	r2, r3
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	765a      	strb	r2, [r3, #25]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	7e5b      	ldrb	r3, [r3, #25]
 8008e04:	2b02      	cmp	r3, #2
 8008e06:	d806      	bhi.n	8008e16 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2201      	movs	r2, #1
 8008e12:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008e14:	e025      	b.n	8008e62 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008e1c:	2106      	movs	r1, #6
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2200      	movs	r2, #0
 8008e26:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	795b      	ldrb	r3, [r3, #5]
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 f90c 	bl	800904c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	791b      	ldrb	r3, [r3, #4]
 8008e38:	4619      	mov	r1, r3
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 f906 	bl	800904c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2200      	movs	r2, #0
 8008e44:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008e46:	2302      	movs	r3, #2
 8008e48:	73fb      	strb	r3, [r7, #15]
      break;
 8008e4a:	e00a      	b.n	8008e62 <USBH_HandleControl+0x2de>

    default:
      break;
 8008e4c:	bf00      	nop
 8008e4e:	e008      	b.n	8008e62 <USBH_HandleControl+0x2de>
      break;
 8008e50:	bf00      	nop
 8008e52:	e006      	b.n	8008e62 <USBH_HandleControl+0x2de>
      break;
 8008e54:	bf00      	nop
 8008e56:	e004      	b.n	8008e62 <USBH_HandleControl+0x2de>
      break;
 8008e58:	bf00      	nop
 8008e5a:	e002      	b.n	8008e62 <USBH_HandleControl+0x2de>
      break;
 8008e5c:	bf00      	nop
 8008e5e:	e000      	b.n	8008e62 <USBH_HandleControl+0x2de>
      break;
 8008e60:	bf00      	nop
  }

  return status;
 8008e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3710      	adds	r7, #16
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b088      	sub	sp, #32
 8008e70:	af04      	add	r7, sp, #16
 8008e72:	60f8      	str	r0, [r7, #12]
 8008e74:	60b9      	str	r1, [r7, #8]
 8008e76:	4613      	mov	r3, r2
 8008e78:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008e7a:	79f9      	ldrb	r1, [r7, #7]
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	9303      	str	r3, [sp, #12]
 8008e80:	2308      	movs	r3, #8
 8008e82:	9302      	str	r3, [sp, #8]
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	9301      	str	r3, [sp, #4]
 8008e88:	2300      	movs	r3, #0
 8008e8a:	9300      	str	r3, [sp, #0]
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	2200      	movs	r2, #0
 8008e90:	68f8      	ldr	r0, [r7, #12]
 8008e92:	f005 f9e2 	bl	800e25a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008e96:	2300      	movs	r3, #0
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3710      	adds	r7, #16
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b088      	sub	sp, #32
 8008ea4:	af04      	add	r7, sp, #16
 8008ea6:	60f8      	str	r0, [r7, #12]
 8008ea8:	60b9      	str	r1, [r7, #8]
 8008eaa:	4611      	mov	r1, r2
 8008eac:	461a      	mov	r2, r3
 8008eae:	460b      	mov	r3, r1
 8008eb0:	80fb      	strh	r3, [r7, #6]
 8008eb2:	4613      	mov	r3, r2
 8008eb4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d001      	beq.n	8008ec4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008ec4:	7979      	ldrb	r1, [r7, #5]
 8008ec6:	7e3b      	ldrb	r3, [r7, #24]
 8008ec8:	9303      	str	r3, [sp, #12]
 8008eca:	88fb      	ldrh	r3, [r7, #6]
 8008ecc:	9302      	str	r3, [sp, #8]
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	9301      	str	r3, [sp, #4]
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	9300      	str	r3, [sp, #0]
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	2200      	movs	r2, #0
 8008eda:	68f8      	ldr	r0, [r7, #12]
 8008edc:	f005 f9bd 	bl	800e25a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008ee0:	2300      	movs	r3, #0
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3710      	adds	r7, #16
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}

08008eea <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008eea:	b580      	push	{r7, lr}
 8008eec:	b088      	sub	sp, #32
 8008eee:	af04      	add	r7, sp, #16
 8008ef0:	60f8      	str	r0, [r7, #12]
 8008ef2:	60b9      	str	r1, [r7, #8]
 8008ef4:	4611      	mov	r1, r2
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	460b      	mov	r3, r1
 8008efa:	80fb      	strh	r3, [r7, #6]
 8008efc:	4613      	mov	r3, r2
 8008efe:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008f00:	7979      	ldrb	r1, [r7, #5]
 8008f02:	2300      	movs	r3, #0
 8008f04:	9303      	str	r3, [sp, #12]
 8008f06:	88fb      	ldrh	r3, [r7, #6]
 8008f08:	9302      	str	r3, [sp, #8]
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	9301      	str	r3, [sp, #4]
 8008f0e:	2301      	movs	r3, #1
 8008f10:	9300      	str	r3, [sp, #0]
 8008f12:	2300      	movs	r3, #0
 8008f14:	2201      	movs	r2, #1
 8008f16:	68f8      	ldr	r0, [r7, #12]
 8008f18:	f005 f99f 	bl	800e25a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008f1c:	2300      	movs	r3, #0

}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3710      	adds	r7, #16
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}

08008f26 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008f26:	b580      	push	{r7, lr}
 8008f28:	b088      	sub	sp, #32
 8008f2a:	af04      	add	r7, sp, #16
 8008f2c:	60f8      	str	r0, [r7, #12]
 8008f2e:	60b9      	str	r1, [r7, #8]
 8008f30:	4611      	mov	r1, r2
 8008f32:	461a      	mov	r2, r3
 8008f34:	460b      	mov	r3, r1
 8008f36:	80fb      	strh	r3, [r7, #6]
 8008f38:	4613      	mov	r3, r2
 8008f3a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d001      	beq.n	8008f4a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008f46:	2300      	movs	r3, #0
 8008f48:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008f4a:	7979      	ldrb	r1, [r7, #5]
 8008f4c:	7e3b      	ldrb	r3, [r7, #24]
 8008f4e:	9303      	str	r3, [sp, #12]
 8008f50:	88fb      	ldrh	r3, [r7, #6]
 8008f52:	9302      	str	r3, [sp, #8]
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	9301      	str	r3, [sp, #4]
 8008f58:	2301      	movs	r3, #1
 8008f5a:	9300      	str	r3, [sp, #0]
 8008f5c:	2302      	movs	r3, #2
 8008f5e:	2200      	movs	r2, #0
 8008f60:	68f8      	ldr	r0, [r7, #12]
 8008f62:	f005 f97a 	bl	800e25a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008f66:	2300      	movs	r3, #0
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3710      	adds	r7, #16
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b088      	sub	sp, #32
 8008f74:	af04      	add	r7, sp, #16
 8008f76:	60f8      	str	r0, [r7, #12]
 8008f78:	60b9      	str	r1, [r7, #8]
 8008f7a:	4611      	mov	r1, r2
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	460b      	mov	r3, r1
 8008f80:	80fb      	strh	r3, [r7, #6]
 8008f82:	4613      	mov	r3, r2
 8008f84:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008f86:	7979      	ldrb	r1, [r7, #5]
 8008f88:	2300      	movs	r3, #0
 8008f8a:	9303      	str	r3, [sp, #12]
 8008f8c:	88fb      	ldrh	r3, [r7, #6]
 8008f8e:	9302      	str	r3, [sp, #8]
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	9301      	str	r3, [sp, #4]
 8008f94:	2301      	movs	r3, #1
 8008f96:	9300      	str	r3, [sp, #0]
 8008f98:	2302      	movs	r3, #2
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	68f8      	ldr	r0, [r7, #12]
 8008f9e:	f005 f95c 	bl	800e25a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008fa2:	2300      	movs	r3, #0
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3710      	adds	r7, #16
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b086      	sub	sp, #24
 8008fb0:	af04      	add	r7, sp, #16
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	4608      	mov	r0, r1
 8008fb6:	4611      	mov	r1, r2
 8008fb8:	461a      	mov	r2, r3
 8008fba:	4603      	mov	r3, r0
 8008fbc:	70fb      	strb	r3, [r7, #3]
 8008fbe:	460b      	mov	r3, r1
 8008fc0:	70bb      	strb	r3, [r7, #2]
 8008fc2:	4613      	mov	r3, r2
 8008fc4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008fc6:	7878      	ldrb	r0, [r7, #1]
 8008fc8:	78ba      	ldrb	r2, [r7, #2]
 8008fca:	78f9      	ldrb	r1, [r7, #3]
 8008fcc:	8b3b      	ldrh	r3, [r7, #24]
 8008fce:	9302      	str	r3, [sp, #8]
 8008fd0:	7d3b      	ldrb	r3, [r7, #20]
 8008fd2:	9301      	str	r3, [sp, #4]
 8008fd4:	7c3b      	ldrb	r3, [r7, #16]
 8008fd6:	9300      	str	r3, [sp, #0]
 8008fd8:	4603      	mov	r3, r0
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f005 f8ef 	bl	800e1be <USBH_LL_OpenPipe>

  return USBH_OK;
 8008fe0:	2300      	movs	r3, #0
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3708      	adds	r7, #8
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}

08008fea <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008fea:	b580      	push	{r7, lr}
 8008fec:	b082      	sub	sp, #8
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
 8008ff2:	460b      	mov	r3, r1
 8008ff4:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008ff6:	78fb      	ldrb	r3, [r7, #3]
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f005 f90e 	bl	800e21c <USBH_LL_ClosePipe>

  return USBH_OK;
 8009000:	2300      	movs	r3, #0
}
 8009002:	4618      	mov	r0, r3
 8009004:	3708      	adds	r7, #8
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}

0800900a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800900a:	b580      	push	{r7, lr}
 800900c:	b084      	sub	sp, #16
 800900e:	af00      	add	r7, sp, #0
 8009010:	6078      	str	r0, [r7, #4]
 8009012:	460b      	mov	r3, r1
 8009014:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f000 f836 	bl	8009088 <USBH_GetFreePipe>
 800901c:	4603      	mov	r3, r0
 800901e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009020:	89fb      	ldrh	r3, [r7, #14]
 8009022:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009026:	4293      	cmp	r3, r2
 8009028:	d00a      	beq.n	8009040 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800902a:	78fa      	ldrb	r2, [r7, #3]
 800902c:	89fb      	ldrh	r3, [r7, #14]
 800902e:	f003 030f 	and.w	r3, r3, #15
 8009032:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009036:	6879      	ldr	r1, [r7, #4]
 8009038:	33e0      	adds	r3, #224	; 0xe0
 800903a:	009b      	lsls	r3, r3, #2
 800903c:	440b      	add	r3, r1
 800903e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009040:	89fb      	ldrh	r3, [r7, #14]
 8009042:	b2db      	uxtb	r3, r3
}
 8009044:	4618      	mov	r0, r3
 8009046:	3710      	adds	r7, #16
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800904c:	b480      	push	{r7}
 800904e:	b083      	sub	sp, #12
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	460b      	mov	r3, r1
 8009056:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8009058:	78fb      	ldrb	r3, [r7, #3]
 800905a:	2b0a      	cmp	r3, #10
 800905c:	d80d      	bhi.n	800907a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800905e:	78fb      	ldrb	r3, [r7, #3]
 8009060:	687a      	ldr	r2, [r7, #4]
 8009062:	33e0      	adds	r3, #224	; 0xe0
 8009064:	009b      	lsls	r3, r3, #2
 8009066:	4413      	add	r3, r2
 8009068:	685a      	ldr	r2, [r3, #4]
 800906a:	78fb      	ldrb	r3, [r7, #3]
 800906c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009070:	6879      	ldr	r1, [r7, #4]
 8009072:	33e0      	adds	r3, #224	; 0xe0
 8009074:	009b      	lsls	r3, r3, #2
 8009076:	440b      	add	r3, r1
 8009078:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800907a:	2300      	movs	r3, #0
}
 800907c:	4618      	mov	r0, r3
 800907e:	370c      	adds	r7, #12
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr

08009088 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009088:	b480      	push	{r7}
 800908a:	b085      	sub	sp, #20
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009090:	2300      	movs	r3, #0
 8009092:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8009094:	2300      	movs	r3, #0
 8009096:	73fb      	strb	r3, [r7, #15]
 8009098:	e00f      	b.n	80090ba <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800909a:	7bfb      	ldrb	r3, [r7, #15]
 800909c:	687a      	ldr	r2, [r7, #4]
 800909e:	33e0      	adds	r3, #224	; 0xe0
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	4413      	add	r3, r2
 80090a4:	685b      	ldr	r3, [r3, #4]
 80090a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d102      	bne.n	80090b4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80090ae:	7bfb      	ldrb	r3, [r7, #15]
 80090b0:	b29b      	uxth	r3, r3
 80090b2:	e007      	b.n	80090c4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80090b4:	7bfb      	ldrb	r3, [r7, #15]
 80090b6:	3301      	adds	r3, #1
 80090b8:	73fb      	strb	r3, [r7, #15]
 80090ba:	7bfb      	ldrb	r3, [r7, #15]
 80090bc:	2b0a      	cmp	r3, #10
 80090be:	d9ec      	bls.n	800909a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80090c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3714      	adds	r7, #20
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr

080090d0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b084      	sub	sp, #16
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	4603      	mov	r3, r0
 80090d8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80090da:	79fb      	ldrb	r3, [r7, #7]
 80090dc:	4a08      	ldr	r2, [pc, #32]	; (8009100 <disk_status+0x30>)
 80090de:	009b      	lsls	r3, r3, #2
 80090e0:	4413      	add	r3, r2
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	79fa      	ldrb	r2, [r7, #7]
 80090e8:	4905      	ldr	r1, [pc, #20]	; (8009100 <disk_status+0x30>)
 80090ea:	440a      	add	r2, r1
 80090ec:	7a12      	ldrb	r2, [r2, #8]
 80090ee:	4610      	mov	r0, r2
 80090f0:	4798      	blx	r3
 80090f2:	4603      	mov	r3, r0
 80090f4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80090f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3710      	adds	r7, #16
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}
 8009100:	2000054c 	.word	0x2000054c

08009104 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b084      	sub	sp, #16
 8009108:	af00      	add	r7, sp, #0
 800910a:	4603      	mov	r3, r0
 800910c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800910e:	2300      	movs	r3, #0
 8009110:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009112:	79fb      	ldrb	r3, [r7, #7]
 8009114:	4a0d      	ldr	r2, [pc, #52]	; (800914c <disk_initialize+0x48>)
 8009116:	5cd3      	ldrb	r3, [r2, r3]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d111      	bne.n	8009140 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800911c:	79fb      	ldrb	r3, [r7, #7]
 800911e:	4a0b      	ldr	r2, [pc, #44]	; (800914c <disk_initialize+0x48>)
 8009120:	2101      	movs	r1, #1
 8009122:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009124:	79fb      	ldrb	r3, [r7, #7]
 8009126:	4a09      	ldr	r2, [pc, #36]	; (800914c <disk_initialize+0x48>)
 8009128:	009b      	lsls	r3, r3, #2
 800912a:	4413      	add	r3, r2
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	79fa      	ldrb	r2, [r7, #7]
 8009132:	4906      	ldr	r1, [pc, #24]	; (800914c <disk_initialize+0x48>)
 8009134:	440a      	add	r2, r1
 8009136:	7a12      	ldrb	r2, [r2, #8]
 8009138:	4610      	mov	r0, r2
 800913a:	4798      	blx	r3
 800913c:	4603      	mov	r3, r0
 800913e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009140:	7bfb      	ldrb	r3, [r7, #15]
}
 8009142:	4618      	mov	r0, r3
 8009144:	3710      	adds	r7, #16
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
 800914a:	bf00      	nop
 800914c:	2000054c 	.word	0x2000054c

08009150 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009150:	b590      	push	{r4, r7, lr}
 8009152:	b087      	sub	sp, #28
 8009154:	af00      	add	r7, sp, #0
 8009156:	60b9      	str	r1, [r7, #8]
 8009158:	607a      	str	r2, [r7, #4]
 800915a:	603b      	str	r3, [r7, #0]
 800915c:	4603      	mov	r3, r0
 800915e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009160:	7bfb      	ldrb	r3, [r7, #15]
 8009162:	4a0a      	ldr	r2, [pc, #40]	; (800918c <disk_read+0x3c>)
 8009164:	009b      	lsls	r3, r3, #2
 8009166:	4413      	add	r3, r2
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	689c      	ldr	r4, [r3, #8]
 800916c:	7bfb      	ldrb	r3, [r7, #15]
 800916e:	4a07      	ldr	r2, [pc, #28]	; (800918c <disk_read+0x3c>)
 8009170:	4413      	add	r3, r2
 8009172:	7a18      	ldrb	r0, [r3, #8]
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	687a      	ldr	r2, [r7, #4]
 8009178:	68b9      	ldr	r1, [r7, #8]
 800917a:	47a0      	blx	r4
 800917c:	4603      	mov	r3, r0
 800917e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009180:	7dfb      	ldrb	r3, [r7, #23]
}
 8009182:	4618      	mov	r0, r3
 8009184:	371c      	adds	r7, #28
 8009186:	46bd      	mov	sp, r7
 8009188:	bd90      	pop	{r4, r7, pc}
 800918a:	bf00      	nop
 800918c:	2000054c 	.word	0x2000054c

08009190 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009190:	b590      	push	{r4, r7, lr}
 8009192:	b087      	sub	sp, #28
 8009194:	af00      	add	r7, sp, #0
 8009196:	60b9      	str	r1, [r7, #8]
 8009198:	607a      	str	r2, [r7, #4]
 800919a:	603b      	str	r3, [r7, #0]
 800919c:	4603      	mov	r3, r0
 800919e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80091a0:	7bfb      	ldrb	r3, [r7, #15]
 80091a2:	4a0a      	ldr	r2, [pc, #40]	; (80091cc <disk_write+0x3c>)
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	4413      	add	r3, r2
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	68dc      	ldr	r4, [r3, #12]
 80091ac:	7bfb      	ldrb	r3, [r7, #15]
 80091ae:	4a07      	ldr	r2, [pc, #28]	; (80091cc <disk_write+0x3c>)
 80091b0:	4413      	add	r3, r2
 80091b2:	7a18      	ldrb	r0, [r3, #8]
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	68b9      	ldr	r1, [r7, #8]
 80091ba:	47a0      	blx	r4
 80091bc:	4603      	mov	r3, r0
 80091be:	75fb      	strb	r3, [r7, #23]
  return res;
 80091c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	371c      	adds	r7, #28
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd90      	pop	{r4, r7, pc}
 80091ca:	bf00      	nop
 80091cc:	2000054c 	.word	0x2000054c

080091d0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b084      	sub	sp, #16
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	4603      	mov	r3, r0
 80091d8:	603a      	str	r2, [r7, #0]
 80091da:	71fb      	strb	r3, [r7, #7]
 80091dc:	460b      	mov	r3, r1
 80091de:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80091e0:	79fb      	ldrb	r3, [r7, #7]
 80091e2:	4a09      	ldr	r2, [pc, #36]	; (8009208 <disk_ioctl+0x38>)
 80091e4:	009b      	lsls	r3, r3, #2
 80091e6:	4413      	add	r3, r2
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	691b      	ldr	r3, [r3, #16]
 80091ec:	79fa      	ldrb	r2, [r7, #7]
 80091ee:	4906      	ldr	r1, [pc, #24]	; (8009208 <disk_ioctl+0x38>)
 80091f0:	440a      	add	r2, r1
 80091f2:	7a10      	ldrb	r0, [r2, #8]
 80091f4:	79b9      	ldrb	r1, [r7, #6]
 80091f6:	683a      	ldr	r2, [r7, #0]
 80091f8:	4798      	blx	r3
 80091fa:	4603      	mov	r3, r0
 80091fc:	73fb      	strb	r3, [r7, #15]
  return res;
 80091fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009200:	4618      	mov	r0, r3
 8009202:	3710      	adds	r7, #16
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}
 8009208:	2000054c 	.word	0x2000054c

0800920c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800920c:	b480      	push	{r7}
 800920e:	b085      	sub	sp, #20
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	3301      	adds	r3, #1
 8009218:	781b      	ldrb	r3, [r3, #0]
 800921a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800921c:	89fb      	ldrh	r3, [r7, #14]
 800921e:	021b      	lsls	r3, r3, #8
 8009220:	b21a      	sxth	r2, r3
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	781b      	ldrb	r3, [r3, #0]
 8009226:	b21b      	sxth	r3, r3
 8009228:	4313      	orrs	r3, r2
 800922a:	b21b      	sxth	r3, r3
 800922c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800922e:	89fb      	ldrh	r3, [r7, #14]
}
 8009230:	4618      	mov	r0, r3
 8009232:	3714      	adds	r7, #20
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr

0800923c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800923c:	b480      	push	{r7}
 800923e:	b085      	sub	sp, #20
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	3303      	adds	r3, #3
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	021b      	lsls	r3, r3, #8
 8009250:	687a      	ldr	r2, [r7, #4]
 8009252:	3202      	adds	r2, #2
 8009254:	7812      	ldrb	r2, [r2, #0]
 8009256:	4313      	orrs	r3, r2
 8009258:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	021b      	lsls	r3, r3, #8
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	3201      	adds	r2, #1
 8009262:	7812      	ldrb	r2, [r2, #0]
 8009264:	4313      	orrs	r3, r2
 8009266:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	021b      	lsls	r3, r3, #8
 800926c:	687a      	ldr	r2, [r7, #4]
 800926e:	7812      	ldrb	r2, [r2, #0]
 8009270:	4313      	orrs	r3, r2
 8009272:	60fb      	str	r3, [r7, #12]
	return rv;
 8009274:	68fb      	ldr	r3, [r7, #12]
}
 8009276:	4618      	mov	r0, r3
 8009278:	3714      	adds	r7, #20
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr

08009282 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 8009282:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8009286:	b08d      	sub	sp, #52	; 0x34
 8009288:	af00      	add	r7, sp, #0
 800928a:	6278      	str	r0, [r7, #36]	; 0x24
	QWORD rv;

	rv = ptr[7];
 800928c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928e:	3307      	adds	r3, #7
 8009290:	781b      	ldrb	r3, [r3, #0]
 8009292:	b2da      	uxtb	r2, r3
 8009294:	f04f 0300 	mov.w	r3, #0
 8009298:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[6];
 800929c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80092a0:	f04f 0000 	mov.w	r0, #0
 80092a4:	f04f 0100 	mov.w	r1, #0
 80092a8:	0219      	lsls	r1, r3, #8
 80092aa:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80092ae:	0210      	lsls	r0, r2, #8
 80092b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b2:	3306      	adds	r3, #6
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	b2da      	uxtb	r2, r3
 80092b8:	f04f 0300 	mov.w	r3, #0
 80092bc:	ea40 0402 	orr.w	r4, r0, r2
 80092c0:	ea41 0503 	orr.w	r5, r1, r3
 80092c4:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[5];
 80092c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80092cc:	f04f 0000 	mov.w	r0, #0
 80092d0:	f04f 0100 	mov.w	r1, #0
 80092d4:	0219      	lsls	r1, r3, #8
 80092d6:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80092da:	0210      	lsls	r0, r2, #8
 80092dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092de:	3305      	adds	r3, #5
 80092e0:	781b      	ldrb	r3, [r3, #0]
 80092e2:	b2da      	uxtb	r2, r3
 80092e4:	f04f 0300 	mov.w	r3, #0
 80092e8:	ea40 0802 	orr.w	r8, r0, r2
 80092ec:	ea41 0903 	orr.w	r9, r1, r3
 80092f0:	e9c7 890a 	strd	r8, r9, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[4];
 80092f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80092f8:	f04f 0000 	mov.w	r0, #0
 80092fc:	f04f 0100 	mov.w	r1, #0
 8009300:	0219      	lsls	r1, r3, #8
 8009302:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8009306:	0210      	lsls	r0, r2, #8
 8009308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930a:	3304      	adds	r3, #4
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	b2da      	uxtb	r2, r3
 8009310:	f04f 0300 	mov.w	r3, #0
 8009314:	ea40 0402 	orr.w	r4, r0, r2
 8009318:	61bc      	str	r4, [r7, #24]
 800931a:	430b      	orrs	r3, r1
 800931c:	61fb      	str	r3, [r7, #28]
 800931e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8009322:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[3];
 8009326:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800932a:	f04f 0200 	mov.w	r2, #0
 800932e:	f04f 0300 	mov.w	r3, #0
 8009332:	020b      	lsls	r3, r1, #8
 8009334:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009338:	0202      	lsls	r2, r0, #8
 800933a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800933c:	3103      	adds	r1, #3
 800933e:	7809      	ldrb	r1, [r1, #0]
 8009340:	b2c8      	uxtb	r0, r1
 8009342:	f04f 0100 	mov.w	r1, #0
 8009346:	ea42 0400 	orr.w	r4, r2, r0
 800934a:	613c      	str	r4, [r7, #16]
 800934c:	430b      	orrs	r3, r1
 800934e:	617b      	str	r3, [r7, #20]
 8009350:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8009354:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[2];
 8009358:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800935c:	f04f 0200 	mov.w	r2, #0
 8009360:	f04f 0300 	mov.w	r3, #0
 8009364:	020b      	lsls	r3, r1, #8
 8009366:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800936a:	0202      	lsls	r2, r0, #8
 800936c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800936e:	3102      	adds	r1, #2
 8009370:	7809      	ldrb	r1, [r1, #0]
 8009372:	b2c8      	uxtb	r0, r1
 8009374:	f04f 0100 	mov.w	r1, #0
 8009378:	ea42 0400 	orr.w	r4, r2, r0
 800937c:	60bc      	str	r4, [r7, #8]
 800937e:	430b      	orrs	r3, r1
 8009380:	60fb      	str	r3, [r7, #12]
 8009382:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8009386:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[1];
 800938a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800938e:	f04f 0200 	mov.w	r2, #0
 8009392:	f04f 0300 	mov.w	r3, #0
 8009396:	020b      	lsls	r3, r1, #8
 8009398:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800939c:	0202      	lsls	r2, r0, #8
 800939e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80093a0:	3101      	adds	r1, #1
 80093a2:	7809      	ldrb	r1, [r1, #0]
 80093a4:	b2c8      	uxtb	r0, r1
 80093a6:	f04f 0100 	mov.w	r1, #0
 80093aa:	ea42 0400 	orr.w	r4, r2, r0
 80093ae:	603c      	str	r4, [r7, #0]
 80093b0:	430b      	orrs	r3, r1
 80093b2:	607b      	str	r3, [r7, #4]
 80093b4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80093b8:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[0];
 80093bc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80093c0:	f04f 0200 	mov.w	r2, #0
 80093c4:	f04f 0300 	mov.w	r3, #0
 80093c8:	020b      	lsls	r3, r1, #8
 80093ca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80093ce:	0202      	lsls	r2, r0, #8
 80093d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80093d2:	7809      	ldrb	r1, [r1, #0]
 80093d4:	b2c8      	uxtb	r0, r1
 80093d6:	f04f 0100 	mov.w	r1, #0
 80093da:	ea42 0a00 	orr.w	sl, r2, r0
 80093de:	ea43 0b01 	orr.w	fp, r3, r1
 80093e2:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
	return rv;
 80093e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
}
 80093ea:	4610      	mov	r0, r2
 80093ec:	4619      	mov	r1, r3
 80093ee:	3734      	adds	r7, #52	; 0x34
 80093f0:	46bd      	mov	sp, r7
 80093f2:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80093f6:	4770      	bx	lr

080093f8 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80093f8:	b480      	push	{r7}
 80093fa:	b083      	sub	sp, #12
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	460b      	mov	r3, r1
 8009402:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	1c5a      	adds	r2, r3, #1
 8009408:	607a      	str	r2, [r7, #4]
 800940a:	887a      	ldrh	r2, [r7, #2]
 800940c:	b2d2      	uxtb	r2, r2
 800940e:	701a      	strb	r2, [r3, #0]
 8009410:	887b      	ldrh	r3, [r7, #2]
 8009412:	0a1b      	lsrs	r3, r3, #8
 8009414:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	1c5a      	adds	r2, r3, #1
 800941a:	607a      	str	r2, [r7, #4]
 800941c:	887a      	ldrh	r2, [r7, #2]
 800941e:	b2d2      	uxtb	r2, r2
 8009420:	701a      	strb	r2, [r3, #0]
}
 8009422:	bf00      	nop
 8009424:	370c      	adds	r7, #12
 8009426:	46bd      	mov	sp, r7
 8009428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942c:	4770      	bx	lr

0800942e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800942e:	b480      	push	{r7}
 8009430:	b083      	sub	sp, #12
 8009432:	af00      	add	r7, sp, #0
 8009434:	6078      	str	r0, [r7, #4]
 8009436:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	1c5a      	adds	r2, r3, #1
 800943c:	607a      	str	r2, [r7, #4]
 800943e:	683a      	ldr	r2, [r7, #0]
 8009440:	b2d2      	uxtb	r2, r2
 8009442:	701a      	strb	r2, [r3, #0]
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	0a1b      	lsrs	r3, r3, #8
 8009448:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	1c5a      	adds	r2, r3, #1
 800944e:	607a      	str	r2, [r7, #4]
 8009450:	683a      	ldr	r2, [r7, #0]
 8009452:	b2d2      	uxtb	r2, r2
 8009454:	701a      	strb	r2, [r3, #0]
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	0a1b      	lsrs	r3, r3, #8
 800945a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	1c5a      	adds	r2, r3, #1
 8009460:	607a      	str	r2, [r7, #4]
 8009462:	683a      	ldr	r2, [r7, #0]
 8009464:	b2d2      	uxtb	r2, r2
 8009466:	701a      	strb	r2, [r3, #0]
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	0a1b      	lsrs	r3, r3, #8
 800946c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	1c5a      	adds	r2, r3, #1
 8009472:	607a      	str	r2, [r7, #4]
 8009474:	683a      	ldr	r2, [r7, #0]
 8009476:	b2d2      	uxtb	r2, r2
 8009478:	701a      	strb	r2, [r3, #0]
}
 800947a:	bf00      	nop
 800947c:	370c      	adds	r7, #12
 800947e:	46bd      	mov	sp, r7
 8009480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009484:	4770      	bx	lr

08009486 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 8009486:	b480      	push	{r7}
 8009488:	b085      	sub	sp, #20
 800948a:	af00      	add	r7, sp, #0
 800948c:	60f8      	str	r0, [r7, #12]
 800948e:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	1c5a      	adds	r2, r3, #1
 8009496:	60fa      	str	r2, [r7, #12]
 8009498:	783a      	ldrb	r2, [r7, #0]
 800949a:	701a      	strb	r2, [r3, #0]
 800949c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094a0:	f04f 0200 	mov.w	r2, #0
 80094a4:	f04f 0300 	mov.w	r3, #0
 80094a8:	0a02      	lsrs	r2, r0, #8
 80094aa:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80094ae:	0a0b      	lsrs	r3, r1, #8
 80094b0:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	1c5a      	adds	r2, r3, #1
 80094b8:	60fa      	str	r2, [r7, #12]
 80094ba:	783a      	ldrb	r2, [r7, #0]
 80094bc:	701a      	strb	r2, [r3, #0]
 80094be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094c2:	f04f 0200 	mov.w	r2, #0
 80094c6:	f04f 0300 	mov.w	r3, #0
 80094ca:	0a02      	lsrs	r2, r0, #8
 80094cc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80094d0:	0a0b      	lsrs	r3, r1, #8
 80094d2:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	1c5a      	adds	r2, r3, #1
 80094da:	60fa      	str	r2, [r7, #12]
 80094dc:	783a      	ldrb	r2, [r7, #0]
 80094de:	701a      	strb	r2, [r3, #0]
 80094e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094e4:	f04f 0200 	mov.w	r2, #0
 80094e8:	f04f 0300 	mov.w	r3, #0
 80094ec:	0a02      	lsrs	r2, r0, #8
 80094ee:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80094f2:	0a0b      	lsrs	r3, r1, #8
 80094f4:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	1c5a      	adds	r2, r3, #1
 80094fc:	60fa      	str	r2, [r7, #12]
 80094fe:	783a      	ldrb	r2, [r7, #0]
 8009500:	701a      	strb	r2, [r3, #0]
 8009502:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009506:	f04f 0200 	mov.w	r2, #0
 800950a:	f04f 0300 	mov.w	r3, #0
 800950e:	0a02      	lsrs	r2, r0, #8
 8009510:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009514:	0a0b      	lsrs	r3, r1, #8
 8009516:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	1c5a      	adds	r2, r3, #1
 800951e:	60fa      	str	r2, [r7, #12]
 8009520:	783a      	ldrb	r2, [r7, #0]
 8009522:	701a      	strb	r2, [r3, #0]
 8009524:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009528:	f04f 0200 	mov.w	r2, #0
 800952c:	f04f 0300 	mov.w	r3, #0
 8009530:	0a02      	lsrs	r2, r0, #8
 8009532:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009536:	0a0b      	lsrs	r3, r1, #8
 8009538:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	1c5a      	adds	r2, r3, #1
 8009540:	60fa      	str	r2, [r7, #12]
 8009542:	783a      	ldrb	r2, [r7, #0]
 8009544:	701a      	strb	r2, [r3, #0]
 8009546:	e9d7 0100 	ldrd	r0, r1, [r7]
 800954a:	f04f 0200 	mov.w	r2, #0
 800954e:	f04f 0300 	mov.w	r3, #0
 8009552:	0a02      	lsrs	r2, r0, #8
 8009554:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009558:	0a0b      	lsrs	r3, r1, #8
 800955a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	1c5a      	adds	r2, r3, #1
 8009562:	60fa      	str	r2, [r7, #12]
 8009564:	783a      	ldrb	r2, [r7, #0]
 8009566:	701a      	strb	r2, [r3, #0]
 8009568:	e9d7 0100 	ldrd	r0, r1, [r7]
 800956c:	f04f 0200 	mov.w	r2, #0
 8009570:	f04f 0300 	mov.w	r3, #0
 8009574:	0a02      	lsrs	r2, r0, #8
 8009576:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800957a:	0a0b      	lsrs	r3, r1, #8
 800957c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	1c5a      	adds	r2, r3, #1
 8009584:	60fa      	str	r2, [r7, #12]
 8009586:	783a      	ldrb	r2, [r7, #0]
 8009588:	701a      	strb	r2, [r3, #0]
}
 800958a:	bf00      	nop
 800958c:	3714      	adds	r7, #20
 800958e:	46bd      	mov	sp, r7
 8009590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009594:	4770      	bx	lr

08009596 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009596:	b480      	push	{r7}
 8009598:	b087      	sub	sp, #28
 800959a:	af00      	add	r7, sp, #0
 800959c:	60f8      	str	r0, [r7, #12]
 800959e:	60b9      	str	r1, [r7, #8]
 80095a0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d00d      	beq.n	80095cc <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80095b0:	693a      	ldr	r2, [r7, #16]
 80095b2:	1c53      	adds	r3, r2, #1
 80095b4:	613b      	str	r3, [r7, #16]
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	1c59      	adds	r1, r3, #1
 80095ba:	6179      	str	r1, [r7, #20]
 80095bc:	7812      	ldrb	r2, [r2, #0]
 80095be:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	3b01      	subs	r3, #1
 80095c4:	607b      	str	r3, [r7, #4]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d1f1      	bne.n	80095b0 <mem_cpy+0x1a>
	}
}
 80095cc:	bf00      	nop
 80095ce:	371c      	adds	r7, #28
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr

080095d8 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80095d8:	b480      	push	{r7}
 80095da:	b087      	sub	sp, #28
 80095dc:	af00      	add	r7, sp, #0
 80095de:	60f8      	str	r0, [r7, #12]
 80095e0:	60b9      	str	r1, [r7, #8]
 80095e2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	1c5a      	adds	r2, r3, #1
 80095ec:	617a      	str	r2, [r7, #20]
 80095ee:	68ba      	ldr	r2, [r7, #8]
 80095f0:	b2d2      	uxtb	r2, r2
 80095f2:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	3b01      	subs	r3, #1
 80095f8:	607b      	str	r3, [r7, #4]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d1f3      	bne.n	80095e8 <mem_set+0x10>
}
 8009600:	bf00      	nop
 8009602:	bf00      	nop
 8009604:	371c      	adds	r7, #28
 8009606:	46bd      	mov	sp, r7
 8009608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960c:	4770      	bx	lr

0800960e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800960e:	b480      	push	{r7}
 8009610:	b089      	sub	sp, #36	; 0x24
 8009612:	af00      	add	r7, sp, #0
 8009614:	60f8      	str	r0, [r7, #12]
 8009616:	60b9      	str	r1, [r7, #8]
 8009618:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	61fb      	str	r3, [r7, #28]
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009622:	2300      	movs	r3, #0
 8009624:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009626:	69fb      	ldr	r3, [r7, #28]
 8009628:	1c5a      	adds	r2, r3, #1
 800962a:	61fa      	str	r2, [r7, #28]
 800962c:	781b      	ldrb	r3, [r3, #0]
 800962e:	4619      	mov	r1, r3
 8009630:	69bb      	ldr	r3, [r7, #24]
 8009632:	1c5a      	adds	r2, r3, #1
 8009634:	61ba      	str	r2, [r7, #24]
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	1acb      	subs	r3, r1, r3
 800963a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	3b01      	subs	r3, #1
 8009640:	607b      	str	r3, [r7, #4]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d002      	beq.n	800964e <mem_cmp+0x40>
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d0eb      	beq.n	8009626 <mem_cmp+0x18>

	return r;
 800964e:	697b      	ldr	r3, [r7, #20]
}
 8009650:	4618      	mov	r0, r3
 8009652:	3724      	adds	r7, #36	; 0x24
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr

0800965c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800965c:	b480      	push	{r7}
 800965e:	b083      	sub	sp, #12
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009666:	e002      	b.n	800966e <chk_chr+0x12>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	3301      	adds	r3, #1
 800966c:	607b      	str	r3, [r7, #4]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	781b      	ldrb	r3, [r3, #0]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d005      	beq.n	8009682 <chk_chr+0x26>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	461a      	mov	r2, r3
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	4293      	cmp	r3, r2
 8009680:	d1f2      	bne.n	8009668 <chk_chr+0xc>
	return *str;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	781b      	ldrb	r3, [r3, #0]
}
 8009686:	4618      	mov	r0, r3
 8009688:	370c      	adds	r7, #12
 800968a:	46bd      	mov	sp, r7
 800968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009690:	4770      	bx	lr
	...

08009694 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009694:	b480      	push	{r7}
 8009696:	b085      	sub	sp, #20
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800969e:	2300      	movs	r3, #0
 80096a0:	60bb      	str	r3, [r7, #8]
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	60fb      	str	r3, [r7, #12]
 80096a6:	e029      	b.n	80096fc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80096a8:	4a27      	ldr	r2, [pc, #156]	; (8009748 <chk_lock+0xb4>)
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	011b      	lsls	r3, r3, #4
 80096ae:	4413      	add	r3, r2
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d01d      	beq.n	80096f2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80096b6:	4a24      	ldr	r2, [pc, #144]	; (8009748 <chk_lock+0xb4>)
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	011b      	lsls	r3, r3, #4
 80096bc:	4413      	add	r3, r2
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	429a      	cmp	r2, r3
 80096c6:	d116      	bne.n	80096f6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80096c8:	4a1f      	ldr	r2, [pc, #124]	; (8009748 <chk_lock+0xb4>)
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	011b      	lsls	r3, r3, #4
 80096ce:	4413      	add	r3, r2
 80096d0:	3304      	adds	r3, #4
 80096d2:	681a      	ldr	r2, [r3, #0]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80096d8:	429a      	cmp	r2, r3
 80096da:	d10c      	bne.n	80096f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80096dc:	4a1a      	ldr	r2, [pc, #104]	; (8009748 <chk_lock+0xb4>)
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	011b      	lsls	r3, r3, #4
 80096e2:	4413      	add	r3, r2
 80096e4:	3308      	adds	r3, #8
 80096e6:	681a      	ldr	r2, [r3, #0]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 80096ec:	429a      	cmp	r2, r3
 80096ee:	d102      	bne.n	80096f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80096f0:	e007      	b.n	8009702 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80096f2:	2301      	movs	r3, #1
 80096f4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	3301      	adds	r3, #1
 80096fa:	60fb      	str	r3, [r7, #12]
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	2b01      	cmp	r3, #1
 8009700:	d9d2      	bls.n	80096a8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	2b02      	cmp	r3, #2
 8009706:	d109      	bne.n	800971c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d102      	bne.n	8009714 <chk_lock+0x80>
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	2b02      	cmp	r3, #2
 8009712:	d101      	bne.n	8009718 <chk_lock+0x84>
 8009714:	2300      	movs	r3, #0
 8009716:	e010      	b.n	800973a <chk_lock+0xa6>
 8009718:	2312      	movs	r3, #18
 800971a:	e00e      	b.n	800973a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d108      	bne.n	8009734 <chk_lock+0xa0>
 8009722:	4a09      	ldr	r2, [pc, #36]	; (8009748 <chk_lock+0xb4>)
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	011b      	lsls	r3, r3, #4
 8009728:	4413      	add	r3, r2
 800972a:	330c      	adds	r3, #12
 800972c:	881b      	ldrh	r3, [r3, #0]
 800972e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009732:	d101      	bne.n	8009738 <chk_lock+0xa4>
 8009734:	2310      	movs	r3, #16
 8009736:	e000      	b.n	800973a <chk_lock+0xa6>
 8009738:	2300      	movs	r3, #0
}
 800973a:	4618      	mov	r0, r3
 800973c:	3714      	adds	r7, #20
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr
 8009746:	bf00      	nop
 8009748:	200000cc 	.word	0x200000cc

0800974c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800974c:	b480      	push	{r7}
 800974e:	b083      	sub	sp, #12
 8009750:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009752:	2300      	movs	r3, #0
 8009754:	607b      	str	r3, [r7, #4]
 8009756:	e002      	b.n	800975e <enq_lock+0x12>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	3301      	adds	r3, #1
 800975c:	607b      	str	r3, [r7, #4]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2b01      	cmp	r3, #1
 8009762:	d806      	bhi.n	8009772 <enq_lock+0x26>
 8009764:	4a09      	ldr	r2, [pc, #36]	; (800978c <enq_lock+0x40>)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	011b      	lsls	r3, r3, #4
 800976a:	4413      	add	r3, r2
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d1f2      	bne.n	8009758 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2b02      	cmp	r3, #2
 8009776:	bf14      	ite	ne
 8009778:	2301      	movne	r3, #1
 800977a:	2300      	moveq	r3, #0
 800977c:	b2db      	uxtb	r3, r3
}
 800977e:	4618      	mov	r0, r3
 8009780:	370c      	adds	r7, #12
 8009782:	46bd      	mov	sp, r7
 8009784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009788:	4770      	bx	lr
 800978a:	bf00      	nop
 800978c:	200000cc 	.word	0x200000cc

08009790 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009790:	b480      	push	{r7}
 8009792:	b085      	sub	sp, #20
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800979a:	2300      	movs	r3, #0
 800979c:	60fb      	str	r3, [r7, #12]
 800979e:	e01f      	b.n	80097e0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80097a0:	4a41      	ldr	r2, [pc, #260]	; (80098a8 <inc_lock+0x118>)
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	011b      	lsls	r3, r3, #4
 80097a6:	4413      	add	r3, r2
 80097a8:	681a      	ldr	r2, [r3, #0]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d113      	bne.n	80097da <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80097b2:	4a3d      	ldr	r2, [pc, #244]	; (80098a8 <inc_lock+0x118>)
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	011b      	lsls	r3, r3, #4
 80097b8:	4413      	add	r3, r2
 80097ba:	3304      	adds	r3, #4
 80097bc:	681a      	ldr	r2, [r3, #0]
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d109      	bne.n	80097da <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80097c6:	4a38      	ldr	r2, [pc, #224]	; (80098a8 <inc_lock+0x118>)
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	011b      	lsls	r3, r3, #4
 80097cc:	4413      	add	r3, r2
 80097ce:	3308      	adds	r3, #8
 80097d0:	681a      	ldr	r2, [r3, #0]
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 80097d6:	429a      	cmp	r2, r3
 80097d8:	d006      	beq.n	80097e8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	3301      	adds	r3, #1
 80097de:	60fb      	str	r3, [r7, #12]
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2b01      	cmp	r3, #1
 80097e4:	d9dc      	bls.n	80097a0 <inc_lock+0x10>
 80097e6:	e000      	b.n	80097ea <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80097e8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2b02      	cmp	r3, #2
 80097ee:	d132      	bne.n	8009856 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80097f0:	2300      	movs	r3, #0
 80097f2:	60fb      	str	r3, [r7, #12]
 80097f4:	e002      	b.n	80097fc <inc_lock+0x6c>
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	3301      	adds	r3, #1
 80097fa:	60fb      	str	r3, [r7, #12]
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2b01      	cmp	r3, #1
 8009800:	d806      	bhi.n	8009810 <inc_lock+0x80>
 8009802:	4a29      	ldr	r2, [pc, #164]	; (80098a8 <inc_lock+0x118>)
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	011b      	lsls	r3, r3, #4
 8009808:	4413      	add	r3, r2
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d1f2      	bne.n	80097f6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	2b02      	cmp	r3, #2
 8009814:	d101      	bne.n	800981a <inc_lock+0x8a>
 8009816:	2300      	movs	r3, #0
 8009818:	e040      	b.n	800989c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681a      	ldr	r2, [r3, #0]
 800981e:	4922      	ldr	r1, [pc, #136]	; (80098a8 <inc_lock+0x118>)
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	011b      	lsls	r3, r3, #4
 8009824:	440b      	add	r3, r1
 8009826:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	689a      	ldr	r2, [r3, #8]
 800982c:	491e      	ldr	r1, [pc, #120]	; (80098a8 <inc_lock+0x118>)
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	011b      	lsls	r3, r3, #4
 8009832:	440b      	add	r3, r1
 8009834:	3304      	adds	r3, #4
 8009836:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800983c:	491a      	ldr	r1, [pc, #104]	; (80098a8 <inc_lock+0x118>)
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	011b      	lsls	r3, r3, #4
 8009842:	440b      	add	r3, r1
 8009844:	3308      	adds	r3, #8
 8009846:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009848:	4a17      	ldr	r2, [pc, #92]	; (80098a8 <inc_lock+0x118>)
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	011b      	lsls	r3, r3, #4
 800984e:	4413      	add	r3, r2
 8009850:	330c      	adds	r3, #12
 8009852:	2200      	movs	r2, #0
 8009854:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d009      	beq.n	8009870 <inc_lock+0xe0>
 800985c:	4a12      	ldr	r2, [pc, #72]	; (80098a8 <inc_lock+0x118>)
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	011b      	lsls	r3, r3, #4
 8009862:	4413      	add	r3, r2
 8009864:	330c      	adds	r3, #12
 8009866:	881b      	ldrh	r3, [r3, #0]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d001      	beq.n	8009870 <inc_lock+0xe0>
 800986c:	2300      	movs	r3, #0
 800986e:	e015      	b.n	800989c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d108      	bne.n	8009888 <inc_lock+0xf8>
 8009876:	4a0c      	ldr	r2, [pc, #48]	; (80098a8 <inc_lock+0x118>)
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	011b      	lsls	r3, r3, #4
 800987c:	4413      	add	r3, r2
 800987e:	330c      	adds	r3, #12
 8009880:	881b      	ldrh	r3, [r3, #0]
 8009882:	3301      	adds	r3, #1
 8009884:	b29a      	uxth	r2, r3
 8009886:	e001      	b.n	800988c <inc_lock+0xfc>
 8009888:	f44f 7280 	mov.w	r2, #256	; 0x100
 800988c:	4906      	ldr	r1, [pc, #24]	; (80098a8 <inc_lock+0x118>)
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	011b      	lsls	r3, r3, #4
 8009892:	440b      	add	r3, r1
 8009894:	330c      	adds	r3, #12
 8009896:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	3301      	adds	r3, #1
}
 800989c:	4618      	mov	r0, r3
 800989e:	3714      	adds	r7, #20
 80098a0:	46bd      	mov	sp, r7
 80098a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a6:	4770      	bx	lr
 80098a8:	200000cc 	.word	0x200000cc

080098ac <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b085      	sub	sp, #20
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	3b01      	subs	r3, #1
 80098b8:	607b      	str	r3, [r7, #4]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2b01      	cmp	r3, #1
 80098be:	d825      	bhi.n	800990c <dec_lock+0x60>
		n = Files[i].ctr;
 80098c0:	4a17      	ldr	r2, [pc, #92]	; (8009920 <dec_lock+0x74>)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	011b      	lsls	r3, r3, #4
 80098c6:	4413      	add	r3, r2
 80098c8:	330c      	adds	r3, #12
 80098ca:	881b      	ldrh	r3, [r3, #0]
 80098cc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80098ce:	89fb      	ldrh	r3, [r7, #14]
 80098d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098d4:	d101      	bne.n	80098da <dec_lock+0x2e>
 80098d6:	2300      	movs	r3, #0
 80098d8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80098da:	89fb      	ldrh	r3, [r7, #14]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d002      	beq.n	80098e6 <dec_lock+0x3a>
 80098e0:	89fb      	ldrh	r3, [r7, #14]
 80098e2:	3b01      	subs	r3, #1
 80098e4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80098e6:	4a0e      	ldr	r2, [pc, #56]	; (8009920 <dec_lock+0x74>)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	011b      	lsls	r3, r3, #4
 80098ec:	4413      	add	r3, r2
 80098ee:	330c      	adds	r3, #12
 80098f0:	89fa      	ldrh	r2, [r7, #14]
 80098f2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80098f4:	89fb      	ldrh	r3, [r7, #14]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d105      	bne.n	8009906 <dec_lock+0x5a>
 80098fa:	4a09      	ldr	r2, [pc, #36]	; (8009920 <dec_lock+0x74>)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	011b      	lsls	r3, r3, #4
 8009900:	4413      	add	r3, r2
 8009902:	2200      	movs	r2, #0
 8009904:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009906:	2300      	movs	r3, #0
 8009908:	737b      	strb	r3, [r7, #13]
 800990a:	e001      	b.n	8009910 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800990c:	2302      	movs	r3, #2
 800990e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009910:	7b7b      	ldrb	r3, [r7, #13]
}
 8009912:	4618      	mov	r0, r3
 8009914:	3714      	adds	r7, #20
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr
 800991e:	bf00      	nop
 8009920:	200000cc 	.word	0x200000cc

08009924 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009924:	b480      	push	{r7}
 8009926:	b085      	sub	sp, #20
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800992c:	2300      	movs	r3, #0
 800992e:	60fb      	str	r3, [r7, #12]
 8009930:	e010      	b.n	8009954 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009932:	4a0d      	ldr	r2, [pc, #52]	; (8009968 <clear_lock+0x44>)
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	011b      	lsls	r3, r3, #4
 8009938:	4413      	add	r3, r2
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	429a      	cmp	r2, r3
 8009940:	d105      	bne.n	800994e <clear_lock+0x2a>
 8009942:	4a09      	ldr	r2, [pc, #36]	; (8009968 <clear_lock+0x44>)
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	011b      	lsls	r3, r3, #4
 8009948:	4413      	add	r3, r2
 800994a:	2200      	movs	r2, #0
 800994c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	3301      	adds	r3, #1
 8009952:	60fb      	str	r3, [r7, #12]
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2b01      	cmp	r3, #1
 8009958:	d9eb      	bls.n	8009932 <clear_lock+0xe>
	}
}
 800995a:	bf00      	nop
 800995c:	bf00      	nop
 800995e:	3714      	adds	r7, #20
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr
 8009968:	200000cc 	.word	0x200000cc

0800996c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b086      	sub	sp, #24
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009974:	2300      	movs	r3, #0
 8009976:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	78db      	ldrb	r3, [r3, #3]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d034      	beq.n	80099ea <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009984:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	7858      	ldrb	r0, [r3, #1]
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009990:	2301      	movs	r3, #1
 8009992:	697a      	ldr	r2, [r7, #20]
 8009994:	f7ff fbfc 	bl	8009190 <disk_write>
 8009998:	4603      	mov	r3, r0
 800999a:	2b00      	cmp	r3, #0
 800999c:	d002      	beq.n	80099a4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800999e:	2301      	movs	r3, #1
 80099a0:	73fb      	strb	r3, [r7, #15]
 80099a2:	e022      	b.n	80099ea <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2200      	movs	r2, #0
 80099a8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ae:	697a      	ldr	r2, [r7, #20]
 80099b0:	1ad2      	subs	r2, r2, r3
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b6:	429a      	cmp	r2, r3
 80099b8:	d217      	bcs.n	80099ea <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	789b      	ldrb	r3, [r3, #2]
 80099be:	613b      	str	r3, [r7, #16]
 80099c0:	e010      	b.n	80099e4 <sync_window+0x78>
					wsect += fs->fsize;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c6:	697a      	ldr	r2, [r7, #20]
 80099c8:	4413      	add	r3, r2
 80099ca:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	7858      	ldrb	r0, [r3, #1]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80099d6:	2301      	movs	r3, #1
 80099d8:	697a      	ldr	r2, [r7, #20]
 80099da:	f7ff fbd9 	bl	8009190 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	3b01      	subs	r3, #1
 80099e2:	613b      	str	r3, [r7, #16]
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d8eb      	bhi.n	80099c2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80099ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3718      	adds	r7, #24
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b084      	sub	sp, #16
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80099fe:	2300      	movs	r3, #0
 8009a00:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a06:	683a      	ldr	r2, [r7, #0]
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	d01b      	beq.n	8009a44 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f7ff ffad 	bl	800996c <sync_window>
 8009a12:	4603      	mov	r3, r0
 8009a14:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009a16:	7bfb      	ldrb	r3, [r7, #15]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d113      	bne.n	8009a44 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	7858      	ldrb	r0, [r3, #1]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009a26:	2301      	movs	r3, #1
 8009a28:	683a      	ldr	r2, [r7, #0]
 8009a2a:	f7ff fb91 	bl	8009150 <disk_read>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d004      	beq.n	8009a3e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009a34:	f04f 33ff 	mov.w	r3, #4294967295
 8009a38:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	683a      	ldr	r2, [r7, #0]
 8009a42:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 8009a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3710      	adds	r7, #16
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}
	...

08009a50 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b084      	sub	sp, #16
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f7ff ff87 	bl	800996c <sync_window>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009a62:	7bfb      	ldrb	r3, [r7, #15]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d159      	bne.n	8009b1c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	781b      	ldrb	r3, [r3, #0]
 8009a6c:	2b03      	cmp	r3, #3
 8009a6e:	d149      	bne.n	8009b04 <sync_fs+0xb4>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	791b      	ldrb	r3, [r3, #4]
 8009a74:	2b01      	cmp	r3, #1
 8009a76:	d145      	bne.n	8009b04 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	899b      	ldrh	r3, [r3, #12]
 8009a82:	461a      	mov	r2, r3
 8009a84:	2100      	movs	r1, #0
 8009a86:	f7ff fda7 	bl	80095d8 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	333c      	adds	r3, #60	; 0x3c
 8009a8e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009a92:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8009a96:	4618      	mov	r0, r3
 8009a98:	f7ff fcae 	bl	80093f8 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	333c      	adds	r3, #60	; 0x3c
 8009aa0:	4921      	ldr	r1, [pc, #132]	; (8009b28 <sync_fs+0xd8>)
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f7ff fcc3 	bl	800942e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	333c      	adds	r3, #60	; 0x3c
 8009aac:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009ab0:	491e      	ldr	r1, [pc, #120]	; (8009b2c <sync_fs+0xdc>)
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f7ff fcbb 	bl	800942e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	333c      	adds	r3, #60	; 0x3c
 8009abc:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	69db      	ldr	r3, [r3, #28]
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	4610      	mov	r0, r2
 8009ac8:	f7ff fcb1 	bl	800942e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	333c      	adds	r3, #60	; 0x3c
 8009ad0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	699b      	ldr	r3, [r3, #24]
 8009ad8:	4619      	mov	r1, r3
 8009ada:	4610      	mov	r0, r2
 8009adc:	f7ff fca7 	bl	800942e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ae4:	1c5a      	adds	r2, r3, #1
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	7858      	ldrb	r0, [r3, #1]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009af8:	2301      	movs	r3, #1
 8009afa:	f7ff fb49 	bl	8009190 <disk_write>
			fs->fsi_flag = 0;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2200      	movs	r2, #0
 8009b02:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	785b      	ldrb	r3, [r3, #1]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	2100      	movs	r1, #0
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f7ff fb5f 	bl	80091d0 <disk_ioctl>
 8009b12:	4603      	mov	r3, r0
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d001      	beq.n	8009b1c <sync_fs+0xcc>
 8009b18:	2301      	movs	r3, #1
 8009b1a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3710      	adds	r7, #16
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
 8009b26:	bf00      	nop
 8009b28:	41615252 	.word	0x41615252
 8009b2c:	61417272 	.word	0x61417272

08009b30 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b083      	sub	sp, #12
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	3b02      	subs	r3, #2
 8009b3e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6a1b      	ldr	r3, [r3, #32]
 8009b44:	3b02      	subs	r3, #2
 8009b46:	683a      	ldr	r2, [r7, #0]
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d301      	bcc.n	8009b50 <clust2sect+0x20>
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	e008      	b.n	8009b62 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	895b      	ldrh	r3, [r3, #10]
 8009b54:	461a      	mov	r2, r3
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	fb03 f202 	mul.w	r2, r3, r2
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b60:	4413      	add	r3, r2
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	370c      	adds	r7, #12
 8009b66:	46bd      	mov	sp, r7
 8009b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6c:	4770      	bx	lr
	...

08009b70 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009b70:	b5b0      	push	{r4, r5, r7, lr}
 8009b72:	b088      	sub	sp, #32
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
 8009b78:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	2b01      	cmp	r3, #1
 8009b84:	d904      	bls.n	8009b90 <get_fat+0x20>
 8009b86:	69bb      	ldr	r3, [r7, #24]
 8009b88:	6a1b      	ldr	r3, [r3, #32]
 8009b8a:	683a      	ldr	r2, [r7, #0]
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d302      	bcc.n	8009b96 <get_fat+0x26>
		val = 1;	/* Internal error */
 8009b90:	2301      	movs	r3, #1
 8009b92:	61fb      	str	r3, [r7, #28]
 8009b94:	e139      	b.n	8009e0a <get_fat+0x29a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009b96:	f04f 33ff 	mov.w	r3, #4294967295
 8009b9a:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 8009b9c:	69bb      	ldr	r3, [r7, #24]
 8009b9e:	781b      	ldrb	r3, [r3, #0]
 8009ba0:	3b01      	subs	r3, #1
 8009ba2:	2b03      	cmp	r3, #3
 8009ba4:	f200 8125 	bhi.w	8009df2 <get_fat+0x282>
 8009ba8:	a201      	add	r2, pc, #4	; (adr r2, 8009bb0 <get_fat+0x40>)
 8009baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bae:	bf00      	nop
 8009bb0:	08009bc1 	.word	0x08009bc1
 8009bb4:	08009c6f 	.word	0x08009c6f
 8009bb8:	08009cbb 	.word	0x08009cbb
 8009bbc:	08009d0b 	.word	0x08009d0b
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	60fb      	str	r3, [r7, #12]
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	085b      	lsrs	r3, r3, #1
 8009bc8:	68fa      	ldr	r2, [r7, #12]
 8009bca:	4413      	add	r3, r2
 8009bcc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009bce:	69bb      	ldr	r3, [r7, #24]
 8009bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bd2:	69bb      	ldr	r3, [r7, #24]
 8009bd4:	899b      	ldrh	r3, [r3, #12]
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8009bde:	4413      	add	r3, r2
 8009be0:	4619      	mov	r1, r3
 8009be2:	69b8      	ldr	r0, [r7, #24]
 8009be4:	f7ff ff06 	bl	80099f4 <move_window>
 8009be8:	4603      	mov	r3, r0
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	f040 8104 	bne.w	8009df8 <get_fat+0x288>
			wc = fs->win[bc++ % SS(fs)];
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	1c5a      	adds	r2, r3, #1
 8009bf4:	60fa      	str	r2, [r7, #12]
 8009bf6:	69ba      	ldr	r2, [r7, #24]
 8009bf8:	8992      	ldrh	r2, [r2, #12]
 8009bfa:	fbb3 f1f2 	udiv	r1, r3, r2
 8009bfe:	fb02 f201 	mul.w	r2, r2, r1
 8009c02:	1a9b      	subs	r3, r3, r2
 8009c04:	69ba      	ldr	r2, [r7, #24]
 8009c06:	4413      	add	r3, r2
 8009c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c0c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009c0e:	69bb      	ldr	r3, [r7, #24]
 8009c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c12:	69bb      	ldr	r3, [r7, #24]
 8009c14:	899b      	ldrh	r3, [r3, #12]
 8009c16:	4619      	mov	r1, r3
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8009c1e:	4413      	add	r3, r2
 8009c20:	4619      	mov	r1, r3
 8009c22:	69b8      	ldr	r0, [r7, #24]
 8009c24:	f7ff fee6 	bl	80099f4 <move_window>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	f040 80e6 	bne.w	8009dfc <get_fat+0x28c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009c30:	69bb      	ldr	r3, [r7, #24]
 8009c32:	899b      	ldrh	r3, [r3, #12]
 8009c34:	461a      	mov	r2, r3
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c3c:	fb02 f201 	mul.w	r2, r2, r1
 8009c40:	1a9b      	subs	r3, r3, r2
 8009c42:	69ba      	ldr	r2, [r7, #24]
 8009c44:	4413      	add	r3, r2
 8009c46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c4a:	021b      	lsls	r3, r3, #8
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	4313      	orrs	r3, r2
 8009c52:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	f003 0301 	and.w	r3, r3, #1
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d002      	beq.n	8009c64 <get_fat+0xf4>
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	091b      	lsrs	r3, r3, #4
 8009c62:	e002      	b.n	8009c6a <get_fat+0xfa>
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009c6a:	61fb      	str	r3, [r7, #28]
			break;
 8009c6c:	e0cd      	b.n	8009e0a <get_fat+0x29a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009c6e:	69bb      	ldr	r3, [r7, #24]
 8009c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c72:	69bb      	ldr	r3, [r7, #24]
 8009c74:	899b      	ldrh	r3, [r3, #12]
 8009c76:	085b      	lsrs	r3, r3, #1
 8009c78:	b29b      	uxth	r3, r3
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009c82:	4413      	add	r3, r2
 8009c84:	4619      	mov	r1, r3
 8009c86:	69b8      	ldr	r0, [r7, #24]
 8009c88:	f7ff feb4 	bl	80099f4 <move_window>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	f040 80b6 	bne.w	8009e00 <get_fat+0x290>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009c94:	69bb      	ldr	r3, [r7, #24]
 8009c96:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	005b      	lsls	r3, r3, #1
 8009c9e:	69ba      	ldr	r2, [r7, #24]
 8009ca0:	8992      	ldrh	r2, [r2, #12]
 8009ca2:	fbb3 f0f2 	udiv	r0, r3, r2
 8009ca6:	fb02 f200 	mul.w	r2, r2, r0
 8009caa:	1a9b      	subs	r3, r3, r2
 8009cac:	440b      	add	r3, r1
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f7ff faac 	bl	800920c <ld_word>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	61fb      	str	r3, [r7, #28]
			break;
 8009cb8:	e0a7      	b.n	8009e0a <get_fat+0x29a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009cba:	69bb      	ldr	r3, [r7, #24]
 8009cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cbe:	69bb      	ldr	r3, [r7, #24]
 8009cc0:	899b      	ldrh	r3, [r3, #12]
 8009cc2:	089b      	lsrs	r3, r3, #2
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	4619      	mov	r1, r3
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	fbb3 f3f1 	udiv	r3, r3, r1
 8009cce:	4413      	add	r3, r2
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	69b8      	ldr	r0, [r7, #24]
 8009cd4:	f7ff fe8e 	bl	80099f4 <move_window>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	f040 8092 	bne.w	8009e04 <get_fat+0x294>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009ce0:	69bb      	ldr	r3, [r7, #24]
 8009ce2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	009b      	lsls	r3, r3, #2
 8009cea:	69ba      	ldr	r2, [r7, #24]
 8009cec:	8992      	ldrh	r2, [r2, #12]
 8009cee:	fbb3 f0f2 	udiv	r0, r3, r2
 8009cf2:	fb02 f200 	mul.w	r2, r2, r0
 8009cf6:	1a9b      	subs	r3, r3, r2
 8009cf8:	440b      	add	r3, r1
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f7ff fa9e 	bl	800923c <ld_dword>
 8009d00:	4603      	mov	r3, r0
 8009d02:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009d06:	61fb      	str	r3, [r7, #28]
			break;
 8009d08:	e07f      	b.n	8009e0a <get_fat+0x29a>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8009d10:	4313      	orrs	r3, r2
 8009d12:	d06e      	beq.n	8009df2 <get_fat+0x282>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	689b      	ldr	r3, [r3, #8]
 8009d18:	683a      	ldr	r2, [r7, #0]
 8009d1a:	1ad3      	subs	r3, r2, r3
 8009d1c:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8009d24:	f112 34ff 	adds.w	r4, r2, #4294967295
 8009d28:	f143 35ff 	adc.w	r5, r3, #4294967295
 8009d2c:	69bb      	ldr	r3, [r7, #24]
 8009d2e:	899b      	ldrh	r3, [r3, #12]
 8009d30:	b29a      	uxth	r2, r3
 8009d32:	f04f 0300 	mov.w	r3, #0
 8009d36:	4620      	mov	r0, r4
 8009d38:	4629      	mov	r1, r5
 8009d3a:	f7f6 fdb7 	bl	80008ac <__aeabi_uldivmod>
 8009d3e:	4602      	mov	r2, r0
 8009d40:	460b      	mov	r3, r1
 8009d42:	69bb      	ldr	r3, [r7, #24]
 8009d44:	895b      	ldrh	r3, [r3, #10]
 8009d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d4a:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	79db      	ldrb	r3, [r3, #7]
 8009d50:	2b02      	cmp	r3, #2
 8009d52:	d10e      	bne.n	8009d72 <get_fat+0x202>
					if (cofs <= clen) {
 8009d54:	697a      	ldr	r2, [r7, #20]
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d80a      	bhi.n	8009d72 <get_fat+0x202>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 8009d5c:	697a      	ldr	r2, [r7, #20]
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	429a      	cmp	r2, r3
 8009d62:	d002      	beq.n	8009d6a <get_fat+0x1fa>
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	3301      	adds	r3, #1
 8009d68:	e001      	b.n	8009d6e <get_fat+0x1fe>
 8009d6a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8009d6e:	61fb      	str	r3, [r7, #28]
						break;
 8009d70:	e04b      	b.n	8009e0a <get_fat+0x29a>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	79db      	ldrb	r3, [r3, #7]
 8009d76:	2b03      	cmp	r3, #3
 8009d78:	d108      	bne.n	8009d8c <get_fat+0x21c>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	699b      	ldr	r3, [r3, #24]
 8009d7e:	697a      	ldr	r2, [r7, #20]
 8009d80:	429a      	cmp	r2, r3
 8009d82:	d203      	bcs.n	8009d8c <get_fat+0x21c>
					val = clst + 1; 	/* Generate the value */
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	3301      	adds	r3, #1
 8009d88:	61fb      	str	r3, [r7, #28]
					break;
 8009d8a:	e03e      	b.n	8009e0a <get_fat+0x29a>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	79db      	ldrb	r3, [r3, #7]
 8009d90:	2b02      	cmp	r3, #2
 8009d92:	d02e      	beq.n	8009df2 <get_fat+0x282>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	69db      	ldr	r3, [r3, #28]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d003      	beq.n	8009da4 <get_fat+0x234>
						val = 0x7FFFFFFF;	/* Generate EOC */
 8009d9c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8009da0:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 8009da2:	e032      	b.n	8009e0a <get_fat+0x29a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009da4:	69bb      	ldr	r3, [r7, #24]
 8009da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009da8:	69bb      	ldr	r3, [r7, #24]
 8009daa:	899b      	ldrh	r3, [r3, #12]
 8009dac:	089b      	lsrs	r3, r3, #2
 8009dae:	b29b      	uxth	r3, r3
 8009db0:	4619      	mov	r1, r3
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	fbb3 f3f1 	udiv	r3, r3, r1
 8009db8:	4413      	add	r3, r2
 8009dba:	4619      	mov	r1, r3
 8009dbc:	69b8      	ldr	r0, [r7, #24]
 8009dbe:	f7ff fe19 	bl	80099f4 <move_window>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d11f      	bne.n	8009e08 <get_fat+0x298>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8009dc8:	69bb      	ldr	r3, [r7, #24]
 8009dca:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	009b      	lsls	r3, r3, #2
 8009dd2:	69ba      	ldr	r2, [r7, #24]
 8009dd4:	8992      	ldrh	r2, [r2, #12]
 8009dd6:	fbb3 f0f2 	udiv	r0, r3, r2
 8009dda:	fb02 f200 	mul.w	r2, r2, r0
 8009dde:	1a9b      	subs	r3, r3, r2
 8009de0:	440b      	add	r3, r1
 8009de2:	4618      	mov	r0, r3
 8009de4:	f7ff fa2a 	bl	800923c <ld_dword>
 8009de8:	4603      	mov	r3, r0
 8009dea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009dee:	61fb      	str	r3, [r7, #28]
					break;
 8009df0:	e00b      	b.n	8009e0a <get_fat+0x29a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009df2:	2301      	movs	r3, #1
 8009df4:	61fb      	str	r3, [r7, #28]
 8009df6:	e008      	b.n	8009e0a <get_fat+0x29a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009df8:	bf00      	nop
 8009dfa:	e006      	b.n	8009e0a <get_fat+0x29a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009dfc:	bf00      	nop
 8009dfe:	e004      	b.n	8009e0a <get_fat+0x29a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009e00:	bf00      	nop
 8009e02:	e002      	b.n	8009e0a <get_fat+0x29a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009e04:	bf00      	nop
 8009e06:	e000      	b.n	8009e0a <get_fat+0x29a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009e08:	bf00      	nop
		}
	}

	return val;
 8009e0a:	69fb      	ldr	r3, [r7, #28]
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3720      	adds	r7, #32
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bdb0      	pop	{r4, r5, r7, pc}

08009e14 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009e14:	b590      	push	{r4, r7, lr}
 8009e16:	b089      	sub	sp, #36	; 0x24
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	60f8      	str	r0, [r7, #12]
 8009e1c:	60b9      	str	r1, [r7, #8]
 8009e1e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009e20:	2302      	movs	r3, #2
 8009e22:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	2b01      	cmp	r3, #1
 8009e28:	f240 8106 	bls.w	800a038 <put_fat+0x224>
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	6a1b      	ldr	r3, [r3, #32]
 8009e30:	68ba      	ldr	r2, [r7, #8]
 8009e32:	429a      	cmp	r2, r3
 8009e34:	f080 8100 	bcs.w	800a038 <put_fat+0x224>
		switch (fs->fs_type) {
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	781b      	ldrb	r3, [r3, #0]
 8009e3c:	2b04      	cmp	r3, #4
 8009e3e:	f300 8104 	bgt.w	800a04a <put_fat+0x236>
 8009e42:	2b03      	cmp	r3, #3
 8009e44:	f280 80b3 	bge.w	8009fae <put_fat+0x19a>
 8009e48:	2b01      	cmp	r3, #1
 8009e4a:	d003      	beq.n	8009e54 <put_fat+0x40>
 8009e4c:	2b02      	cmp	r3, #2
 8009e4e:	f000 8083 	beq.w	8009f58 <put_fat+0x144>
 8009e52:	e0fa      	b.n	800a04a <put_fat+0x236>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	61bb      	str	r3, [r7, #24]
 8009e58:	69bb      	ldr	r3, [r7, #24]
 8009e5a:	085b      	lsrs	r3, r3, #1
 8009e5c:	69ba      	ldr	r2, [r7, #24]
 8009e5e:	4413      	add	r3, r2
 8009e60:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	899b      	ldrh	r3, [r3, #12]
 8009e6a:	4619      	mov	r1, r3
 8009e6c:	69bb      	ldr	r3, [r7, #24]
 8009e6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009e72:	4413      	add	r3, r2
 8009e74:	4619      	mov	r1, r3
 8009e76:	68f8      	ldr	r0, [r7, #12]
 8009e78:	f7ff fdbc 	bl	80099f4 <move_window>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009e80:	7ffb      	ldrb	r3, [r7, #31]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	f040 80da 	bne.w	800a03c <put_fat+0x228>
			p = fs->win + bc++ % SS(fs);
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009e8e:	69bb      	ldr	r3, [r7, #24]
 8009e90:	1c5a      	adds	r2, r3, #1
 8009e92:	61ba      	str	r2, [r7, #24]
 8009e94:	68fa      	ldr	r2, [r7, #12]
 8009e96:	8992      	ldrh	r2, [r2, #12]
 8009e98:	fbb3 f0f2 	udiv	r0, r3, r2
 8009e9c:	fb02 f200 	mul.w	r2, r2, r0
 8009ea0:	1a9b      	subs	r3, r3, r2
 8009ea2:	440b      	add	r3, r1
 8009ea4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	f003 0301 	and.w	r3, r3, #1
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d00d      	beq.n	8009ecc <put_fat+0xb8>
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	781b      	ldrb	r3, [r3, #0]
 8009eb4:	b25b      	sxtb	r3, r3
 8009eb6:	f003 030f 	and.w	r3, r3, #15
 8009eba:	b25a      	sxtb	r2, r3
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	b2db      	uxtb	r3, r3
 8009ec0:	011b      	lsls	r3, r3, #4
 8009ec2:	b25b      	sxtb	r3, r3
 8009ec4:	4313      	orrs	r3, r2
 8009ec6:	b25b      	sxtb	r3, r3
 8009ec8:	b2db      	uxtb	r3, r3
 8009eca:	e001      	b.n	8009ed0 <put_fat+0xbc>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	b2db      	uxtb	r3, r3
 8009ed0:	697a      	ldr	r2, [r7, #20]
 8009ed2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	899b      	ldrh	r3, [r3, #12]
 8009ee2:	4619      	mov	r1, r3
 8009ee4:	69bb      	ldr	r3, [r7, #24]
 8009ee6:	fbb3 f3f1 	udiv	r3, r3, r1
 8009eea:	4413      	add	r3, r2
 8009eec:	4619      	mov	r1, r3
 8009eee:	68f8      	ldr	r0, [r7, #12]
 8009ef0:	f7ff fd80 	bl	80099f4 <move_window>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009ef8:	7ffb      	ldrb	r3, [r7, #31]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	f040 80a0 	bne.w	800a040 <put_fat+0x22c>
			p = fs->win + bc % SS(fs);
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	899b      	ldrh	r3, [r3, #12]
 8009f0a:	461a      	mov	r2, r3
 8009f0c:	69bb      	ldr	r3, [r7, #24]
 8009f0e:	fbb3 f0f2 	udiv	r0, r3, r2
 8009f12:	fb02 f200 	mul.w	r2, r2, r0
 8009f16:	1a9b      	subs	r3, r3, r2
 8009f18:	440b      	add	r3, r1
 8009f1a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	f003 0301 	and.w	r3, r3, #1
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d003      	beq.n	8009f2e <put_fat+0x11a>
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	091b      	lsrs	r3, r3, #4
 8009f2a:	b2db      	uxtb	r3, r3
 8009f2c:	e00e      	b.n	8009f4c <put_fat+0x138>
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	b25b      	sxtb	r3, r3
 8009f34:	f023 030f 	bic.w	r3, r3, #15
 8009f38:	b25a      	sxtb	r2, r3
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	0a1b      	lsrs	r3, r3, #8
 8009f3e:	b25b      	sxtb	r3, r3
 8009f40:	f003 030f 	and.w	r3, r3, #15
 8009f44:	b25b      	sxtb	r3, r3
 8009f46:	4313      	orrs	r3, r2
 8009f48:	b25b      	sxtb	r3, r3
 8009f4a:	b2db      	uxtb	r3, r3
 8009f4c:	697a      	ldr	r2, [r7, #20]
 8009f4e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	2201      	movs	r2, #1
 8009f54:	70da      	strb	r2, [r3, #3]
			break;
 8009f56:	e078      	b.n	800a04a <put_fat+0x236>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	899b      	ldrh	r3, [r3, #12]
 8009f60:	085b      	lsrs	r3, r3, #1
 8009f62:	b29b      	uxth	r3, r3
 8009f64:	4619      	mov	r1, r3
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	fbb3 f3f1 	udiv	r3, r3, r1
 8009f6c:	4413      	add	r3, r2
 8009f6e:	4619      	mov	r1, r3
 8009f70:	68f8      	ldr	r0, [r7, #12]
 8009f72:	f7ff fd3f 	bl	80099f4 <move_window>
 8009f76:	4603      	mov	r3, r0
 8009f78:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009f7a:	7ffb      	ldrb	r3, [r7, #31]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d161      	bne.n	800a044 <put_fat+0x230>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	005b      	lsls	r3, r3, #1
 8009f8a:	68fa      	ldr	r2, [r7, #12]
 8009f8c:	8992      	ldrh	r2, [r2, #12]
 8009f8e:	fbb3 f0f2 	udiv	r0, r3, r2
 8009f92:	fb02 f200 	mul.w	r2, r2, r0
 8009f96:	1a9b      	subs	r3, r3, r2
 8009f98:	440b      	add	r3, r1
 8009f9a:	687a      	ldr	r2, [r7, #4]
 8009f9c:	b292      	uxth	r2, r2
 8009f9e:	4611      	mov	r1, r2
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f7ff fa29 	bl	80093f8 <st_word>
			fs->wflag = 1;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	2201      	movs	r2, #1
 8009faa:	70da      	strb	r2, [r3, #3]
			break;
 8009fac:	e04d      	b.n	800a04a <put_fat+0x236>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	899b      	ldrh	r3, [r3, #12]
 8009fb6:	089b      	lsrs	r3, r3, #2
 8009fb8:	b29b      	uxth	r3, r3
 8009fba:	4619      	mov	r1, r3
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8009fc2:	4413      	add	r3, r2
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	68f8      	ldr	r0, [r7, #12]
 8009fc8:	f7ff fd14 	bl	80099f4 <move_window>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009fd0:	7ffb      	ldrb	r3, [r7, #31]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d138      	bne.n	800a048 <put_fat+0x234>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	781b      	ldrb	r3, [r3, #0]
 8009fda:	2b04      	cmp	r3, #4
 8009fdc:	d017      	beq.n	800a00e <put_fat+0x1fa>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	009b      	lsls	r3, r3, #2
 8009fee:	68fa      	ldr	r2, [r7, #12]
 8009ff0:	8992      	ldrh	r2, [r2, #12]
 8009ff2:	fbb3 f0f2 	udiv	r0, r3, r2
 8009ff6:	fb02 f200 	mul.w	r2, r2, r0
 8009ffa:	1a9b      	subs	r3, r3, r2
 8009ffc:	440b      	add	r3, r1
 8009ffe:	4618      	mov	r0, r3
 800a000:	f7ff f91c 	bl	800923c <ld_dword>
 800a004:	4603      	mov	r3, r0
 800a006:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a00a:	4323      	orrs	r3, r4
 800a00c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	009b      	lsls	r3, r3, #2
 800a018:	68fa      	ldr	r2, [r7, #12]
 800a01a:	8992      	ldrh	r2, [r2, #12]
 800a01c:	fbb3 f0f2 	udiv	r0, r3, r2
 800a020:	fb02 f200 	mul.w	r2, r2, r0
 800a024:	1a9b      	subs	r3, r3, r2
 800a026:	440b      	add	r3, r1
 800a028:	6879      	ldr	r1, [r7, #4]
 800a02a:	4618      	mov	r0, r3
 800a02c:	f7ff f9ff 	bl	800942e <st_dword>
			fs->wflag = 1;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	2201      	movs	r2, #1
 800a034:	70da      	strb	r2, [r3, #3]
			break;
 800a036:	e008      	b.n	800a04a <put_fat+0x236>
		}
	}
 800a038:	bf00      	nop
 800a03a:	e006      	b.n	800a04a <put_fat+0x236>
			if (res != FR_OK) break;
 800a03c:	bf00      	nop
 800a03e:	e004      	b.n	800a04a <put_fat+0x236>
			if (res != FR_OK) break;
 800a040:	bf00      	nop
 800a042:	e002      	b.n	800a04a <put_fat+0x236>
			if (res != FR_OK) break;
 800a044:	bf00      	nop
 800a046:	e000      	b.n	800a04a <put_fat+0x236>
			if (res != FR_OK) break;
 800a048:	bf00      	nop
	return res;
 800a04a:	7ffb      	ldrb	r3, [r7, #31]
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3724      	adds	r7, #36	; 0x24
 800a050:	46bd      	mov	sp, r7
 800a052:	bd90      	pop	{r4, r7, pc}

0800a054 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b08a      	sub	sp, #40	; 0x28
 800a058:	af00      	add	r7, sp, #0
 800a05a:	60f8      	str	r0, [r7, #12]
 800a05c:	60b9      	str	r1, [r7, #8]
 800a05e:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	3b02      	subs	r3, #2
 800a064:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	6a1b      	ldr	r3, [r3, #32]
 800a06a:	3b02      	subs	r3, #2
 800a06c:	68ba      	ldr	r2, [r7, #8]
 800a06e:	429a      	cmp	r2, r3
 800a070:	d301      	bcc.n	800a076 <find_bitmap+0x22>
 800a072:	2300      	movs	r3, #0
 800a074:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	61fb      	str	r3, [r7, #28]
 800a07a:	69fb      	ldr	r3, [r7, #28]
 800a07c:	61bb      	str	r3, [r7, #24]
 800a07e:	2300      	movs	r3, #0
 800a080:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a086:	69fb      	ldr	r3, [r7, #28]
 800a088:	08db      	lsrs	r3, r3, #3
 800a08a:	68f9      	ldr	r1, [r7, #12]
 800a08c:	8989      	ldrh	r1, [r1, #12]
 800a08e:	fbb3 f3f1 	udiv	r3, r3, r1
 800a092:	4413      	add	r3, r2
 800a094:	4619      	mov	r1, r3
 800a096:	68f8      	ldr	r0, [r7, #12]
 800a098:	f7ff fcac 	bl	80099f4 <move_window>
 800a09c:	4603      	mov	r3, r0
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d002      	beq.n	800a0a8 <find_bitmap+0x54>
 800a0a2:	f04f 33ff 	mov.w	r3, #4294967295
 800a0a6:	e058      	b.n	800a15a <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800a0a8:	69fb      	ldr	r3, [r7, #28]
 800a0aa:	08db      	lsrs	r3, r3, #3
 800a0ac:	68fa      	ldr	r2, [r7, #12]
 800a0ae:	8992      	ldrh	r2, [r2, #12]
 800a0b0:	fbb3 f1f2 	udiv	r1, r3, r2
 800a0b4:	fb02 f201 	mul.w	r2, r2, r1
 800a0b8:	1a9b      	subs	r3, r3, r2
 800a0ba:	623b      	str	r3, [r7, #32]
 800a0bc:	69fb      	ldr	r3, [r7, #28]
 800a0be:	f003 0307 	and.w	r3, r3, #7
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	fa02 f303 	lsl.w	r3, r2, r3
 800a0c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800a0cc:	68fa      	ldr	r2, [r7, #12]
 800a0ce:	6a3b      	ldr	r3, [r7, #32]
 800a0d0:	4413      	add	r3, r2
 800a0d2:	333c      	adds	r3, #60	; 0x3c
 800a0d4:	781a      	ldrb	r2, [r3, #0]
 800a0d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0da:	4013      	ands	r3, r2
 800a0dc:	74fb      	strb	r3, [r7, #19]
 800a0de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0e2:	005b      	lsls	r3, r3, #1
 800a0e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800a0e8:	69fb      	ldr	r3, [r7, #28]
 800a0ea:	3301      	adds	r3, #1
 800a0ec:	61fb      	str	r3, [r7, #28]
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	6a1b      	ldr	r3, [r3, #32]
 800a0f2:	3b02      	subs	r3, #2
 800a0f4:	69fa      	ldr	r2, [r7, #28]
 800a0f6:	429a      	cmp	r2, r3
 800a0f8:	d307      	bcc.n	800a10a <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	61fb      	str	r3, [r7, #28]
 800a0fe:	2300      	movs	r3, #0
 800a100:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	899b      	ldrh	r3, [r3, #12]
 800a108:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800a10a:	7cfb      	ldrb	r3, [r7, #19]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d109      	bne.n	800a124 <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	3301      	adds	r3, #1
 800a114:	617b      	str	r3, [r7, #20]
 800a116:	697a      	ldr	r2, [r7, #20]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d106      	bne.n	800a12c <find_bitmap+0xd8>
 800a11e:	69bb      	ldr	r3, [r7, #24]
 800a120:	3302      	adds	r3, #2
 800a122:	e01a      	b.n	800a15a <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800a124:	69fb      	ldr	r3, [r7, #28]
 800a126:	61bb      	str	r3, [r7, #24]
 800a128:	2300      	movs	r3, #0
 800a12a:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800a12c:	69fa      	ldr	r2, [r7, #28]
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	429a      	cmp	r2, r3
 800a132:	d101      	bne.n	800a138 <find_bitmap+0xe4>
 800a134:	2300      	movs	r3, #0
 800a136:	e010      	b.n	800a15a <find_bitmap+0x106>
			} while (bm);
 800a138:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d1c5      	bne.n	800a0cc <find_bitmap+0x78>
			bm = 1;
 800a140:	2301      	movs	r3, #1
 800a142:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 800a146:	6a3b      	ldr	r3, [r7, #32]
 800a148:	3301      	adds	r3, #1
 800a14a:	623b      	str	r3, [r7, #32]
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	899b      	ldrh	r3, [r3, #12]
 800a150:	461a      	mov	r2, r3
 800a152:	6a3b      	ldr	r3, [r7, #32]
 800a154:	4293      	cmp	r3, r2
 800a156:	d3b9      	bcc.n	800a0cc <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800a158:	e793      	b.n	800a082 <find_bitmap+0x2e>
	}
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3728      	adds	r7, #40	; 0x28
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}

0800a162 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800a162:	b580      	push	{r7, lr}
 800a164:	b088      	sub	sp, #32
 800a166:	af00      	add	r7, sp, #0
 800a168:	60f8      	str	r0, [r7, #12]
 800a16a:	60b9      	str	r1, [r7, #8]
 800a16c:	607a      	str	r2, [r7, #4]
 800a16e:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	3b02      	subs	r3, #2
 800a174:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	08db      	lsrs	r3, r3, #3
 800a17e:	68f9      	ldr	r1, [r7, #12]
 800a180:	8989      	ldrh	r1, [r1, #12]
 800a182:	fbb3 f3f1 	udiv	r3, r3, r1
 800a186:	4413      	add	r3, r2
 800a188:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	08db      	lsrs	r3, r3, #3
 800a18e:	68fa      	ldr	r2, [r7, #12]
 800a190:	8992      	ldrh	r2, [r2, #12]
 800a192:	fbb3 f1f2 	udiv	r1, r3, r2
 800a196:	fb02 f201 	mul.w	r2, r2, r1
 800a19a:	1a9b      	subs	r3, r3, r2
 800a19c:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	f003 0307 	and.w	r3, r3, #7
 800a1a4:	2201      	movs	r2, #1
 800a1a6:	fa02 f303 	lsl.w	r3, r2, r3
 800a1aa:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	1c5a      	adds	r2, r3, #1
 800a1b0:	617a      	str	r2, [r7, #20]
 800a1b2:	4619      	mov	r1, r3
 800a1b4:	68f8      	ldr	r0, [r7, #12]
 800a1b6:	f7ff fc1d 	bl	80099f4 <move_window>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d001      	beq.n	800a1c4 <change_bitmap+0x62>
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	e03f      	b.n	800a244 <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800a1c4:	68fa      	ldr	r2, [r7, #12]
 800a1c6:	69bb      	ldr	r3, [r7, #24]
 800a1c8:	4413      	add	r3, r2
 800a1ca:	333c      	adds	r3, #60	; 0x3c
 800a1cc:	781a      	ldrb	r2, [r3, #0]
 800a1ce:	7ffb      	ldrb	r3, [r7, #31]
 800a1d0:	4013      	ands	r3, r2
 800a1d2:	b2db      	uxtb	r3, r3
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	bf14      	ite	ne
 800a1d8:	2301      	movne	r3, #1
 800a1da:	2300      	moveq	r3, #0
 800a1dc:	b2db      	uxtb	r3, r3
 800a1de:	461a      	mov	r2, r3
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d101      	bne.n	800a1ea <change_bitmap+0x88>
 800a1e6:	2302      	movs	r3, #2
 800a1e8:	e02c      	b.n	800a244 <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 800a1ea:	68fa      	ldr	r2, [r7, #12]
 800a1ec:	69bb      	ldr	r3, [r7, #24]
 800a1ee:	4413      	add	r3, r2
 800a1f0:	333c      	adds	r3, #60	; 0x3c
 800a1f2:	781a      	ldrb	r2, [r3, #0]
 800a1f4:	7ffb      	ldrb	r3, [r7, #31]
 800a1f6:	4053      	eors	r3, r2
 800a1f8:	b2d9      	uxtb	r1, r3
 800a1fa:	68fa      	ldr	r2, [r7, #12]
 800a1fc:	69bb      	ldr	r3, [r7, #24]
 800a1fe:	4413      	add	r3, r2
 800a200:	333c      	adds	r3, #60	; 0x3c
 800a202:	460a      	mov	r2, r1
 800a204:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	2201      	movs	r2, #1
 800a20a:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	3b01      	subs	r3, #1
 800a210:	607b      	str	r3, [r7, #4]
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d101      	bne.n	800a21c <change_bitmap+0xba>
 800a218:	2300      	movs	r3, #0
 800a21a:	e013      	b.n	800a244 <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 800a21c:	7ffb      	ldrb	r3, [r7, #31]
 800a21e:	005b      	lsls	r3, r3, #1
 800a220:	77fb      	strb	r3, [r7, #31]
 800a222:	7ffb      	ldrb	r3, [r7, #31]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d1cd      	bne.n	800a1c4 <change_bitmap+0x62>
			bm = 1;
 800a228:	2301      	movs	r3, #1
 800a22a:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800a22c:	69bb      	ldr	r3, [r7, #24]
 800a22e:	3301      	adds	r3, #1
 800a230:	61bb      	str	r3, [r7, #24]
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	899b      	ldrh	r3, [r3, #12]
 800a236:	461a      	mov	r2, r3
 800a238:	69bb      	ldr	r3, [r7, #24]
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d3c2      	bcc.n	800a1c4 <change_bitmap+0x62>
		i = 0;
 800a23e:	2300      	movs	r3, #0
 800a240:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800a242:	e7b3      	b.n	800a1ac <change_bitmap+0x4a>
	}
}
 800a244:	4618      	mov	r0, r3
 800a246:	3720      	adds	r7, #32
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}

0800a24c <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b086      	sub	sp, #24
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	79db      	ldrb	r3, [r3, #7]
 800a258:	2b03      	cmp	r3, #3
 800a25a:	d121      	bne.n	800a2a0 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	689b      	ldr	r3, [r3, #8]
 800a260:	617b      	str	r3, [r7, #20]
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	699b      	ldr	r3, [r3, #24]
 800a266:	613b      	str	r3, [r7, #16]
 800a268:	e014      	b.n	800a294 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6818      	ldr	r0, [r3, #0]
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	3301      	adds	r3, #1
 800a272:	461a      	mov	r2, r3
 800a274:	6979      	ldr	r1, [r7, #20]
 800a276:	f7ff fdcd 	bl	8009e14 <put_fat>
 800a27a:	4603      	mov	r3, r0
 800a27c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800a27e:	7bfb      	ldrb	r3, [r7, #15]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d001      	beq.n	800a288 <fill_first_frag+0x3c>
 800a284:	7bfb      	ldrb	r3, [r7, #15]
 800a286:	e00c      	b.n	800a2a2 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	3301      	adds	r3, #1
 800a28c:	617b      	str	r3, [r7, #20]
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	3b01      	subs	r3, #1
 800a292:	613b      	str	r3, [r7, #16]
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d1e7      	bne.n	800a26a <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2200      	movs	r2, #0
 800a29e:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800a2a0:	2300      	movs	r3, #0
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3718      	adds	r7, #24
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}

0800a2aa <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800a2aa:	b580      	push	{r7, lr}
 800a2ac:	b086      	sub	sp, #24
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	60f8      	str	r0, [r7, #12]
 800a2b2:	60b9      	str	r1, [r7, #8]
 800a2b4:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800a2b6:	e020      	b.n	800a2fa <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	6818      	ldr	r0, [r3, #0]
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	69db      	ldr	r3, [r3, #28]
 800a2c0:	68ba      	ldr	r2, [r7, #8]
 800a2c2:	1ad3      	subs	r3, r2, r3
 800a2c4:	1c59      	adds	r1, r3, #1
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	69db      	ldr	r3, [r3, #28]
 800a2ca:	2b01      	cmp	r3, #1
 800a2cc:	d905      	bls.n	800a2da <fill_last_frag+0x30>
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	69db      	ldr	r3, [r3, #28]
 800a2d2:	68ba      	ldr	r2, [r7, #8]
 800a2d4:	1ad3      	subs	r3, r2, r3
 800a2d6:	3302      	adds	r3, #2
 800a2d8:	e000      	b.n	800a2dc <fill_last_frag+0x32>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	461a      	mov	r2, r3
 800a2de:	f7ff fd99 	bl	8009e14 <put_fat>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800a2e6:	7dfb      	ldrb	r3, [r7, #23]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d001      	beq.n	800a2f0 <fill_last_frag+0x46>
 800a2ec:	7dfb      	ldrb	r3, [r7, #23]
 800a2ee:	e009      	b.n	800a304 <fill_last_frag+0x5a>
		obj->n_frag--;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	69db      	ldr	r3, [r3, #28]
 800a2f4:	1e5a      	subs	r2, r3, #1
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	69db      	ldr	r3, [r3, #28]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d1da      	bne.n	800a2b8 <fill_last_frag+0xe>
	}
	return FR_OK;
 800a302:	2300      	movs	r3, #0
}
 800a304:	4618      	mov	r0, r3
 800a306:	3718      	adds	r7, #24
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b08a      	sub	sp, #40	; 0x28
 800a310:	af00      	add	r7, sp, #0
 800a312:	60f8      	str	r0, [r7, #12]
 800a314:	60b9      	str	r1, [r7, #8]
 800a316:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a318:	2300      	movs	r3, #0
 800a31a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	627b      	str	r3, [r7, #36]	; 0x24
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	2b01      	cmp	r3, #1
 800a32e:	d904      	bls.n	800a33a <remove_chain+0x2e>
 800a330:	69bb      	ldr	r3, [r7, #24]
 800a332:	6a1b      	ldr	r3, [r3, #32]
 800a334:	68ba      	ldr	r2, [r7, #8]
 800a336:	429a      	cmp	r2, r3
 800a338:	d301      	bcc.n	800a33e <remove_chain+0x32>
 800a33a:	2302      	movs	r3, #2
 800a33c:	e096      	b.n	800a46c <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d014      	beq.n	800a36e <remove_chain+0x62>
 800a344:	69bb      	ldr	r3, [r7, #24]
 800a346:	781b      	ldrb	r3, [r3, #0]
 800a348:	2b04      	cmp	r3, #4
 800a34a:	d103      	bne.n	800a354 <remove_chain+0x48>
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	79db      	ldrb	r3, [r3, #7]
 800a350:	2b02      	cmp	r3, #2
 800a352:	d00c      	beq.n	800a36e <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a354:	f04f 32ff 	mov.w	r2, #4294967295
 800a358:	6879      	ldr	r1, [r7, #4]
 800a35a:	69b8      	ldr	r0, [r7, #24]
 800a35c:	f7ff fd5a 	bl	8009e14 <put_fat>
 800a360:	4603      	mov	r3, r0
 800a362:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a364:	7ffb      	ldrb	r3, [r7, #31]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d001      	beq.n	800a36e <remove_chain+0x62>
 800a36a:	7ffb      	ldrb	r3, [r7, #31]
 800a36c:	e07e      	b.n	800a46c <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a36e:	68b9      	ldr	r1, [r7, #8]
 800a370:	68f8      	ldr	r0, [r7, #12]
 800a372:	f7ff fbfd 	bl	8009b70 <get_fat>
 800a376:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d055      	beq.n	800a42a <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	2b01      	cmp	r3, #1
 800a382:	d101      	bne.n	800a388 <remove_chain+0x7c>
 800a384:	2302      	movs	r3, #2
 800a386:	e071      	b.n	800a46c <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a38e:	d101      	bne.n	800a394 <remove_chain+0x88>
 800a390:	2301      	movs	r3, #1
 800a392:	e06b      	b.n	800a46c <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800a394:	69bb      	ldr	r3, [r7, #24]
 800a396:	781b      	ldrb	r3, [r3, #0]
 800a398:	2b04      	cmp	r3, #4
 800a39a:	d00b      	beq.n	800a3b4 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a39c:	2200      	movs	r2, #0
 800a39e:	68b9      	ldr	r1, [r7, #8]
 800a3a0:	69b8      	ldr	r0, [r7, #24]
 800a3a2:	f7ff fd37 	bl	8009e14 <put_fat>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a3aa:	7ffb      	ldrb	r3, [r7, #31]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d001      	beq.n	800a3b4 <remove_chain+0xa8>
 800a3b0:	7ffb      	ldrb	r3, [r7, #31]
 800a3b2:	e05b      	b.n	800a46c <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a3b4:	69bb      	ldr	r3, [r7, #24]
 800a3b6:	69da      	ldr	r2, [r3, #28]
 800a3b8:	69bb      	ldr	r3, [r7, #24]
 800a3ba:	6a1b      	ldr	r3, [r3, #32]
 800a3bc:	3b02      	subs	r3, #2
 800a3be:	429a      	cmp	r2, r3
 800a3c0:	d20b      	bcs.n	800a3da <remove_chain+0xce>
			fs->free_clst++;
 800a3c2:	69bb      	ldr	r3, [r7, #24]
 800a3c4:	69db      	ldr	r3, [r3, #28]
 800a3c6:	1c5a      	adds	r2, r3, #1
 800a3c8:	69bb      	ldr	r3, [r7, #24]
 800a3ca:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 800a3cc:	69bb      	ldr	r3, [r7, #24]
 800a3ce:	791b      	ldrb	r3, [r3, #4]
 800a3d0:	f043 0301 	orr.w	r3, r3, #1
 800a3d4:	b2da      	uxtb	r2, r3
 800a3d6:	69bb      	ldr	r3, [r7, #24]
 800a3d8:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800a3da:	6a3b      	ldr	r3, [r7, #32]
 800a3dc:	3301      	adds	r3, #1
 800a3de:	697a      	ldr	r2, [r7, #20]
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	d102      	bne.n	800a3ea <remove_chain+0xde>
			ecl = nxt;
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	623b      	str	r3, [r7, #32]
 800a3e8:	e017      	b.n	800a41a <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800a3ea:	69bb      	ldr	r3, [r7, #24]
 800a3ec:	781b      	ldrb	r3, [r3, #0]
 800a3ee:	2b04      	cmp	r3, #4
 800a3f0:	d10f      	bne.n	800a412 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800a3f2:	6a3a      	ldr	r2, [r7, #32]
 800a3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f6:	1ad3      	subs	r3, r2, r3
 800a3f8:	1c5a      	adds	r2, r3, #1
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a3fe:	69b8      	ldr	r0, [r7, #24]
 800a400:	f7ff feaf 	bl	800a162 <change_bitmap>
 800a404:	4603      	mov	r3, r0
 800a406:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800a408:	7ffb      	ldrb	r3, [r7, #31]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d001      	beq.n	800a412 <remove_chain+0x106>
 800a40e:	7ffb      	ldrb	r3, [r7, #31]
 800a410:	e02c      	b.n	800a46c <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	623b      	str	r3, [r7, #32]
 800a416:	6a3b      	ldr	r3, [r7, #32]
 800a418:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a41e:	69bb      	ldr	r3, [r7, #24]
 800a420:	6a1b      	ldr	r3, [r3, #32]
 800a422:	68ba      	ldr	r2, [r7, #8]
 800a424:	429a      	cmp	r2, r3
 800a426:	d3a2      	bcc.n	800a36e <remove_chain+0x62>
 800a428:	e000      	b.n	800a42c <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800a42a:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 800a42c:	69bb      	ldr	r3, [r7, #24]
 800a42e:	781b      	ldrb	r3, [r3, #0]
 800a430:	2b04      	cmp	r3, #4
 800a432:	d11a      	bne.n	800a46a <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d103      	bne.n	800a442 <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	2200      	movs	r2, #0
 800a43e:	71da      	strb	r2, [r3, #7]
 800a440:	e013      	b.n	800a46a <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	79db      	ldrb	r3, [r3, #7]
 800a446:	2b03      	cmp	r3, #3
 800a448:	d10f      	bne.n	800a46a <remove_chain+0x15e>
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	689b      	ldr	r3, [r3, #8]
 800a44e:	687a      	ldr	r2, [r7, #4]
 800a450:	429a      	cmp	r2, r3
 800a452:	d30a      	bcc.n	800a46a <remove_chain+0x15e>
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	689a      	ldr	r2, [r3, #8]
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	699b      	ldr	r3, [r3, #24]
 800a45c:	4413      	add	r3, r2
 800a45e:	687a      	ldr	r2, [r7, #4]
 800a460:	429a      	cmp	r2, r3
 800a462:	d802      	bhi.n	800a46a <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	2202      	movs	r2, #2
 800a468:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800a46a:	2300      	movs	r3, #0
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3728      	adds	r7, #40	; 0x28
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}

0800a474 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b088      	sub	sp, #32
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d10d      	bne.n	800a4a6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	699b      	ldr	r3, [r3, #24]
 800a48e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a490:	69bb      	ldr	r3, [r7, #24]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d004      	beq.n	800a4a0 <create_chain+0x2c>
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	6a1b      	ldr	r3, [r3, #32]
 800a49a:	69ba      	ldr	r2, [r7, #24]
 800a49c:	429a      	cmp	r2, r3
 800a49e:	d31b      	bcc.n	800a4d8 <create_chain+0x64>
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	61bb      	str	r3, [r7, #24]
 800a4a4:	e018      	b.n	800a4d8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a4a6:	6839      	ldr	r1, [r7, #0]
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	f7ff fb61 	bl	8009b70 <get_fat>
 800a4ae:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2b01      	cmp	r3, #1
 800a4b4:	d801      	bhi.n	800a4ba <create_chain+0x46>
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	e0d9      	b.n	800a66e <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4c0:	d101      	bne.n	800a4c6 <create_chain+0x52>
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	e0d3      	b.n	800a66e <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a4c6:	693b      	ldr	r3, [r7, #16]
 800a4c8:	6a1b      	ldr	r3, [r3, #32]
 800a4ca:	68fa      	ldr	r2, [r7, #12]
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	d201      	bcs.n	800a4d4 <create_chain+0x60>
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	e0cc      	b.n	800a66e <create_chain+0x1fa>
		scl = clst;
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	781b      	ldrb	r3, [r3, #0]
 800a4dc:	2b04      	cmp	r3, #4
 800a4de:	d164      	bne.n	800a5aa <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	69b9      	ldr	r1, [r7, #24]
 800a4e4:	6938      	ldr	r0, [r7, #16]
 800a4e6:	f7ff fdb5 	bl	800a054 <find_bitmap>
 800a4ea:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800a4ec:	69fb      	ldr	r3, [r7, #28]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d003      	beq.n	800a4fa <create_chain+0x86>
 800a4f2:	69fb      	ldr	r3, [r7, #28]
 800a4f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4f8:	d101      	bne.n	800a4fe <create_chain+0x8a>
 800a4fa:	69fb      	ldr	r3, [r7, #28]
 800a4fc:	e0b7      	b.n	800a66e <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800a4fe:	2301      	movs	r3, #1
 800a500:	2201      	movs	r2, #1
 800a502:	69f9      	ldr	r1, [r7, #28]
 800a504:	6938      	ldr	r0, [r7, #16]
 800a506:	f7ff fe2c 	bl	800a162 <change_bitmap>
 800a50a:	4603      	mov	r3, r0
 800a50c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800a50e:	7dfb      	ldrb	r3, [r7, #23]
 800a510:	2b02      	cmp	r3, #2
 800a512:	d101      	bne.n	800a518 <create_chain+0xa4>
 800a514:	2301      	movs	r3, #1
 800a516:	e0aa      	b.n	800a66e <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800a518:	7dfb      	ldrb	r3, [r7, #23]
 800a51a:	2b01      	cmp	r3, #1
 800a51c:	d102      	bne.n	800a524 <create_chain+0xb0>
 800a51e:	f04f 33ff 	mov.w	r3, #4294967295
 800a522:	e0a4      	b.n	800a66e <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d103      	bne.n	800a532 <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2202      	movs	r2, #2
 800a52e:	71da      	strb	r2, [r3, #7]
 800a530:	e011      	b.n	800a556 <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	79db      	ldrb	r3, [r3, #7]
 800a536:	2b02      	cmp	r3, #2
 800a538:	d10d      	bne.n	800a556 <create_chain+0xe2>
 800a53a:	69bb      	ldr	r3, [r7, #24]
 800a53c:	3301      	adds	r3, #1
 800a53e:	69fa      	ldr	r2, [r7, #28]
 800a540:	429a      	cmp	r2, r3
 800a542:	d008      	beq.n	800a556 <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	689b      	ldr	r3, [r3, #8]
 800a548:	69ba      	ldr	r2, [r7, #24]
 800a54a:	1ad2      	subs	r2, r2, r3
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2203      	movs	r2, #3
 800a554:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	79db      	ldrb	r3, [r3, #7]
 800a55a:	2b02      	cmp	r3, #2
 800a55c:	d064      	beq.n	800a628 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	3301      	adds	r3, #1
 800a562:	69fa      	ldr	r2, [r7, #28]
 800a564:	429a      	cmp	r2, r3
 800a566:	d10b      	bne.n	800a580 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	69db      	ldr	r3, [r3, #28]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d003      	beq.n	800a578 <create_chain+0x104>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	69db      	ldr	r3, [r3, #28]
 800a574:	3301      	adds	r3, #1
 800a576:	e000      	b.n	800a57a <create_chain+0x106>
 800a578:	2302      	movs	r3, #2
 800a57a:	687a      	ldr	r2, [r7, #4]
 800a57c:	61d3      	str	r3, [r2, #28]
 800a57e:	e053      	b.n	800a628 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	69db      	ldr	r3, [r3, #28]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d102      	bne.n	800a58e <create_chain+0x11a>
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2201      	movs	r2, #1
 800a58c:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800a58e:	69fa      	ldr	r2, [r7, #28]
 800a590:	6839      	ldr	r1, [r7, #0]
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f7ff fe89 	bl	800a2aa <fill_last_frag>
 800a598:	4603      	mov	r3, r0
 800a59a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800a59c:	7dfb      	ldrb	r3, [r7, #23]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d142      	bne.n	800a628 <create_chain+0x1b4>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	61da      	str	r2, [r3, #28]
 800a5a8:	e03e      	b.n	800a628 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a5aa:	69bb      	ldr	r3, [r7, #24]
 800a5ac:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a5ae:	69fb      	ldr	r3, [r7, #28]
 800a5b0:	3301      	adds	r3, #1
 800a5b2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a5b4:	693b      	ldr	r3, [r7, #16]
 800a5b6:	6a1b      	ldr	r3, [r3, #32]
 800a5b8:	69fa      	ldr	r2, [r7, #28]
 800a5ba:	429a      	cmp	r2, r3
 800a5bc:	d307      	bcc.n	800a5ce <create_chain+0x15a>
				ncl = 2;
 800a5be:	2302      	movs	r3, #2
 800a5c0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a5c2:	69fa      	ldr	r2, [r7, #28]
 800a5c4:	69bb      	ldr	r3, [r7, #24]
 800a5c6:	429a      	cmp	r2, r3
 800a5c8:	d901      	bls.n	800a5ce <create_chain+0x15a>
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	e04f      	b.n	800a66e <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a5ce:	69f9      	ldr	r1, [r7, #28]
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f7ff facd 	bl	8009b70 <get_fat>
 800a5d6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d00e      	beq.n	800a5fc <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	2b01      	cmp	r3, #1
 800a5e2:	d003      	beq.n	800a5ec <create_chain+0x178>
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5ea:	d101      	bne.n	800a5f0 <create_chain+0x17c>
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	e03e      	b.n	800a66e <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800a5f0:	69fa      	ldr	r2, [r7, #28]
 800a5f2:	69bb      	ldr	r3, [r7, #24]
 800a5f4:	429a      	cmp	r2, r3
 800a5f6:	d1da      	bne.n	800a5ae <create_chain+0x13a>
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	e038      	b.n	800a66e <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800a5fc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a5fe:	f04f 32ff 	mov.w	r2, #4294967295
 800a602:	69f9      	ldr	r1, [r7, #28]
 800a604:	6938      	ldr	r0, [r7, #16]
 800a606:	f7ff fc05 	bl	8009e14 <put_fat>
 800a60a:	4603      	mov	r3, r0
 800a60c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a60e:	7dfb      	ldrb	r3, [r7, #23]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d109      	bne.n	800a628 <create_chain+0x1b4>
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d006      	beq.n	800a628 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a61a:	69fa      	ldr	r2, [r7, #28]
 800a61c:	6839      	ldr	r1, [r7, #0]
 800a61e:	6938      	ldr	r0, [r7, #16]
 800a620:	f7ff fbf8 	bl	8009e14 <put_fat>
 800a624:	4603      	mov	r3, r0
 800a626:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a628:	7dfb      	ldrb	r3, [r7, #23]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d116      	bne.n	800a65c <create_chain+0x1e8>
		fs->last_clst = ncl;
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	69fa      	ldr	r2, [r7, #28]
 800a632:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	69da      	ldr	r2, [r3, #28]
 800a638:	693b      	ldr	r3, [r7, #16]
 800a63a:	6a1b      	ldr	r3, [r3, #32]
 800a63c:	3b02      	subs	r3, #2
 800a63e:	429a      	cmp	r2, r3
 800a640:	d804      	bhi.n	800a64c <create_chain+0x1d8>
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	69db      	ldr	r3, [r3, #28]
 800a646:	1e5a      	subs	r2, r3, #1
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 800a64c:	693b      	ldr	r3, [r7, #16]
 800a64e:	791b      	ldrb	r3, [r3, #4]
 800a650:	f043 0301 	orr.w	r3, r3, #1
 800a654:	b2da      	uxtb	r2, r3
 800a656:	693b      	ldr	r3, [r7, #16]
 800a658:	711a      	strb	r2, [r3, #4]
 800a65a:	e007      	b.n	800a66c <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a65c:	7dfb      	ldrb	r3, [r7, #23]
 800a65e:	2b01      	cmp	r3, #1
 800a660:	d102      	bne.n	800a668 <create_chain+0x1f4>
 800a662:	f04f 33ff 	mov.w	r3, #4294967295
 800a666:	e000      	b.n	800a66a <create_chain+0x1f6>
 800a668:	2301      	movs	r3, #1
 800a66a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a66c:	69fb      	ldr	r3, [r7, #28]
}
 800a66e:	4618      	mov	r0, r3
 800a670:	3720      	adds	r7, #32
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}

0800a676 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a676:	b580      	push	{r7, lr}
 800a678:	b088      	sub	sp, #32
 800a67a:	af00      	add	r7, sp, #0
 800a67c:	60f8      	str	r0, [r7, #12]
 800a67e:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a68c:	3304      	adds	r3, #4
 800a68e:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a690:	697b      	ldr	r3, [r7, #20]
 800a692:	899b      	ldrh	r3, [r3, #12]
 800a694:	b29a      	uxth	r2, r3
 800a696:	f04f 0300 	mov.w	r3, #0
 800a69a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a69e:	f7f6 f905 	bl	80008ac <__aeabi_uldivmod>
 800a6a2:	4602      	mov	r2, r0
 800a6a4:	460b      	mov	r3, r1
 800a6a6:	4610      	mov	r0, r2
 800a6a8:	4619      	mov	r1, r3
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	895b      	ldrh	r3, [r3, #10]
 800a6ae:	b29a      	uxth	r2, r3
 800a6b0:	f04f 0300 	mov.w	r3, #0
 800a6b4:	f7f6 f8fa 	bl	80008ac <__aeabi_uldivmod>
 800a6b8:	4602      	mov	r2, r0
 800a6ba:	460b      	mov	r3, r1
 800a6bc:	4613      	mov	r3, r2
 800a6be:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a6c0:	69bb      	ldr	r3, [r7, #24]
 800a6c2:	1d1a      	adds	r2, r3, #4
 800a6c4:	61ba      	str	r2, [r7, #24]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a6ca:	693b      	ldr	r3, [r7, #16]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d101      	bne.n	800a6d4 <clmt_clust+0x5e>
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	e010      	b.n	800a6f6 <clmt_clust+0x80>
		if (cl < ncl) break;	/* In this fragment? */
 800a6d4:	69fa      	ldr	r2, [r7, #28]
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	d307      	bcc.n	800a6ec <clmt_clust+0x76>
		cl -= ncl; tbl++;		/* Next fragment */
 800a6dc:	69fa      	ldr	r2, [r7, #28]
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	1ad3      	subs	r3, r2, r3
 800a6e2:	61fb      	str	r3, [r7, #28]
 800a6e4:	69bb      	ldr	r3, [r7, #24]
 800a6e6:	3304      	adds	r3, #4
 800a6e8:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a6ea:	e7e9      	b.n	800a6c0 <clmt_clust+0x4a>
		if (cl < ncl) break;	/* In this fragment? */
 800a6ec:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a6ee:	69bb      	ldr	r3, [r7, #24]
 800a6f0:	681a      	ldr	r2, [r3, #0]
 800a6f2:	69fb      	ldr	r3, [r7, #28]
 800a6f4:	4413      	add	r3, r2
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	3720      	adds	r7, #32
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}

0800a6fe <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a6fe:	b580      	push	{r7, lr}
 800a700:	b086      	sub	sp, #24
 800a702:	af00      	add	r7, sp, #0
 800a704:	6078      	str	r0, [r7, #4]
 800a706:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	781b      	ldrb	r3, [r3, #0]
 800a712:	2b04      	cmp	r3, #4
 800a714:	d102      	bne.n	800a71c <dir_sdi+0x1e>
 800a716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a71a:	e001      	b.n	800a720 <dir_sdi+0x22>
 800a71c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	429a      	cmp	r2, r3
 800a724:	d904      	bls.n	800a730 <dir_sdi+0x32>
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	f003 031f 	and.w	r3, r3, #31
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d001      	beq.n	800a734 <dir_sdi+0x36>
		return FR_INT_ERR;
 800a730:	2302      	movs	r3, #2
 800a732:	e074      	b.n	800a81e <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	683a      	ldr	r2, [r7, #0]
 800a738:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	689b      	ldr	r3, [r3, #8]
 800a73e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d109      	bne.n	800a75a <dir_sdi+0x5c>
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	781b      	ldrb	r3, [r3, #0]
 800a74a:	2b02      	cmp	r3, #2
 800a74c:	d905      	bls.n	800a75a <dir_sdi+0x5c>
		clst = fs->dirbase;
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a752:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2200      	movs	r2, #0
 800a758:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d10c      	bne.n	800a77a <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	095b      	lsrs	r3, r3, #5
 800a764:	693a      	ldr	r2, [r7, #16]
 800a766:	8912      	ldrh	r2, [r2, #8]
 800a768:	4293      	cmp	r3, r2
 800a76a:	d301      	bcc.n	800a770 <dir_sdi+0x72>
 800a76c:	2302      	movs	r3, #2
 800a76e:	e056      	b.n	800a81e <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	639a      	str	r2, [r3, #56]	; 0x38
 800a778:	e02d      	b.n	800a7d6 <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	895b      	ldrh	r3, [r3, #10]
 800a77e:	461a      	mov	r2, r3
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	899b      	ldrh	r3, [r3, #12]
 800a784:	fb03 f302 	mul.w	r3, r3, r2
 800a788:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a78a:	e019      	b.n	800a7c0 <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6979      	ldr	r1, [r7, #20]
 800a790:	4618      	mov	r0, r3
 800a792:	f7ff f9ed 	bl	8009b70 <get_fat>
 800a796:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a79e:	d101      	bne.n	800a7a4 <dir_sdi+0xa6>
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	e03c      	b.n	800a81e <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	2b01      	cmp	r3, #1
 800a7a8:	d904      	bls.n	800a7b4 <dir_sdi+0xb6>
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	6a1b      	ldr	r3, [r3, #32]
 800a7ae:	697a      	ldr	r2, [r7, #20]
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	d301      	bcc.n	800a7b8 <dir_sdi+0xba>
 800a7b4:	2302      	movs	r3, #2
 800a7b6:	e032      	b.n	800a81e <dir_sdi+0x120>
			ofs -= csz;
 800a7b8:	683a      	ldr	r2, [r7, #0]
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	1ad3      	subs	r3, r2, r3
 800a7be:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a7c0:	683a      	ldr	r2, [r7, #0]
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d2e1      	bcs.n	800a78c <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 800a7c8:	6979      	ldr	r1, [r7, #20]
 800a7ca:	6938      	ldr	r0, [r7, #16]
 800a7cc:	f7ff f9b0 	bl	8009b30 <clust2sect>
 800a7d0:	4602      	mov	r2, r0
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	697a      	ldr	r2, [r7, #20]
 800a7da:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d101      	bne.n	800a7e8 <dir_sdi+0xea>
 800a7e4:	2302      	movs	r3, #2
 800a7e6:	e01a      	b.n	800a81e <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	899b      	ldrh	r3, [r3, #12]
 800a7f0:	4619      	mov	r1, r3
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	fbb3 f3f1 	udiv	r3, r3, r1
 800a7f8:	441a      	add	r2, r3
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	899b      	ldrh	r3, [r3, #12]
 800a808:	461a      	mov	r2, r3
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	fbb3 f0f2 	udiv	r0, r3, r2
 800a810:	fb02 f200 	mul.w	r2, r2, r0
 800a814:	1a9b      	subs	r3, r3, r2
 800a816:	18ca      	adds	r2, r1, r3
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800a81c:	2300      	movs	r3, #0
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3718      	adds	r7, #24
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}

0800a826 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a826:	b580      	push	{r7, lr}
 800a828:	b086      	sub	sp, #24
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	6078      	str	r0, [r7, #4]
 800a82e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a83a:	3320      	adds	r3, #32
 800a83c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a842:	2b00      	cmp	r3, #0
 800a844:	d00b      	beq.n	800a85e <dir_next+0x38>
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	781b      	ldrb	r3, [r3, #0]
 800a84a:	2b04      	cmp	r3, #4
 800a84c:	d102      	bne.n	800a854 <dir_next+0x2e>
 800a84e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a852:	e001      	b.n	800a858 <dir_next+0x32>
 800a854:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d801      	bhi.n	800a862 <dir_next+0x3c>
 800a85e:	2304      	movs	r3, #4
 800a860:	e0c3      	b.n	800a9ea <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	899b      	ldrh	r3, [r3, #12]
 800a866:	461a      	mov	r2, r3
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a86e:	fb02 f201 	mul.w	r2, r2, r1
 800a872:	1a9b      	subs	r3, r3, r2
 800a874:	2b00      	cmp	r3, #0
 800a876:	f040 80a5 	bne.w	800a9c4 <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a87e:	1c5a      	adds	r2, r3, #1
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d10b      	bne.n	800a8a4 <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	095b      	lsrs	r3, r3, #5
 800a890:	68fa      	ldr	r2, [r7, #12]
 800a892:	8912      	ldrh	r2, [r2, #8]
 800a894:	4293      	cmp	r3, r2
 800a896:	f0c0 8095 	bcc.w	800a9c4 <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2200      	movs	r2, #0
 800a89e:	639a      	str	r2, [r3, #56]	; 0x38
 800a8a0:	2304      	movs	r3, #4
 800a8a2:	e0a2      	b.n	800a9ea <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	899b      	ldrh	r3, [r3, #12]
 800a8a8:	461a      	mov	r2, r3
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8b0:	68fa      	ldr	r2, [r7, #12]
 800a8b2:	8952      	ldrh	r2, [r2, #10]
 800a8b4:	3a01      	subs	r2, #1
 800a8b6:	4013      	ands	r3, r2
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	f040 8083 	bne.w	800a9c4 <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a8be:	687a      	ldr	r2, [r7, #4]
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8c4:	4619      	mov	r1, r3
 800a8c6:	4610      	mov	r0, r2
 800a8c8:	f7ff f952 	bl	8009b70 <get_fat>
 800a8cc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	2b01      	cmp	r3, #1
 800a8d2:	d801      	bhi.n	800a8d8 <dir_next+0xb2>
 800a8d4:	2302      	movs	r3, #2
 800a8d6:	e088      	b.n	800a9ea <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8de:	d101      	bne.n	800a8e4 <dir_next+0xbe>
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	e082      	b.n	800a9ea <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	6a1b      	ldr	r3, [r3, #32]
 800a8e8:	697a      	ldr	r2, [r7, #20]
 800a8ea:	429a      	cmp	r2, r3
 800a8ec:	d360      	bcc.n	800a9b0 <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d104      	bne.n	800a8fe <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	639a      	str	r2, [r3, #56]	; 0x38
 800a8fa:	2304      	movs	r3, #4
 800a8fc:	e075      	b.n	800a9ea <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a8fe:	687a      	ldr	r2, [r7, #4]
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a904:	4619      	mov	r1, r3
 800a906:	4610      	mov	r0, r2
 800a908:	f7ff fdb4 	bl	800a474 <create_chain>
 800a90c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d101      	bne.n	800a918 <dir_next+0xf2>
 800a914:	2307      	movs	r3, #7
 800a916:	e068      	b.n	800a9ea <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	2b01      	cmp	r3, #1
 800a91c:	d101      	bne.n	800a922 <dir_next+0xfc>
 800a91e:	2302      	movs	r3, #2
 800a920:	e063      	b.n	800a9ea <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a928:	d101      	bne.n	800a92e <dir_next+0x108>
 800a92a:	2301      	movs	r3, #1
 800a92c:	e05d      	b.n	800a9ea <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	79db      	ldrb	r3, [r3, #7]
 800a932:	f043 0304 	orr.w	r3, r3, #4
 800a936:	b2da      	uxtb	r2, r3
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a93c:	68f8      	ldr	r0, [r7, #12]
 800a93e:	f7ff f815 	bl	800996c <sync_window>
 800a942:	4603      	mov	r3, r0
 800a944:	2b00      	cmp	r3, #0
 800a946:	d001      	beq.n	800a94c <dir_next+0x126>
 800a948:	2301      	movs	r3, #1
 800a94a:	e04e      	b.n	800a9ea <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	899b      	ldrh	r3, [r3, #12]
 800a956:	461a      	mov	r2, r3
 800a958:	2100      	movs	r1, #0
 800a95a:	f7fe fe3d 	bl	80095d8 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a95e:	2300      	movs	r3, #0
 800a960:	613b      	str	r3, [r7, #16]
 800a962:	6979      	ldr	r1, [r7, #20]
 800a964:	68f8      	ldr	r0, [r7, #12]
 800a966:	f7ff f8e3 	bl	8009b30 <clust2sect>
 800a96a:	4602      	mov	r2, r0
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	639a      	str	r2, [r3, #56]	; 0x38
 800a970:	e012      	b.n	800a998 <dir_next+0x172>
						fs->wflag = 1;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	2201      	movs	r2, #1
 800a976:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a978:	68f8      	ldr	r0, [r7, #12]
 800a97a:	f7fe fff7 	bl	800996c <sync_window>
 800a97e:	4603      	mov	r3, r0
 800a980:	2b00      	cmp	r3, #0
 800a982:	d001      	beq.n	800a988 <dir_next+0x162>
 800a984:	2301      	movs	r3, #1
 800a986:	e030      	b.n	800a9ea <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	3301      	adds	r3, #1
 800a98c:	613b      	str	r3, [r7, #16]
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a992:	1c5a      	adds	r2, r3, #1
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	639a      	str	r2, [r3, #56]	; 0x38
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	895b      	ldrh	r3, [r3, #10]
 800a99c:	461a      	mov	r2, r3
 800a99e:	693b      	ldr	r3, [r7, #16]
 800a9a0:	4293      	cmp	r3, r2
 800a9a2:	d3e6      	bcc.n	800a972 <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	1ad2      	subs	r2, r2, r3
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	697a      	ldr	r2, [r7, #20]
 800a9b4:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 800a9b6:	6979      	ldr	r1, [r7, #20]
 800a9b8:	68f8      	ldr	r0, [r7, #12]
 800a9ba:	f7ff f8b9 	bl	8009b30 <clust2sect>
 800a9be:	4602      	mov	r2, r0
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	68ba      	ldr	r2, [r7, #8]
 800a9c8:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	899b      	ldrh	r3, [r3, #12]
 800a9d4:	461a      	mov	r2, r3
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	fbb3 f0f2 	udiv	r0, r3, r2
 800a9dc:	fb02 f200 	mul.w	r2, r2, r0
 800a9e0:	1a9b      	subs	r3, r3, r2
 800a9e2:	18ca      	adds	r2, r1, r3
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800a9e8:	2300      	movs	r3, #0
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	3718      	adds	r7, #24
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}

0800a9f2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a9f2:	b580      	push	{r7, lr}
 800a9f4:	b086      	sub	sp, #24
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	6078      	str	r0, [r7, #4]
 800a9fa:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800aa02:	2100      	movs	r1, #0
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f7ff fe7a 	bl	800a6fe <dir_sdi>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800aa0e:	7dfb      	ldrb	r3, [r7, #23]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d140      	bne.n	800aa96 <dir_alloc+0xa4>
		n = 0;
 800aa14:	2300      	movs	r3, #0
 800aa16:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa1c:	4619      	mov	r1, r3
 800aa1e:	68f8      	ldr	r0, [r7, #12]
 800aa20:	f7fe ffe8 	bl	80099f4 <move_window>
 800aa24:	4603      	mov	r3, r0
 800aa26:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800aa28:	7dfb      	ldrb	r3, [r7, #23]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d132      	bne.n	800aa94 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	781b      	ldrb	r3, [r3, #0]
 800aa32:	2b04      	cmp	r3, #4
 800aa34:	d108      	bne.n	800aa48 <dir_alloc+0x56>
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa3a:	781b      	ldrb	r3, [r3, #0]
 800aa3c:	b25b      	sxtb	r3, r3
 800aa3e:	43db      	mvns	r3, r3
 800aa40:	b2db      	uxtb	r3, r3
 800aa42:	09db      	lsrs	r3, r3, #7
 800aa44:	b2db      	uxtb	r3, r3
 800aa46:	e00f      	b.n	800aa68 <dir_alloc+0x76>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa4c:	781b      	ldrb	r3, [r3, #0]
 800aa4e:	2be5      	cmp	r3, #229	; 0xe5
 800aa50:	d004      	beq.n	800aa5c <dir_alloc+0x6a>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa56:	781b      	ldrb	r3, [r3, #0]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d101      	bne.n	800aa60 <dir_alloc+0x6e>
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	e000      	b.n	800aa62 <dir_alloc+0x70>
 800aa60:	2300      	movs	r3, #0
 800aa62:	f003 0301 	and.w	r3, r3, #1
 800aa66:	b2db      	uxtb	r3, r3
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d007      	beq.n	800aa7c <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	3301      	adds	r3, #1
 800aa70:	613b      	str	r3, [r7, #16]
 800aa72:	693a      	ldr	r2, [r7, #16]
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	429a      	cmp	r2, r3
 800aa78:	d102      	bne.n	800aa80 <dir_alloc+0x8e>
 800aa7a:	e00c      	b.n	800aa96 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800aa80:	2101      	movs	r1, #1
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f7ff fecf 	bl	800a826 <dir_next>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800aa8c:	7dfb      	ldrb	r3, [r7, #23]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d0c2      	beq.n	800aa18 <dir_alloc+0x26>
 800aa92:	e000      	b.n	800aa96 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800aa94:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800aa96:	7dfb      	ldrb	r3, [r7, #23]
 800aa98:	2b04      	cmp	r3, #4
 800aa9a:	d101      	bne.n	800aaa0 <dir_alloc+0xae>
 800aa9c:	2307      	movs	r3, #7
 800aa9e:	75fb      	strb	r3, [r7, #23]
	return res;
 800aaa0:	7dfb      	ldrb	r3, [r7, #23]
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3718      	adds	r7, #24
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}

0800aaaa <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800aaaa:	b580      	push	{r7, lr}
 800aaac:	b084      	sub	sp, #16
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	6078      	str	r0, [r7, #4]
 800aab2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	331a      	adds	r3, #26
 800aab8:	4618      	mov	r0, r3
 800aaba:	f7fe fba7 	bl	800920c <ld_word>
 800aabe:	4603      	mov	r3, r0
 800aac0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	781b      	ldrb	r3, [r3, #0]
 800aac6:	2b03      	cmp	r3, #3
 800aac8:	d109      	bne.n	800aade <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	3314      	adds	r3, #20
 800aace:	4618      	mov	r0, r3
 800aad0:	f7fe fb9c 	bl	800920c <ld_word>
 800aad4:	4603      	mov	r3, r0
 800aad6:	041b      	lsls	r3, r3, #16
 800aad8:	68fa      	ldr	r2, [r7, #12]
 800aada:	4313      	orrs	r3, r2
 800aadc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800aade:	68fb      	ldr	r3, [r7, #12]
}
 800aae0:	4618      	mov	r0, r3
 800aae2:	3710      	adds	r7, #16
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}

0800aae8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b084      	sub	sp, #16
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	60f8      	str	r0, [r7, #12]
 800aaf0:	60b9      	str	r1, [r7, #8]
 800aaf2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	331a      	adds	r3, #26
 800aaf8:	687a      	ldr	r2, [r7, #4]
 800aafa:	b292      	uxth	r2, r2
 800aafc:	4611      	mov	r1, r2
 800aafe:	4618      	mov	r0, r3
 800ab00:	f7fe fc7a 	bl	80093f8 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	781b      	ldrb	r3, [r3, #0]
 800ab08:	2b03      	cmp	r3, #3
 800ab0a:	d109      	bne.n	800ab20 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	f103 0214 	add.w	r2, r3, #20
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	0c1b      	lsrs	r3, r3, #16
 800ab16:	b29b      	uxth	r3, r3
 800ab18:	4619      	mov	r1, r3
 800ab1a:	4610      	mov	r0, r2
 800ab1c:	f7fe fc6c 	bl	80093f8 <st_word>
	}
}
 800ab20:	bf00      	nop
 800ab22:	3710      	adds	r7, #16
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}

0800ab28 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800ab28:	b590      	push	{r4, r7, lr}
 800ab2a:	b087      	sub	sp, #28
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	331a      	adds	r3, #26
 800ab36:	4618      	mov	r0, r3
 800ab38:	f7fe fb68 	bl	800920c <ld_word>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d001      	beq.n	800ab46 <cmp_lfn+0x1e>
 800ab42:	2300      	movs	r3, #0
 800ab44:	e059      	b.n	800abfa <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	781b      	ldrb	r3, [r3, #0]
 800ab4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab4e:	1e5a      	subs	r2, r3, #1
 800ab50:	4613      	mov	r3, r2
 800ab52:	005b      	lsls	r3, r3, #1
 800ab54:	4413      	add	r3, r2
 800ab56:	009b      	lsls	r3, r3, #2
 800ab58:	4413      	add	r3, r2
 800ab5a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	81fb      	strh	r3, [r7, #14]
 800ab60:	2300      	movs	r3, #0
 800ab62:	613b      	str	r3, [r7, #16]
 800ab64:	e033      	b.n	800abce <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ab66:	4a27      	ldr	r2, [pc, #156]	; (800ac04 <cmp_lfn+0xdc>)
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	4413      	add	r3, r2
 800ab6c:	781b      	ldrb	r3, [r3, #0]
 800ab6e:	461a      	mov	r2, r3
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	4413      	add	r3, r2
 800ab74:	4618      	mov	r0, r3
 800ab76:	f7fe fb49 	bl	800920c <ld_word>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ab7e:	89fb      	ldrh	r3, [r7, #14]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d01a      	beq.n	800abba <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	2bfe      	cmp	r3, #254	; 0xfe
 800ab88:	d812      	bhi.n	800abb0 <cmp_lfn+0x88>
 800ab8a:	89bb      	ldrh	r3, [r7, #12]
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f003 f863 	bl	800dc58 <ff_wtoupper>
 800ab92:	4603      	mov	r3, r0
 800ab94:	461c      	mov	r4, r3
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	1c5a      	adds	r2, r3, #1
 800ab9a:	617a      	str	r2, [r7, #20]
 800ab9c:	005b      	lsls	r3, r3, #1
 800ab9e:	687a      	ldr	r2, [r7, #4]
 800aba0:	4413      	add	r3, r2
 800aba2:	881b      	ldrh	r3, [r3, #0]
 800aba4:	4618      	mov	r0, r3
 800aba6:	f003 f857 	bl	800dc58 <ff_wtoupper>
 800abaa:	4603      	mov	r3, r0
 800abac:	429c      	cmp	r4, r3
 800abae:	d001      	beq.n	800abb4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800abb0:	2300      	movs	r3, #0
 800abb2:	e022      	b.n	800abfa <cmp_lfn+0xd2>
			}
			wc = uc;
 800abb4:	89bb      	ldrh	r3, [r7, #12]
 800abb6:	81fb      	strh	r3, [r7, #14]
 800abb8:	e006      	b.n	800abc8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800abba:	89bb      	ldrh	r3, [r7, #12]
 800abbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d001      	beq.n	800abc8 <cmp_lfn+0xa0>
 800abc4:	2300      	movs	r3, #0
 800abc6:	e018      	b.n	800abfa <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	3301      	adds	r3, #1
 800abcc:	613b      	str	r3, [r7, #16]
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	2b0c      	cmp	r3, #12
 800abd2:	d9c8      	bls.n	800ab66 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	781b      	ldrb	r3, [r3, #0]
 800abd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d00b      	beq.n	800abf8 <cmp_lfn+0xd0>
 800abe0:	89fb      	ldrh	r3, [r7, #14]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d008      	beq.n	800abf8 <cmp_lfn+0xd0>
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	005b      	lsls	r3, r3, #1
 800abea:	687a      	ldr	r2, [r7, #4]
 800abec:	4413      	add	r3, r2
 800abee:	881b      	ldrh	r3, [r3, #0]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d001      	beq.n	800abf8 <cmp_lfn+0xd0>
 800abf4:	2300      	movs	r3, #0
 800abf6:	e000      	b.n	800abfa <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800abf8:	2301      	movs	r3, #1
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	371c      	adds	r7, #28
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd90      	pop	{r4, r7, pc}
 800ac02:	bf00      	nop
 800ac04:	08010ce0 	.word	0x08010ce0

0800ac08 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b086      	sub	sp, #24
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
 800ac10:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	331a      	adds	r3, #26
 800ac16:	4618      	mov	r0, r3
 800ac18:	f7fe faf8 	bl	800920c <ld_word>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d001      	beq.n	800ac26 <pick_lfn+0x1e>
 800ac22:	2300      	movs	r3, #0
 800ac24:	e04d      	b.n	800acc2 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	781b      	ldrb	r3, [r3, #0]
 800ac2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac2e:	1e5a      	subs	r2, r3, #1
 800ac30:	4613      	mov	r3, r2
 800ac32:	005b      	lsls	r3, r3, #1
 800ac34:	4413      	add	r3, r2
 800ac36:	009b      	lsls	r3, r3, #2
 800ac38:	4413      	add	r3, r2
 800ac3a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	81fb      	strh	r3, [r7, #14]
 800ac40:	2300      	movs	r3, #0
 800ac42:	613b      	str	r3, [r7, #16]
 800ac44:	e028      	b.n	800ac98 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ac46:	4a21      	ldr	r2, [pc, #132]	; (800accc <pick_lfn+0xc4>)
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	4413      	add	r3, r2
 800ac4c:	781b      	ldrb	r3, [r3, #0]
 800ac4e:	461a      	mov	r2, r3
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	4413      	add	r3, r2
 800ac54:	4618      	mov	r0, r3
 800ac56:	f7fe fad9 	bl	800920c <ld_word>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ac5e:	89fb      	ldrh	r3, [r7, #14]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d00f      	beq.n	800ac84 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	2bfe      	cmp	r3, #254	; 0xfe
 800ac68:	d901      	bls.n	800ac6e <pick_lfn+0x66>
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	e029      	b.n	800acc2 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800ac6e:	89bb      	ldrh	r3, [r7, #12]
 800ac70:	81fb      	strh	r3, [r7, #14]
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	1c5a      	adds	r2, r3, #1
 800ac76:	617a      	str	r2, [r7, #20]
 800ac78:	005b      	lsls	r3, r3, #1
 800ac7a:	687a      	ldr	r2, [r7, #4]
 800ac7c:	4413      	add	r3, r2
 800ac7e:	89fa      	ldrh	r2, [r7, #14]
 800ac80:	801a      	strh	r2, [r3, #0]
 800ac82:	e006      	b.n	800ac92 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ac84:	89bb      	ldrh	r3, [r7, #12]
 800ac86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	d001      	beq.n	800ac92 <pick_lfn+0x8a>
 800ac8e:	2300      	movs	r3, #0
 800ac90:	e017      	b.n	800acc2 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	3301      	adds	r3, #1
 800ac96:	613b      	str	r3, [r7, #16]
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	2b0c      	cmp	r3, #12
 800ac9c:	d9d3      	bls.n	800ac46 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	781b      	ldrb	r3, [r3, #0]
 800aca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d00a      	beq.n	800acc0 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	2bfe      	cmp	r3, #254	; 0xfe
 800acae:	d901      	bls.n	800acb4 <pick_lfn+0xac>
 800acb0:	2300      	movs	r3, #0
 800acb2:	e006      	b.n	800acc2 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	005b      	lsls	r3, r3, #1
 800acb8:	687a      	ldr	r2, [r7, #4]
 800acba:	4413      	add	r3, r2
 800acbc:	2200      	movs	r2, #0
 800acbe:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800acc0:	2301      	movs	r3, #1
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3718      	adds	r7, #24
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}
 800acca:	bf00      	nop
 800accc:	08010ce0 	.word	0x08010ce0

0800acd0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b088      	sub	sp, #32
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	60f8      	str	r0, [r7, #12]
 800acd8:	60b9      	str	r1, [r7, #8]
 800acda:	4611      	mov	r1, r2
 800acdc:	461a      	mov	r2, r3
 800acde:	460b      	mov	r3, r1
 800ace0:	71fb      	strb	r3, [r7, #7]
 800ace2:	4613      	mov	r3, r2
 800ace4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	330d      	adds	r3, #13
 800acea:	79ba      	ldrb	r2, [r7, #6]
 800acec:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	330b      	adds	r3, #11
 800acf2:	220f      	movs	r2, #15
 800acf4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	330c      	adds	r3, #12
 800acfa:	2200      	movs	r2, #0
 800acfc:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	331a      	adds	r3, #26
 800ad02:	2100      	movs	r1, #0
 800ad04:	4618      	mov	r0, r3
 800ad06:	f7fe fb77 	bl	80093f8 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800ad0a:	79fb      	ldrb	r3, [r7, #7]
 800ad0c:	1e5a      	subs	r2, r3, #1
 800ad0e:	4613      	mov	r3, r2
 800ad10:	005b      	lsls	r3, r3, #1
 800ad12:	4413      	add	r3, r2
 800ad14:	009b      	lsls	r3, r3, #2
 800ad16:	4413      	add	r3, r2
 800ad18:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	82fb      	strh	r3, [r7, #22]
 800ad1e:	2300      	movs	r3, #0
 800ad20:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ad22:	8afb      	ldrh	r3, [r7, #22]
 800ad24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d007      	beq.n	800ad3c <put_lfn+0x6c>
 800ad2c:	69fb      	ldr	r3, [r7, #28]
 800ad2e:	1c5a      	adds	r2, r3, #1
 800ad30:	61fa      	str	r2, [r7, #28]
 800ad32:	005b      	lsls	r3, r3, #1
 800ad34:	68fa      	ldr	r2, [r7, #12]
 800ad36:	4413      	add	r3, r2
 800ad38:	881b      	ldrh	r3, [r3, #0]
 800ad3a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800ad3c:	4a17      	ldr	r2, [pc, #92]	; (800ad9c <put_lfn+0xcc>)
 800ad3e:	69bb      	ldr	r3, [r7, #24]
 800ad40:	4413      	add	r3, r2
 800ad42:	781b      	ldrb	r3, [r3, #0]
 800ad44:	461a      	mov	r2, r3
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	4413      	add	r3, r2
 800ad4a:	8afa      	ldrh	r2, [r7, #22]
 800ad4c:	4611      	mov	r1, r2
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f7fe fb52 	bl	80093f8 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800ad54:	8afb      	ldrh	r3, [r7, #22]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d102      	bne.n	800ad60 <put_lfn+0x90>
 800ad5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ad5e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800ad60:	69bb      	ldr	r3, [r7, #24]
 800ad62:	3301      	adds	r3, #1
 800ad64:	61bb      	str	r3, [r7, #24]
 800ad66:	69bb      	ldr	r3, [r7, #24]
 800ad68:	2b0c      	cmp	r3, #12
 800ad6a:	d9da      	bls.n	800ad22 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800ad6c:	8afb      	ldrh	r3, [r7, #22]
 800ad6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d006      	beq.n	800ad84 <put_lfn+0xb4>
 800ad76:	69fb      	ldr	r3, [r7, #28]
 800ad78:	005b      	lsls	r3, r3, #1
 800ad7a:	68fa      	ldr	r2, [r7, #12]
 800ad7c:	4413      	add	r3, r2
 800ad7e:	881b      	ldrh	r3, [r3, #0]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d103      	bne.n	800ad8c <put_lfn+0xbc>
 800ad84:	79fb      	ldrb	r3, [r7, #7]
 800ad86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad8a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	79fa      	ldrb	r2, [r7, #7]
 800ad90:	701a      	strb	r2, [r3, #0]
}
 800ad92:	bf00      	nop
 800ad94:	3720      	adds	r7, #32
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}
 800ad9a:	bf00      	nop
 800ad9c:	08010ce0 	.word	0x08010ce0

0800ada0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b08c      	sub	sp, #48	; 0x30
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	60f8      	str	r0, [r7, #12]
 800ada8:	60b9      	str	r1, [r7, #8]
 800adaa:	607a      	str	r2, [r7, #4]
 800adac:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800adae:	220b      	movs	r2, #11
 800adb0:	68b9      	ldr	r1, [r7, #8]
 800adb2:	68f8      	ldr	r0, [r7, #12]
 800adb4:	f7fe fbef 	bl	8009596 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	2b05      	cmp	r3, #5
 800adbc:	d92b      	bls.n	800ae16 <gen_numname+0x76>
		sr = seq;
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800adc2:	e022      	b.n	800ae0a <gen_numname+0x6a>
			wc = *lfn++;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	1c9a      	adds	r2, r3, #2
 800adc8:	607a      	str	r2, [r7, #4]
 800adca:	881b      	ldrh	r3, [r3, #0]
 800adcc:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800adce:	2300      	movs	r3, #0
 800add0:	62bb      	str	r3, [r7, #40]	; 0x28
 800add2:	e017      	b.n	800ae04 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800add4:	69fb      	ldr	r3, [r7, #28]
 800add6:	005a      	lsls	r2, r3, #1
 800add8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800adda:	f003 0301 	and.w	r3, r3, #1
 800adde:	4413      	add	r3, r2
 800ade0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800ade2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ade4:	085b      	lsrs	r3, r3, #1
 800ade6:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800ade8:	69fb      	ldr	r3, [r7, #28]
 800adea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d005      	beq.n	800adfe <gen_numname+0x5e>
 800adf2:	69fb      	ldr	r3, [r7, #28]
 800adf4:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800adf8:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800adfc:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800adfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae00:	3301      	adds	r3, #1
 800ae02:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae06:	2b0f      	cmp	r3, #15
 800ae08:	d9e4      	bls.n	800add4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	881b      	ldrh	r3, [r3, #0]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d1d8      	bne.n	800adc4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800ae12:	69fb      	ldr	r3, [r7, #28]
 800ae14:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800ae16:	2307      	movs	r3, #7
 800ae18:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	b2db      	uxtb	r3, r3
 800ae1e:	f003 030f 	and.w	r3, r3, #15
 800ae22:	b2db      	uxtb	r3, r3
 800ae24:	3330      	adds	r3, #48	; 0x30
 800ae26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800ae2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ae2e:	2b39      	cmp	r3, #57	; 0x39
 800ae30:	d904      	bls.n	800ae3c <gen_numname+0x9c>
 800ae32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ae36:	3307      	adds	r3, #7
 800ae38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800ae3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae3e:	1e5a      	subs	r2, r3, #1
 800ae40:	62ba      	str	r2, [r7, #40]	; 0x28
 800ae42:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ae46:	4413      	add	r3, r2
 800ae48:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ae4c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	091b      	lsrs	r3, r3, #4
 800ae54:	603b      	str	r3, [r7, #0]
	} while (seq);
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d1de      	bne.n	800ae1a <gen_numname+0x7a>
	ns[i] = '~';
 800ae5c:	f107 0214 	add.w	r2, r7, #20
 800ae60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae62:	4413      	add	r3, r2
 800ae64:	227e      	movs	r2, #126	; 0x7e
 800ae66:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800ae68:	2300      	movs	r3, #0
 800ae6a:	627b      	str	r3, [r7, #36]	; 0x24
 800ae6c:	e002      	b.n	800ae74 <gen_numname+0xd4>
 800ae6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae70:	3301      	adds	r3, #1
 800ae72:	627b      	str	r3, [r7, #36]	; 0x24
 800ae74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae78:	429a      	cmp	r2, r3
 800ae7a:	d205      	bcs.n	800ae88 <gen_numname+0xe8>
 800ae7c:	68fa      	ldr	r2, [r7, #12]
 800ae7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae80:	4413      	add	r3, r2
 800ae82:	781b      	ldrb	r3, [r3, #0]
 800ae84:	2b20      	cmp	r3, #32
 800ae86:	d1f2      	bne.n	800ae6e <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ae88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae8a:	2b07      	cmp	r3, #7
 800ae8c:	d808      	bhi.n	800aea0 <gen_numname+0x100>
 800ae8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae90:	1c5a      	adds	r2, r3, #1
 800ae92:	62ba      	str	r2, [r7, #40]	; 0x28
 800ae94:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ae98:	4413      	add	r3, r2
 800ae9a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800ae9e:	e000      	b.n	800aea2 <gen_numname+0x102>
 800aea0:	2120      	movs	r1, #32
 800aea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea4:	1c5a      	adds	r2, r3, #1
 800aea6:	627a      	str	r2, [r7, #36]	; 0x24
 800aea8:	68fa      	ldr	r2, [r7, #12]
 800aeaa:	4413      	add	r3, r2
 800aeac:	460a      	mov	r2, r1
 800aeae:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800aeb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb2:	2b07      	cmp	r3, #7
 800aeb4:	d9e8      	bls.n	800ae88 <gen_numname+0xe8>
}
 800aeb6:	bf00      	nop
 800aeb8:	bf00      	nop
 800aeba:	3730      	adds	r7, #48	; 0x30
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}

0800aec0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800aec0:	b480      	push	{r7}
 800aec2:	b085      	sub	sp, #20
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800aec8:	2300      	movs	r3, #0
 800aeca:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800aecc:	230b      	movs	r3, #11
 800aece:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800aed0:	7bfb      	ldrb	r3, [r7, #15]
 800aed2:	b2da      	uxtb	r2, r3
 800aed4:	0852      	lsrs	r2, r2, #1
 800aed6:	01db      	lsls	r3, r3, #7
 800aed8:	4313      	orrs	r3, r2
 800aeda:	b2da      	uxtb	r2, r3
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	1c59      	adds	r1, r3, #1
 800aee0:	6079      	str	r1, [r7, #4]
 800aee2:	781b      	ldrb	r3, [r3, #0]
 800aee4:	4413      	add	r3, r2
 800aee6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	3b01      	subs	r3, #1
 800aeec:	60bb      	str	r3, [r7, #8]
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d1ed      	bne.n	800aed0 <sum_sfn+0x10>
	return sum;
 800aef4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3714      	adds	r7, #20
 800aefa:	46bd      	mov	sp, r7
 800aefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af00:	4770      	bx	lr

0800af02 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800af02:	b480      	push	{r7}
 800af04:	b087      	sub	sp, #28
 800af06:	af00      	add	r7, sp, #0
 800af08:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	3301      	adds	r3, #1
 800af0e:	781b      	ldrb	r3, [r3, #0]
 800af10:	3301      	adds	r3, #1
 800af12:	015b      	lsls	r3, r3, #5
 800af14:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800af16:	2300      	movs	r3, #0
 800af18:	827b      	strh	r3, [r7, #18]
 800af1a:	2300      	movs	r3, #0
 800af1c:	617b      	str	r3, [r7, #20]
 800af1e:	e018      	b.n	800af52 <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	2b02      	cmp	r3, #2
 800af24:	d103      	bne.n	800af2e <xdir_sum+0x2c>
			i++;
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	3301      	adds	r3, #1
 800af2a:	617b      	str	r3, [r7, #20]
 800af2c:	e00e      	b.n	800af4c <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800af2e:	8a7b      	ldrh	r3, [r7, #18]
 800af30:	03db      	lsls	r3, r3, #15
 800af32:	b29a      	uxth	r2, r3
 800af34:	8a7b      	ldrh	r3, [r7, #18]
 800af36:	085b      	lsrs	r3, r3, #1
 800af38:	b29b      	uxth	r3, r3
 800af3a:	4413      	add	r3, r2
 800af3c:	b29a      	uxth	r2, r3
 800af3e:	6879      	ldr	r1, [r7, #4]
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	440b      	add	r3, r1
 800af44:	781b      	ldrb	r3, [r3, #0]
 800af46:	b29b      	uxth	r3, r3
 800af48:	4413      	add	r3, r2
 800af4a:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	3301      	adds	r3, #1
 800af50:	617b      	str	r3, [r7, #20]
 800af52:	697a      	ldr	r2, [r7, #20]
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	429a      	cmp	r2, r3
 800af58:	d3e2      	bcc.n	800af20 <xdir_sum+0x1e>
		}
	}
	return sum;
 800af5a:	8a7b      	ldrh	r3, [r7, #18]
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	371c      	adds	r7, #28
 800af60:	46bd      	mov	sp, r7
 800af62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af66:	4770      	bx	lr

0800af68 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b084      	sub	sp, #16
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800af70:	2300      	movs	r3, #0
 800af72:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800af74:	e01f      	b.n	800afb6 <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800af76:	89bb      	ldrh	r3, [r7, #12]
 800af78:	4618      	mov	r0, r3
 800af7a:	f002 fe6d 	bl	800dc58 <ff_wtoupper>
 800af7e:	4603      	mov	r3, r0
 800af80:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800af82:	89fb      	ldrh	r3, [r7, #14]
 800af84:	03db      	lsls	r3, r3, #15
 800af86:	b29a      	uxth	r2, r3
 800af88:	89fb      	ldrh	r3, [r7, #14]
 800af8a:	085b      	lsrs	r3, r3, #1
 800af8c:	b29b      	uxth	r3, r3
 800af8e:	4413      	add	r3, r2
 800af90:	b29a      	uxth	r2, r3
 800af92:	89bb      	ldrh	r3, [r7, #12]
 800af94:	b2db      	uxtb	r3, r3
 800af96:	b29b      	uxth	r3, r3
 800af98:	4413      	add	r3, r2
 800af9a:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800af9c:	89fb      	ldrh	r3, [r7, #14]
 800af9e:	03db      	lsls	r3, r3, #15
 800afa0:	b29a      	uxth	r2, r3
 800afa2:	89fb      	ldrh	r3, [r7, #14]
 800afa4:	085b      	lsrs	r3, r3, #1
 800afa6:	b29b      	uxth	r3, r3
 800afa8:	4413      	add	r3, r2
 800afaa:	b29a      	uxth	r2, r3
 800afac:	89bb      	ldrh	r3, [r7, #12]
 800afae:	0a1b      	lsrs	r3, r3, #8
 800afb0:	b29b      	uxth	r3, r3
 800afb2:	4413      	add	r3, r2
 800afb4:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	1c9a      	adds	r2, r3, #2
 800afba:	607a      	str	r2, [r7, #4]
 800afbc:	881b      	ldrh	r3, [r3, #0]
 800afbe:	81bb      	strh	r3, [r7, #12]
 800afc0:	89bb      	ldrh	r3, [r7, #12]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d1d7      	bne.n	800af76 <xname_sum+0xe>
	}
	return sum;
 800afc6:	89fb      	ldrh	r3, [r7, #14]
}
 800afc8:	4618      	mov	r0, r3
 800afca:	3710      	adds	r7, #16
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}

0800afd0 <get_xdir_info>:
static
void get_xdir_info (
	BYTE* dirb,			/* Pointer to the direcotry entry block 85+C0+C1s */
	FILINFO* fno		/* Buffer to store the extracted file information */
)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b086      	sub	sp, #24
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
 800afd8:	6039      	str	r1, [r7, #0]
#if !_LFN_UNICODE
	UINT nc;
#endif

	/* Get file name */
	di = 0;
 800afda:	2300      	movs	r3, #0
 800afdc:	617b      	str	r3, [r7, #20]
		w = ld_word(dirb + si);					/* Get a character */
		if (di >= _MAX_LFN) { di = 0; break; }	/* Buffer overflow --> inaccessible object name */
		fno->fname[di] = w;						/* Store it */
	}
#else
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800afde:	2340      	movs	r3, #64	; 0x40
 800afe0:	613b      	str	r3, [r7, #16]
 800afe2:	2300      	movs	r3, #0
 800afe4:	60fb      	str	r3, [r7, #12]
 800afe6:	e02c      	b.n	800b042 <get_xdir_info+0x72>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 800afe8:	693b      	ldr	r3, [r7, #16]
 800afea:	f003 031f 	and.w	r3, r3, #31
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d102      	bne.n	800aff8 <get_xdir_info+0x28>
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	3302      	adds	r3, #2
 800aff6:	613b      	str	r3, [r7, #16]
		w = ff_convert(ld_word(dirb + si), 0);	/* Get a character and Unicode -> OEM */
 800aff8:	687a      	ldr	r2, [r7, #4]
 800affa:	693b      	ldr	r3, [r7, #16]
 800affc:	4413      	add	r3, r2
 800affe:	4618      	mov	r0, r3
 800b000:	f7fe f904 	bl	800920c <ld_word>
 800b004:	4603      	mov	r3, r0
 800b006:	2100      	movs	r1, #0
 800b008:	4618      	mov	r0, r3
 800b00a:	f002 fde9 	bl	800dbe0 <ff_convert>
 800b00e:	4603      	mov	r3, r0
 800b010:	817b      	strh	r3, [r7, #10]
		if (_DF1S && w >= 0x100) {				/* Is it a double byte char? (always false at SBCS cfg) */
			fno->fname[di++] = (char)(w >> 8);	/* Put 1st byte of the DBC */
		}
		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 800b012:	897b      	ldrh	r3, [r7, #10]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d002      	beq.n	800b01e <get_xdir_info+0x4e>
 800b018:	697b      	ldr	r3, [r7, #20]
 800b01a:	2bfe      	cmp	r3, #254	; 0xfe
 800b01c:	d902      	bls.n	800b024 <get_xdir_info+0x54>
 800b01e:	2300      	movs	r3, #0
 800b020:	617b      	str	r3, [r7, #20]
 800b022:	e015      	b.n	800b050 <get_xdir_info+0x80>
		fno->fname[di++] = (char)w;
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	1c5a      	adds	r2, r3, #1
 800b028:	617a      	str	r2, [r7, #20]
 800b02a:	897a      	ldrh	r2, [r7, #10]
 800b02c:	b2d1      	uxtb	r1, r2
 800b02e:	683a      	ldr	r2, [r7, #0]
 800b030:	4413      	add	r3, r2
 800b032:	460a      	mov	r2, r1
 800b034:	769a      	strb	r2, [r3, #26]
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800b036:	693b      	ldr	r3, [r7, #16]
 800b038:	3302      	adds	r3, #2
 800b03a:	613b      	str	r3, [r7, #16]
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	3301      	adds	r3, #1
 800b040:	60fb      	str	r3, [r7, #12]
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	3323      	adds	r3, #35	; 0x23
 800b046:	781b      	ldrb	r3, [r3, #0]
 800b048:	461a      	mov	r2, r3
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	4293      	cmp	r3, r2
 800b04e:	d3cb      	bcc.n	800afe8 <get_xdir_info+0x18>
	}
#endif
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 800b050:	697b      	ldr	r3, [r7, #20]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d106      	bne.n	800b064 <get_xdir_info+0x94>
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	1c5a      	adds	r2, r3, #1
 800b05a:	617a      	str	r2, [r7, #20]
 800b05c:	683a      	ldr	r2, [r7, #0]
 800b05e:	4413      	add	r3, r2
 800b060:	223f      	movs	r2, #63	; 0x3f
 800b062:	769a      	strb	r2, [r3, #26]
	fno->fname[di] = 0;						/* Terminate file name */
 800b064:	683a      	ldr	r2, [r7, #0]
 800b066:	697b      	ldr	r3, [r7, #20]
 800b068:	4413      	add	r3, r2
 800b06a:	331a      	adds	r3, #26
 800b06c:	2200      	movs	r2, #0
 800b06e:	701a      	strb	r2, [r3, #0]

	fno->altname[0] = 0;							/* No SFN */
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	2200      	movs	r2, #0
 800b074:	735a      	strb	r2, [r3, #13]
	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	791a      	ldrb	r2, [r3, #4]
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	731a      	strb	r2, [r3, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	7b1b      	ldrb	r3, [r3, #12]
 800b082:	f003 0310 	and.w	r3, r3, #16
 800b086:	2b00      	cmp	r3, #0
 800b088:	d107      	bne.n	800b09a <get_xdir_info+0xca>
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	3338      	adds	r3, #56	; 0x38
 800b08e:	4618      	mov	r0, r3
 800b090:	f7fe f8f7 	bl	8009282 <ld_qword>
 800b094:	4602      	mov	r2, r0
 800b096:	460b      	mov	r3, r1
 800b098:	e003      	b.n	800b0a2 <get_xdir_info+0xd2>
 800b09a:	f04f 0200 	mov.w	r2, #0
 800b09e:	f04f 0300 	mov.w	r3, #0
 800b0a2:	6839      	ldr	r1, [r7, #0]
 800b0a4:	e9c1 2300 	strd	r2, r3, [r1]
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	330c      	adds	r3, #12
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f7fe f8ad 	bl	800920c <ld_word>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	461a      	mov	r2, r3
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	815a      	strh	r2, [r3, #10]
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	330e      	adds	r3, #14
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f7fe f8a4 	bl	800920c <ld_word>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	461a      	mov	r2, r3
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	811a      	strh	r2, [r3, #8]
}
 800b0cc:	bf00      	nop
 800b0ce:	3718      	adds	r7, #24
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800b0d4:	b590      	push	{r4, r7, lr}
 800b0d6:	b087      	sub	sp, #28
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	695b      	ldr	r3, [r3, #20]
 800b0e2:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681a      	ldr	r2, [r3, #0]
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0ec:	4619      	mov	r1, r3
 800b0ee:	4610      	mov	r0, r2
 800b0f0:	f7fe fc80 	bl	80099f4 <move_window>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800b0f8:	7bfb      	ldrb	r3, [r7, #15]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d001      	beq.n	800b102 <load_xdir+0x2e>
 800b0fe:	7bfb      	ldrb	r3, [r7, #15]
 800b100:	e09f      	b.n	800b242 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b106:	781b      	ldrb	r3, [r3, #0]
 800b108:	2b85      	cmp	r3, #133	; 0x85
 800b10a:	d001      	beq.n	800b110 <load_xdir+0x3c>
 800b10c:	2302      	movs	r3, #2
 800b10e:	e098      	b.n	800b242 <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b114:	2220      	movs	r2, #32
 800b116:	4619      	mov	r1, r3
 800b118:	6938      	ldr	r0, [r7, #16]
 800b11a:	f7fe fa3c 	bl	8009596 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800b11e:	693b      	ldr	r3, [r7, #16]
 800b120:	3301      	adds	r3, #1
 800b122:	781b      	ldrb	r3, [r3, #0]
 800b124:	3301      	adds	r3, #1
 800b126:	015b      	lsls	r3, r3, #5
 800b128:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	2b5f      	cmp	r3, #95	; 0x5f
 800b12e:	d903      	bls.n	800b138 <load_xdir+0x64>
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800b136:	d901      	bls.n	800b13c <load_xdir+0x68>
 800b138:	2302      	movs	r3, #2
 800b13a:	e082      	b.n	800b242 <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800b13c:	2100      	movs	r1, #0
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f7ff fb71 	bl	800a826 <dir_next>
 800b144:	4603      	mov	r3, r0
 800b146:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800b148:	7bfb      	ldrb	r3, [r7, #15]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d001      	beq.n	800b152 <load_xdir+0x7e>
 800b14e:	7bfb      	ldrb	r3, [r7, #15]
 800b150:	e077      	b.n	800b242 <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681a      	ldr	r2, [r3, #0]
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b15a:	4619      	mov	r1, r3
 800b15c:	4610      	mov	r0, r2
 800b15e:	f7fe fc49 	bl	80099f4 <move_window>
 800b162:	4603      	mov	r3, r0
 800b164:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800b166:	7bfb      	ldrb	r3, [r7, #15]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d001      	beq.n	800b170 <load_xdir+0x9c>
 800b16c:	7bfb      	ldrb	r3, [r7, #15]
 800b16e:	e068      	b.n	800b242 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b174:	781b      	ldrb	r3, [r3, #0]
 800b176:	2bc0      	cmp	r3, #192	; 0xc0
 800b178:	d001      	beq.n	800b17e <load_xdir+0xaa>
 800b17a:	2302      	movs	r3, #2
 800b17c:	e061      	b.n	800b242 <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800b17e:	693b      	ldr	r3, [r7, #16]
 800b180:	f103 0020 	add.w	r0, r3, #32
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b188:	2220      	movs	r2, #32
 800b18a:	4619      	mov	r1, r3
 800b18c:	f7fe fa03 	bl	8009596 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800b190:	693b      	ldr	r3, [r7, #16]
 800b192:	3323      	adds	r3, #35	; 0x23
 800b194:	781b      	ldrb	r3, [r3, #0]
 800b196:	332c      	adds	r3, #44	; 0x2c
 800b198:	4a2c      	ldr	r2, [pc, #176]	; (800b24c <load_xdir+0x178>)
 800b19a:	fba2 2303 	umull	r2, r3, r2, r3
 800b19e:	08db      	lsrs	r3, r3, #3
 800b1a0:	015b      	lsls	r3, r3, #5
 800b1a2:	68ba      	ldr	r2, [r7, #8]
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	d201      	bcs.n	800b1ac <load_xdir+0xd8>
 800b1a8:	2302      	movs	r3, #2
 800b1aa:	e04a      	b.n	800b242 <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800b1ac:	2340      	movs	r3, #64	; 0x40
 800b1ae:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800b1b0:	2100      	movs	r1, #0
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f7ff fb37 	bl	800a826 <dir_next>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800b1bc:	7bfb      	ldrb	r3, [r7, #15]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d001      	beq.n	800b1c6 <load_xdir+0xf2>
 800b1c2:	7bfb      	ldrb	r3, [r7, #15]
 800b1c4:	e03d      	b.n	800b242 <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681a      	ldr	r2, [r3, #0]
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1ce:	4619      	mov	r1, r3
 800b1d0:	4610      	mov	r0, r2
 800b1d2:	f7fe fc0f 	bl	80099f4 <move_window>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800b1da:	7bfb      	ldrb	r3, [r7, #15]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d001      	beq.n	800b1e4 <load_xdir+0x110>
 800b1e0:	7bfb      	ldrb	r3, [r7, #15]
 800b1e2:	e02e      	b.n	800b242 <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1e8:	781b      	ldrb	r3, [r3, #0]
 800b1ea:	2bc1      	cmp	r3, #193	; 0xc1
 800b1ec:	d001      	beq.n	800b1f2 <load_xdir+0x11e>
 800b1ee:	2302      	movs	r3, #2
 800b1f0:	e027      	b.n	800b242 <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800b1f2:	697b      	ldr	r3, [r7, #20]
 800b1f4:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800b1f8:	d208      	bcs.n	800b20c <load_xdir+0x138>
 800b1fa:	693a      	ldr	r2, [r7, #16]
 800b1fc:	697b      	ldr	r3, [r7, #20]
 800b1fe:	18d0      	adds	r0, r2, r3
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b204:	2220      	movs	r2, #32
 800b206:	4619      	mov	r1, r3
 800b208:	f7fe f9c5 	bl	8009596 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800b20c:	697b      	ldr	r3, [r7, #20]
 800b20e:	3320      	adds	r3, #32
 800b210:	617b      	str	r3, [r7, #20]
 800b212:	697a      	ldr	r2, [r7, #20]
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	429a      	cmp	r2, r3
 800b218:	d3ca      	bcc.n	800b1b0 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800b220:	d80e      	bhi.n	800b240 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800b222:	6938      	ldr	r0, [r7, #16]
 800b224:	f7ff fe6d 	bl	800af02 <xdir_sum>
 800b228:	4603      	mov	r3, r0
 800b22a:	461c      	mov	r4, r3
 800b22c:	693b      	ldr	r3, [r7, #16]
 800b22e:	3302      	adds	r3, #2
 800b230:	4618      	mov	r0, r3
 800b232:	f7fd ffeb 	bl	800920c <ld_word>
 800b236:	4603      	mov	r3, r0
 800b238:	429c      	cmp	r4, r3
 800b23a:	d001      	beq.n	800b240 <load_xdir+0x16c>
 800b23c:	2302      	movs	r3, #2
 800b23e:	e000      	b.n	800b242 <load_xdir+0x16e>
	}
	return FR_OK;
 800b240:	2300      	movs	r3, #0
}
 800b242:	4618      	mov	r0, r3
 800b244:	371c      	adds	r7, #28
 800b246:	46bd      	mov	sp, r7
 800b248:	bd90      	pop	{r4, r7, pc}
 800b24a:	bf00      	nop
 800b24c:	88888889 	.word	0x88888889

0800b250 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800b250:	b5b0      	push	{r4, r5, r7, lr}
 800b252:	b084      	sub	sp, #16
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
 800b258:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800b25a:	6839      	ldr	r1, [r7, #0]
 800b25c:	6808      	ldr	r0, [r1, #0]
 800b25e:	6879      	ldr	r1, [r7, #4]
 800b260:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800b262:	6839      	ldr	r1, [r7, #0]
 800b264:	6a08      	ldr	r0, [r1, #32]
 800b266:	6879      	ldr	r1, [r7, #4]
 800b268:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800b26a:	6839      	ldr	r1, [r7, #0]
 800b26c:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800b26e:	b2c8      	uxtb	r0, r1
 800b270:	6879      	ldr	r1, [r7, #4]
 800b272:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800b274:	6839      	ldr	r1, [r7, #0]
 800b276:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800b278:	4608      	mov	r0, r1
 800b27a:	f04f 0100 	mov.w	r1, #0
 800b27e:	f06f 04ff 	mvn.w	r4, #255	; 0xff
 800b282:	f04f 0500 	mov.w	r5, #0
 800b286:	ea00 0204 	and.w	r2, r0, r4
 800b28a:	ea01 0305 	and.w	r3, r1, r5
 800b28e:	6879      	ldr	r1, [r7, #4]
 800b290:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2a0:	4619      	mov	r1, r3
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f7ff fa2b 	bl	800a6fe <dir_sdi>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b2ac:	7bfb      	ldrb	r3, [r7, #15]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d104      	bne.n	800b2bc <load_obj_dir+0x6c>
		res = load_xdir(dp);		/* Load the object's entry block */
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f7ff ff0e 	bl	800b0d4 <load_xdir>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800b2bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3710      	adds	r7, #16
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bdb0      	pop	{r4, r5, r7, pc}

0800b2c6 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800b2c6:	b590      	push	{r4, r7, lr}
 800b2c8:	b087      	sub	sp, #28
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	695b      	ldr	r3, [r3, #20]
 800b2d4:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	1c9c      	adds	r4, r3, #2
 800b2da:	68f8      	ldr	r0, [r7, #12]
 800b2dc:	f7ff fe11 	bl	800af02 <xdir_sum>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	4619      	mov	r1, r3
 800b2e4:	4620      	mov	r0, r4
 800b2e6:	f7fe f887 	bl	80093f8 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	3301      	adds	r3, #1
 800b2ee:	781b      	ldrb	r3, [r3, #0]
 800b2f0:	3301      	adds	r3, #1
 800b2f2:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2f8:	4619      	mov	r1, r3
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f7ff f9ff 	bl	800a6fe <dir_sdi>
 800b300:	4603      	mov	r3, r0
 800b302:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800b304:	e026      	b.n	800b354 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681a      	ldr	r2, [r3, #0]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b30e:	4619      	mov	r1, r3
 800b310:	4610      	mov	r0, r2
 800b312:	f7fe fb6f 	bl	80099f4 <move_window>
 800b316:	4603      	mov	r3, r0
 800b318:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b31a:	7dfb      	ldrb	r3, [r7, #23]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d11d      	bne.n	800b35c <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b324:	2220      	movs	r2, #32
 800b326:	68f9      	ldr	r1, [r7, #12]
 800b328:	4618      	mov	r0, r3
 800b32a:	f7fe f934 	bl	8009596 <mem_cpy>
		dp->obj.fs->wflag = 1;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	2201      	movs	r2, #1
 800b334:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800b336:	693b      	ldr	r3, [r7, #16]
 800b338:	3b01      	subs	r3, #1
 800b33a:	613b      	str	r3, [r7, #16]
 800b33c:	693b      	ldr	r3, [r7, #16]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d00e      	beq.n	800b360 <store_xdir+0x9a>
		dirb += SZDIRE;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	3320      	adds	r3, #32
 800b346:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800b348:	2100      	movs	r1, #0
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f7ff fa6b 	bl	800a826 <dir_next>
 800b350:	4603      	mov	r3, r0
 800b352:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800b354:	7dfb      	ldrb	r3, [r7, #23]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d0d5      	beq.n	800b306 <store_xdir+0x40>
 800b35a:	e002      	b.n	800b362 <store_xdir+0x9c>
		if (res != FR_OK) break;
 800b35c:	bf00      	nop
 800b35e:	e000      	b.n	800b362 <store_xdir+0x9c>
		if (--nent == 0) break;
 800b360:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800b362:	7dfb      	ldrb	r3, [r7, #23]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d002      	beq.n	800b36e <store_xdir+0xa8>
 800b368:	7dfb      	ldrb	r3, [r7, #23]
 800b36a:	2b01      	cmp	r3, #1
 800b36c:	d101      	bne.n	800b372 <store_xdir+0xac>
 800b36e:	7dfb      	ldrb	r3, [r7, #23]
 800b370:	e000      	b.n	800b374 <store_xdir+0xae>
 800b372:	2302      	movs	r3, #2
}
 800b374:	4618      	mov	r0, r3
 800b376:	371c      	adds	r7, #28
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd90      	pop	{r4, r7, pc}

0800b37c <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800b37c:	b590      	push	{r4, r7, lr}
 800b37e:	b085      	sub	sp, #20
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
 800b384:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800b386:	2240      	movs	r2, #64	; 0x40
 800b388:	2100      	movs	r1, #0
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f7fe f924 	bl	80095d8 <mem_set>
	dirb[XDIR_Type] = 0x85;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2285      	movs	r2, #133	; 0x85
 800b394:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	3320      	adds	r3, #32
 800b39a:	22c0      	movs	r2, #192	; 0xc0
 800b39c:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	72bb      	strb	r3, [r7, #10]
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	72fb      	strb	r3, [r7, #11]
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	813b      	strh	r3, [r7, #8]
 800b3aa:	2340      	movs	r3, #64	; 0x40
 800b3ac:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	1c5a      	adds	r2, r3, #1
 800b3b2:	60fa      	str	r2, [r7, #12]
 800b3b4:	687a      	ldr	r2, [r7, #4]
 800b3b6:	4413      	add	r3, r2
 800b3b8:	22c1      	movs	r2, #193	; 0xc1
 800b3ba:	701a      	strb	r2, [r3, #0]
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	1c5a      	adds	r2, r3, #1
 800b3c0:	60fa      	str	r2, [r7, #12]
 800b3c2:	687a      	ldr	r2, [r7, #4]
 800b3c4:	4413      	add	r3, r2
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800b3ca:	893b      	ldrh	r3, [r7, #8]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d00b      	beq.n	800b3e8 <create_xdir+0x6c>
 800b3d0:	7abb      	ldrb	r3, [r7, #10]
 800b3d2:	005b      	lsls	r3, r3, #1
 800b3d4:	683a      	ldr	r2, [r7, #0]
 800b3d6:	4413      	add	r3, r2
 800b3d8:	881b      	ldrh	r3, [r3, #0]
 800b3da:	813b      	strh	r3, [r7, #8]
 800b3dc:	893b      	ldrh	r3, [r7, #8]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d002      	beq.n	800b3e8 <create_xdir+0x6c>
 800b3e2:	7abb      	ldrb	r3, [r7, #10]
 800b3e4:	3301      	adds	r3, #1
 800b3e6:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800b3e8:	687a      	ldr	r2, [r7, #4]
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	4413      	add	r3, r2
 800b3ee:	893a      	ldrh	r2, [r7, #8]
 800b3f0:	4611      	mov	r1, r2
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f7fe f800 	bl	80093f8 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	3302      	adds	r3, #2
 800b3fc:	60fb      	str	r3, [r7, #12]
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	f003 031f 	and.w	r3, r3, #31
 800b404:	2b00      	cmp	r3, #0
 800b406:	d1e0      	bne.n	800b3ca <create_xdir+0x4e>
		nb++;
 800b408:	7afb      	ldrb	r3, [r7, #11]
 800b40a:	3301      	adds	r3, #1
 800b40c:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800b40e:	7abb      	ldrb	r3, [r7, #10]
 800b410:	005b      	lsls	r3, r3, #1
 800b412:	683a      	ldr	r2, [r7, #0]
 800b414:	4413      	add	r3, r2
 800b416:	881b      	ldrh	r3, [r3, #0]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d1c8      	bne.n	800b3ae <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	3323      	adds	r3, #35	; 0x23
 800b420:	7aba      	ldrb	r2, [r7, #10]
 800b422:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	3301      	adds	r3, #1
 800b428:	7afa      	ldrb	r2, [r7, #11]
 800b42a:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800b432:	6838      	ldr	r0, [r7, #0]
 800b434:	f7ff fd98 	bl	800af68 <xname_sum>
 800b438:	4603      	mov	r3, r0
 800b43a:	4619      	mov	r1, r3
 800b43c:	4620      	mov	r0, r4
 800b43e:	f7fd ffdb 	bl	80093f8 <st_word>
}
 800b442:	bf00      	nop
 800b444:	3714      	adds	r7, #20
 800b446:	46bd      	mov	sp, r7
 800b448:	bd90      	pop	{r4, r7, pc}

0800b44a <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800b44a:	b580      	push	{r7, lr}
 800b44c:	b086      	sub	sp, #24
 800b44e:	af00      	add	r7, sp, #0
 800b450:	6078      	str	r0, [r7, #4]
 800b452:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800b454:	2304      	movs	r3, #4
 800b456:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800b45e:	23ff      	movs	r3, #255	; 0xff
 800b460:	757b      	strb	r3, [r7, #21]
 800b462:	23ff      	movs	r3, #255	; 0xff
 800b464:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800b466:	e09f      	b.n	800b5a8 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b46c:	4619      	mov	r1, r3
 800b46e:	6938      	ldr	r0, [r7, #16]
 800b470:	f7fe fac0 	bl	80099f4 <move_window>
 800b474:	4603      	mov	r3, r0
 800b476:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b478:	7dfb      	ldrb	r3, [r7, #23]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	f040 809a 	bne.w	800b5b4 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b484:	781b      	ldrb	r3, [r3, #0]
 800b486:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800b488:	7dbb      	ldrb	r3, [r7, #22]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d102      	bne.n	800b494 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800b48e:	2304      	movs	r3, #4
 800b490:	75fb      	strb	r3, [r7, #23]
 800b492:	e096      	b.n	800b5c2 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800b494:	693b      	ldr	r3, [r7, #16]
 800b496:	781b      	ldrb	r3, [r3, #0]
 800b498:	2b04      	cmp	r3, #4
 800b49a:	d118      	bne.n	800b4ce <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800b49c:	7dbb      	ldrb	r3, [r7, #22]
 800b49e:	2b85      	cmp	r3, #133	; 0x85
 800b4a0:	d179      	bne.n	800b596 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f7ff fe12 	bl	800b0d4 <load_xdir>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800b4b4:	7dfb      	ldrb	r3, [r7, #23]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d17e      	bne.n	800b5b8 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800b4ba:	693b      	ldr	r3, [r7, #16]
 800b4bc:	695b      	ldr	r3, [r3, #20]
 800b4be:	3304      	adds	r3, #4
 800b4c0:	781b      	ldrb	r3, [r3, #0]
 800b4c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b4c6:	b2da      	uxtb	r2, r3
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	719a      	strb	r2, [r3, #6]
					}
					break;
 800b4cc:	e074      	b.n	800b5b8 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4d2:	330b      	adds	r3, #11
 800b4d4:	781b      	ldrb	r3, [r3, #0]
 800b4d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b4da:	73fb      	strb	r3, [r7, #15]
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	7bfa      	ldrb	r2, [r7, #15]
 800b4e0:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800b4e2:	7dbb      	ldrb	r3, [r7, #22]
 800b4e4:	2be5      	cmp	r3, #229	; 0xe5
 800b4e6:	d00e      	beq.n	800b506 <dir_read+0xbc>
 800b4e8:	7dbb      	ldrb	r3, [r7, #22]
 800b4ea:	2b2e      	cmp	r3, #46	; 0x2e
 800b4ec:	d00b      	beq.n	800b506 <dir_read+0xbc>
 800b4ee:	7bfb      	ldrb	r3, [r7, #15]
 800b4f0:	f023 0320 	bic.w	r3, r3, #32
 800b4f4:	2b08      	cmp	r3, #8
 800b4f6:	bf0c      	ite	eq
 800b4f8:	2301      	moveq	r3, #1
 800b4fa:	2300      	movne	r3, #0
 800b4fc:	b2db      	uxtb	r3, r3
 800b4fe:	461a      	mov	r2, r3
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	4293      	cmp	r3, r2
 800b504:	d002      	beq.n	800b50c <dir_read+0xc2>
				ord = 0xFF;
 800b506:	23ff      	movs	r3, #255	; 0xff
 800b508:	757b      	strb	r3, [r7, #21]
 800b50a:	e044      	b.n	800b596 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800b50c:	7bfb      	ldrb	r3, [r7, #15]
 800b50e:	2b0f      	cmp	r3, #15
 800b510:	d12f      	bne.n	800b572 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800b512:	7dbb      	ldrb	r3, [r7, #22]
 800b514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d00d      	beq.n	800b538 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b520:	7b5b      	ldrb	r3, [r3, #13]
 800b522:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800b524:	7dbb      	ldrb	r3, [r7, #22]
 800b526:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b52a:	75bb      	strb	r3, [r7, #22]
 800b52c:	7dbb      	ldrb	r3, [r7, #22]
 800b52e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b538:	7dba      	ldrb	r2, [r7, #22]
 800b53a:	7d7b      	ldrb	r3, [r7, #21]
 800b53c:	429a      	cmp	r2, r3
 800b53e:	d115      	bne.n	800b56c <dir_read+0x122>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b544:	330d      	adds	r3, #13
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	7d3a      	ldrb	r2, [r7, #20]
 800b54a:	429a      	cmp	r2, r3
 800b54c:	d10e      	bne.n	800b56c <dir_read+0x122>
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	691a      	ldr	r2, [r3, #16]
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b556:	4619      	mov	r1, r3
 800b558:	4610      	mov	r0, r2
 800b55a:	f7ff fb55 	bl	800ac08 <pick_lfn>
 800b55e:	4603      	mov	r3, r0
 800b560:	2b00      	cmp	r3, #0
 800b562:	d003      	beq.n	800b56c <dir_read+0x122>
 800b564:	7d7b      	ldrb	r3, [r7, #21]
 800b566:	3b01      	subs	r3, #1
 800b568:	b2db      	uxtb	r3, r3
 800b56a:	e000      	b.n	800b56e <dir_read+0x124>
 800b56c:	23ff      	movs	r3, #255	; 0xff
 800b56e:	757b      	strb	r3, [r7, #21]
 800b570:	e011      	b.n	800b596 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800b572:	7d7b      	ldrb	r3, [r7, #21]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d109      	bne.n	800b58c <dir_read+0x142>
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b57c:	4618      	mov	r0, r3
 800b57e:	f7ff fc9f 	bl	800aec0 <sum_sfn>
 800b582:	4603      	mov	r3, r0
 800b584:	461a      	mov	r2, r3
 800b586:	7d3b      	ldrb	r3, [r7, #20]
 800b588:	4293      	cmp	r3, r2
 800b58a:	d017      	beq.n	800b5bc <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f04f 32ff 	mov.w	r2, #4294967295
 800b592:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 800b594:	e012      	b.n	800b5bc <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800b596:	2100      	movs	r1, #0
 800b598:	6878      	ldr	r0, [r7, #4]
 800b59a:	f7ff f944 	bl	800a826 <dir_next>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b5a2:	7dfb      	ldrb	r3, [r7, #23]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d10b      	bne.n	800b5c0 <dir_read+0x176>
	while (dp->sect) {
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	f47f af5b 	bne.w	800b468 <dir_read+0x1e>
 800b5b2:	e006      	b.n	800b5c2 <dir_read+0x178>
		if (res != FR_OK) break;
 800b5b4:	bf00      	nop
 800b5b6:	e004      	b.n	800b5c2 <dir_read+0x178>
					break;
 800b5b8:	bf00      	nop
 800b5ba:	e002      	b.n	800b5c2 <dir_read+0x178>
					break;
 800b5bc:	bf00      	nop
 800b5be:	e000      	b.n	800b5c2 <dir_read+0x178>
		if (res != FR_OK) break;
 800b5c0:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800b5c2:	7dfb      	ldrb	r3, [r7, #23]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d002      	beq.n	800b5ce <dir_read+0x184>
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 800b5ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	3718      	adds	r7, #24
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}

0800b5d8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b5d8:	b590      	push	{r4, r7, lr}
 800b5da:	b089      	sub	sp, #36	; 0x24
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b5e6:	2100      	movs	r1, #0
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f7ff f888 	bl	800a6fe <dir_sdi>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800b5f2:	7ffb      	ldrb	r3, [r7, #31]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d001      	beq.n	800b5fc <dir_find+0x24>
 800b5f8:	7ffb      	ldrb	r3, [r7, #31]
 800b5fa:	e112      	b.n	800b822 <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	781b      	ldrb	r3, [r3, #0]
 800b600:	2b04      	cmp	r3, #4
 800b602:	d164      	bne.n	800b6ce <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	691b      	ldr	r3, [r3, #16]
 800b608:	4618      	mov	r0, r3
 800b60a:	f7ff fcad 	bl	800af68 <xname_sum>
 800b60e:	4603      	mov	r3, r0
 800b610:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800b612:	e04f      	b.n	800b6b4 <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	695b      	ldr	r3, [r3, #20]
 800b618:	3324      	adds	r3, #36	; 0x24
 800b61a:	4618      	mov	r0, r3
 800b61c:	f7fd fdf6 	bl	800920c <ld_word>
 800b620:	4603      	mov	r3, r0
 800b622:	461a      	mov	r2, r3
 800b624:	893b      	ldrh	r3, [r7, #8]
 800b626:	4293      	cmp	r3, r2
 800b628:	d000      	beq.n	800b62c <dir_find+0x54>
 800b62a:	e043      	b.n	800b6b4 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	695b      	ldr	r3, [r3, #20]
 800b630:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800b634:	76fb      	strb	r3, [r7, #27]
 800b636:	2340      	movs	r3, #64	; 0x40
 800b638:	617b      	str	r3, [r7, #20]
 800b63a:	2300      	movs	r3, #0
 800b63c:	613b      	str	r3, [r7, #16]
 800b63e:	e029      	b.n	800b694 <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 800b640:	697b      	ldr	r3, [r7, #20]
 800b642:	f003 031f 	and.w	r3, r3, #31
 800b646:	2b00      	cmp	r3, #0
 800b648:	d102      	bne.n	800b650 <dir_find+0x78>
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	3302      	adds	r3, #2
 800b64e:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	695a      	ldr	r2, [r3, #20]
 800b654:	697b      	ldr	r3, [r7, #20]
 800b656:	4413      	add	r3, r2
 800b658:	4618      	mov	r0, r3
 800b65a:	f7fd fdd7 	bl	800920c <ld_word>
 800b65e:	4603      	mov	r3, r0
 800b660:	4618      	mov	r0, r3
 800b662:	f002 faf9 	bl	800dc58 <ff_wtoupper>
 800b666:	4603      	mov	r3, r0
 800b668:	461c      	mov	r4, r3
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	691a      	ldr	r2, [r3, #16]
 800b66e:	693b      	ldr	r3, [r7, #16]
 800b670:	005b      	lsls	r3, r3, #1
 800b672:	4413      	add	r3, r2
 800b674:	881b      	ldrh	r3, [r3, #0]
 800b676:	4618      	mov	r0, r3
 800b678:	f002 faee 	bl	800dc58 <ff_wtoupper>
 800b67c:	4603      	mov	r3, r0
 800b67e:	429c      	cmp	r4, r3
 800b680:	d10c      	bne.n	800b69c <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800b682:	7efb      	ldrb	r3, [r7, #27]
 800b684:	3b01      	subs	r3, #1
 800b686:	76fb      	strb	r3, [r7, #27]
 800b688:	697b      	ldr	r3, [r7, #20]
 800b68a:	3302      	adds	r3, #2
 800b68c:	617b      	str	r3, [r7, #20]
 800b68e:	693b      	ldr	r3, [r7, #16]
 800b690:	3301      	adds	r3, #1
 800b692:	613b      	str	r3, [r7, #16]
 800b694:	7efb      	ldrb	r3, [r7, #27]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d1d2      	bne.n	800b640 <dir_find+0x68>
 800b69a:	e000      	b.n	800b69e <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800b69c:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800b69e:	7efb      	ldrb	r3, [r7, #27]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d107      	bne.n	800b6b4 <dir_find+0xdc>
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	691a      	ldr	r2, [r3, #16]
 800b6a8:	693b      	ldr	r3, [r7, #16]
 800b6aa:	005b      	lsls	r3, r3, #1
 800b6ac:	4413      	add	r3, r2
 800b6ae:	881b      	ldrh	r3, [r3, #0]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d009      	beq.n	800b6c8 <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800b6b4:	2100      	movs	r1, #0
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f7ff fec7 	bl	800b44a <dir_read>
 800b6bc:	4603      	mov	r3, r0
 800b6be:	77fb      	strb	r3, [r7, #31]
 800b6c0:	7ffb      	ldrb	r3, [r7, #31]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d0a6      	beq.n	800b614 <dir_find+0x3c>
 800b6c6:	e000      	b.n	800b6ca <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800b6c8:	bf00      	nop
		}
		return res;
 800b6ca:	7ffb      	ldrb	r3, [r7, #31]
 800b6cc:	e0a9      	b.n	800b822 <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b6ce:	23ff      	movs	r3, #255	; 0xff
 800b6d0:	773b      	strb	r3, [r7, #28]
 800b6d2:	7f3b      	ldrb	r3, [r7, #28]
 800b6d4:	777b      	strb	r3, [r7, #29]
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f04f 32ff 	mov.w	r2, #4294967295
 800b6dc:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6e2:	4619      	mov	r1, r3
 800b6e4:	68f8      	ldr	r0, [r7, #12]
 800b6e6:	f7fe f985 	bl	80099f4 <move_window>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800b6ee:	7ffb      	ldrb	r3, [r7, #31]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	f040 8090 	bne.w	800b816 <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6fa:	781b      	ldrb	r3, [r3, #0]
 800b6fc:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b6fe:	7fbb      	ldrb	r3, [r7, #30]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d102      	bne.n	800b70a <dir_find+0x132>
 800b704:	2304      	movs	r3, #4
 800b706:	77fb      	strb	r3, [r7, #31]
 800b708:	e08a      	b.n	800b820 <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b70e:	330b      	adds	r3, #11
 800b710:	781b      	ldrb	r3, [r3, #0]
 800b712:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b716:	72fb      	strb	r3, [r7, #11]
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	7afa      	ldrb	r2, [r7, #11]
 800b71c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800b71e:	7fbb      	ldrb	r3, [r7, #30]
 800b720:	2be5      	cmp	r3, #229	; 0xe5
 800b722:	d007      	beq.n	800b734 <dir_find+0x15c>
 800b724:	7afb      	ldrb	r3, [r7, #11]
 800b726:	f003 0308 	and.w	r3, r3, #8
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d009      	beq.n	800b742 <dir_find+0x16a>
 800b72e:	7afb      	ldrb	r3, [r7, #11]
 800b730:	2b0f      	cmp	r3, #15
 800b732:	d006      	beq.n	800b742 <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b734:	23ff      	movs	r3, #255	; 0xff
 800b736:	777b      	strb	r3, [r7, #29]
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f04f 32ff 	mov.w	r2, #4294967295
 800b73e:	64da      	str	r2, [r3, #76]	; 0x4c
 800b740:	e05e      	b.n	800b800 <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800b742:	7afb      	ldrb	r3, [r7, #11]
 800b744:	2b0f      	cmp	r3, #15
 800b746:	d136      	bne.n	800b7b6 <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800b74e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b752:	2b00      	cmp	r3, #0
 800b754:	d154      	bne.n	800b800 <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800b756:	7fbb      	ldrb	r3, [r7, #30]
 800b758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d00d      	beq.n	800b77c <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b764:	7b5b      	ldrb	r3, [r3, #13]
 800b766:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800b768:	7fbb      	ldrb	r3, [r7, #30]
 800b76a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b76e:	77bb      	strb	r3, [r7, #30]
 800b770:	7fbb      	ldrb	r3, [r7, #30]
 800b772:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b77c:	7fba      	ldrb	r2, [r7, #30]
 800b77e:	7f7b      	ldrb	r3, [r7, #29]
 800b780:	429a      	cmp	r2, r3
 800b782:	d115      	bne.n	800b7b0 <dir_find+0x1d8>
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b788:	330d      	adds	r3, #13
 800b78a:	781b      	ldrb	r3, [r3, #0]
 800b78c:	7f3a      	ldrb	r2, [r7, #28]
 800b78e:	429a      	cmp	r2, r3
 800b790:	d10e      	bne.n	800b7b0 <dir_find+0x1d8>
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	691a      	ldr	r2, [r3, #16]
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b79a:	4619      	mov	r1, r3
 800b79c:	4610      	mov	r0, r2
 800b79e:	f7ff f9c3 	bl	800ab28 <cmp_lfn>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d003      	beq.n	800b7b0 <dir_find+0x1d8>
 800b7a8:	7f7b      	ldrb	r3, [r7, #29]
 800b7aa:	3b01      	subs	r3, #1
 800b7ac:	b2db      	uxtb	r3, r3
 800b7ae:	e000      	b.n	800b7b2 <dir_find+0x1da>
 800b7b0:	23ff      	movs	r3, #255	; 0xff
 800b7b2:	777b      	strb	r3, [r7, #29]
 800b7b4:	e024      	b.n	800b800 <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b7b6:	7f7b      	ldrb	r3, [r7, #29]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d109      	bne.n	800b7d0 <dir_find+0x1f8>
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	f7ff fb7d 	bl	800aec0 <sum_sfn>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	461a      	mov	r2, r3
 800b7ca:	7f3b      	ldrb	r3, [r7, #28]
 800b7cc:	4293      	cmp	r3, r2
 800b7ce:	d024      	beq.n	800b81a <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800b7d6:	f003 0301 	and.w	r3, r3, #1
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d10a      	bne.n	800b7f4 <dir_find+0x21c>
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	3340      	adds	r3, #64	; 0x40
 800b7e6:	220b      	movs	r2, #11
 800b7e8:	4619      	mov	r1, r3
 800b7ea:	f7fd ff10 	bl	800960e <mem_cmp>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d014      	beq.n	800b81e <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b7f4:	23ff      	movs	r3, #255	; 0xff
 800b7f6:	777b      	strb	r3, [r7, #29]
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f04f 32ff 	mov.w	r2, #4294967295
 800b7fe:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b800:	2100      	movs	r1, #0
 800b802:	6878      	ldr	r0, [r7, #4]
 800b804:	f7ff f80f 	bl	800a826 <dir_next>
 800b808:	4603      	mov	r3, r0
 800b80a:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800b80c:	7ffb      	ldrb	r3, [r7, #31]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	f43f af65 	beq.w	800b6de <dir_find+0x106>
 800b814:	e004      	b.n	800b820 <dir_find+0x248>
		if (res != FR_OK) break;
 800b816:	bf00      	nop
 800b818:	e002      	b.n	800b820 <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b81a:	bf00      	nop
 800b81c:	e000      	b.n	800b820 <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b81e:	bf00      	nop

	return res;
 800b820:	7ffb      	ldrb	r3, [r7, #31]
}
 800b822:	4618      	mov	r0, r3
 800b824:	3724      	adds	r7, #36	; 0x24
 800b826:	46bd      	mov	sp, r7
 800b828:	bd90      	pop	{r4, r7, pc}
	...

0800b82c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b82c:	b5b0      	push	{r4, r5, r7, lr}
 800b82e:	b0a0      	sub	sp, #128	; 0x80
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800b840:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800b844:	2b00      	cmp	r3, #0
 800b846:	d001      	beq.n	800b84c <dir_register+0x20>
 800b848:	2306      	movs	r3, #6
 800b84a:	e18c      	b.n	800bb66 <dir_register+0x33a>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800b84c:	2300      	movs	r3, #0
 800b84e:	677b      	str	r3, [r7, #116]	; 0x74
 800b850:	e002      	b.n	800b858 <dir_register+0x2c>
 800b852:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b854:	3301      	adds	r3, #1
 800b856:	677b      	str	r3, [r7, #116]	; 0x74
 800b858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b85a:	691a      	ldr	r2, [r3, #16]
 800b85c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b85e:	005b      	lsls	r3, r3, #1
 800b860:	4413      	add	r3, r2
 800b862:	881b      	ldrh	r3, [r3, #0]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d1f4      	bne.n	800b852 <dir_register+0x26>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800b868:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b86a:	781b      	ldrb	r3, [r3, #0]
 800b86c:	2b04      	cmp	r3, #4
 800b86e:	f040 80a2 	bne.w	800b9b6 <dir_register+0x18a>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800b872:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b874:	330e      	adds	r3, #14
 800b876:	4abe      	ldr	r2, [pc, #760]	; (800bb70 <dir_register+0x344>)
 800b878:	fba2 2303 	umull	r2, r3, r2, r3
 800b87c:	08db      	lsrs	r3, r3, #3
 800b87e:	3302      	adds	r3, #2
 800b880:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800b882:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	f7ff f8b4 	bl	800a9f2 <dir_alloc>
 800b88a:	4603      	mov	r3, r0
 800b88c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 800b890:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b894:	2b00      	cmp	r3, #0
 800b896:	d002      	beq.n	800b89e <dir_register+0x72>
 800b898:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b89c:	e163      	b.n	800bb66 <dir_register+0x33a>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b8a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b8a4:	3b01      	subs	r3, #1
 800b8a6:	015b      	lsls	r3, r3, #5
 800b8a8:	1ad2      	subs	r2, r2, r3
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	689b      	ldr	r3, [r3, #8]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d075      	beq.n	800b9a2 <dir_register+0x176>
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	79db      	ldrb	r3, [r3, #7]
 800b8ba:	f003 0304 	and.w	r3, r3, #4
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d06f      	beq.n	800b9a2 <dir_register+0x176>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800b8c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8ca:	895b      	ldrh	r3, [r3, #10]
 800b8cc:	461a      	mov	r2, r3
 800b8ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8d0:	899b      	ldrh	r3, [r3, #12]
 800b8d2:	fb03 f302 	mul.w	r3, r3, r2
 800b8d6:	461a      	mov	r2, r3
 800b8d8:	f04f 0300 	mov.w	r3, #0
 800b8dc:	1884      	adds	r4, r0, r2
 800b8de:	eb41 0503 	adc.w	r5, r1, r3
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	e9c3 4504 	strd	r4, r5, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f7fe fcae 	bl	800a24c <fill_first_frag>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800b8f6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d002      	beq.n	800b904 <dir_register+0xd8>
 800b8fe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b902:	e130      	b.n	800bb66 <dir_register+0x33a>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b90a:	f04f 32ff 	mov.w	r2, #4294967295
 800b90e:	4619      	mov	r1, r3
 800b910:	f7fe fccb 	bl	800a2aa <fill_last_frag>
 800b914:	4603      	mov	r3, r0
 800b916:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800b91a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d002      	beq.n	800b928 <dir_register+0xfc>
 800b922:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b926:	e11e      	b.n	800bb66 <dir_register+0x33a>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800b928:	687a      	ldr	r2, [r7, #4]
 800b92a:	f107 0308 	add.w	r3, r7, #8
 800b92e:	4611      	mov	r1, r2
 800b930:	4618      	mov	r0, r3
 800b932:	f7ff fc8d 	bl	800b250 <load_obj_dir>
 800b936:	4603      	mov	r3, r0
 800b938:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800b93c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b940:	2b00      	cmp	r3, #0
 800b942:	d002      	beq.n	800b94a <dir_register+0x11e>
 800b944:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b948:	e10d      	b.n	800bb66 <dir_register+0x33a>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800b94a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b94c:	695b      	ldr	r3, [r3, #20]
 800b94e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b958:	4608      	mov	r0, r1
 800b95a:	f7fd fd94 	bl	8009486 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800b95e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b960:	695b      	ldr	r3, [r3, #20]
 800b962:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b96c:	4608      	mov	r0, r1
 800b96e:	f7fd fd8a 	bl	8009486 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	79da      	ldrb	r2, [r3, #7]
 800b976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b978:	695b      	ldr	r3, [r3, #20]
 800b97a:	3321      	adds	r3, #33	; 0x21
 800b97c:	f042 0201 	orr.w	r2, r2, #1
 800b980:	b2d2      	uxtb	r2, r2
 800b982:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800b984:	f107 0308 	add.w	r3, r7, #8
 800b988:	4618      	mov	r0, r3
 800b98a:	f7ff fc9c 	bl	800b2c6 <store_xdir>
 800b98e:	4603      	mov	r3, r0
 800b990:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800b994:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d002      	beq.n	800b9a2 <dir_register+0x176>
 800b99c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b9a0:	e0e1      	b.n	800bb66 <dir_register+0x33a>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800b9a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b9a4:	695a      	ldr	r2, [r3, #20]
 800b9a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b9a8:	691b      	ldr	r3, [r3, #16]
 800b9aa:	4619      	mov	r1, r3
 800b9ac:	4610      	mov	r0, r2
 800b9ae:	f7ff fce5 	bl	800b37c <create_xdir>
		return FR_OK;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	e0d7      	b.n	800bb66 <dir_register+0x33a>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800b9bc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800b9c0:	220c      	movs	r2, #12
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f7fd fde7 	bl	8009596 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800b9c8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b9cc:	f003 0301 	and.w	r3, r3, #1
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d033      	beq.n	800ba3c <dir_register+0x210>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2240      	movs	r2, #64	; 0x40
 800b9d8:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 800b9dc:	2301      	movs	r3, #1
 800b9de:	67bb      	str	r3, [r7, #120]	; 0x78
 800b9e0:	e016      	b.n	800ba10 <dir_register+0x1e4>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800b9e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b9ea:	691a      	ldr	r2, [r3, #16]
 800b9ec:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800b9f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b9f2:	f7ff f9d5 	bl	800ada0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f7ff fdee 	bl	800b5d8 <dir_find>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 800ba02:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d106      	bne.n	800ba18 <dir_register+0x1ec>
		for (n = 1; n < 100; n++) {
 800ba0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba0c:	3301      	adds	r3, #1
 800ba0e:	67bb      	str	r3, [r7, #120]	; 0x78
 800ba10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba12:	2b63      	cmp	r3, #99	; 0x63
 800ba14:	d9e5      	bls.n	800b9e2 <dir_register+0x1b6>
 800ba16:	e000      	b.n	800ba1a <dir_register+0x1ee>
			if (res != FR_OK) break;
 800ba18:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800ba1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba1c:	2b64      	cmp	r3, #100	; 0x64
 800ba1e:	d101      	bne.n	800ba24 <dir_register+0x1f8>
 800ba20:	2307      	movs	r3, #7
 800ba22:	e0a0      	b.n	800bb66 <dir_register+0x33a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800ba24:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ba28:	2b04      	cmp	r3, #4
 800ba2a:	d002      	beq.n	800ba32 <dir_register+0x206>
 800ba2c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ba30:	e099      	b.n	800bb66 <dir_register+0x33a>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800ba32:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800ba3c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ba40:	f003 0302 	and.w	r3, r3, #2
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d007      	beq.n	800ba58 <dir_register+0x22c>
 800ba48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ba4a:	330c      	adds	r3, #12
 800ba4c:	4a49      	ldr	r2, [pc, #292]	; (800bb74 <dir_register+0x348>)
 800ba4e:	fba2 2303 	umull	r2, r3, r2, r3
 800ba52:	089b      	lsrs	r3, r3, #2
 800ba54:	3301      	adds	r3, #1
 800ba56:	e000      	b.n	800ba5a <dir_register+0x22e>
 800ba58:	2301      	movs	r3, #1
 800ba5a:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800ba5c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	f7fe ffc7 	bl	800a9f2 <dir_alloc>
 800ba64:	4603      	mov	r3, r0
 800ba66:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800ba6a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d14a      	bne.n	800bb08 <dir_register+0x2dc>
 800ba72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba74:	3b01      	subs	r3, #1
 800ba76:	673b      	str	r3, [r7, #112]	; 0x70
 800ba78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d044      	beq.n	800bb08 <dir_register+0x2dc>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba84:	015b      	lsls	r3, r3, #5
 800ba86:	1ad3      	subs	r3, r2, r3
 800ba88:	4619      	mov	r1, r3
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	f7fe fe37 	bl	800a6fe <dir_sdi>
 800ba90:	4603      	mov	r3, r0
 800ba92:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800ba96:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d134      	bne.n	800bb08 <dir_register+0x2dc>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	3340      	adds	r3, #64	; 0x40
 800baa2:	4618      	mov	r0, r3
 800baa4:	f7ff fa0c 	bl	800aec0 <sum_sfn>
 800baa8:	4603      	mov	r3, r0
 800baaa:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bab2:	4619      	mov	r1, r3
 800bab4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800bab6:	f7fd ff9d 	bl	80099f4 <move_window>
 800baba:	4603      	mov	r3, r0
 800babc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 800bac0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d11e      	bne.n	800bb06 <dir_register+0x2da>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800bac8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800baca:	6918      	ldr	r0, [r3, #16]
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800bad0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bad2:	b2da      	uxtb	r2, r3
 800bad4:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800bad8:	f7ff f8fa 	bl	800acd0 <put_lfn>
				fs->wflag = 1;
 800badc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bade:	2201      	movs	r2, #1
 800bae0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800bae2:	2100      	movs	r1, #0
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	f7fe fe9e 	bl	800a826 <dir_next>
 800baea:	4603      	mov	r3, r0
 800baec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 800baf0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d107      	bne.n	800bb08 <dir_register+0x2dc>
 800baf8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bafa:	3b01      	subs	r3, #1
 800bafc:	673b      	str	r3, [r7, #112]	; 0x70
 800bafe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d1d4      	bne.n	800baae <dir_register+0x282>
 800bb04:	e000      	b.n	800bb08 <dir_register+0x2dc>
				if (res != FR_OK) break;
 800bb06:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800bb08:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d128      	bne.n	800bb62 <dir_register+0x336>
		res = move_window(fs, dp->sect);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb14:	4619      	mov	r1, r3
 800bb16:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800bb18:	f7fd ff6c 	bl	80099f4 <move_window>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800bb22:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d11b      	bne.n	800bb62 <dir_register+0x336>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb2e:	2220      	movs	r2, #32
 800bb30:	2100      	movs	r1, #0
 800bb32:	4618      	mov	r0, r3
 800bb34:	f7fd fd50 	bl	80095d8 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	3340      	adds	r3, #64	; 0x40
 800bb40:	220b      	movs	r2, #11
 800bb42:	4619      	mov	r1, r3
 800bb44:	f7fd fd27 	bl	8009596 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb52:	330c      	adds	r3, #12
 800bb54:	f002 0218 	and.w	r2, r2, #24
 800bb58:	b2d2      	uxtb	r2, r2
 800bb5a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800bb5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb5e:	2201      	movs	r2, #1
 800bb60:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800bb62:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3780      	adds	r7, #128	; 0x80
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bdb0      	pop	{r4, r5, r7, pc}
 800bb6e:	bf00      	nop
 800bb70:	88888889 	.word	0x88888889
 800bb74:	4ec4ec4f 	.word	0x4ec4ec4f

0800bb78 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b088      	sub	sp, #32
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
 800bb80:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	769a      	strb	r2, [r3, #26]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	f000 80d8 	beq.w	800bd48 <get_fileinfo+0x1d0>

#if _USE_LFN != 0	/* LFN configuration */
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800bb98:	693b      	ldr	r3, [r7, #16]
 800bb9a:	781b      	ldrb	r3, [r3, #0]
 800bb9c:	2b04      	cmp	r3, #4
 800bb9e:	d106      	bne.n	800bbae <get_fileinfo+0x36>
		get_xdir_info(fs->dirbuf, fno);
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	695b      	ldr	r3, [r3, #20]
 800bba4:	6839      	ldr	r1, [r7, #0]
 800bba6:	4618      	mov	r0, r3
 800bba8:	f7ff fa12 	bl	800afd0 <get_xdir_info>
		return;
 800bbac:	e0cd      	b.n	800bd4a <get_fileinfo+0x1d2>
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbb6:	d032      	beq.n	800bc1e <get_fileinfo+0xa6>
			i = j = 0;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	61bb      	str	r3, [r7, #24]
 800bbbc:	69bb      	ldr	r3, [r7, #24]
 800bbbe:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800bbc0:	e01b      	b.n	800bbfa <get_fileinfo+0x82>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800bbc2:	89fb      	ldrh	r3, [r7, #14]
 800bbc4:	2100      	movs	r1, #0
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f002 f80a 	bl	800dbe0 <ff_convert>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800bbd0:	89fb      	ldrh	r3, [r7, #14]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d102      	bne.n	800bbdc <get_fileinfo+0x64>
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	61fb      	str	r3, [r7, #28]
 800bbda:	e01a      	b.n	800bc12 <get_fileinfo+0x9a>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800bbdc:	69fb      	ldr	r3, [r7, #28]
 800bbde:	2bfe      	cmp	r3, #254	; 0xfe
 800bbe0:	d902      	bls.n	800bbe8 <get_fileinfo+0x70>
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	61fb      	str	r3, [r7, #28]
 800bbe6:	e014      	b.n	800bc12 <get_fileinfo+0x9a>
				fno->fname[i++] = (TCHAR)w;
 800bbe8:	69fb      	ldr	r3, [r7, #28]
 800bbea:	1c5a      	adds	r2, r3, #1
 800bbec:	61fa      	str	r2, [r7, #28]
 800bbee:	89fa      	ldrh	r2, [r7, #14]
 800bbf0:	b2d1      	uxtb	r1, r2
 800bbf2:	683a      	ldr	r2, [r7, #0]
 800bbf4:	4413      	add	r3, r2
 800bbf6:	460a      	mov	r2, r1
 800bbf8:	769a      	strb	r2, [r3, #26]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800bbfa:	693b      	ldr	r3, [r7, #16]
 800bbfc:	691a      	ldr	r2, [r3, #16]
 800bbfe:	69bb      	ldr	r3, [r7, #24]
 800bc00:	1c59      	adds	r1, r3, #1
 800bc02:	61b9      	str	r1, [r7, #24]
 800bc04:	005b      	lsls	r3, r3, #1
 800bc06:	4413      	add	r3, r2
 800bc08:	881b      	ldrh	r3, [r3, #0]
 800bc0a:	81fb      	strh	r3, [r7, #14]
 800bc0c:	89fb      	ldrh	r3, [r7, #14]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d1d7      	bne.n	800bbc2 <get_fileinfo+0x4a>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800bc12:	683a      	ldr	r2, [r7, #0]
 800bc14:	69fb      	ldr	r3, [r7, #28]
 800bc16:	4413      	add	r3, r2
 800bc18:	331a      	adds	r3, #26
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	61bb      	str	r3, [r7, #24]
 800bc22:	69bb      	ldr	r3, [r7, #24]
 800bc24:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800bc26:	683a      	ldr	r2, [r7, #0]
 800bc28:	69fb      	ldr	r3, [r7, #28]
 800bc2a:	4413      	add	r3, r2
 800bc2c:	331a      	adds	r3, #26
 800bc2e:	781b      	ldrb	r3, [r3, #0]
 800bc30:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800bc32:	e04c      	b.n	800bcce <get_fileinfo+0x156>
		c = (TCHAR)dp->dir[i++];
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bc38:	69fb      	ldr	r3, [r7, #28]
 800bc3a:	1c59      	adds	r1, r3, #1
 800bc3c:	61f9      	str	r1, [r7, #28]
 800bc3e:	4413      	add	r3, r2
 800bc40:	781b      	ldrb	r3, [r3, #0]
 800bc42:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800bc44:	7dfb      	ldrb	r3, [r7, #23]
 800bc46:	2b20      	cmp	r3, #32
 800bc48:	d100      	bne.n	800bc4c <get_fileinfo+0xd4>
 800bc4a:	e040      	b.n	800bcce <get_fileinfo+0x156>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800bc4c:	7dfb      	ldrb	r3, [r7, #23]
 800bc4e:	2b05      	cmp	r3, #5
 800bc50:	d101      	bne.n	800bc56 <get_fileinfo+0xde>
 800bc52:	23e5      	movs	r3, #229	; 0xe5
 800bc54:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800bc56:	69fb      	ldr	r3, [r7, #28]
 800bc58:	2b09      	cmp	r3, #9
 800bc5a:	d10f      	bne.n	800bc7c <get_fileinfo+0x104>
			if (!lfv) fno->fname[j] = '.';
 800bc5c:	89bb      	ldrh	r3, [r7, #12]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d105      	bne.n	800bc6e <get_fileinfo+0xf6>
 800bc62:	683a      	ldr	r2, [r7, #0]
 800bc64:	69bb      	ldr	r3, [r7, #24]
 800bc66:	4413      	add	r3, r2
 800bc68:	331a      	adds	r3, #26
 800bc6a:	222e      	movs	r2, #46	; 0x2e
 800bc6c:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800bc6e:	69bb      	ldr	r3, [r7, #24]
 800bc70:	1c5a      	adds	r2, r3, #1
 800bc72:	61ba      	str	r2, [r7, #24]
 800bc74:	683a      	ldr	r2, [r7, #0]
 800bc76:	4413      	add	r3, r2
 800bc78:	222e      	movs	r2, #46	; 0x2e
 800bc7a:	735a      	strb	r2, [r3, #13]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800bc7c:	683a      	ldr	r2, [r7, #0]
 800bc7e:	69bb      	ldr	r3, [r7, #24]
 800bc80:	4413      	add	r3, r2
 800bc82:	330d      	adds	r3, #13
 800bc84:	7dfa      	ldrb	r2, [r7, #23]
 800bc86:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800bc88:	89bb      	ldrh	r3, [r7, #12]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d11c      	bne.n	800bcc8 <get_fileinfo+0x150>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800bc8e:	7dfb      	ldrb	r3, [r7, #23]
 800bc90:	2b40      	cmp	r3, #64	; 0x40
 800bc92:	d913      	bls.n	800bcbc <get_fileinfo+0x144>
 800bc94:	7dfb      	ldrb	r3, [r7, #23]
 800bc96:	2b5a      	cmp	r3, #90	; 0x5a
 800bc98:	d810      	bhi.n	800bcbc <get_fileinfo+0x144>
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc9e:	330c      	adds	r3, #12
 800bca0:	781b      	ldrb	r3, [r3, #0]
 800bca2:	461a      	mov	r2, r3
 800bca4:	69fb      	ldr	r3, [r7, #28]
 800bca6:	2b08      	cmp	r3, #8
 800bca8:	d901      	bls.n	800bcae <get_fileinfo+0x136>
 800bcaa:	2310      	movs	r3, #16
 800bcac:	e000      	b.n	800bcb0 <get_fileinfo+0x138>
 800bcae:	2308      	movs	r3, #8
 800bcb0:	4013      	ands	r3, r2
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d002      	beq.n	800bcbc <get_fileinfo+0x144>
				c += 0x20;			/* To lower */
 800bcb6:	7dfb      	ldrb	r3, [r7, #23]
 800bcb8:	3320      	adds	r3, #32
 800bcba:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800bcbc:	683a      	ldr	r2, [r7, #0]
 800bcbe:	69bb      	ldr	r3, [r7, #24]
 800bcc0:	4413      	add	r3, r2
 800bcc2:	331a      	adds	r3, #26
 800bcc4:	7dfa      	ldrb	r2, [r7, #23]
 800bcc6:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800bcc8:	69bb      	ldr	r3, [r7, #24]
 800bcca:	3301      	adds	r3, #1
 800bccc:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800bcce:	69fb      	ldr	r3, [r7, #28]
 800bcd0:	2b0a      	cmp	r3, #10
 800bcd2:	d9af      	bls.n	800bc34 <get_fileinfo+0xbc>
	}
	if (!lfv) {
 800bcd4:	89bb      	ldrh	r3, [r7, #12]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d10d      	bne.n	800bcf6 <get_fileinfo+0x17e>
		fno->fname[j] = 0;
 800bcda:	683a      	ldr	r2, [r7, #0]
 800bcdc:	69bb      	ldr	r3, [r7, #24]
 800bcde:	4413      	add	r3, r2
 800bce0:	331a      	adds	r3, #26
 800bce2:	2200      	movs	r2, #0
 800bce4:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcea:	330c      	adds	r3, #12
 800bcec:	781b      	ldrb	r3, [r3, #0]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d101      	bne.n	800bcf6 <get_fileinfo+0x17e>
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800bcf6:	683a      	ldr	r2, [r7, #0]
 800bcf8:	69bb      	ldr	r3, [r7, #24]
 800bcfa:	4413      	add	r3, r2
 800bcfc:	330d      	adds	r3, #13
 800bcfe:	2200      	movs	r2, #0
 800bd00:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd06:	7ada      	ldrb	r2, [r3, #11]
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	731a      	strb	r2, [r3, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd10:	331c      	adds	r3, #28
 800bd12:	4618      	mov	r0, r3
 800bd14:	f7fd fa92 	bl	800923c <ld_dword>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	461a      	mov	r2, r3
 800bd1c:	f04f 0300 	mov.w	r3, #0
 800bd20:	6839      	ldr	r1, [r7, #0]
 800bd22:	e9c1 2300 	strd	r2, r3, [r1]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd2a:	3316      	adds	r3, #22
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f7fd fa85 	bl	800923c <ld_dword>
 800bd32:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	b29a      	uxth	r2, r3
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	815a      	strh	r2, [r3, #10]
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	0c1b      	lsrs	r3, r3, #16
 800bd40:	b29a      	uxth	r2, r3
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	811a      	strh	r2, [r3, #8]
 800bd46:	e000      	b.n	800bd4a <get_fileinfo+0x1d2>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800bd48:	bf00      	nop
}
 800bd4a:	3720      	adds	r7, #32
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}

0800bd50 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b08a      	sub	sp, #40	; 0x28
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
 800bd58:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	613b      	str	r3, [r7, #16]
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	691b      	ldr	r3, [r3, #16]
 800bd66:	60fb      	str	r3, [r7, #12]
 800bd68:	2300      	movs	r3, #0
 800bd6a:	617b      	str	r3, [r7, #20]
 800bd6c:	697b      	ldr	r3, [r7, #20]
 800bd6e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800bd70:	69bb      	ldr	r3, [r7, #24]
 800bd72:	1c5a      	adds	r2, r3, #1
 800bd74:	61ba      	str	r2, [r7, #24]
 800bd76:	693a      	ldr	r2, [r7, #16]
 800bd78:	4413      	add	r3, r2
 800bd7a:	781b      	ldrb	r3, [r3, #0]
 800bd7c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800bd7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd80:	2b1f      	cmp	r3, #31
 800bd82:	d940      	bls.n	800be06 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800bd84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd86:	2b2f      	cmp	r3, #47	; 0x2f
 800bd88:	d006      	beq.n	800bd98 <create_name+0x48>
 800bd8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd8c:	2b5c      	cmp	r3, #92	; 0x5c
 800bd8e:	d110      	bne.n	800bdb2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800bd90:	e002      	b.n	800bd98 <create_name+0x48>
 800bd92:	69bb      	ldr	r3, [r7, #24]
 800bd94:	3301      	adds	r3, #1
 800bd96:	61bb      	str	r3, [r7, #24]
 800bd98:	693a      	ldr	r2, [r7, #16]
 800bd9a:	69bb      	ldr	r3, [r7, #24]
 800bd9c:	4413      	add	r3, r2
 800bd9e:	781b      	ldrb	r3, [r3, #0]
 800bda0:	2b2f      	cmp	r3, #47	; 0x2f
 800bda2:	d0f6      	beq.n	800bd92 <create_name+0x42>
 800bda4:	693a      	ldr	r2, [r7, #16]
 800bda6:	69bb      	ldr	r3, [r7, #24]
 800bda8:	4413      	add	r3, r2
 800bdaa:	781b      	ldrb	r3, [r3, #0]
 800bdac:	2b5c      	cmp	r3, #92	; 0x5c
 800bdae:	d0f0      	beq.n	800bd92 <create_name+0x42>
			break;
 800bdb0:	e02a      	b.n	800be08 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800bdb2:	697b      	ldr	r3, [r7, #20]
 800bdb4:	2bfe      	cmp	r3, #254	; 0xfe
 800bdb6:	d901      	bls.n	800bdbc <create_name+0x6c>
 800bdb8:	2306      	movs	r3, #6
 800bdba:	e177      	b.n	800c0ac <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800bdbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bdbe:	b2db      	uxtb	r3, r3
 800bdc0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800bdc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bdc4:	2101      	movs	r1, #1
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	f001 ff0a 	bl	800dbe0 <ff_convert>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800bdd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d101      	bne.n	800bdda <create_name+0x8a>
 800bdd6:	2306      	movs	r3, #6
 800bdd8:	e168      	b.n	800c0ac <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800bdda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bddc:	2b7f      	cmp	r3, #127	; 0x7f
 800bdde:	d809      	bhi.n	800bdf4 <create_name+0xa4>
 800bde0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bde2:	4619      	mov	r1, r3
 800bde4:	48b3      	ldr	r0, [pc, #716]	; (800c0b4 <create_name+0x364>)
 800bde6:	f7fd fc39 	bl	800965c <chk_chr>
 800bdea:	4603      	mov	r3, r0
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d001      	beq.n	800bdf4 <create_name+0xa4>
 800bdf0:	2306      	movs	r3, #6
 800bdf2:	e15b      	b.n	800c0ac <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800bdf4:	697b      	ldr	r3, [r7, #20]
 800bdf6:	1c5a      	adds	r2, r3, #1
 800bdf8:	617a      	str	r2, [r7, #20]
 800bdfa:	005b      	lsls	r3, r3, #1
 800bdfc:	68fa      	ldr	r2, [r7, #12]
 800bdfe:	4413      	add	r3, r2
 800be00:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800be02:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800be04:	e7b4      	b.n	800bd70 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800be06:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800be08:	693a      	ldr	r2, [r7, #16]
 800be0a:	69bb      	ldr	r3, [r7, #24]
 800be0c:	441a      	add	r2, r3
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800be12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be14:	2b1f      	cmp	r3, #31
 800be16:	d801      	bhi.n	800be1c <create_name+0xcc>
 800be18:	2304      	movs	r3, #4
 800be1a:	e000      	b.n	800be1e <create_name+0xce>
 800be1c:	2300      	movs	r3, #0
 800be1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800be22:	e011      	b.n	800be48 <create_name+0xf8>
		w = lfn[di - 1];
 800be24:	697b      	ldr	r3, [r7, #20]
 800be26:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800be2a:	3b01      	subs	r3, #1
 800be2c:	005b      	lsls	r3, r3, #1
 800be2e:	68fa      	ldr	r2, [r7, #12]
 800be30:	4413      	add	r3, r2
 800be32:	881b      	ldrh	r3, [r3, #0]
 800be34:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800be36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be38:	2b20      	cmp	r3, #32
 800be3a:	d002      	beq.n	800be42 <create_name+0xf2>
 800be3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be3e:	2b2e      	cmp	r3, #46	; 0x2e
 800be40:	d106      	bne.n	800be50 <create_name+0x100>
		di--;
 800be42:	697b      	ldr	r3, [r7, #20]
 800be44:	3b01      	subs	r3, #1
 800be46:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800be48:	697b      	ldr	r3, [r7, #20]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d1ea      	bne.n	800be24 <create_name+0xd4>
 800be4e:	e000      	b.n	800be52 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800be50:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800be52:	697b      	ldr	r3, [r7, #20]
 800be54:	005b      	lsls	r3, r3, #1
 800be56:	68fa      	ldr	r2, [r7, #12]
 800be58:	4413      	add	r3, r2
 800be5a:	2200      	movs	r2, #0
 800be5c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800be5e:	697b      	ldr	r3, [r7, #20]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d101      	bne.n	800be68 <create_name+0x118>
 800be64:	2306      	movs	r3, #6
 800be66:	e121      	b.n	800c0ac <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	3340      	adds	r3, #64	; 0x40
 800be6c:	220b      	movs	r2, #11
 800be6e:	2120      	movs	r1, #32
 800be70:	4618      	mov	r0, r3
 800be72:	f7fd fbb1 	bl	80095d8 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800be76:	2300      	movs	r3, #0
 800be78:	61bb      	str	r3, [r7, #24]
 800be7a:	e002      	b.n	800be82 <create_name+0x132>
 800be7c:	69bb      	ldr	r3, [r7, #24]
 800be7e:	3301      	adds	r3, #1
 800be80:	61bb      	str	r3, [r7, #24]
 800be82:	69bb      	ldr	r3, [r7, #24]
 800be84:	005b      	lsls	r3, r3, #1
 800be86:	68fa      	ldr	r2, [r7, #12]
 800be88:	4413      	add	r3, r2
 800be8a:	881b      	ldrh	r3, [r3, #0]
 800be8c:	2b20      	cmp	r3, #32
 800be8e:	d0f5      	beq.n	800be7c <create_name+0x12c>
 800be90:	69bb      	ldr	r3, [r7, #24]
 800be92:	005b      	lsls	r3, r3, #1
 800be94:	68fa      	ldr	r2, [r7, #12]
 800be96:	4413      	add	r3, r2
 800be98:	881b      	ldrh	r3, [r3, #0]
 800be9a:	2b2e      	cmp	r3, #46	; 0x2e
 800be9c:	d0ee      	beq.n	800be7c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800be9e:	69bb      	ldr	r3, [r7, #24]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d009      	beq.n	800beb8 <create_name+0x168>
 800bea4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bea8:	f043 0303 	orr.w	r3, r3, #3
 800beac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800beb0:	e002      	b.n	800beb8 <create_name+0x168>
 800beb2:	697b      	ldr	r3, [r7, #20]
 800beb4:	3b01      	subs	r3, #1
 800beb6:	617b      	str	r3, [r7, #20]
 800beb8:	697b      	ldr	r3, [r7, #20]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d009      	beq.n	800bed2 <create_name+0x182>
 800bebe:	697b      	ldr	r3, [r7, #20]
 800bec0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bec4:	3b01      	subs	r3, #1
 800bec6:	005b      	lsls	r3, r3, #1
 800bec8:	68fa      	ldr	r2, [r7, #12]
 800beca:	4413      	add	r3, r2
 800becc:	881b      	ldrh	r3, [r3, #0]
 800bece:	2b2e      	cmp	r3, #46	; 0x2e
 800bed0:	d1ef      	bne.n	800beb2 <create_name+0x162>

	i = b = 0; ni = 8;
 800bed2:	2300      	movs	r3, #0
 800bed4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bed8:	2300      	movs	r3, #0
 800beda:	623b      	str	r3, [r7, #32]
 800bedc:	2308      	movs	r3, #8
 800bede:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800bee0:	69bb      	ldr	r3, [r7, #24]
 800bee2:	1c5a      	adds	r2, r3, #1
 800bee4:	61ba      	str	r2, [r7, #24]
 800bee6:	005b      	lsls	r3, r3, #1
 800bee8:	68fa      	ldr	r2, [r7, #12]
 800beea:	4413      	add	r3, r2
 800beec:	881b      	ldrh	r3, [r3, #0]
 800beee:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800bef0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	f000 8090 	beq.w	800c018 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800bef8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800befa:	2b20      	cmp	r3, #32
 800befc:	d006      	beq.n	800bf0c <create_name+0x1bc>
 800befe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf00:	2b2e      	cmp	r3, #46	; 0x2e
 800bf02:	d10a      	bne.n	800bf1a <create_name+0x1ca>
 800bf04:	69ba      	ldr	r2, [r7, #24]
 800bf06:	697b      	ldr	r3, [r7, #20]
 800bf08:	429a      	cmp	r2, r3
 800bf0a:	d006      	beq.n	800bf1a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800bf0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf10:	f043 0303 	orr.w	r3, r3, #3
 800bf14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bf18:	e07d      	b.n	800c016 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800bf1a:	6a3a      	ldr	r2, [r7, #32]
 800bf1c:	69fb      	ldr	r3, [r7, #28]
 800bf1e:	429a      	cmp	r2, r3
 800bf20:	d203      	bcs.n	800bf2a <create_name+0x1da>
 800bf22:	69ba      	ldr	r2, [r7, #24]
 800bf24:	697b      	ldr	r3, [r7, #20]
 800bf26:	429a      	cmp	r2, r3
 800bf28:	d123      	bne.n	800bf72 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800bf2a:	69fb      	ldr	r3, [r7, #28]
 800bf2c:	2b0b      	cmp	r3, #11
 800bf2e:	d106      	bne.n	800bf3e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800bf30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf34:	f043 0303 	orr.w	r3, r3, #3
 800bf38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bf3c:	e06f      	b.n	800c01e <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800bf3e:	69ba      	ldr	r2, [r7, #24]
 800bf40:	697b      	ldr	r3, [r7, #20]
 800bf42:	429a      	cmp	r2, r3
 800bf44:	d005      	beq.n	800bf52 <create_name+0x202>
 800bf46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf4a:	f043 0303 	orr.w	r3, r3, #3
 800bf4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800bf52:	69ba      	ldr	r2, [r7, #24]
 800bf54:	697b      	ldr	r3, [r7, #20]
 800bf56:	429a      	cmp	r2, r3
 800bf58:	d860      	bhi.n	800c01c <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800bf5a:	697b      	ldr	r3, [r7, #20]
 800bf5c:	61bb      	str	r3, [r7, #24]
 800bf5e:	2308      	movs	r3, #8
 800bf60:	623b      	str	r3, [r7, #32]
 800bf62:	230b      	movs	r3, #11
 800bf64:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800bf66:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bf6a:	009b      	lsls	r3, r3, #2
 800bf6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bf70:	e051      	b.n	800c016 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800bf72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf74:	2b7f      	cmp	r3, #127	; 0x7f
 800bf76:	d914      	bls.n	800bfa2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800bf78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf7a:	2100      	movs	r1, #0
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f001 fe2f 	bl	800dbe0 <ff_convert>
 800bf82:	4603      	mov	r3, r0
 800bf84:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800bf86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d004      	beq.n	800bf96 <create_name+0x246>
 800bf8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf8e:	3b80      	subs	r3, #128	; 0x80
 800bf90:	4a49      	ldr	r2, [pc, #292]	; (800c0b8 <create_name+0x368>)
 800bf92:	5cd3      	ldrb	r3, [r2, r3]
 800bf94:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800bf96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf9a:	f043 0302 	orr.w	r3, r3, #2
 800bf9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800bfa2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d007      	beq.n	800bfb8 <create_name+0x268>
 800bfa8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bfaa:	4619      	mov	r1, r3
 800bfac:	4843      	ldr	r0, [pc, #268]	; (800c0bc <create_name+0x36c>)
 800bfae:	f7fd fb55 	bl	800965c <chk_chr>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d008      	beq.n	800bfca <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800bfb8:	235f      	movs	r3, #95	; 0x5f
 800bfba:	84bb      	strh	r3, [r7, #36]	; 0x24
 800bfbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bfc0:	f043 0303 	orr.w	r3, r3, #3
 800bfc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bfc8:	e01b      	b.n	800c002 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800bfca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bfcc:	2b40      	cmp	r3, #64	; 0x40
 800bfce:	d909      	bls.n	800bfe4 <create_name+0x294>
 800bfd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bfd2:	2b5a      	cmp	r3, #90	; 0x5a
 800bfd4:	d806      	bhi.n	800bfe4 <create_name+0x294>
					b |= 2;
 800bfd6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bfda:	f043 0302 	orr.w	r3, r3, #2
 800bfde:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bfe2:	e00e      	b.n	800c002 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800bfe4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bfe6:	2b60      	cmp	r3, #96	; 0x60
 800bfe8:	d90b      	bls.n	800c002 <create_name+0x2b2>
 800bfea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bfec:	2b7a      	cmp	r3, #122	; 0x7a
 800bfee:	d808      	bhi.n	800c002 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800bff0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bff4:	f043 0301 	orr.w	r3, r3, #1
 800bff8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bffc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bffe:	3b20      	subs	r3, #32
 800c000:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800c002:	6a3b      	ldr	r3, [r7, #32]
 800c004:	1c5a      	adds	r2, r3, #1
 800c006:	623a      	str	r2, [r7, #32]
 800c008:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c00a:	b2d1      	uxtb	r1, r2
 800c00c:	687a      	ldr	r2, [r7, #4]
 800c00e:	4413      	add	r3, r2
 800c010:	460a      	mov	r2, r1
 800c012:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 800c016:	e763      	b.n	800bee0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800c018:	bf00      	nop
 800c01a:	e000      	b.n	800c01e <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800c01c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c024:	2be5      	cmp	r3, #229	; 0xe5
 800c026:	d103      	bne.n	800c030 <create_name+0x2e0>
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2205      	movs	r2, #5
 800c02c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 800c030:	69fb      	ldr	r3, [r7, #28]
 800c032:	2b08      	cmp	r3, #8
 800c034:	d104      	bne.n	800c040 <create_name+0x2f0>
 800c036:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c03a:	009b      	lsls	r3, r3, #2
 800c03c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c040:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c044:	f003 030c 	and.w	r3, r3, #12
 800c048:	2b0c      	cmp	r3, #12
 800c04a:	d005      	beq.n	800c058 <create_name+0x308>
 800c04c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c050:	f003 0303 	and.w	r3, r3, #3
 800c054:	2b03      	cmp	r3, #3
 800c056:	d105      	bne.n	800c064 <create_name+0x314>
 800c058:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c05c:	f043 0302 	orr.w	r3, r3, #2
 800c060:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c064:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c068:	f003 0302 	and.w	r3, r3, #2
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d117      	bne.n	800c0a0 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c070:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c074:	f003 0303 	and.w	r3, r3, #3
 800c078:	2b01      	cmp	r3, #1
 800c07a:	d105      	bne.n	800c088 <create_name+0x338>
 800c07c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c080:	f043 0310 	orr.w	r3, r3, #16
 800c084:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c088:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c08c:	f003 030c 	and.w	r3, r3, #12
 800c090:	2b04      	cmp	r3, #4
 800c092:	d105      	bne.n	800c0a0 <create_name+0x350>
 800c094:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c098:	f043 0308 	orr.w	r3, r3, #8
 800c09c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c0a6:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 800c0aa:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	3728      	adds	r7, #40	; 0x28
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bd80      	pop	{r7, pc}
 800c0b4:	08010b4c 	.word	0x08010b4c
 800c0b8:	08010c60 	.word	0x08010c60
 800c0bc:	08010b58 	.word	0x08010b58

0800c0c0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b086      	sub	sp, #24
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
 800c0c8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c0ce:	693b      	ldr	r3, [r7, #16]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c0d4:	e002      	b.n	800c0dc <follow_path+0x1c>
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	3301      	adds	r3, #1
 800c0da:	603b      	str	r3, [r7, #0]
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	781b      	ldrb	r3, [r3, #0]
 800c0e0:	2b2f      	cmp	r3, #47	; 0x2f
 800c0e2:	d0f8      	beq.n	800c0d6 <follow_path+0x16>
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	781b      	ldrb	r3, [r3, #0]
 800c0e8:	2b5c      	cmp	r3, #92	; 0x5c
 800c0ea:	d0f4      	beq.n	800c0d6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c0ec:	693b      	ldr	r3, [r7, #16]
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800c0f2:	693b      	ldr	r3, [r7, #16]
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	781b      	ldrb	r3, [r3, #0]
 800c0fc:	2b1f      	cmp	r3, #31
 800c0fe:	d80a      	bhi.n	800c116 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2280      	movs	r2, #128	; 0x80
 800c104:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800c108:	2100      	movs	r1, #0
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	f7fe faf7 	bl	800a6fe <dir_sdi>
 800c110:	4603      	mov	r3, r0
 800c112:	75fb      	strb	r3, [r7, #23]
 800c114:	e07d      	b.n	800c212 <follow_path+0x152>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c116:	463b      	mov	r3, r7
 800c118:	4619      	mov	r1, r3
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	f7ff fe18 	bl	800bd50 <create_name>
 800c120:	4603      	mov	r3, r0
 800c122:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c124:	7dfb      	ldrb	r3, [r7, #23]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d16e      	bne.n	800c208 <follow_path+0x148>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f7ff fa54 	bl	800b5d8 <dir_find>
 800c130:	4603      	mov	r3, r0
 800c132:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800c13a:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c13c:	7dfb      	ldrb	r3, [r7, #23]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d00a      	beq.n	800c158 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c142:	7dfb      	ldrb	r3, [r7, #23]
 800c144:	2b04      	cmp	r3, #4
 800c146:	d161      	bne.n	800c20c <follow_path+0x14c>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c148:	7afb      	ldrb	r3, [r7, #11]
 800c14a:	f003 0304 	and.w	r3, r3, #4
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d15c      	bne.n	800c20c <follow_path+0x14c>
 800c152:	2305      	movs	r3, #5
 800c154:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c156:	e059      	b.n	800c20c <follow_path+0x14c>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c158:	7afb      	ldrb	r3, [r7, #11]
 800c15a:	f003 0304 	and.w	r3, r3, #4
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d156      	bne.n	800c210 <follow_path+0x150>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c162:	693b      	ldr	r3, [r7, #16]
 800c164:	799b      	ldrb	r3, [r3, #6]
 800c166:	f003 0310 	and.w	r3, r3, #16
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d102      	bne.n	800c174 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800c16e:	2305      	movs	r3, #5
 800c170:	75fb      	strb	r3, [r7, #23]
 800c172:	e04e      	b.n	800c212 <follow_path+0x152>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	781b      	ldrb	r3, [r3, #0]
 800c178:	2b04      	cmp	r3, #4
 800c17a:	d130      	bne.n	800c1de <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	689a      	ldr	r2, [r3, #8]
 800c180:	693b      	ldr	r3, [r7, #16]
 800c182:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800c184:	693b      	ldr	r3, [r7, #16]
 800c186:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c18a:	4613      	mov	r3, r2
 800c18c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c190:	693a      	ldr	r2, [r7, #16]
 800c192:	79d2      	ldrb	r2, [r2, #7]
 800c194:	431a      	orrs	r2, r3
 800c196:	693b      	ldr	r3, [r7, #16]
 800c198:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c19e:	693b      	ldr	r3, [r7, #16]
 800c1a0:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	695b      	ldr	r3, [r3, #20]
 800c1a6:	3334      	adds	r3, #52	; 0x34
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	f7fd f847 	bl	800923c <ld_dword>
 800c1ae:	4602      	mov	r2, r0
 800c1b0:	693b      	ldr	r3, [r7, #16]
 800c1b2:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	695b      	ldr	r3, [r3, #20]
 800c1b8:	3321      	adds	r3, #33	; 0x21
 800c1ba:	781b      	ldrb	r3, [r3, #0]
 800c1bc:	f003 0302 	and.w	r3, r3, #2
 800c1c0:	b2da      	uxtb	r2, r3
 800c1c2:	693b      	ldr	r3, [r7, #16]
 800c1c4:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	695b      	ldr	r3, [r3, #20]
 800c1ca:	3338      	adds	r3, #56	; 0x38
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	f7fd f858 	bl	8009282 <ld_qword>
 800c1d2:	4602      	mov	r2, r0
 800c1d4:	460b      	mov	r3, r1
 800c1d6:	6939      	ldr	r1, [r7, #16]
 800c1d8:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800c1dc:	e79b      	b.n	800c116 <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1e8:	68fa      	ldr	r2, [r7, #12]
 800c1ea:	8992      	ldrh	r2, [r2, #12]
 800c1ec:	fbb3 f0f2 	udiv	r0, r3, r2
 800c1f0:	fb02 f200 	mul.w	r2, r2, r0
 800c1f4:	1a9b      	subs	r3, r3, r2
 800c1f6:	440b      	add	r3, r1
 800c1f8:	4619      	mov	r1, r3
 800c1fa:	68f8      	ldr	r0, [r7, #12]
 800c1fc:	f7fe fc55 	bl	800aaaa <ld_clust>
 800c200:	4602      	mov	r2, r0
 800c202:	693b      	ldr	r3, [r7, #16]
 800c204:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c206:	e786      	b.n	800c116 <follow_path+0x56>
			if (res != FR_OK) break;
 800c208:	bf00      	nop
 800c20a:	e002      	b.n	800c212 <follow_path+0x152>
				break;
 800c20c:	bf00      	nop
 800c20e:	e000      	b.n	800c212 <follow_path+0x152>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c210:	bf00      	nop
			}
		}
	}

	return res;
 800c212:	7dfb      	ldrb	r3, [r7, #23]
}
 800c214:	4618      	mov	r0, r3
 800c216:	3718      	adds	r7, #24
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}

0800c21c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c21c:	b480      	push	{r7}
 800c21e:	b087      	sub	sp, #28
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c224:	f04f 33ff 	mov.w	r3, #4294967295
 800c228:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d031      	beq.n	800c296 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	617b      	str	r3, [r7, #20]
 800c238:	e002      	b.n	800c240 <get_ldnumber+0x24>
 800c23a:	697b      	ldr	r3, [r7, #20]
 800c23c:	3301      	adds	r3, #1
 800c23e:	617b      	str	r3, [r7, #20]
 800c240:	697b      	ldr	r3, [r7, #20]
 800c242:	781b      	ldrb	r3, [r3, #0]
 800c244:	2b1f      	cmp	r3, #31
 800c246:	d903      	bls.n	800c250 <get_ldnumber+0x34>
 800c248:	697b      	ldr	r3, [r7, #20]
 800c24a:	781b      	ldrb	r3, [r3, #0]
 800c24c:	2b3a      	cmp	r3, #58	; 0x3a
 800c24e:	d1f4      	bne.n	800c23a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c250:	697b      	ldr	r3, [r7, #20]
 800c252:	781b      	ldrb	r3, [r3, #0]
 800c254:	2b3a      	cmp	r3, #58	; 0x3a
 800c256:	d11c      	bne.n	800c292 <get_ldnumber+0x76>
			tp = *path;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	1c5a      	adds	r2, r3, #1
 800c262:	60fa      	str	r2, [r7, #12]
 800c264:	781b      	ldrb	r3, [r3, #0]
 800c266:	3b30      	subs	r3, #48	; 0x30
 800c268:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c26a:	68bb      	ldr	r3, [r7, #8]
 800c26c:	2b09      	cmp	r3, #9
 800c26e:	d80e      	bhi.n	800c28e <get_ldnumber+0x72>
 800c270:	68fa      	ldr	r2, [r7, #12]
 800c272:	697b      	ldr	r3, [r7, #20]
 800c274:	429a      	cmp	r2, r3
 800c276:	d10a      	bne.n	800c28e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d107      	bne.n	800c28e <get_ldnumber+0x72>
					vol = (int)i;
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	3301      	adds	r3, #1
 800c286:	617b      	str	r3, [r7, #20]
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	697a      	ldr	r2, [r7, #20]
 800c28c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c28e:	693b      	ldr	r3, [r7, #16]
 800c290:	e002      	b.n	800c298 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c292:	2300      	movs	r3, #0
 800c294:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c296:	693b      	ldr	r3, [r7, #16]
}
 800c298:	4618      	mov	r0, r3
 800c29a:	371c      	adds	r7, #28
 800c29c:	46bd      	mov	sp, r7
 800c29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a2:	4770      	bx	lr

0800c2a4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b082      	sub	sp, #8
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
 800c2ac:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	70da      	strb	r2, [r3, #3]
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f04f 32ff 	mov.w	r2, #4294967295
 800c2ba:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c2bc:	6839      	ldr	r1, [r7, #0]
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	f7fd fb98 	bl	80099f4 <move_window>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d001      	beq.n	800c2ce <check_fs+0x2a>
 800c2ca:	2304      	movs	r3, #4
 800c2cc:	e044      	b.n	800c358 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	333c      	adds	r3, #60	; 0x3c
 800c2d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f7fc ff98 	bl	800920c <ld_word>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	461a      	mov	r2, r3
 800c2e0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c2e4:	429a      	cmp	r2, r3
 800c2e6:	d001      	beq.n	800c2ec <check_fs+0x48>
 800c2e8:	2303      	movs	r3, #3
 800c2ea:	e035      	b.n	800c358 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c2f2:	2be9      	cmp	r3, #233	; 0xe9
 800c2f4:	d009      	beq.n	800c30a <check_fs+0x66>
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c2fc:	2beb      	cmp	r3, #235	; 0xeb
 800c2fe:	d11e      	bne.n	800c33e <check_fs+0x9a>
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c306:	2b90      	cmp	r3, #144	; 0x90
 800c308:	d119      	bne.n	800c33e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	333c      	adds	r3, #60	; 0x3c
 800c30e:	3336      	adds	r3, #54	; 0x36
 800c310:	4618      	mov	r0, r3
 800c312:	f7fc ff93 	bl	800923c <ld_dword>
 800c316:	4603      	mov	r3, r0
 800c318:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c31c:	4a10      	ldr	r2, [pc, #64]	; (800c360 <check_fs+0xbc>)
 800c31e:	4293      	cmp	r3, r2
 800c320:	d101      	bne.n	800c326 <check_fs+0x82>
 800c322:	2300      	movs	r3, #0
 800c324:	e018      	b.n	800c358 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	333c      	adds	r3, #60	; 0x3c
 800c32a:	3352      	adds	r3, #82	; 0x52
 800c32c:	4618      	mov	r0, r3
 800c32e:	f7fc ff85 	bl	800923c <ld_dword>
 800c332:	4603      	mov	r3, r0
 800c334:	4a0b      	ldr	r2, [pc, #44]	; (800c364 <check_fs+0xc0>)
 800c336:	4293      	cmp	r3, r2
 800c338:	d101      	bne.n	800c33e <check_fs+0x9a>
 800c33a:	2300      	movs	r3, #0
 800c33c:	e00c      	b.n	800c358 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	333c      	adds	r3, #60	; 0x3c
 800c342:	220b      	movs	r2, #11
 800c344:	4908      	ldr	r1, [pc, #32]	; (800c368 <check_fs+0xc4>)
 800c346:	4618      	mov	r0, r3
 800c348:	f7fd f961 	bl	800960e <mem_cmp>
 800c34c:	4603      	mov	r3, r0
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d101      	bne.n	800c356 <check_fs+0xb2>
 800c352:	2301      	movs	r3, #1
 800c354:	e000      	b.n	800c358 <check_fs+0xb4>
#endif
	return 2;
 800c356:	2302      	movs	r3, #2
}
 800c358:	4618      	mov	r0, r3
 800c35a:	3708      	adds	r7, #8
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}
 800c360:	00544146 	.word	0x00544146
 800c364:	33544146 	.word	0x33544146
 800c368:	08010b60 	.word	0x08010b60

0800c36c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c36c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c370:	b098      	sub	sp, #96	; 0x60
 800c372:	af00      	add	r7, sp, #0
 800c374:	60f8      	str	r0, [r7, #12]
 800c376:	60b9      	str	r1, [r7, #8]
 800c378:	4613      	mov	r3, r2
 800c37a:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	2200      	movs	r2, #0
 800c380:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c382:	68f8      	ldr	r0, [r7, #12]
 800c384:	f7ff ff4a 	bl	800c21c <get_ldnumber>
 800c388:	6478      	str	r0, [r7, #68]	; 0x44
	if (vol < 0) return FR_INVALID_DRIVE;
 800c38a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	da01      	bge.n	800c394 <find_volume+0x28>
 800c390:	230b      	movs	r3, #11
 800c392:	e36b      	b.n	800ca6c <find_volume+0x700>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c394:	4aa9      	ldr	r2, [pc, #676]	; (800c63c <find_volume+0x2d0>)
 800c396:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c39c:	643b      	str	r3, [r7, #64]	; 0x40
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c39e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d101      	bne.n	800c3a8 <find_volume+0x3c>
 800c3a4:	230c      	movs	r3, #12
 800c3a6:	e361      	b.n	800ca6c <find_volume+0x700>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c3ac:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c3ae:	79fb      	ldrb	r3, [r7, #7]
 800c3b0:	f023 0301 	bic.w	r3, r3, #1
 800c3b4:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c3b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3b8:	781b      	ldrb	r3, [r3, #0]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d01a      	beq.n	800c3f4 <find_volume+0x88>
		stat = disk_status(fs->drv);
 800c3be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3c0:	785b      	ldrb	r3, [r3, #1]
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f7fc fe84 	bl	80090d0 <disk_status>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c3ce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c3d2:	f003 0301 	and.w	r3, r3, #1
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d10c      	bne.n	800c3f4 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c3da:	79fb      	ldrb	r3, [r7, #7]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d007      	beq.n	800c3f0 <find_volume+0x84>
 800c3e0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c3e4:	f003 0304 	and.w	r3, r3, #4
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d001      	beq.n	800c3f0 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800c3ec:	230a      	movs	r3, #10
 800c3ee:	e33d      	b.n	800ca6c <find_volume+0x700>
			}
			return FR_OK;				/* The file system object is valid */
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	e33b      	b.n	800ca6c <find_volume+0x700>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c3f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c3fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c3fc:	b2da      	uxtb	r2, r3
 800c3fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c400:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c402:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c404:	785b      	ldrb	r3, [r3, #1]
 800c406:	4618      	mov	r0, r3
 800c408:	f7fc fe7c 	bl	8009104 <disk_initialize>
 800c40c:	4603      	mov	r3, r0
 800c40e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c412:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c416:	f003 0301 	and.w	r3, r3, #1
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d001      	beq.n	800c422 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c41e:	2303      	movs	r3, #3
 800c420:	e324      	b.n	800ca6c <find_volume+0x700>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c422:	79fb      	ldrb	r3, [r7, #7]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d007      	beq.n	800c438 <find_volume+0xcc>
 800c428:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c42c:	f003 0304 	and.w	r3, r3, #4
 800c430:	2b00      	cmp	r3, #0
 800c432:	d001      	beq.n	800c438 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800c434:	230a      	movs	r3, #10
 800c436:	e319      	b.n	800ca6c <find_volume+0x700>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800c438:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c43a:	7858      	ldrb	r0, [r3, #1]
 800c43c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c43e:	330c      	adds	r3, #12
 800c440:	461a      	mov	r2, r3
 800c442:	2102      	movs	r1, #2
 800c444:	f7fc fec4 	bl	80091d0 <disk_ioctl>
 800c448:	4603      	mov	r3, r0
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d001      	beq.n	800c452 <find_volume+0xe6>
 800c44e:	2301      	movs	r3, #1
 800c450:	e30c      	b.n	800ca6c <find_volume+0x700>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800c452:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c454:	899b      	ldrh	r3, [r3, #12]
 800c456:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c45a:	d80d      	bhi.n	800c478 <find_volume+0x10c>
 800c45c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c45e:	899b      	ldrh	r3, [r3, #12]
 800c460:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c464:	d308      	bcc.n	800c478 <find_volume+0x10c>
 800c466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c468:	899b      	ldrh	r3, [r3, #12]
 800c46a:	461a      	mov	r2, r3
 800c46c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c46e:	899b      	ldrh	r3, [r3, #12]
 800c470:	3b01      	subs	r3, #1
 800c472:	4013      	ands	r3, r2
 800c474:	2b00      	cmp	r3, #0
 800c476:	d001      	beq.n	800c47c <find_volume+0x110>
 800c478:	2301      	movs	r3, #1
 800c47a:	e2f7      	b.n	800ca6c <find_volume+0x700>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c47c:	2300      	movs	r3, #0
 800c47e:	65bb      	str	r3, [r7, #88]	; 0x58
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c480:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c482:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c484:	f7ff ff0e 	bl	800c2a4 <check_fs>
 800c488:	4603      	mov	r3, r0
 800c48a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c48e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c492:	2b02      	cmp	r3, #2
 800c494:	d14b      	bne.n	800c52e <find_volume+0x1c2>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c496:	2300      	movs	r3, #0
 800c498:	64bb      	str	r3, [r7, #72]	; 0x48
 800c49a:	e01f      	b.n	800c4dc <find_volume+0x170>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c49c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c49e:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800c4a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4a4:	011b      	lsls	r3, r3, #4
 800c4a6:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c4aa:	4413      	add	r3, r2
 800c4ac:	63bb      	str	r3, [r7, #56]	; 0x38
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c4ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4b0:	3304      	adds	r3, #4
 800c4b2:	781b      	ldrb	r3, [r3, #0]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d006      	beq.n	800c4c6 <find_volume+0x15a>
 800c4b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ba:	3308      	adds	r3, #8
 800c4bc:	4618      	mov	r0, r3
 800c4be:	f7fc febd 	bl	800923c <ld_dword>
 800c4c2:	4602      	mov	r2, r0
 800c4c4:	e000      	b.n	800c4c8 <find_volume+0x15c>
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4ca:	009b      	lsls	r3, r3, #2
 800c4cc:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800c4d0:	440b      	add	r3, r1
 800c4d2:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c4d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4d8:	3301      	adds	r3, #1
 800c4da:	64bb      	str	r3, [r7, #72]	; 0x48
 800c4dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4de:	2b03      	cmp	r3, #3
 800c4e0:	d9dc      	bls.n	800c49c <find_volume+0x130>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (i) i--;
 800c4e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d002      	beq.n	800c4f2 <find_volume+0x186>
 800c4ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4ee:	3b01      	subs	r3, #1
 800c4f0:	64bb      	str	r3, [r7, #72]	; 0x48
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c4f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4f4:	009b      	lsls	r3, r3, #2
 800c4f6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800c4fa:	4413      	add	r3, r2
 800c4fc:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800c500:	65bb      	str	r3, [r7, #88]	; 0x58
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c502:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c504:	2b00      	cmp	r3, #0
 800c506:	d005      	beq.n	800c514 <find_volume+0x1a8>
 800c508:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c50a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c50c:	f7ff feca 	bl	800c2a4 <check_fs>
 800c510:	4603      	mov	r3, r0
 800c512:	e000      	b.n	800c516 <find_volume+0x1aa>
 800c514:	2303      	movs	r3, #3
 800c516:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c51a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c51e:	2b01      	cmp	r3, #1
 800c520:	d905      	bls.n	800c52e <find_volume+0x1c2>
 800c522:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c524:	3301      	adds	r3, #1
 800c526:	64bb      	str	r3, [r7, #72]	; 0x48
 800c528:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c52a:	2b03      	cmp	r3, #3
 800c52c:	d9e1      	bls.n	800c4f2 <find_volume+0x186>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c52e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c532:	2b04      	cmp	r3, #4
 800c534:	d101      	bne.n	800c53a <find_volume+0x1ce>
 800c536:	2301      	movs	r3, #1
 800c538:	e298      	b.n	800ca6c <find_volume+0x700>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c53a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c53e:	2b01      	cmp	r3, #1
 800c540:	d901      	bls.n	800c546 <find_volume+0x1da>
 800c542:	230d      	movs	r3, #13
 800c544:	e292      	b.n	800ca6c <find_volume+0x700>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800c546:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c54a:	2b01      	cmp	r3, #1
 800c54c:	f040 80fe 	bne.w	800c74c <find_volume+0x3e0>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800c550:	230b      	movs	r3, #11
 800c552:	64bb      	str	r3, [r7, #72]	; 0x48
 800c554:	e002      	b.n	800c55c <find_volume+0x1f0>
 800c556:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c558:	3301      	adds	r3, #1
 800c55a:	64bb      	str	r3, [r7, #72]	; 0x48
 800c55c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c55e:	2b3f      	cmp	r3, #63	; 0x3f
 800c560:	d806      	bhi.n	800c570 <find_volume+0x204>
 800c562:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c564:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c566:	4413      	add	r3, r2
 800c568:	333c      	adds	r3, #60	; 0x3c
 800c56a:	781b      	ldrb	r3, [r3, #0]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d0f2      	beq.n	800c556 <find_volume+0x1ea>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800c570:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c572:	2b3f      	cmp	r3, #63	; 0x3f
 800c574:	d801      	bhi.n	800c57a <find_volume+0x20e>
 800c576:	230d      	movs	r3, #13
 800c578:	e278      	b.n	800ca6c <find_volume+0x700>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800c57a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c57c:	333c      	adds	r3, #60	; 0x3c
 800c57e:	3368      	adds	r3, #104	; 0x68
 800c580:	4618      	mov	r0, r3
 800c582:	f7fc fe43 	bl	800920c <ld_word>
 800c586:	4603      	mov	r3, r0
 800c588:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c58c:	d001      	beq.n	800c592 <find_volume+0x226>
 800c58e:	230d      	movs	r3, #13
 800c590:	e26c      	b.n	800ca6c <find_volume+0x700>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800c592:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c594:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800c598:	461a      	mov	r2, r3
 800c59a:	2301      	movs	r3, #1
 800c59c:	4093      	lsls	r3, r2
 800c59e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c5a0:	8992      	ldrh	r2, [r2, #12]
 800c5a2:	4293      	cmp	r3, r2
 800c5a4:	d001      	beq.n	800c5aa <find_volume+0x23e>
			return FR_NO_FILESYSTEM;
 800c5a6:	230d      	movs	r3, #13
 800c5a8:	e260      	b.n	800ca6c <find_volume+0x700>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800c5aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5ac:	333c      	adds	r3, #60	; 0x3c
 800c5ae:	3348      	adds	r3, #72	; 0x48
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	f7fc fe66 	bl	8009282 <ld_qword>
 800c5b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c5b8:	461a      	mov	r2, r3
 800c5ba:	f04f 0300 	mov.w	r3, #0
 800c5be:	eb10 0802 	adds.w	r8, r0, r2
 800c5c2:	eb41 0903 	adc.w	r9, r1, r3
 800c5c6:	e9c7 8908 	strd	r8, r9, [r7, #32]
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800c5ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c5ce:	2b01      	cmp	r3, #1
 800c5d0:	bf08      	it	eq
 800c5d2:	2a00      	cmpeq	r2, #0
 800c5d4:	d301      	bcc.n	800c5da <find_volume+0x26e>
 800c5d6:	230d      	movs	r3, #13
 800c5d8:	e248      	b.n	800ca6c <find_volume+0x700>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800c5da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5dc:	333c      	adds	r3, #60	; 0x3c
 800c5de:	3354      	adds	r3, #84	; 0x54
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	f7fc fe2b 	bl	800923c <ld_dword>
 800c5e6:	4602      	mov	r2, r0
 800c5e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5ea:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800c5ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5ee:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 800c5f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5f4:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800c5f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5f8:	789b      	ldrb	r3, [r3, #2]
 800c5fa:	2b01      	cmp	r3, #1
 800c5fc:	d001      	beq.n	800c602 <find_volume+0x296>
 800c5fe:	230d      	movs	r3, #13
 800c600:	e234      	b.n	800ca6c <find_volume+0x700>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800c602:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c604:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800c608:	461a      	mov	r2, r3
 800c60a:	2301      	movs	r3, #1
 800c60c:	4093      	lsls	r3, r2
 800c60e:	b29a      	uxth	r2, r3
 800c610:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c612:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800c614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c616:	895b      	ldrh	r3, [r3, #10]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d101      	bne.n	800c620 <find_volume+0x2b4>
 800c61c:	230d      	movs	r3, #13
 800c61e:	e225      	b.n	800ca6c <find_volume+0x700>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800c620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c622:	333c      	adds	r3, #60	; 0x3c
 800c624:	335c      	adds	r3, #92	; 0x5c
 800c626:	4618      	mov	r0, r3
 800c628:	f7fc fe08 	bl	800923c <ld_dword>
 800c62c:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800c62e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c630:	4a03      	ldr	r2, [pc, #12]	; (800c640 <find_volume+0x2d4>)
 800c632:	4293      	cmp	r3, r2
 800c634:	d906      	bls.n	800c644 <find_volume+0x2d8>
 800c636:	230d      	movs	r3, #13
 800c638:	e218      	b.n	800ca6c <find_volume+0x700>
 800c63a:	bf00      	nop
 800c63c:	200000c4 	.word	0x200000c4
 800c640:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 800c644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c646:	1c9a      	adds	r2, r3, #2
 800c648:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c64a:	621a      	str	r2, [r3, #32]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800c64c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c64e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c650:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800c652:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c654:	333c      	adds	r3, #60	; 0x3c
 800c656:	3358      	adds	r3, #88	; 0x58
 800c658:	4618      	mov	r0, r3
 800c65a:	f7fc fdef 	bl	800923c <ld_dword>
 800c65e:	4602      	mov	r2, r0
 800c660:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c662:	441a      	add	r2, r3
 800c664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c666:	635a      	str	r2, [r3, #52]	; 0x34
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800c668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c66a:	333c      	adds	r3, #60	; 0x3c
 800c66c:	3350      	adds	r3, #80	; 0x50
 800c66e:	4618      	mov	r0, r3
 800c670:	f7fc fde4 	bl	800923c <ld_dword>
 800c674:	4602      	mov	r2, r0
 800c676:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c678:	441a      	add	r2, r3
 800c67a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c67c:	62da      	str	r2, [r3, #44]	; 0x2c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800c67e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c682:	4618      	mov	r0, r3
 800c684:	f04f 0100 	mov.w	r1, #0
 800c688:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c68a:	895b      	ldrh	r3, [r3, #10]
 800c68c:	461a      	mov	r2, r3
 800c68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c690:	fb03 f302 	mul.w	r3, r3, r2
 800c694:	461a      	mov	r2, r3
 800c696:	f04f 0300 	mov.w	r3, #0
 800c69a:	1884      	adds	r4, r0, r2
 800c69c:	eb41 0503 	adc.w	r5, r1, r3
 800c6a0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c6a4:	42ab      	cmp	r3, r5
 800c6a6:	bf08      	it	eq
 800c6a8:	42a2      	cmpeq	r2, r4
 800c6aa:	d201      	bcs.n	800c6b0 <find_volume+0x344>
 800c6ac:	230d      	movs	r3, #13
 800c6ae:	e1dd      	b.n	800ca6c <find_volume+0x700>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800c6b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6b2:	333c      	adds	r3, #60	; 0x3c
 800c6b4:	3360      	adds	r3, #96	; 0x60
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f7fc fdc0 	bl	800923c <ld_dword>
 800c6bc:	4602      	mov	r2, r0
 800c6be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6c0:	631a      	str	r2, [r3, #48]	; 0x30

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800c6c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6c6:	4619      	mov	r1, r3
 800c6c8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c6ca:	f7fd fa31 	bl	8009b30 <clust2sect>
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	4619      	mov	r1, r3
 800c6d2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c6d4:	f7fd f98e 	bl	80099f4 <move_window>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d001      	beq.n	800c6e2 <find_volume+0x376>
 800c6de:	2301      	movs	r3, #1
 800c6e0:	e1c4      	b.n	800ca6c <find_volume+0x700>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	64bb      	str	r3, [r7, #72]	; 0x48
 800c6e6:	e015      	b.n	800c714 <find_volume+0x3a8>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800c6e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c6ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c6ec:	4413      	add	r3, r2
 800c6ee:	333c      	adds	r3, #60	; 0x3c
 800c6f0:	781b      	ldrb	r3, [r3, #0]
 800c6f2:	2b81      	cmp	r3, #129	; 0x81
 800c6f4:	d10b      	bne.n	800c70e <find_volume+0x3a2>
 800c6f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6f8:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800c6fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c6fe:	3314      	adds	r3, #20
 800c700:	4413      	add	r3, r2
 800c702:	4618      	mov	r0, r3
 800c704:	f7fc fd9a 	bl	800923c <ld_dword>
 800c708:	4603      	mov	r3, r0
 800c70a:	2b02      	cmp	r3, #2
 800c70c:	d009      	beq.n	800c722 <find_volume+0x3b6>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800c70e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c710:	3320      	adds	r3, #32
 800c712:	64bb      	str	r3, [r7, #72]	; 0x48
 800c714:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c716:	899b      	ldrh	r3, [r3, #12]
 800c718:	461a      	mov	r2, r3
 800c71a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c71c:	4293      	cmp	r3, r2
 800c71e:	d3e3      	bcc.n	800c6e8 <find_volume+0x37c>
 800c720:	e000      	b.n	800c724 <find_volume+0x3b8>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800c722:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800c724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c726:	899b      	ldrh	r3, [r3, #12]
 800c728:	461a      	mov	r2, r3
 800c72a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c72c:	4293      	cmp	r3, r2
 800c72e:	d101      	bne.n	800c734 <find_volume+0x3c8>
 800c730:	230d      	movs	r3, #13
 800c732:	e19b      	b.n	800ca6c <find_volume+0x700>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c736:	f04f 32ff 	mov.w	r2, #4294967295
 800c73a:	61da      	str	r2, [r3, #28]
 800c73c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c73e:	69da      	ldr	r2, [r3, #28]
 800c740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c742:	619a      	str	r2, [r3, #24]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800c744:	2304      	movs	r3, #4
 800c746:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c74a:	e177      	b.n	800ca3c <find_volume+0x6d0>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c74c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c74e:	333c      	adds	r3, #60	; 0x3c
 800c750:	330b      	adds	r3, #11
 800c752:	4618      	mov	r0, r3
 800c754:	f7fc fd5a 	bl	800920c <ld_word>
 800c758:	4603      	mov	r3, r0
 800c75a:	461a      	mov	r2, r3
 800c75c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c75e:	899b      	ldrh	r3, [r3, #12]
 800c760:	429a      	cmp	r2, r3
 800c762:	d001      	beq.n	800c768 <find_volume+0x3fc>
 800c764:	230d      	movs	r3, #13
 800c766:	e181      	b.n	800ca6c <find_volume+0x700>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c768:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c76a:	333c      	adds	r3, #60	; 0x3c
 800c76c:	3316      	adds	r3, #22
 800c76e:	4618      	mov	r0, r3
 800c770:	f7fc fd4c 	bl	800920c <ld_word>
 800c774:	4603      	mov	r3, r0
 800c776:	657b      	str	r3, [r7, #84]	; 0x54
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c778:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d106      	bne.n	800c78c <find_volume+0x420>
 800c77e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c780:	333c      	adds	r3, #60	; 0x3c
 800c782:	3324      	adds	r3, #36	; 0x24
 800c784:	4618      	mov	r0, r3
 800c786:	f7fc fd59 	bl	800923c <ld_dword>
 800c78a:	6578      	str	r0, [r7, #84]	; 0x54
		fs->fsize = fasize;
 800c78c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c78e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c790:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c794:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800c798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c79a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c79c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c79e:	789b      	ldrb	r3, [r3, #2]
 800c7a0:	2b01      	cmp	r3, #1
 800c7a2:	d005      	beq.n	800c7b0 <find_volume+0x444>
 800c7a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7a6:	789b      	ldrb	r3, [r3, #2]
 800c7a8:	2b02      	cmp	r3, #2
 800c7aa:	d001      	beq.n	800c7b0 <find_volume+0x444>
 800c7ac:	230d      	movs	r3, #13
 800c7ae:	e15d      	b.n	800ca6c <find_volume+0x700>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c7b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7b2:	789b      	ldrb	r3, [r3, #2]
 800c7b4:	461a      	mov	r2, r3
 800c7b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c7b8:	fb02 f303 	mul.w	r3, r2, r3
 800c7bc:	657b      	str	r3, [r7, #84]	; 0x54

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c7be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7c0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800c7c4:	b29a      	uxth	r2, r3
 800c7c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7c8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c7ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7cc:	895b      	ldrh	r3, [r3, #10]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d008      	beq.n	800c7e4 <find_volume+0x478>
 800c7d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7d4:	895b      	ldrh	r3, [r3, #10]
 800c7d6:	461a      	mov	r2, r3
 800c7d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7da:	895b      	ldrh	r3, [r3, #10]
 800c7dc:	3b01      	subs	r3, #1
 800c7de:	4013      	ands	r3, r2
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d001      	beq.n	800c7e8 <find_volume+0x47c>
 800c7e4:	230d      	movs	r3, #13
 800c7e6:	e141      	b.n	800ca6c <find_volume+0x700>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c7e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7ea:	333c      	adds	r3, #60	; 0x3c
 800c7ec:	3311      	adds	r3, #17
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	f7fc fd0c 	bl	800920c <ld_word>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	461a      	mov	r2, r3
 800c7f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7fa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c7fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7fe:	891b      	ldrh	r3, [r3, #8]
 800c800:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c802:	8992      	ldrh	r2, [r2, #12]
 800c804:	0952      	lsrs	r2, r2, #5
 800c806:	b292      	uxth	r2, r2
 800c808:	fbb3 f1f2 	udiv	r1, r3, r2
 800c80c:	fb02 f201 	mul.w	r2, r2, r1
 800c810:	1a9b      	subs	r3, r3, r2
 800c812:	b29b      	uxth	r3, r3
 800c814:	2b00      	cmp	r3, #0
 800c816:	d001      	beq.n	800c81c <find_volume+0x4b0>
 800c818:	230d      	movs	r3, #13
 800c81a:	e127      	b.n	800ca6c <find_volume+0x700>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c81c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c81e:	333c      	adds	r3, #60	; 0x3c
 800c820:	3313      	adds	r3, #19
 800c822:	4618      	mov	r0, r3
 800c824:	f7fc fcf2 	bl	800920c <ld_word>
 800c828:	4603      	mov	r3, r0
 800c82a:	653b      	str	r3, [r7, #80]	; 0x50
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c82c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d106      	bne.n	800c840 <find_volume+0x4d4>
 800c832:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c834:	333c      	adds	r3, #60	; 0x3c
 800c836:	3320      	adds	r3, #32
 800c838:	4618      	mov	r0, r3
 800c83a:	f7fc fcff 	bl	800923c <ld_dword>
 800c83e:	6538      	str	r0, [r7, #80]	; 0x50

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c840:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c842:	333c      	adds	r3, #60	; 0x3c
 800c844:	330e      	adds	r3, #14
 800c846:	4618      	mov	r0, r3
 800c848:	f7fc fce0 	bl	800920c <ld_word>
 800c84c:	4603      	mov	r3, r0
 800c84e:	86fb      	strh	r3, [r7, #54]	; 0x36
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c850:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c852:	2b00      	cmp	r3, #0
 800c854:	d101      	bne.n	800c85a <find_volume+0x4ee>
 800c856:	230d      	movs	r3, #13
 800c858:	e108      	b.n	800ca6c <find_volume+0x700>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c85a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c85c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c85e:	4413      	add	r3, r2
 800c860:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c862:	8911      	ldrh	r1, [r2, #8]
 800c864:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c866:	8992      	ldrh	r2, [r2, #12]
 800c868:	0952      	lsrs	r2, r2, #5
 800c86a:	b292      	uxth	r2, r2
 800c86c:	fbb1 f2f2 	udiv	r2, r1, r2
 800c870:	b292      	uxth	r2, r2
 800c872:	4413      	add	r3, r2
 800c874:	633b      	str	r3, [r7, #48]	; 0x30
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c876:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c87a:	429a      	cmp	r2, r3
 800c87c:	d201      	bcs.n	800c882 <find_volume+0x516>
 800c87e:	230d      	movs	r3, #13
 800c880:	e0f4      	b.n	800ca6c <find_volume+0x700>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c882:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c886:	1ad3      	subs	r3, r2, r3
 800c888:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c88a:	8952      	ldrh	r2, [r2, #10]
 800c88c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c890:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c894:	2b00      	cmp	r3, #0
 800c896:	d101      	bne.n	800c89c <find_volume+0x530>
 800c898:	230d      	movs	r3, #13
 800c89a:	e0e7      	b.n	800ca6c <find_volume+0x700>
		fmt = FS_FAT32;
 800c89c:	2303      	movs	r3, #3
 800c89e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c8a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8a4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c8a8:	4293      	cmp	r3, r2
 800c8aa:	d802      	bhi.n	800c8b2 <find_volume+0x546>
 800c8ac:	2302      	movs	r3, #2
 800c8ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c8b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8b4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c8b8:	4293      	cmp	r3, r2
 800c8ba:	d802      	bhi.n	800c8c2 <find_volume+0x556>
 800c8bc:	2301      	movs	r3, #1
 800c8be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c8c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8c4:	1c9a      	adds	r2, r3, #2
 800c8c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8c8:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800c8ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c8ce:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c8d0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c8d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c8d4:	441a      	add	r2, r3
 800c8d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8d8:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800c8da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c8dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8de:	441a      	add	r2, r3
 800c8e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8e2:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800c8e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c8e8:	2b03      	cmp	r3, #3
 800c8ea:	d11e      	bne.n	800c92a <find_volume+0x5be>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c8ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8ee:	333c      	adds	r3, #60	; 0x3c
 800c8f0:	332a      	adds	r3, #42	; 0x2a
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f7fc fc8a 	bl	800920c <ld_word>
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d001      	beq.n	800c902 <find_volume+0x596>
 800c8fe:	230d      	movs	r3, #13
 800c900:	e0b4      	b.n	800ca6c <find_volume+0x700>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c902:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c904:	891b      	ldrh	r3, [r3, #8]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d001      	beq.n	800c90e <find_volume+0x5a2>
 800c90a:	230d      	movs	r3, #13
 800c90c:	e0ae      	b.n	800ca6c <find_volume+0x700>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c90e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c910:	333c      	adds	r3, #60	; 0x3c
 800c912:	332c      	adds	r3, #44	; 0x2c
 800c914:	4618      	mov	r0, r3
 800c916:	f7fc fc91 	bl	800923c <ld_dword>
 800c91a:	4602      	mov	r2, r0
 800c91c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c91e:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c922:	6a1b      	ldr	r3, [r3, #32]
 800c924:	009b      	lsls	r3, r3, #2
 800c926:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c928:	e01f      	b.n	800c96a <find_volume+0x5fe>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c92a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c92c:	891b      	ldrh	r3, [r3, #8]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d101      	bne.n	800c936 <find_volume+0x5ca>
 800c932:	230d      	movs	r3, #13
 800c934:	e09a      	b.n	800ca6c <find_volume+0x700>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c936:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c93a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c93c:	441a      	add	r2, r3
 800c93e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c940:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c942:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c946:	2b02      	cmp	r3, #2
 800c948:	d103      	bne.n	800c952 <find_volume+0x5e6>
 800c94a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c94c:	6a1b      	ldr	r3, [r3, #32]
 800c94e:	005b      	lsls	r3, r3, #1
 800c950:	e00a      	b.n	800c968 <find_volume+0x5fc>
 800c952:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c954:	6a1a      	ldr	r2, [r3, #32]
 800c956:	4613      	mov	r3, r2
 800c958:	005b      	lsls	r3, r3, #1
 800c95a:	4413      	add	r3, r2
 800c95c:	085a      	lsrs	r2, r3, #1
 800c95e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c960:	6a1b      	ldr	r3, [r3, #32]
 800c962:	f003 0301 	and.w	r3, r3, #1
 800c966:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c968:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c96a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c96c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c96e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c970:	899b      	ldrh	r3, [r3, #12]
 800c972:	4619      	mov	r1, r3
 800c974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c976:	440b      	add	r3, r1
 800c978:	3b01      	subs	r3, #1
 800c97a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c97c:	8989      	ldrh	r1, [r1, #12]
 800c97e:	fbb3 f3f1 	udiv	r3, r3, r1
 800c982:	429a      	cmp	r2, r3
 800c984:	d201      	bcs.n	800c98a <find_volume+0x61e>
 800c986:	230d      	movs	r3, #13
 800c988:	e070      	b.n	800ca6c <find_volume+0x700>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c98a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c98c:	f04f 32ff 	mov.w	r2, #4294967295
 800c990:	61da      	str	r2, [r3, #28]
 800c992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c994:	69da      	ldr	r2, [r3, #28]
 800c996:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c998:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 800c99a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c99c:	2280      	movs	r2, #128	; 0x80
 800c99e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c9a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c9a4:	2b03      	cmp	r3, #3
 800c9a6:	d149      	bne.n	800ca3c <find_volume+0x6d0>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c9a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9aa:	333c      	adds	r3, #60	; 0x3c
 800c9ac:	3330      	adds	r3, #48	; 0x30
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f7fc fc2c 	bl	800920c <ld_word>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	2b01      	cmp	r3, #1
 800c9b8:	d140      	bne.n	800ca3c <find_volume+0x6d0>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c9ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c9bc:	3301      	adds	r3, #1
 800c9be:	4619      	mov	r1, r3
 800c9c0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c9c2:	f7fd f817 	bl	80099f4 <move_window>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d137      	bne.n	800ca3c <find_volume+0x6d0>
		{
			fs->fsi_flag = 0;
 800c9cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c9d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9d4:	333c      	adds	r3, #60	; 0x3c
 800c9d6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f7fc fc16 	bl	800920c <ld_word>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	461a      	mov	r2, r3
 800c9e4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c9e8:	429a      	cmp	r2, r3
 800c9ea:	d127      	bne.n	800ca3c <find_volume+0x6d0>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c9ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9ee:	333c      	adds	r3, #60	; 0x3c
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	f7fc fc23 	bl	800923c <ld_dword>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	4a1f      	ldr	r2, [pc, #124]	; (800ca78 <find_volume+0x70c>)
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	d11e      	bne.n	800ca3c <find_volume+0x6d0>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c9fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca00:	333c      	adds	r3, #60	; 0x3c
 800ca02:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ca06:	4618      	mov	r0, r3
 800ca08:	f7fc fc18 	bl	800923c <ld_dword>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	4a1b      	ldr	r2, [pc, #108]	; (800ca7c <find_volume+0x710>)
 800ca10:	4293      	cmp	r3, r2
 800ca12:	d113      	bne.n	800ca3c <find_volume+0x6d0>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ca14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca16:	333c      	adds	r3, #60	; 0x3c
 800ca18:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	f7fc fc0d 	bl	800923c <ld_dword>
 800ca22:	4602      	mov	r2, r0
 800ca24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca26:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ca28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca2a:	333c      	adds	r3, #60	; 0x3c
 800ca2c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ca30:	4618      	mov	r0, r3
 800ca32:	f7fc fc03 	bl	800923c <ld_dword>
 800ca36:	4602      	mov	r2, r0
 800ca38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca3a:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ca3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca3e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800ca42:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ca44:	4b0e      	ldr	r3, [pc, #56]	; (800ca80 <find_volume+0x714>)
 800ca46:	881b      	ldrh	r3, [r3, #0]
 800ca48:	3301      	adds	r3, #1
 800ca4a:	b29a      	uxth	r2, r3
 800ca4c:	4b0c      	ldr	r3, [pc, #48]	; (800ca80 <find_volume+0x714>)
 800ca4e:	801a      	strh	r2, [r3, #0]
 800ca50:	4b0b      	ldr	r3, [pc, #44]	; (800ca80 <find_volume+0x714>)
 800ca52:	881a      	ldrh	r2, [r3, #0]
 800ca54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca56:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800ca58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca5a:	4a0a      	ldr	r2, [pc, #40]	; (800ca84 <find_volume+0x718>)
 800ca5c:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 800ca5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca60:	4a09      	ldr	r2, [pc, #36]	; (800ca88 <find_volume+0x71c>)
 800ca62:	615a      	str	r2, [r3, #20]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ca64:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ca66:	f7fc ff5d 	bl	8009924 <clear_lock>
#endif
	return FR_OK;
 800ca6a:	2300      	movs	r3, #0
}
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	3760      	adds	r7, #96	; 0x60
 800ca70:	46bd      	mov	sp, r7
 800ca72:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800ca76:	bf00      	nop
 800ca78:	41615252 	.word	0x41615252
 800ca7c:	61417272 	.word	0x61417272
 800ca80:	200000c8 	.word	0x200000c8
 800ca84:	2000034c 	.word	0x2000034c
 800ca88:	200000ec 	.word	0x200000ec

0800ca8c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b084      	sub	sp, #16
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
 800ca94:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ca96:	2309      	movs	r3, #9
 800ca98:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d01c      	beq.n	800cada <validate+0x4e>
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d018      	beq.n	800cada <validate+0x4e>
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	781b      	ldrb	r3, [r3, #0]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d013      	beq.n	800cada <validate+0x4e>
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	889a      	ldrh	r2, [r3, #4]
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	88db      	ldrh	r3, [r3, #6]
 800cabc:	429a      	cmp	r2, r3
 800cabe:	d10c      	bne.n	800cada <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	785b      	ldrb	r3, [r3, #1]
 800cac6:	4618      	mov	r0, r3
 800cac8:	f7fc fb02 	bl	80090d0 <disk_status>
 800cacc:	4603      	mov	r3, r0
 800cace:	f003 0301 	and.w	r3, r3, #1
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d101      	bne.n	800cada <validate+0x4e>
			res = FR_OK;
 800cad6:	2300      	movs	r3, #0
 800cad8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800cada:	7bfb      	ldrb	r3, [r7, #15]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d102      	bne.n	800cae6 <validate+0x5a>
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	e000      	b.n	800cae8 <validate+0x5c>
 800cae6:	2300      	movs	r3, #0
 800cae8:	683a      	ldr	r2, [r7, #0]
 800caea:	6013      	str	r3, [r2, #0]
	return res;
 800caec:	7bfb      	ldrb	r3, [r7, #15]
}
 800caee:	4618      	mov	r0, r3
 800caf0:	3710      	adds	r7, #16
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}
	...

0800caf8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b088      	sub	sp, #32
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	60f8      	str	r0, [r7, #12]
 800cb00:	60b9      	str	r1, [r7, #8]
 800cb02:	4613      	mov	r3, r2
 800cb04:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800cb06:	68bb      	ldr	r3, [r7, #8]
 800cb08:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800cb0a:	f107 0310 	add.w	r3, r7, #16
 800cb0e:	4618      	mov	r0, r3
 800cb10:	f7ff fb84 	bl	800c21c <get_ldnumber>
 800cb14:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800cb16:	69fb      	ldr	r3, [r7, #28]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	da01      	bge.n	800cb20 <f_mount+0x28>
 800cb1c:	230b      	movs	r3, #11
 800cb1e:	e02b      	b.n	800cb78 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800cb20:	4a17      	ldr	r2, [pc, #92]	; (800cb80 <f_mount+0x88>)
 800cb22:	69fb      	ldr	r3, [r7, #28]
 800cb24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb28:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800cb2a:	69bb      	ldr	r3, [r7, #24]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d005      	beq.n	800cb3c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800cb30:	69b8      	ldr	r0, [r7, #24]
 800cb32:	f7fc fef7 	bl	8009924 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800cb36:	69bb      	ldr	r3, [r7, #24]
 800cb38:	2200      	movs	r2, #0
 800cb3a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d002      	beq.n	800cb48 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	2200      	movs	r2, #0
 800cb46:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800cb48:	68fa      	ldr	r2, [r7, #12]
 800cb4a:	490d      	ldr	r1, [pc, #52]	; (800cb80 <f_mount+0x88>)
 800cb4c:	69fb      	ldr	r3, [r7, #28]
 800cb4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d002      	beq.n	800cb5e <f_mount+0x66>
 800cb58:	79fb      	ldrb	r3, [r7, #7]
 800cb5a:	2b01      	cmp	r3, #1
 800cb5c:	d001      	beq.n	800cb62 <f_mount+0x6a>
 800cb5e:	2300      	movs	r3, #0
 800cb60:	e00a      	b.n	800cb78 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800cb62:	f107 010c 	add.w	r1, r7, #12
 800cb66:	f107 0308 	add.w	r3, r7, #8
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f7ff fbfd 	bl	800c36c <find_volume>
 800cb72:	4603      	mov	r3, r0
 800cb74:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800cb76:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb78:	4618      	mov	r0, r3
 800cb7a:	3720      	adds	r7, #32
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bd80      	pop	{r7, pc}
 800cb80:	200000c4 	.word	0x200000c4

0800cb84 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800cb84:	b5b0      	push	{r4, r5, r7, lr}
 800cb86:	b0a2      	sub	sp, #136	; 0x88
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	60f8      	str	r0, [r7, #12]
 800cb8c:	60b9      	str	r1, [r7, #8]
 800cb8e:	4613      	mov	r3, r2
 800cb90:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d101      	bne.n	800cb9c <f_open+0x18>
 800cb98:	2309      	movs	r3, #9
 800cb9a:	e2a0      	b.n	800d0de <f_open+0x55a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800cb9c:	79fb      	ldrb	r3, [r7, #7]
 800cb9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cba2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800cba4:	79fa      	ldrb	r2, [r7, #7]
 800cba6:	f107 0114 	add.w	r1, r7, #20
 800cbaa:	f107 0308 	add.w	r3, r7, #8
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f7ff fbdc 	bl	800c36c <find_volume>
 800cbb4:	4603      	mov	r3, r0
 800cbb6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	if (res == FR_OK) {
 800cbba:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	f040 8284 	bne.w	800d0cc <f_open+0x548>
		dj.obj.fs = fs;
 800cbc4:	697b      	ldr	r3, [r7, #20]
 800cbc6:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800cbc8:	68ba      	ldr	r2, [r7, #8]
 800cbca:	f107 0318 	add.w	r3, r7, #24
 800cbce:	4611      	mov	r1, r2
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f7ff fa75 	bl	800c0c0 <follow_path>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800cbdc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d11a      	bne.n	800cc1a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800cbe4:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800cbe8:	b25b      	sxtb	r3, r3
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	da03      	bge.n	800cbf6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800cbee:	2306      	movs	r3, #6
 800cbf0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800cbf4:	e011      	b.n	800cc1a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cbf6:	79fb      	ldrb	r3, [r7, #7]
 800cbf8:	f023 0301 	bic.w	r3, r3, #1
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	bf14      	ite	ne
 800cc00:	2301      	movne	r3, #1
 800cc02:	2300      	moveq	r3, #0
 800cc04:	b2db      	uxtb	r3, r3
 800cc06:	461a      	mov	r2, r3
 800cc08:	f107 0318 	add.w	r3, r7, #24
 800cc0c:	4611      	mov	r1, r2
 800cc0e:	4618      	mov	r0, r3
 800cc10:	f7fc fd40 	bl	8009694 <chk_lock>
 800cc14:	4603      	mov	r3, r0
 800cc16:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800cc1a:	79fb      	ldrb	r3, [r7, #7]
 800cc1c:	f003 031c 	and.w	r3, r3, #28
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	f000 8109 	beq.w	800ce38 <f_open+0x2b4>
			if (res != FR_OK) {					/* No file, create new */
 800cc26:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d017      	beq.n	800cc5e <f_open+0xda>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800cc2e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800cc32:	2b04      	cmp	r3, #4
 800cc34:	d10e      	bne.n	800cc54 <f_open+0xd0>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800cc36:	f7fc fd89 	bl	800974c <enq_lock>
 800cc3a:	4603      	mov	r3, r0
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d006      	beq.n	800cc4e <f_open+0xca>
 800cc40:	f107 0318 	add.w	r3, r7, #24
 800cc44:	4618      	mov	r0, r3
 800cc46:	f7fe fdf1 	bl	800b82c <dir_register>
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	e000      	b.n	800cc50 <f_open+0xcc>
 800cc4e:	2312      	movs	r3, #18
 800cc50:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800cc54:	79fb      	ldrb	r3, [r7, #7]
 800cc56:	f043 0308 	orr.w	r3, r3, #8
 800cc5a:	71fb      	strb	r3, [r7, #7]
 800cc5c:	e010      	b.n	800cc80 <f_open+0xfc>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800cc5e:	7fbb      	ldrb	r3, [r7, #30]
 800cc60:	f003 0311 	and.w	r3, r3, #17
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d003      	beq.n	800cc70 <f_open+0xec>
					res = FR_DENIED;
 800cc68:	2307      	movs	r3, #7
 800cc6a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800cc6e:	e007      	b.n	800cc80 <f_open+0xfc>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800cc70:	79fb      	ldrb	r3, [r7, #7]
 800cc72:	f003 0304 	and.w	r3, r3, #4
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d002      	beq.n	800cc80 <f_open+0xfc>
 800cc7a:	2308      	movs	r3, #8
 800cc7c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800cc80:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	f040 80f1 	bne.w	800ce6c <f_open+0x2e8>
 800cc8a:	79fb      	ldrb	r3, [r7, #7]
 800cc8c:	f003 0308 	and.w	r3, r3, #8
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	f000 80eb 	beq.w	800ce6c <f_open+0x2e8>
				dw = GET_FATTIME();
 800cc96:	f7f9 fa1f 	bl	80060d8 <get_fattime>
 800cc9a:	6778      	str	r0, [r7, #116]	; 0x74
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800cc9c:	697b      	ldr	r3, [r7, #20]
 800cc9e:	781b      	ldrb	r3, [r3, #0]
 800cca0:	2b04      	cmp	r3, #4
 800cca2:	f040 8082 	bne.w	800cdaa <f_open+0x226>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800cca6:	697a      	ldr	r2, [r7, #20]
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800ccac:	697b      	ldr	r3, [r7, #20]
 800ccae:	695b      	ldr	r3, [r3, #20]
 800ccb0:	3334      	adds	r3, #52	; 0x34
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	f7fc fac2 	bl	800923c <ld_dword>
 800ccb8:	4602      	mov	r2, r0
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800ccbe:	697b      	ldr	r3, [r7, #20]
 800ccc0:	695b      	ldr	r3, [r3, #20]
 800ccc2:	3338      	adds	r3, #56	; 0x38
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	f7fc fadc 	bl	8009282 <ld_qword>
 800ccca:	4602      	mov	r2, r0
 800cccc:	460b      	mov	r3, r1
 800ccce:	68f9      	ldr	r1, [r7, #12]
 800ccd0:	e9c1 2304 	strd	r2, r3, [r1, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800ccd4:	697b      	ldr	r3, [r7, #20]
 800ccd6:	695b      	ldr	r3, [r3, #20]
 800ccd8:	3321      	adds	r3, #33	; 0x21
 800ccda:	781b      	ldrb	r3, [r3, #0]
 800ccdc:	f003 0302 	and.w	r3, r3, #2
 800cce0:	b2da      	uxtb	r2, r3
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	2200      	movs	r2, #0
 800ccea:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800ccec:	697b      	ldr	r3, [r7, #20]
 800ccee:	695b      	ldr	r3, [r3, #20]
 800ccf0:	3308      	adds	r3, #8
 800ccf2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	f7fc fb9a 	bl	800942e <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800ccfa:	697b      	ldr	r3, [r7, #20]
 800ccfc:	695b      	ldr	r3, [r3, #20]
 800ccfe:	3314      	adds	r3, #20
 800cd00:	2200      	movs	r2, #0
 800cd02:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800cd04:	697b      	ldr	r3, [r7, #20]
 800cd06:	695b      	ldr	r3, [r3, #20]
 800cd08:	330c      	adds	r3, #12
 800cd0a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	f7fc fb8e 	bl	800942e <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800cd12:	697b      	ldr	r3, [r7, #20]
 800cd14:	695b      	ldr	r3, [r3, #20]
 800cd16:	3315      	adds	r3, #21
 800cd18:	2200      	movs	r2, #0
 800cd1a:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800cd1c:	697b      	ldr	r3, [r7, #20]
 800cd1e:	695b      	ldr	r3, [r3, #20]
 800cd20:	3304      	adds	r3, #4
 800cd22:	2220      	movs	r2, #32
 800cd24:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800cd26:	697b      	ldr	r3, [r7, #20]
 800cd28:	695b      	ldr	r3, [r3, #20]
 800cd2a:	3334      	adds	r3, #52	; 0x34
 800cd2c:	2100      	movs	r1, #0
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f7fc fb7d 	bl	800942e <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800cd34:	697b      	ldr	r3, [r7, #20]
 800cd36:	695b      	ldr	r3, [r3, #20]
 800cd38:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cd3c:	f04f 0200 	mov.w	r2, #0
 800cd40:	f04f 0300 	mov.w	r3, #0
 800cd44:	4608      	mov	r0, r1
 800cd46:	f7fc fb9e 	bl	8009486 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800cd4a:	697b      	ldr	r3, [r7, #20]
 800cd4c:	695b      	ldr	r3, [r3, #20]
 800cd4e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800cd52:	f04f 0200 	mov.w	r2, #0
 800cd56:	f04f 0300 	mov.w	r3, #0
 800cd5a:	4608      	mov	r0, r1
 800cd5c:	f7fc fb93 	bl	8009486 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800cd60:	697b      	ldr	r3, [r7, #20]
 800cd62:	695b      	ldr	r3, [r3, #20]
 800cd64:	3321      	adds	r3, #33	; 0x21
 800cd66:	2201      	movs	r2, #1
 800cd68:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800cd6a:	f107 0318 	add.w	r3, r7, #24
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f7fe faa9 	bl	800b2c6 <store_xdir>
 800cd74:	4603      	mov	r3, r0
 800cd76:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800cd7a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d174      	bne.n	800ce6c <f_open+0x2e8>
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	689b      	ldr	r3, [r3, #8]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d070      	beq.n	800ce6c <f_open+0x2e8>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800cd8a:	68f8      	ldr	r0, [r7, #12]
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	689b      	ldr	r3, [r3, #8]
 800cd90:	2200      	movs	r2, #0
 800cd92:	4619      	mov	r1, r3
 800cd94:	f7fd faba 	bl	800a30c <remove_chain>
 800cd98:	4603      	mov	r3, r0
 800cd9a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	689a      	ldr	r2, [r3, #8]
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	3a01      	subs	r2, #1
 800cda6:	619a      	str	r2, [r3, #24]
 800cda8:	e060      	b.n	800ce6c <f_open+0x2e8>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800cdaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cdac:	330e      	adds	r3, #14
 800cdae:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	f7fc fb3c 	bl	800942e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800cdb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cdb8:	3316      	adds	r3, #22
 800cdba:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	f7fc fb36 	bl	800942e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800cdc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cdc4:	330b      	adds	r3, #11
 800cdc6:	2220      	movs	r2, #32
 800cdc8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800cdca:	697b      	ldr	r3, [r7, #20]
 800cdcc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cdce:	4611      	mov	r1, r2
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	f7fd fe6a 	bl	800aaaa <ld_clust>
 800cdd6:	6738      	str	r0, [r7, #112]	; 0x70
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800cdd8:	697b      	ldr	r3, [r7, #20]
 800cdda:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cddc:	2200      	movs	r2, #0
 800cdde:	4618      	mov	r0, r3
 800cde0:	f7fd fe82 	bl	800aae8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800cde4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cde6:	331c      	adds	r3, #28
 800cde8:	2100      	movs	r1, #0
 800cdea:	4618      	mov	r0, r3
 800cdec:	f7fc fb1f 	bl	800942e <st_dword>
					fs->wflag = 1;
 800cdf0:	697b      	ldr	r3, [r7, #20]
 800cdf2:	2201      	movs	r2, #1
 800cdf4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800cdf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d037      	beq.n	800ce6c <f_open+0x2e8>
						dw = fs->winsect;
 800cdfc:	697b      	ldr	r3, [r7, #20]
 800cdfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce00:	677b      	str	r3, [r7, #116]	; 0x74
						res = remove_chain(&dj.obj, cl, 0);
 800ce02:	f107 0318 	add.w	r3, r7, #24
 800ce06:	2200      	movs	r2, #0
 800ce08:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f7fd fa7e 	bl	800a30c <remove_chain>
 800ce10:	4603      	mov	r3, r0
 800ce12:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
						if (res == FR_OK) {
 800ce16:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d126      	bne.n	800ce6c <f_open+0x2e8>
							res = move_window(fs, dw);
 800ce1e:	697b      	ldr	r3, [r7, #20]
 800ce20:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800ce22:	4618      	mov	r0, r3
 800ce24:	f7fc fde6 	bl	80099f4 <move_window>
 800ce28:	4603      	mov	r3, r0
 800ce2a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ce2e:	697b      	ldr	r3, [r7, #20]
 800ce30:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ce32:	3a01      	subs	r2, #1
 800ce34:	619a      	str	r2, [r3, #24]
 800ce36:	e019      	b.n	800ce6c <f_open+0x2e8>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ce38:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d115      	bne.n	800ce6c <f_open+0x2e8>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ce40:	7fbb      	ldrb	r3, [r7, #30]
 800ce42:	f003 0310 	and.w	r3, r3, #16
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d003      	beq.n	800ce52 <f_open+0x2ce>
					res = FR_NO_FILE;
 800ce4a:	2304      	movs	r3, #4
 800ce4c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800ce50:	e00c      	b.n	800ce6c <f_open+0x2e8>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ce52:	79fb      	ldrb	r3, [r7, #7]
 800ce54:	f003 0302 	and.w	r3, r3, #2
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d007      	beq.n	800ce6c <f_open+0x2e8>
 800ce5c:	7fbb      	ldrb	r3, [r7, #30]
 800ce5e:	f003 0301 	and.w	r3, r3, #1
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d002      	beq.n	800ce6c <f_open+0x2e8>
						res = FR_DENIED;
 800ce66:	2307      	movs	r3, #7
 800ce68:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					}
				}
			}
		}
		if (res == FR_OK) {
 800ce6c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d128      	bne.n	800cec6 <f_open+0x342>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ce74:	79fb      	ldrb	r3, [r7, #7]
 800ce76:	f003 0308 	and.w	r3, r3, #8
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d003      	beq.n	800ce86 <f_open+0x302>
				mode |= FA_MODIFIED;
 800ce7e:	79fb      	ldrb	r3, [r7, #7]
 800ce80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce84:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ce86:	697b      	ldr	r3, [r7, #20]
 800ce88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 800ce8e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ce94:	79fb      	ldrb	r3, [r7, #7]
 800ce96:	f023 0301 	bic.w	r3, r3, #1
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	bf14      	ite	ne
 800ce9e:	2301      	movne	r3, #1
 800cea0:	2300      	moveq	r3, #0
 800cea2:	b2db      	uxtb	r3, r3
 800cea4:	461a      	mov	r2, r3
 800cea6:	f107 0318 	add.w	r3, r7, #24
 800ceaa:	4611      	mov	r1, r2
 800ceac:	4618      	mov	r0, r3
 800ceae:	f7fc fc6f 	bl	8009790 <inc_lock>
 800ceb2:	4602      	mov	r2, r0
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d102      	bne.n	800cec6 <f_open+0x342>
 800cec0:	2302      	movs	r3, #2
 800cec2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				}
			}
		}
#endif

		if (res == FR_OK) {
 800cec6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	f040 80fe 	bne.w	800d0cc <f_open+0x548>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800ced0:	697b      	ldr	r3, [r7, #20]
 800ced2:	781b      	ldrb	r3, [r3, #0]
 800ced4:	2b04      	cmp	r3, #4
 800ced6:	d12c      	bne.n	800cf32 <f_open+0x3ae>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800ced8:	6a3a      	ldr	r2, [r7, #32]
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800cede:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cee2:	4613      	mov	r3, r2
 800cee4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cee8:	7ffa      	ldrb	r2, [r7, #31]
 800ceea:	431a      	orrs	r2, r3
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800cef0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800cef6:	697b      	ldr	r3, [r7, #20]
 800cef8:	695b      	ldr	r3, [r3, #20]
 800cefa:	3334      	adds	r3, #52	; 0x34
 800cefc:	4618      	mov	r0, r3
 800cefe:	f7fc f99d 	bl	800923c <ld_dword>
 800cf02:	4602      	mov	r2, r0
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800cf08:	697b      	ldr	r3, [r7, #20]
 800cf0a:	695b      	ldr	r3, [r3, #20]
 800cf0c:	3338      	adds	r3, #56	; 0x38
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f7fc f9b7 	bl	8009282 <ld_qword>
 800cf14:	4602      	mov	r2, r0
 800cf16:	460b      	mov	r3, r1
 800cf18:	68f9      	ldr	r1, [r7, #12]
 800cf1a:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800cf1e:	697b      	ldr	r3, [r7, #20]
 800cf20:	695b      	ldr	r3, [r3, #20]
 800cf22:	3321      	adds	r3, #33	; 0x21
 800cf24:	781b      	ldrb	r3, [r3, #0]
 800cf26:	f003 0302 	and.w	r3, r3, #2
 800cf2a:	b2da      	uxtb	r2, r3
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	71da      	strb	r2, [r3, #7]
 800cf30:	e014      	b.n	800cf5c <f_open+0x3d8>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800cf32:	697b      	ldr	r3, [r7, #20]
 800cf34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cf36:	4611      	mov	r1, r2
 800cf38:	4618      	mov	r0, r3
 800cf3a:	f7fd fdb6 	bl	800aaaa <ld_clust>
 800cf3e:	4602      	mov	r2, r0
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800cf44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf46:	331c      	adds	r3, #28
 800cf48:	4618      	mov	r0, r3
 800cf4a:	f7fc f977 	bl	800923c <ld_dword>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	461a      	mov	r2, r3
 800cf52:	f04f 0300 	mov.w	r3, #0
 800cf56:	68f9      	ldr	r1, [r7, #12]
 800cf58:	e9c1 2304 	strd	r2, r3, [r1, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	2200      	movs	r2, #0
 800cf60:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800cf62:	697a      	ldr	r2, [r7, #20]
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800cf68:	697b      	ldr	r3, [r7, #20]
 800cf6a:	88da      	ldrh	r2, [r3, #6]
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	79fa      	ldrb	r2, [r7, #7]
 800cf74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	2200      	movs	r2, #0
 800cf84:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800cf86:	68f9      	ldr	r1, [r7, #12]
 800cf88:	f04f 0200 	mov.w	r2, #0
 800cf8c:	f04f 0300 	mov.w	r3, #0
 800cf90:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	3354      	adds	r3, #84	; 0x54
 800cf98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800cf9c:	2100      	movs	r1, #0
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	f7fc fb1a 	bl	80095d8 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800cfa4:	79fb      	ldrb	r3, [r7, #7]
 800cfa6:	f003 0320 	and.w	r3, r3, #32
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	f000 808e 	beq.w	800d0cc <f_open+0x548>
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800cfb6:	4313      	orrs	r3, r2
 800cfb8:	f000 8088 	beq.w	800d0cc <f_open+0x548>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800cfc2:	68f9      	ldr	r1, [r7, #12]
 800cfc4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800cfc8:	697b      	ldr	r3, [r7, #20]
 800cfca:	895b      	ldrh	r3, [r3, #10]
 800cfcc:	461a      	mov	r2, r3
 800cfce:	697b      	ldr	r3, [r7, #20]
 800cfd0:	899b      	ldrh	r3, [r3, #12]
 800cfd2:	fb03 f302 	mul.w	r3, r3, r2
 800cfd6:	66fb      	str	r3, [r7, #108]	; 0x6c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	689b      	ldr	r3, [r3, #8]
 800cfdc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800cfe6:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 800cfea:	e021      	b.n	800d030 <f_open+0x4ac>
					clst = get_fat(&fp->obj, clst);
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800cff2:	4618      	mov	r0, r3
 800cff4:	f7fc fdbc 	bl	8009b70 <get_fat>
 800cff8:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
					if (clst <= 1) res = FR_INT_ERR;
 800cffc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d000:	2b01      	cmp	r3, #1
 800d002:	d802      	bhi.n	800d00a <f_open+0x486>
 800d004:	2302      	movs	r3, #2
 800d006:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d00a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d00e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d012:	d102      	bne.n	800d01a <f_open+0x496>
 800d014:	2301      	movs	r3, #1
 800d016:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d01a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d01c:	461a      	mov	r2, r3
 800d01e:	f04f 0300 	mov.w	r3, #0
 800d022:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800d026:	1a84      	subs	r4, r0, r2
 800d028:	eb61 0503 	sbc.w	r5, r1, r3
 800d02c:	e9c7 451e 	strd	r4, r5, [r7, #120]	; 0x78
 800d030:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800d034:	2b00      	cmp	r3, #0
 800d036:	d109      	bne.n	800d04c <f_open+0x4c8>
 800d038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d03a:	4618      	mov	r0, r3
 800d03c:	f04f 0100 	mov.w	r1, #0
 800d040:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800d044:	4299      	cmp	r1, r3
 800d046:	bf08      	it	eq
 800d048:	4290      	cmpeq	r0, r2
 800d04a:	d3cf      	bcc.n	800cfec <f_open+0x468>
				}
				fp->clust = clst;
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d052:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d054:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d137      	bne.n	800d0cc <f_open+0x548>
 800d05c:	697b      	ldr	r3, [r7, #20]
 800d05e:	899b      	ldrh	r3, [r3, #12]
 800d060:	b29a      	uxth	r2, r3
 800d062:	f04f 0300 	mov.w	r3, #0
 800d066:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800d06a:	f7f3 fc1f 	bl	80008ac <__aeabi_uldivmod>
 800d06e:	4313      	orrs	r3, r2
 800d070:	d02c      	beq.n	800d0cc <f_open+0x548>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d072:	697b      	ldr	r3, [r7, #20]
 800d074:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800d078:	4618      	mov	r0, r3
 800d07a:	f7fc fd59 	bl	8009b30 <clust2sect>
 800d07e:	66b8      	str	r0, [r7, #104]	; 0x68
 800d080:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d082:	2b00      	cmp	r3, #0
 800d084:	d103      	bne.n	800d08e <f_open+0x50a>
						res = FR_INT_ERR;
 800d086:	2302      	movs	r3, #2
 800d088:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800d08c:	e01e      	b.n	800d0cc <f_open+0x548>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d08e:	697b      	ldr	r3, [r7, #20]
 800d090:	899b      	ldrh	r3, [r3, #12]
 800d092:	b29a      	uxth	r2, r3
 800d094:	f04f 0300 	mov.w	r3, #0
 800d098:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800d09c:	f7f3 fc06 	bl	80008ac <__aeabi_uldivmod>
 800d0a0:	4602      	mov	r2, r0
 800d0a2:	460b      	mov	r3, r1
 800d0a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d0a6:	441a      	add	r2, r3
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d0ac:	697b      	ldr	r3, [r7, #20]
 800d0ae:	7858      	ldrb	r0, [r3, #1]
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d0ba:	2301      	movs	r3, #1
 800d0bc:	f7fc f848 	bl	8009150 <disk_read>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d002      	beq.n	800d0cc <f_open+0x548>
 800d0c6:	2301      	movs	r3, #1
 800d0c8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d0cc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d002      	beq.n	800d0da <f_open+0x556>
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d0da:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800d0de:	4618      	mov	r0, r3
 800d0e0:	3788      	adds	r7, #136	; 0x88
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bdb0      	pop	{r4, r5, r7, pc}

0800d0e6 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d0e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d0ea:	b091      	sub	sp, #68	; 0x44
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	60f8      	str	r0, [r7, #12]
 800d0f0:	60b9      	str	r1, [r7, #8]
 800d0f2:	607a      	str	r2, [r7, #4]
 800d0f4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d0f6:	68bb      	ldr	r3, [r7, #8]
 800d0f8:	62fb      	str	r3, [r7, #44]	; 0x2c


	*br = 0;	/* Clear read byte counter */
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	f107 0214 	add.w	r2, r7, #20
 800d106:	4611      	mov	r1, r2
 800d108:	4618      	mov	r0, r3
 800d10a:	f7ff fcbf 	bl	800ca8c <validate>
 800d10e:	4603      	mov	r3, r0
 800d110:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d114:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d108      	bne.n	800d12e <f_read+0x48>
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d122:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800d126:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d002      	beq.n	800d134 <f_read+0x4e>
 800d12e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d132:	e15f      	b.n	800d3f4 <f_read+0x30e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d13a:	f003 0301 	and.w	r3, r3, #1
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d101      	bne.n	800d146 <f_read+0x60>
 800d142:	2307      	movs	r3, #7
 800d144:	e156      	b.n	800d3f4 <f_read+0x30e>
	remain = fp->obj.objsize - fp->fptr;
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800d152:	ebb0 0802 	subs.w	r8, r0, r2
 800d156:	eb61 0903 	sbc.w	r9, r1, r3
 800d15a:	e9c7 8908 	strd	r8, r9, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	461a      	mov	r2, r3
 800d162:	f04f 0300 	mov.w	r3, #0
 800d166:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d16a:	4299      	cmp	r1, r3
 800d16c:	bf08      	it	eq
 800d16e:	4290      	cmpeq	r0, r2
 800d170:	f080 813b 	bcs.w	800d3ea <f_read+0x304>
 800d174:	6a3b      	ldr	r3, [r7, #32]
 800d176:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d178:	e137      	b.n	800d3ea <f_read+0x304>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800d180:	697b      	ldr	r3, [r7, #20]
 800d182:	899b      	ldrh	r3, [r3, #12]
 800d184:	b29a      	uxth	r2, r3
 800d186:	f04f 0300 	mov.w	r3, #0
 800d18a:	f7f3 fb8f 	bl	80008ac <__aeabi_uldivmod>
 800d18e:	4313      	orrs	r3, r2
 800d190:	f040 80e6 	bne.w	800d360 <f_read+0x27a>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800d19a:	697b      	ldr	r3, [r7, #20]
 800d19c:	899b      	ldrh	r3, [r3, #12]
 800d19e:	b29a      	uxth	r2, r3
 800d1a0:	f04f 0300 	mov.w	r3, #0
 800d1a4:	f7f3 fb82 	bl	80008ac <__aeabi_uldivmod>
 800d1a8:	4602      	mov	r2, r0
 800d1aa:	460b      	mov	r3, r1
 800d1ac:	697b      	ldr	r3, [r7, #20]
 800d1ae:	895b      	ldrh	r3, [r3, #10]
 800d1b0:	3b01      	subs	r3, #1
 800d1b2:	4013      	ands	r3, r2
 800d1b4:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d1b6:	69fb      	ldr	r3, [r7, #28]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d132      	bne.n	800d222 <f_read+0x13c>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800d1c2:	4313      	orrs	r3, r2
 800d1c4:	d103      	bne.n	800d1ce <f_read+0xe8>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	689b      	ldr	r3, [r3, #8]
 800d1ca:	63bb      	str	r3, [r7, #56]	; 0x38
 800d1cc:	e013      	b.n	800d1f6 <f_read+0x110>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d007      	beq.n	800d1e6 <f_read+0x100>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800d1dc:	68f8      	ldr	r0, [r7, #12]
 800d1de:	f7fd fa4a 	bl	800a676 <clmt_clust>
 800d1e2:	63b8      	str	r0, [r7, #56]	; 0x38
 800d1e4:	e007      	b.n	800d1f6 <f_read+0x110>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d1e6:	68fa      	ldr	r2, [r7, #12]
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1ec:	4619      	mov	r1, r3
 800d1ee:	4610      	mov	r0, r2
 800d1f0:	f7fc fcbe 	bl	8009b70 <get_fat>
 800d1f4:	63b8      	str	r0, [r7, #56]	; 0x38
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d1f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1f8:	2b01      	cmp	r3, #1
 800d1fa:	d805      	bhi.n	800d208 <f_read+0x122>
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	2202      	movs	r2, #2
 800d200:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800d204:	2302      	movs	r3, #2
 800d206:	e0f5      	b.n	800d3f4 <f_read+0x30e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d20a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d20e:	d105      	bne.n	800d21c <f_read+0x136>
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	2201      	movs	r2, #1
 800d214:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800d218:	2301      	movs	r3, #1
 800d21a:	e0eb      	b.n	800d3f4 <f_read+0x30e>
				fp->clust = clst;				/* Update current cluster */
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d220:	641a      	str	r2, [r3, #64]	; 0x40
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d222:	697a      	ldr	r2, [r7, #20]
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d228:	4619      	mov	r1, r3
 800d22a:	4610      	mov	r0, r2
 800d22c:	f7fc fc80 	bl	8009b30 <clust2sect>
 800d230:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d232:	69bb      	ldr	r3, [r7, #24]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d105      	bne.n	800d244 <f_read+0x15e>
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	2202      	movs	r2, #2
 800d23c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800d240:	2302      	movs	r3, #2
 800d242:	e0d7      	b.n	800d3f4 <f_read+0x30e>
			sect += csect;
 800d244:	69ba      	ldr	r2, [r7, #24]
 800d246:	69fb      	ldr	r3, [r7, #28]
 800d248:	4413      	add	r3, r2
 800d24a:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d24c:	697b      	ldr	r3, [r7, #20]
 800d24e:	899b      	ldrh	r3, [r3, #12]
 800d250:	461a      	mov	r2, r3
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	fbb3 f3f2 	udiv	r3, r3, r2
 800d258:	633b      	str	r3, [r7, #48]	; 0x30
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d043      	beq.n	800d2e8 <f_read+0x202>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d260:	69fa      	ldr	r2, [r7, #28]
 800d262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d264:	4413      	add	r3, r2
 800d266:	697a      	ldr	r2, [r7, #20]
 800d268:	8952      	ldrh	r2, [r2, #10]
 800d26a:	4293      	cmp	r3, r2
 800d26c:	d905      	bls.n	800d27a <f_read+0x194>
					cc = fs->csize - csect;
 800d26e:	697b      	ldr	r3, [r7, #20]
 800d270:	895b      	ldrh	r3, [r3, #10]
 800d272:	461a      	mov	r2, r3
 800d274:	69fb      	ldr	r3, [r7, #28]
 800d276:	1ad3      	subs	r3, r2, r3
 800d278:	633b      	str	r3, [r7, #48]	; 0x30
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d27a:	697b      	ldr	r3, [r7, #20]
 800d27c:	7858      	ldrb	r0, [r3, #1]
 800d27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d280:	69ba      	ldr	r2, [r7, #24]
 800d282:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d284:	f7fb ff64 	bl	8009150 <disk_read>
 800d288:	4603      	mov	r3, r0
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d005      	beq.n	800d29a <f_read+0x1b4>
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	2201      	movs	r2, #1
 800d292:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800d296:	2301      	movs	r3, #1
 800d298:	e0ac      	b.n	800d3f4 <f_read+0x30e>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d2a0:	b25b      	sxtb	r3, r3
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	da18      	bge.n	800d2d8 <f_read+0x1f2>
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d2aa:	69bb      	ldr	r3, [r7, #24]
 800d2ac:	1ad3      	subs	r3, r2, r3
 800d2ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2b0:	429a      	cmp	r2, r3
 800d2b2:	d911      	bls.n	800d2d8 <f_read+0x1f2>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d2b8:	69bb      	ldr	r3, [r7, #24]
 800d2ba:	1ad3      	subs	r3, r2, r3
 800d2bc:	697a      	ldr	r2, [r7, #20]
 800d2be:	8992      	ldrh	r2, [r2, #12]
 800d2c0:	fb02 f303 	mul.w	r3, r2, r3
 800d2c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d2c6:	18d0      	adds	r0, r2, r3
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800d2ce:	697b      	ldr	r3, [r7, #20]
 800d2d0:	899b      	ldrh	r3, [r3, #12]
 800d2d2:	461a      	mov	r2, r3
 800d2d4:	f7fc f95f 	bl	8009596 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d2d8:	697b      	ldr	r3, [r7, #20]
 800d2da:	899b      	ldrh	r3, [r3, #12]
 800d2dc:	461a      	mov	r2, r3
 800d2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2e0:	fb02 f303 	mul.w	r3, r2, r3
 800d2e4:	637b      	str	r3, [r7, #52]	; 0x34
				continue;
 800d2e6:	e065      	b.n	800d3b4 <f_read+0x2ce>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2ec:	69ba      	ldr	r2, [r7, #24]
 800d2ee:	429a      	cmp	r2, r3
 800d2f0:	d033      	beq.n	800d35a <f_read+0x274>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d2f8:	b25b      	sxtb	r3, r3
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	da1b      	bge.n	800d336 <f_read+0x250>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d2fe:	697b      	ldr	r3, [r7, #20]
 800d300:	7858      	ldrb	r0, [r3, #1]
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d30c:	2301      	movs	r3, #1
 800d30e:	f7fb ff3f 	bl	8009190 <disk_write>
 800d312:	4603      	mov	r3, r0
 800d314:	2b00      	cmp	r3, #0
 800d316:	d005      	beq.n	800d324 <f_read+0x23e>
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	2201      	movs	r2, #1
 800d31c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800d320:	2301      	movs	r3, #1
 800d322:	e067      	b.n	800d3f4 <f_read+0x30e>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d32a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d32e:	b2da      	uxtb	r2, r3
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d336:	697b      	ldr	r3, [r7, #20]
 800d338:	7858      	ldrb	r0, [r3, #1]
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800d340:	2301      	movs	r3, #1
 800d342:	69ba      	ldr	r2, [r7, #24]
 800d344:	f7fb ff04 	bl	8009150 <disk_read>
 800d348:	4603      	mov	r3, r0
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d005      	beq.n	800d35a <f_read+0x274>
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	2201      	movs	r2, #1
 800d352:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800d356:	2301      	movs	r3, #1
 800d358:	e04c      	b.n	800d3f4 <f_read+0x30e>
			}
#endif
			fp->sect = sect;
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	69ba      	ldr	r2, [r7, #24]
 800d35e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d360:	697b      	ldr	r3, [r7, #20]
 800d362:	899b      	ldrh	r3, [r3, #12]
 800d364:	4618      	mov	r0, r3
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800d36c:	4613      	mov	r3, r2
 800d36e:	697a      	ldr	r2, [r7, #20]
 800d370:	8992      	ldrh	r2, [r2, #12]
 800d372:	fbb3 f1f2 	udiv	r1, r3, r2
 800d376:	fb02 f201 	mul.w	r2, r2, r1
 800d37a:	1a9b      	subs	r3, r3, r2
 800d37c:	1ac3      	subs	r3, r0, r3
 800d37e:	637b      	str	r3, [r7, #52]	; 0x34
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d380:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	429a      	cmp	r2, r3
 800d386:	d901      	bls.n	800d38c <f_read+0x2a6>
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	637b      	str	r3, [r7, #52]	; 0x34
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	f103 0654 	add.w	r6, r3, #84	; 0x54
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800d398:	697b      	ldr	r3, [r7, #20]
 800d39a:	899b      	ldrh	r3, [r3, #12]
 800d39c:	b29a      	uxth	r2, r3
 800d39e:	f04f 0300 	mov.w	r3, #0
 800d3a2:	f7f3 fa83 	bl	80008ac <__aeabi_uldivmod>
 800d3a6:	4613      	mov	r3, r2
 800d3a8:	4433      	add	r3, r6
 800d3aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d3ac:	4619      	mov	r1, r3
 800d3ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3b0:	f7fc f8f1 	bl	8009596 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d3b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d3b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3b8:	4413      	add	r3, r2
 800d3ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800d3c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3c4:	461a      	mov	r2, r3
 800d3c6:	f04f 0300 	mov.w	r3, #0
 800d3ca:	1884      	adds	r4, r0, r2
 800d3cc:	eb41 0503 	adc.w	r5, r1, r3
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	e9c3 450e 	strd	r4, r5, [r3, #56]	; 0x38
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	681a      	ldr	r2, [r3, #0]
 800d3da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3dc:	441a      	add	r2, r3
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	601a      	str	r2, [r3, #0]
 800d3e2:	687a      	ldr	r2, [r7, #4]
 800d3e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3e6:	1ad3      	subs	r3, r2, r3
 800d3e8:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	f47f aec4 	bne.w	800d17a <f_read+0x94>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d3f2:	2300      	movs	r3, #0
}
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	3744      	adds	r7, #68	; 0x44
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d3fe <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d3fe:	b580      	push	{r7, lr}
 800d400:	b09a      	sub	sp, #104	; 0x68
 800d402:	af00      	add	r7, sp, #0
 800d404:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800d40c:	4611      	mov	r1, r2
 800d40e:	4618      	mov	r0, r3
 800d410:	f7ff fb3c 	bl	800ca8c <validate>
 800d414:	4603      	mov	r3, r0
 800d416:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800d41a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d41e:	2b00      	cmp	r3, #0
 800d420:	f040 8105 	bne.w	800d62e <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d42a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d42e:	2b00      	cmp	r3, #0
 800d430:	f000 80fd 	beq.w	800d62e <f_sync+0x230>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d43a:	b25b      	sxtb	r3, r3
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	da17      	bge.n	800d470 <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d440:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d442:	7858      	ldrb	r0, [r3, #1]
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d44e:	2301      	movs	r3, #1
 800d450:	f7fb fe9e 	bl	8009190 <disk_write>
 800d454:	4603      	mov	r3, r0
 800d456:	2b00      	cmp	r3, #0
 800d458:	d001      	beq.n	800d45e <f_sync+0x60>
 800d45a:	2301      	movs	r3, #1
 800d45c:	e0e9      	b.n	800d632 <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d464:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d468:	b2da      	uxtb	r2, r3
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d470:	f7f8 fe32 	bl	80060d8 <get_fattime>
 800d474:	6638      	str	r0, [r7, #96]	; 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800d476:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d478:	781b      	ldrb	r3, [r3, #0]
 800d47a:	2b04      	cmp	r3, #4
 800d47c:	f040 808c 	bne.w	800d598 <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	4618      	mov	r0, r3
 800d484:	f7fc fee2 	bl	800a24c <fill_first_frag>
 800d488:	4603      	mov	r3, r0
 800d48a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 800d48e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d492:	2b00      	cmp	r3, #0
 800d494:	d10a      	bne.n	800d4ac <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800d496:	6878      	ldr	r0, [r7, #4]
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d49c:	f04f 32ff 	mov.w	r2, #4294967295
 800d4a0:	4619      	mov	r1, r3
 800d4a2:	f7fc ff02 	bl	800a2aa <fill_last_frag>
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
				if (res == FR_OK) {
 800d4ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	f040 80bc 	bne.w	800d62e <f_sync+0x230>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800d4b6:	687a      	ldr	r2, [r7, #4]
 800d4b8:	f107 0308 	add.w	r3, r7, #8
 800d4bc:	4611      	mov	r1, r2
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f7fd fec6 	bl	800b250 <load_obj_dir>
 800d4c4:	4603      	mov	r3, r0
 800d4c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (res == FR_OK) {
 800d4ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	f040 80ad 	bne.w	800d62e <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800d4d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d4d6:	695b      	ldr	r3, [r3, #20]
 800d4d8:	3304      	adds	r3, #4
 800d4da:	781a      	ldrb	r2, [r3, #0]
 800d4dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d4de:	695b      	ldr	r3, [r3, #20]
 800d4e0:	3304      	adds	r3, #4
 800d4e2:	f042 0220 	orr.w	r2, r2, #32
 800d4e6:	b2d2      	uxtb	r2, r2
 800d4e8:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	79da      	ldrb	r2, [r3, #7]
 800d4ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d4f0:	695b      	ldr	r3, [r3, #20]
 800d4f2:	3321      	adds	r3, #33	; 0x21
 800d4f4:	f042 0201 	orr.w	r2, r2, #1
 800d4f8:	b2d2      	uxtb	r2, r2
 800d4fa:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800d4fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d4fe:	695b      	ldr	r3, [r3, #20]
 800d500:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	689b      	ldr	r3, [r3, #8]
 800d508:	4619      	mov	r1, r3
 800d50a:	4610      	mov	r0, r2
 800d50c:	f7fb ff8f 	bl	800942e <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800d510:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d512:	695b      	ldr	r3, [r3, #20]
 800d514:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d51e:	4608      	mov	r0, r1
 800d520:	f7fb ffb1 	bl	8009486 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800d524:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d526:	695b      	ldr	r3, [r3, #20]
 800d528:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d532:	4608      	mov	r0, r1
 800d534:	f7fb ffa7 	bl	8009486 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800d538:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d53a:	695b      	ldr	r3, [r3, #20]
 800d53c:	330c      	adds	r3, #12
 800d53e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d540:	4618      	mov	r0, r3
 800d542:	f7fb ff74 	bl	800942e <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800d546:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d548:	695b      	ldr	r3, [r3, #20]
 800d54a:	3315      	adds	r3, #21
 800d54c:	2200      	movs	r2, #0
 800d54e:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800d550:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d552:	695b      	ldr	r3, [r3, #20]
 800d554:	3310      	adds	r3, #16
 800d556:	2100      	movs	r1, #0
 800d558:	4618      	mov	r0, r3
 800d55a:	f7fb ff68 	bl	800942e <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800d55e:	f107 0308 	add.w	r3, r7, #8
 800d562:	4618      	mov	r0, r3
 800d564:	f7fd feaf 	bl	800b2c6 <store_xdir>
 800d568:	4603      	mov	r3, r0
 800d56a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800d56e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d572:	2b00      	cmp	r3, #0
 800d574:	d15b      	bne.n	800d62e <f_sync+0x230>
							res = sync_fs(fs);
 800d576:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d578:	4618      	mov	r0, r3
 800d57a:	f7fc fa69 	bl	8009a50 <sync_fs>
 800d57e:	4603      	mov	r3, r0
 800d580:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d58a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d58e:	b2da      	uxtb	r2, r3
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800d596:	e04a      	b.n	800d62e <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d598:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d59e:	4619      	mov	r1, r3
 800d5a0:	4610      	mov	r0, r2
 800d5a2:	f7fc fa27 	bl	80099f4 <move_window>
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 800d5ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d13c      	bne.n	800d62e <f_sync+0x230>
					dir = fp->dir_ptr;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d5b8:	65fb      	str	r3, [r7, #92]	; 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d5ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d5bc:	330b      	adds	r3, #11
 800d5be:	781a      	ldrb	r2, [r3, #0]
 800d5c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d5c2:	330b      	adds	r3, #11
 800d5c4:	f042 0220 	orr.w	r2, r2, #32
 800d5c8:	b2d2      	uxtb	r2, r2
 800d5ca:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	6818      	ldr	r0, [r3, #0]
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	689b      	ldr	r3, [r3, #8]
 800d5d4:	461a      	mov	r2, r3
 800d5d6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800d5d8:	f7fd fa86 	bl	800aae8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d5dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d5de:	f103 001c 	add.w	r0, r3, #28
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d5e8:	4613      	mov	r3, r2
 800d5ea:	4619      	mov	r1, r3
 800d5ec:	f7fb ff1f 	bl	800942e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d5f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d5f2:	3316      	adds	r3, #22
 800d5f4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	f7fb ff19 	bl	800942e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d5fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d5fe:	3312      	adds	r3, #18
 800d600:	2100      	movs	r1, #0
 800d602:	4618      	mov	r0, r3
 800d604:	f7fb fef8 	bl	80093f8 <st_word>
					fs->wflag = 1;
 800d608:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d60a:	2201      	movs	r2, #1
 800d60c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d60e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d610:	4618      	mov	r0, r3
 800d612:	f7fc fa1d 	bl	8009a50 <sync_fs>
 800d616:	4603      	mov	r3, r0
 800d618:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d622:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d626:	b2da      	uxtb	r2, r3
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d62e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800d632:	4618      	mov	r0, r3
 800d634:	3768      	adds	r7, #104	; 0x68
 800d636:	46bd      	mov	sp, r7
 800d638:	bd80      	pop	{r7, pc}

0800d63a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d63a:	b580      	push	{r7, lr}
 800d63c:	b084      	sub	sp, #16
 800d63e:	af00      	add	r7, sp, #0
 800d640:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d642:	6878      	ldr	r0, [r7, #4]
 800d644:	f7ff fedb 	bl	800d3fe <f_sync>
 800d648:	4603      	mov	r3, r0
 800d64a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d64c:	7bfb      	ldrb	r3, [r7, #15]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d118      	bne.n	800d684 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	f107 0208 	add.w	r2, r7, #8
 800d658:	4611      	mov	r1, r2
 800d65a:	4618      	mov	r0, r3
 800d65c:	f7ff fa16 	bl	800ca8c <validate>
 800d660:	4603      	mov	r3, r0
 800d662:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d664:	7bfb      	ldrb	r3, [r7, #15]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d10c      	bne.n	800d684 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d66e:	4618      	mov	r0, r3
 800d670:	f7fc f91c 	bl	80098ac <dec_lock>
 800d674:	4603      	mov	r3, r0
 800d676:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d678:	7bfb      	ldrb	r3, [r7, #15]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d102      	bne.n	800d684 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	2200      	movs	r2, #0
 800d682:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d684:	7bfb      	ldrb	r3, [r7, #15]
}
 800d686:	4618      	mov	r0, r3
 800d688:	3710      	adds	r7, #16
 800d68a:	46bd      	mov	sp, r7
 800d68c:	bd80      	pop	{r7, pc}

0800d68e <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800d68e:	b580      	push	{r7, lr}
 800d690:	b086      	sub	sp, #24
 800d692:	af00      	add	r7, sp, #0
 800d694:	6078      	str	r0, [r7, #4]
 800d696:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d101      	bne.n	800d6a2 <f_opendir+0x14>
 800d69e:	2309      	movs	r3, #9
 800d6a0:	e09a      	b.n	800d7d8 <f_opendir+0x14a>

	/* Get logical drive */
	obj = &dp->obj;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800d6a6:	f107 010c 	add.w	r1, r7, #12
 800d6aa:	463b      	mov	r3, r7
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	f7fe fe5c 	bl	800c36c <find_volume>
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d6b8:	7dfb      	ldrb	r3, [r7, #23]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	f040 8085 	bne.w	800d7ca <f_opendir+0x13c>
		obj->fs = fs;
 800d6c0:	68fa      	ldr	r2, [r7, #12]
 800d6c2:	693b      	ldr	r3, [r7, #16]
 800d6c4:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800d6c6:	683b      	ldr	r3, [r7, #0]
 800d6c8:	4619      	mov	r1, r3
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	f7fe fcf8 	bl	800c0c0 <follow_path>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800d6d4:	7dfb      	ldrb	r3, [r7, #23]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d172      	bne.n	800d7c0 <f_opendir+0x132>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800d6e0:	b25b      	sxtb	r3, r3
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	db47      	blt.n	800d776 <f_opendir+0xe8>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800d6e6:	693b      	ldr	r3, [r7, #16]
 800d6e8:	799b      	ldrb	r3, [r3, #6]
 800d6ea:	f003 0310 	and.w	r3, r3, #16
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d03f      	beq.n	800d772 <f_opendir+0xe4>
#if _FS_EXFAT
					if (fs->fs_type == FS_EXFAT) {
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	781b      	ldrb	r3, [r3, #0]
 800d6f6:	2b04      	cmp	r3, #4
 800d6f8:	d130      	bne.n	800d75c <f_opendir+0xce>
						obj->c_scl = obj->sclust;							/* Get containing directory inforamation */
 800d6fa:	693b      	ldr	r3, [r7, #16]
 800d6fc:	689a      	ldr	r2, [r3, #8]
 800d6fe:	693b      	ldr	r3, [r7, #16]
 800d700:	621a      	str	r2, [r3, #32]
						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800d702:	693b      	ldr	r3, [r7, #16]
 800d704:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d708:	4613      	mov	r3, r2
 800d70a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d70e:	693a      	ldr	r2, [r7, #16]
 800d710:	79d2      	ldrb	r2, [r2, #7]
 800d712:	431a      	orrs	r2, r3
 800d714:	693b      	ldr	r3, [r7, #16]
 800d716:	625a      	str	r2, [r3, #36]	; 0x24
						obj->c_ofs = dp->blk_ofs;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d71c:	693b      	ldr	r3, [r7, #16]
 800d71e:	629a      	str	r2, [r3, #40]	; 0x28
						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	695b      	ldr	r3, [r3, #20]
 800d724:	3334      	adds	r3, #52	; 0x34
 800d726:	4618      	mov	r0, r3
 800d728:	f7fb fd88 	bl	800923c <ld_dword>
 800d72c:	4602      	mov	r2, r0
 800d72e:	693b      	ldr	r3, [r7, #16]
 800d730:	609a      	str	r2, [r3, #8]
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	695b      	ldr	r3, [r3, #20]
 800d736:	3338      	adds	r3, #56	; 0x38
 800d738:	4618      	mov	r0, r3
 800d73a:	f7fb fda2 	bl	8009282 <ld_qword>
 800d73e:	4602      	mov	r2, r0
 800d740:	460b      	mov	r3, r1
 800d742:	6939      	ldr	r1, [r7, #16]
 800d744:	e9c1 2304 	strd	r2, r3, [r1, #16]
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	695b      	ldr	r3, [r3, #20]
 800d74c:	3321      	adds	r3, #33	; 0x21
 800d74e:	781b      	ldrb	r3, [r3, #0]
 800d750:	f003 0302 	and.w	r3, r3, #2
 800d754:	b2da      	uxtb	r2, r3
 800d756:	693b      	ldr	r3, [r7, #16]
 800d758:	71da      	strb	r2, [r3, #7]
 800d75a:	e00c      	b.n	800d776 <f_opendir+0xe8>
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800d75c:	68fa      	ldr	r2, [r7, #12]
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d762:	4619      	mov	r1, r3
 800d764:	4610      	mov	r0, r2
 800d766:	f7fd f9a0 	bl	800aaaa <ld_clust>
 800d76a:	4602      	mov	r2, r0
 800d76c:	693b      	ldr	r3, [r7, #16]
 800d76e:	609a      	str	r2, [r3, #8]
 800d770:	e001      	b.n	800d776 <f_opendir+0xe8>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800d772:	2305      	movs	r3, #5
 800d774:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800d776:	7dfb      	ldrb	r3, [r7, #23]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d121      	bne.n	800d7c0 <f_opendir+0x132>
				obj->id = fs->id;
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	88da      	ldrh	r2, [r3, #6]
 800d780:	693b      	ldr	r3, [r7, #16]
 800d782:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800d784:	2100      	movs	r1, #0
 800d786:	6878      	ldr	r0, [r7, #4]
 800d788:	f7fc ffb9 	bl	800a6fe <dir_sdi>
 800d78c:	4603      	mov	r3, r0
 800d78e:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800d790:	7dfb      	ldrb	r3, [r7, #23]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d114      	bne.n	800d7c0 <f_opendir+0x132>
					if (obj->sclust) {
 800d796:	693b      	ldr	r3, [r7, #16]
 800d798:	689b      	ldr	r3, [r3, #8]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d00d      	beq.n	800d7ba <f_opendir+0x12c>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800d79e:	2100      	movs	r1, #0
 800d7a0:	6878      	ldr	r0, [r7, #4]
 800d7a2:	f7fb fff5 	bl	8009790 <inc_lock>
 800d7a6:	4602      	mov	r2, r0
 800d7a8:	693b      	ldr	r3, [r7, #16]
 800d7aa:	62da      	str	r2, [r3, #44]	; 0x2c
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800d7ac:	693b      	ldr	r3, [r7, #16]
 800d7ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d105      	bne.n	800d7c0 <f_opendir+0x132>
 800d7b4:	2312      	movs	r3, #18
 800d7b6:	75fb      	strb	r3, [r7, #23]
 800d7b8:	e002      	b.n	800d7c0 <f_opendir+0x132>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800d7ba:	693b      	ldr	r3, [r7, #16]
 800d7bc:	2200      	movs	r2, #0
 800d7be:	62da      	str	r2, [r3, #44]	; 0x2c
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800d7c0:	7dfb      	ldrb	r3, [r7, #23]
 800d7c2:	2b04      	cmp	r3, #4
 800d7c4:	d101      	bne.n	800d7ca <f_opendir+0x13c>
 800d7c6:	2305      	movs	r3, #5
 800d7c8:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800d7ca:	7dfb      	ldrb	r3, [r7, #23]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d002      	beq.n	800d7d6 <f_opendir+0x148>
 800d7d0:	693b      	ldr	r3, [r7, #16]
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d7d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7d8:	4618      	mov	r0, r3
 800d7da:	3718      	adds	r7, #24
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd80      	pop	{r7, pc}

0800d7e0 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b084      	sub	sp, #16
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	f107 0208 	add.w	r2, r7, #8
 800d7ee:	4611      	mov	r1, r2
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	f7ff f94b 	bl	800ca8c <validate>
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d7fa:	7bfb      	ldrb	r3, [r7, #15]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d110      	bne.n	800d822 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d804:	2b00      	cmp	r3, #0
 800d806:	d006      	beq.n	800d816 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d80c:	4618      	mov	r0, r3
 800d80e:	f7fc f84d 	bl	80098ac <dec_lock>
 800d812:	4603      	mov	r3, r0
 800d814:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800d816:	7bfb      	ldrb	r3, [r7, #15]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d102      	bne.n	800d822 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2200      	movs	r2, #0
 800d820:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800d822:	7bfb      	ldrb	r3, [r7, #15]
}
 800d824:	4618      	mov	r0, r3
 800d826:	3710      	adds	r7, #16
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd80      	pop	{r7, pc}

0800d82c <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b084      	sub	sp, #16
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
 800d834:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	f107 0208 	add.w	r2, r7, #8
 800d83c:	4611      	mov	r1, r2
 800d83e:	4618      	mov	r0, r3
 800d840:	f7ff f924 	bl	800ca8c <validate>
 800d844:	4603      	mov	r3, r0
 800d846:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d848:	7bfb      	ldrb	r3, [r7, #15]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d126      	bne.n	800d89c <f_readdir+0x70>
		if (!fno) {
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d106      	bne.n	800d862 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800d854:	2100      	movs	r1, #0
 800d856:	6878      	ldr	r0, [r7, #4]
 800d858:	f7fc ff51 	bl	800a6fe <dir_sdi>
 800d85c:	4603      	mov	r3, r0
 800d85e:	73fb      	strb	r3, [r7, #15]
 800d860:	e01c      	b.n	800d89c <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800d862:	2100      	movs	r1, #0
 800d864:	6878      	ldr	r0, [r7, #4]
 800d866:	f7fd fdf0 	bl	800b44a <dir_read>
 800d86a:	4603      	mov	r3, r0
 800d86c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800d86e:	7bfb      	ldrb	r3, [r7, #15]
 800d870:	2b04      	cmp	r3, #4
 800d872:	d101      	bne.n	800d878 <f_readdir+0x4c>
 800d874:	2300      	movs	r3, #0
 800d876:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800d878:	7bfb      	ldrb	r3, [r7, #15]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d10e      	bne.n	800d89c <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800d87e:	6839      	ldr	r1, [r7, #0]
 800d880:	6878      	ldr	r0, [r7, #4]
 800d882:	f7fe f979 	bl	800bb78 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800d886:	2100      	movs	r1, #0
 800d888:	6878      	ldr	r0, [r7, #4]
 800d88a:	f7fc ffcc 	bl	800a826 <dir_next>
 800d88e:	4603      	mov	r3, r0
 800d890:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800d892:	7bfb      	ldrb	r3, [r7, #15]
 800d894:	2b04      	cmp	r3, #4
 800d896:	d101      	bne.n	800d89c <f_readdir+0x70>
 800d898:	2300      	movs	r3, #0
 800d89a:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800d89c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d89e:	4618      	mov	r0, r3
 800d8a0:	3710      	adds	r7, #16
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	bd80      	pop	{r7, pc}

0800d8a6 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800d8a6:	b580      	push	{r7, lr}
 800d8a8:	b098      	sub	sp, #96	; 0x60
 800d8aa:	af00      	add	r7, sp, #0
 800d8ac:	6078      	str	r0, [r7, #4]
 800d8ae:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800d8b0:	f107 0108 	add.w	r1, r7, #8
 800d8b4:	1d3b      	adds	r3, r7, #4
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	f7fe fd57 	bl	800c36c <find_volume>
 800d8be:	4603      	mov	r3, r0
 800d8c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800d8c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d11f      	bne.n	800d90c <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d8cc:	687a      	ldr	r2, [r7, #4]
 800d8ce:	f107 0308 	add.w	r3, r7, #8
 800d8d2:	4611      	mov	r1, r2
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	f7fe fbf3 	bl	800c0c0 <follow_path>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) {				/* Follow completed */
 800d8e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d111      	bne.n	800d90c <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800d8e8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800d8ec:	b25b      	sxtb	r3, r3
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	da03      	bge.n	800d8fa <f_stat+0x54>
				res = FR_INVALID_NAME;
 800d8f2:	2306      	movs	r3, #6
 800d8f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d8f8:	e008      	b.n	800d90c <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d005      	beq.n	800d90c <f_stat+0x66>
 800d900:	f107 0308 	add.w	r3, r7, #8
 800d904:	6839      	ldr	r1, [r7, #0]
 800d906:	4618      	mov	r0, r3
 800d908:	f7fe f936 	bl	800bb78 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800d90c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800d910:	4618      	mov	r0, r3
 800d912:	3760      	adds	r7, #96	; 0x60
 800d914:	46bd      	mov	sp, r7
 800d916:	bd80      	pop	{r7, pc}

0800d918 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b09a      	sub	sp, #104	; 0x68
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	60f8      	str	r0, [r7, #12]
 800d920:	60b9      	str	r1, [r7, #8]
 800d922:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800d924:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800d928:	f107 030c 	add.w	r3, r7, #12
 800d92c:	2200      	movs	r2, #0
 800d92e:	4618      	mov	r0, r3
 800d930:	f7fe fd1c 	bl	800c36c <find_volume>
 800d934:	4603      	mov	r3, r0
 800d936:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800d93a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d93e:	2b00      	cmp	r3, #0
 800d940:	f040 80eb 	bne.w	800db1a <f_getfree+0x202>
		*fatfs = fs;				/* Return ptr to the fs object */
 800d944:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800d94a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d94c:	69da      	ldr	r2, [r3, #28]
 800d94e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d950:	6a1b      	ldr	r3, [r3, #32]
 800d952:	3b02      	subs	r3, #2
 800d954:	429a      	cmp	r2, r3
 800d956:	d804      	bhi.n	800d962 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800d958:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d95a:	69da      	ldr	r2, [r3, #28]
 800d95c:	68bb      	ldr	r3, [r7, #8]
 800d95e:	601a      	str	r2, [r3, #0]
 800d960:	e0db      	b.n	800db1a <f_getfree+0x202>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800d962:	2300      	movs	r3, #0
 800d964:	663b      	str	r3, [r7, #96]	; 0x60
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800d966:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d968:	781b      	ldrb	r3, [r3, #0]
 800d96a:	2b01      	cmp	r3, #1
 800d96c:	d128      	bne.n	800d9c0 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800d96e:	2302      	movs	r3, #2
 800d970:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d972:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d974:	613b      	str	r3, [r7, #16]
				do {
					stat = get_fat(&obj, clst);
 800d976:	f107 0310 	add.w	r3, r7, #16
 800d97a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800d97c:	4618      	mov	r0, r3
 800d97e:	f7fc f8f7 	bl	8009b70 <get_fat>
 800d982:	6478      	str	r0, [r7, #68]	; 0x44
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800d984:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d98a:	d103      	bne.n	800d994 <f_getfree+0x7c>
 800d98c:	2301      	movs	r3, #1
 800d98e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d992:	e0b5      	b.n	800db00 <f_getfree+0x1e8>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800d994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d996:	2b01      	cmp	r3, #1
 800d998:	d103      	bne.n	800d9a2 <f_getfree+0x8a>
 800d99a:	2302      	movs	r3, #2
 800d99c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d9a0:	e0ae      	b.n	800db00 <f_getfree+0x1e8>
					if (stat == 0) nfree++;
 800d9a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d102      	bne.n	800d9ae <f_getfree+0x96>
 800d9a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d9aa:	3301      	adds	r3, #1
 800d9ac:	663b      	str	r3, [r7, #96]	; 0x60
				} while (++clst < fs->n_fatent);
 800d9ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d9b0:	3301      	adds	r3, #1
 800d9b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d9b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9b6:	6a1b      	ldr	r3, [r3, #32]
 800d9b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d9ba:	429a      	cmp	r2, r3
 800d9bc:	d3db      	bcc.n	800d976 <f_getfree+0x5e>
 800d9be:	e09f      	b.n	800db00 <f_getfree+0x1e8>
			} else {
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan bitmap table */
 800d9c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9c2:	781b      	ldrb	r3, [r3, #0]
 800d9c4:	2b04      	cmp	r3, #4
 800d9c6:	d14b      	bne.n	800da60 <f_getfree+0x148>
					BYTE bm;
					UINT b;

					clst = fs->n_fatent - 2;
 800d9c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9ca:	6a1b      	ldr	r3, [r3, #32]
 800d9cc:	3b02      	subs	r3, #2
 800d9ce:	65fb      	str	r3, [r7, #92]	; 0x5c
					sect = fs->database;
 800d9d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9d4:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0;
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	657b      	str	r3, [r7, #84]	; 0x54
					do {
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 800d9da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d10d      	bne.n	800d9fc <f_getfree+0xe4>
 800d9e0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d9e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d9e4:	1c5a      	adds	r2, r3, #1
 800d9e6:	65ba      	str	r2, [r7, #88]	; 0x58
 800d9e8:	4619      	mov	r1, r3
 800d9ea:	f7fc f803 	bl	80099f4 <move_window>
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d9f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d17e      	bne.n	800dafa <f_getfree+0x1e2>
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800d9fc:	2308      	movs	r3, #8
 800d9fe:	64bb      	str	r3, [r7, #72]	; 0x48
 800da00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800da02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da04:	4413      	add	r3, r2
 800da06:	333c      	adds	r3, #60	; 0x3c
 800da08:	781b      	ldrb	r3, [r3, #0]
 800da0a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800da0e:	e013      	b.n	800da38 <f_getfree+0x120>
							if (!(bm & 1)) nfree++;
 800da10:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800da14:	f003 0301 	and.w	r3, r3, #1
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d102      	bne.n	800da22 <f_getfree+0x10a>
 800da1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800da1e:	3301      	adds	r3, #1
 800da20:	663b      	str	r3, [r7, #96]	; 0x60
							bm >>= 1;
 800da22:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800da26:	085b      	lsrs	r3, r3, #1
 800da28:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800da2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da2e:	3b01      	subs	r3, #1
 800da30:	64bb      	str	r3, [r7, #72]	; 0x48
 800da32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da34:	3b01      	subs	r3, #1
 800da36:	65fb      	str	r3, [r7, #92]	; 0x5c
 800da38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d002      	beq.n	800da44 <f_getfree+0x12c>
 800da3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da40:	2b00      	cmp	r3, #0
 800da42:	d1e5      	bne.n	800da10 <f_getfree+0xf8>
						}
						i = (i + 1) % SS(fs);
 800da44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da46:	3301      	adds	r3, #1
 800da48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800da4a:	8992      	ldrh	r2, [r2, #12]
 800da4c:	fbb3 f1f2 	udiv	r1, r3, r2
 800da50:	fb02 f201 	mul.w	r2, r2, r1
 800da54:	1a9b      	subs	r3, r3, r2
 800da56:	657b      	str	r3, [r7, #84]	; 0x54
					} while (clst);
 800da58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d1bd      	bne.n	800d9da <f_getfree+0xc2>
 800da5e:	e04f      	b.n	800db00 <f_getfree+0x1e8>
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800da60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da62:	6a1b      	ldr	r3, [r3, #32]
 800da64:	65fb      	str	r3, [r7, #92]	; 0x5c
 800da66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da6a:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0; p = 0;
 800da6c:	2300      	movs	r3, #0
 800da6e:	657b      	str	r3, [r7, #84]	; 0x54
 800da70:	2300      	movs	r3, #0
 800da72:	653b      	str	r3, [r7, #80]	; 0x50
					do {
						if (i == 0) {
 800da74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da76:	2b00      	cmp	r3, #0
 800da78:	d113      	bne.n	800daa2 <f_getfree+0x18a>
							res = move_window(fs, sect++);
 800da7a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800da7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800da7e:	1c5a      	adds	r2, r3, #1
 800da80:	65ba      	str	r2, [r7, #88]	; 0x58
 800da82:	4619      	mov	r1, r3
 800da84:	f7fb ffb6 	bl	80099f4 <move_window>
 800da88:	4603      	mov	r3, r0
 800da8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							if (res != FR_OK) break;
 800da8e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800da92:	2b00      	cmp	r3, #0
 800da94:	d133      	bne.n	800dafe <f_getfree+0x1e6>
							p = fs->win;
 800da96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da98:	333c      	adds	r3, #60	; 0x3c
 800da9a:	653b      	str	r3, [r7, #80]	; 0x50
							i = SS(fs);
 800da9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da9e:	899b      	ldrh	r3, [r3, #12]
 800daa0:	657b      	str	r3, [r7, #84]	; 0x54
						}
						if (fs->fs_type == FS_FAT16) {
 800daa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800daa4:	781b      	ldrb	r3, [r3, #0]
 800daa6:	2b02      	cmp	r3, #2
 800daa8:	d10f      	bne.n	800daca <f_getfree+0x1b2>
							if (ld_word(p) == 0) nfree++;
 800daaa:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800daac:	f7fb fbae 	bl	800920c <ld_word>
 800dab0:	4603      	mov	r3, r0
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d102      	bne.n	800dabc <f_getfree+0x1a4>
 800dab6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dab8:	3301      	adds	r3, #1
 800daba:	663b      	str	r3, [r7, #96]	; 0x60
							p += 2; i -= 2;
 800dabc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dabe:	3302      	adds	r3, #2
 800dac0:	653b      	str	r3, [r7, #80]	; 0x50
 800dac2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dac4:	3b02      	subs	r3, #2
 800dac6:	657b      	str	r3, [r7, #84]	; 0x54
 800dac8:	e010      	b.n	800daec <f_getfree+0x1d4>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800daca:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800dacc:	f7fb fbb6 	bl	800923c <ld_dword>
 800dad0:	4603      	mov	r3, r0
 800dad2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d102      	bne.n	800dae0 <f_getfree+0x1c8>
 800dada:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dadc:	3301      	adds	r3, #1
 800dade:	663b      	str	r3, [r7, #96]	; 0x60
							p += 4; i -= 4;
 800dae0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dae2:	3304      	adds	r3, #4
 800dae4:	653b      	str	r3, [r7, #80]	; 0x50
 800dae6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dae8:	3b04      	subs	r3, #4
 800daea:	657b      	str	r3, [r7, #84]	; 0x54
						}
					} while (--clst);
 800daec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800daee:	3b01      	subs	r3, #1
 800daf0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800daf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d1bd      	bne.n	800da74 <f_getfree+0x15c>
 800daf8:	e002      	b.n	800db00 <f_getfree+0x1e8>
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 800dafa:	bf00      	nop
 800dafc:	e000      	b.n	800db00 <f_getfree+0x1e8>
							if (res != FR_OK) break;
 800dafe:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800db00:	68bb      	ldr	r3, [r7, #8]
 800db02:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800db04:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800db06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800db0a:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800db0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db0e:	791a      	ldrb	r2, [r3, #4]
 800db10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db12:	f042 0201 	orr.w	r2, r2, #1
 800db16:	b2d2      	uxtb	r2, r2
 800db18:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800db1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800db1e:	4618      	mov	r0, r3
 800db20:	3768      	adds	r7, #104	; 0x68
 800db22:	46bd      	mov	sp, r7
 800db24:	bd80      	pop	{r7, pc}
	...

0800db28 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800db28:	b480      	push	{r7}
 800db2a:	b087      	sub	sp, #28
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	60f8      	str	r0, [r7, #12]
 800db30:	60b9      	str	r1, [r7, #8]
 800db32:	4613      	mov	r3, r2
 800db34:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800db36:	2301      	movs	r3, #1
 800db38:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800db3a:	2300      	movs	r3, #0
 800db3c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800db3e:	4b1f      	ldr	r3, [pc, #124]	; (800dbbc <FATFS_LinkDriverEx+0x94>)
 800db40:	7a5b      	ldrb	r3, [r3, #9]
 800db42:	b2db      	uxtb	r3, r3
 800db44:	2b00      	cmp	r3, #0
 800db46:	d131      	bne.n	800dbac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800db48:	4b1c      	ldr	r3, [pc, #112]	; (800dbbc <FATFS_LinkDriverEx+0x94>)
 800db4a:	7a5b      	ldrb	r3, [r3, #9]
 800db4c:	b2db      	uxtb	r3, r3
 800db4e:	461a      	mov	r2, r3
 800db50:	4b1a      	ldr	r3, [pc, #104]	; (800dbbc <FATFS_LinkDriverEx+0x94>)
 800db52:	2100      	movs	r1, #0
 800db54:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800db56:	4b19      	ldr	r3, [pc, #100]	; (800dbbc <FATFS_LinkDriverEx+0x94>)
 800db58:	7a5b      	ldrb	r3, [r3, #9]
 800db5a:	b2db      	uxtb	r3, r3
 800db5c:	4a17      	ldr	r2, [pc, #92]	; (800dbbc <FATFS_LinkDriverEx+0x94>)
 800db5e:	009b      	lsls	r3, r3, #2
 800db60:	4413      	add	r3, r2
 800db62:	68fa      	ldr	r2, [r7, #12]
 800db64:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800db66:	4b15      	ldr	r3, [pc, #84]	; (800dbbc <FATFS_LinkDriverEx+0x94>)
 800db68:	7a5b      	ldrb	r3, [r3, #9]
 800db6a:	b2db      	uxtb	r3, r3
 800db6c:	461a      	mov	r2, r3
 800db6e:	4b13      	ldr	r3, [pc, #76]	; (800dbbc <FATFS_LinkDriverEx+0x94>)
 800db70:	4413      	add	r3, r2
 800db72:	79fa      	ldrb	r2, [r7, #7]
 800db74:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800db76:	4b11      	ldr	r3, [pc, #68]	; (800dbbc <FATFS_LinkDriverEx+0x94>)
 800db78:	7a5b      	ldrb	r3, [r3, #9]
 800db7a:	b2db      	uxtb	r3, r3
 800db7c:	1c5a      	adds	r2, r3, #1
 800db7e:	b2d1      	uxtb	r1, r2
 800db80:	4a0e      	ldr	r2, [pc, #56]	; (800dbbc <FATFS_LinkDriverEx+0x94>)
 800db82:	7251      	strb	r1, [r2, #9]
 800db84:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800db86:	7dbb      	ldrb	r3, [r7, #22]
 800db88:	3330      	adds	r3, #48	; 0x30
 800db8a:	b2da      	uxtb	r2, r3
 800db8c:	68bb      	ldr	r3, [r7, #8]
 800db8e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800db90:	68bb      	ldr	r3, [r7, #8]
 800db92:	3301      	adds	r3, #1
 800db94:	223a      	movs	r2, #58	; 0x3a
 800db96:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800db98:	68bb      	ldr	r3, [r7, #8]
 800db9a:	3302      	adds	r3, #2
 800db9c:	222f      	movs	r2, #47	; 0x2f
 800db9e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800dba0:	68bb      	ldr	r3, [r7, #8]
 800dba2:	3303      	adds	r3, #3
 800dba4:	2200      	movs	r2, #0
 800dba6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800dba8:	2300      	movs	r3, #0
 800dbaa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800dbac:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbae:	4618      	mov	r0, r3
 800dbb0:	371c      	adds	r7, #28
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb8:	4770      	bx	lr
 800dbba:	bf00      	nop
 800dbbc:	2000054c 	.word	0x2000054c

0800dbc0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b082      	sub	sp, #8
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
 800dbc8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800dbca:	2200      	movs	r2, #0
 800dbcc:	6839      	ldr	r1, [r7, #0]
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	f7ff ffaa 	bl	800db28 <FATFS_LinkDriverEx>
 800dbd4:	4603      	mov	r3, r0
}
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	3708      	adds	r7, #8
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	bd80      	pop	{r7, pc}
	...

0800dbe0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800dbe0:	b480      	push	{r7}
 800dbe2:	b085      	sub	sp, #20
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	6039      	str	r1, [r7, #0]
 800dbea:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800dbec:	88fb      	ldrh	r3, [r7, #6]
 800dbee:	2b7f      	cmp	r3, #127	; 0x7f
 800dbf0:	d802      	bhi.n	800dbf8 <ff_convert+0x18>
		c = chr;
 800dbf2:	88fb      	ldrh	r3, [r7, #6]
 800dbf4:	81fb      	strh	r3, [r7, #14]
 800dbf6:	e025      	b.n	800dc44 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800dbf8:	683b      	ldr	r3, [r7, #0]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d00b      	beq.n	800dc16 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800dbfe:	88fb      	ldrh	r3, [r7, #6]
 800dc00:	2bff      	cmp	r3, #255	; 0xff
 800dc02:	d805      	bhi.n	800dc10 <ff_convert+0x30>
 800dc04:	88fb      	ldrh	r3, [r7, #6]
 800dc06:	3b80      	subs	r3, #128	; 0x80
 800dc08:	4a12      	ldr	r2, [pc, #72]	; (800dc54 <ff_convert+0x74>)
 800dc0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dc0e:	e000      	b.n	800dc12 <ff_convert+0x32>
 800dc10:	2300      	movs	r3, #0
 800dc12:	81fb      	strh	r3, [r7, #14]
 800dc14:	e016      	b.n	800dc44 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800dc16:	2300      	movs	r3, #0
 800dc18:	81fb      	strh	r3, [r7, #14]
 800dc1a:	e009      	b.n	800dc30 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800dc1c:	89fb      	ldrh	r3, [r7, #14]
 800dc1e:	4a0d      	ldr	r2, [pc, #52]	; (800dc54 <ff_convert+0x74>)
 800dc20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dc24:	88fa      	ldrh	r2, [r7, #6]
 800dc26:	429a      	cmp	r2, r3
 800dc28:	d006      	beq.n	800dc38 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800dc2a:	89fb      	ldrh	r3, [r7, #14]
 800dc2c:	3301      	adds	r3, #1
 800dc2e:	81fb      	strh	r3, [r7, #14]
 800dc30:	89fb      	ldrh	r3, [r7, #14]
 800dc32:	2b7f      	cmp	r3, #127	; 0x7f
 800dc34:	d9f2      	bls.n	800dc1c <ff_convert+0x3c>
 800dc36:	e000      	b.n	800dc3a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800dc38:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800dc3a:	89fb      	ldrh	r3, [r7, #14]
 800dc3c:	3380      	adds	r3, #128	; 0x80
 800dc3e:	b29b      	uxth	r3, r3
 800dc40:	b2db      	uxtb	r3, r3
 800dc42:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800dc44:	89fb      	ldrh	r3, [r7, #14]
}
 800dc46:	4618      	mov	r0, r3
 800dc48:	3714      	adds	r7, #20
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc50:	4770      	bx	lr
 800dc52:	bf00      	nop
 800dc54:	08010cf0 	.word	0x08010cf0

0800dc58 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800dc58:	b480      	push	{r7}
 800dc5a:	b087      	sub	sp, #28
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	4603      	mov	r3, r0
 800dc60:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800dc62:	88fb      	ldrh	r3, [r7, #6]
 800dc64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dc68:	d201      	bcs.n	800dc6e <ff_wtoupper+0x16>
 800dc6a:	4b3e      	ldr	r3, [pc, #248]	; (800dd64 <ff_wtoupper+0x10c>)
 800dc6c:	e000      	b.n	800dc70 <ff_wtoupper+0x18>
 800dc6e:	4b3e      	ldr	r3, [pc, #248]	; (800dd68 <ff_wtoupper+0x110>)
 800dc70:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800dc72:	697b      	ldr	r3, [r7, #20]
 800dc74:	1c9a      	adds	r2, r3, #2
 800dc76:	617a      	str	r2, [r7, #20]
 800dc78:	881b      	ldrh	r3, [r3, #0]
 800dc7a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800dc7c:	8a7b      	ldrh	r3, [r7, #18]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d068      	beq.n	800dd54 <ff_wtoupper+0xfc>
 800dc82:	88fa      	ldrh	r2, [r7, #6]
 800dc84:	8a7b      	ldrh	r3, [r7, #18]
 800dc86:	429a      	cmp	r2, r3
 800dc88:	d364      	bcc.n	800dd54 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800dc8a:	697b      	ldr	r3, [r7, #20]
 800dc8c:	1c9a      	adds	r2, r3, #2
 800dc8e:	617a      	str	r2, [r7, #20]
 800dc90:	881b      	ldrh	r3, [r3, #0]
 800dc92:	823b      	strh	r3, [r7, #16]
 800dc94:	8a3b      	ldrh	r3, [r7, #16]
 800dc96:	0a1b      	lsrs	r3, r3, #8
 800dc98:	81fb      	strh	r3, [r7, #14]
 800dc9a:	8a3b      	ldrh	r3, [r7, #16]
 800dc9c:	b2db      	uxtb	r3, r3
 800dc9e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800dca0:	88fa      	ldrh	r2, [r7, #6]
 800dca2:	8a79      	ldrh	r1, [r7, #18]
 800dca4:	8a3b      	ldrh	r3, [r7, #16]
 800dca6:	440b      	add	r3, r1
 800dca8:	429a      	cmp	r2, r3
 800dcaa:	da49      	bge.n	800dd40 <ff_wtoupper+0xe8>
			switch (cmd) {
 800dcac:	89fb      	ldrh	r3, [r7, #14]
 800dcae:	2b08      	cmp	r3, #8
 800dcb0:	d84f      	bhi.n	800dd52 <ff_wtoupper+0xfa>
 800dcb2:	a201      	add	r2, pc, #4	; (adr r2, 800dcb8 <ff_wtoupper+0x60>)
 800dcb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcb8:	0800dcdd 	.word	0x0800dcdd
 800dcbc:	0800dcef 	.word	0x0800dcef
 800dcc0:	0800dd05 	.word	0x0800dd05
 800dcc4:	0800dd0d 	.word	0x0800dd0d
 800dcc8:	0800dd15 	.word	0x0800dd15
 800dccc:	0800dd1d 	.word	0x0800dd1d
 800dcd0:	0800dd25 	.word	0x0800dd25
 800dcd4:	0800dd2d 	.word	0x0800dd2d
 800dcd8:	0800dd35 	.word	0x0800dd35
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800dcdc:	88fa      	ldrh	r2, [r7, #6]
 800dcde:	8a7b      	ldrh	r3, [r7, #18]
 800dce0:	1ad3      	subs	r3, r2, r3
 800dce2:	005b      	lsls	r3, r3, #1
 800dce4:	697a      	ldr	r2, [r7, #20]
 800dce6:	4413      	add	r3, r2
 800dce8:	881b      	ldrh	r3, [r3, #0]
 800dcea:	80fb      	strh	r3, [r7, #6]
 800dcec:	e027      	b.n	800dd3e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800dcee:	88fa      	ldrh	r2, [r7, #6]
 800dcf0:	8a7b      	ldrh	r3, [r7, #18]
 800dcf2:	1ad3      	subs	r3, r2, r3
 800dcf4:	b29b      	uxth	r3, r3
 800dcf6:	f003 0301 	and.w	r3, r3, #1
 800dcfa:	b29b      	uxth	r3, r3
 800dcfc:	88fa      	ldrh	r2, [r7, #6]
 800dcfe:	1ad3      	subs	r3, r2, r3
 800dd00:	80fb      	strh	r3, [r7, #6]
 800dd02:	e01c      	b.n	800dd3e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800dd04:	88fb      	ldrh	r3, [r7, #6]
 800dd06:	3b10      	subs	r3, #16
 800dd08:	80fb      	strh	r3, [r7, #6]
 800dd0a:	e018      	b.n	800dd3e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800dd0c:	88fb      	ldrh	r3, [r7, #6]
 800dd0e:	3b20      	subs	r3, #32
 800dd10:	80fb      	strh	r3, [r7, #6]
 800dd12:	e014      	b.n	800dd3e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800dd14:	88fb      	ldrh	r3, [r7, #6]
 800dd16:	3b30      	subs	r3, #48	; 0x30
 800dd18:	80fb      	strh	r3, [r7, #6]
 800dd1a:	e010      	b.n	800dd3e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800dd1c:	88fb      	ldrh	r3, [r7, #6]
 800dd1e:	3b1a      	subs	r3, #26
 800dd20:	80fb      	strh	r3, [r7, #6]
 800dd22:	e00c      	b.n	800dd3e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800dd24:	88fb      	ldrh	r3, [r7, #6]
 800dd26:	3308      	adds	r3, #8
 800dd28:	80fb      	strh	r3, [r7, #6]
 800dd2a:	e008      	b.n	800dd3e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800dd2c:	88fb      	ldrh	r3, [r7, #6]
 800dd2e:	3b50      	subs	r3, #80	; 0x50
 800dd30:	80fb      	strh	r3, [r7, #6]
 800dd32:	e004      	b.n	800dd3e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800dd34:	88fb      	ldrh	r3, [r7, #6]
 800dd36:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800dd3a:	80fb      	strh	r3, [r7, #6]
 800dd3c:	bf00      	nop
			}
			break;
 800dd3e:	e008      	b.n	800dd52 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800dd40:	89fb      	ldrh	r3, [r7, #14]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d195      	bne.n	800dc72 <ff_wtoupper+0x1a>
 800dd46:	8a3b      	ldrh	r3, [r7, #16]
 800dd48:	005b      	lsls	r3, r3, #1
 800dd4a:	697a      	ldr	r2, [r7, #20]
 800dd4c:	4413      	add	r3, r2
 800dd4e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800dd50:	e78f      	b.n	800dc72 <ff_wtoupper+0x1a>
			break;
 800dd52:	bf00      	nop
	}

	return chr;
 800dd54:	88fb      	ldrh	r3, [r7, #6]
}
 800dd56:	4618      	mov	r0, r3
 800dd58:	371c      	adds	r7, #28
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd60:	4770      	bx	lr
 800dd62:	bf00      	nop
 800dd64:	08010df0 	.word	0x08010df0
 800dd68:	08010fe4 	.word	0x08010fe4

0800dd6c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800dd70:	2201      	movs	r2, #1
 800dd72:	490e      	ldr	r1, [pc, #56]	; (800ddac <MX_USB_HOST_Init+0x40>)
 800dd74:	480e      	ldr	r0, [pc, #56]	; (800ddb0 <MX_USB_HOST_Init+0x44>)
 800dd76:	f7f9 fe53 	bl	8007a20 <USBH_Init>
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d001      	beq.n	800dd84 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800dd80:	f7f3 fc20 	bl	80015c4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800dd84:	490b      	ldr	r1, [pc, #44]	; (800ddb4 <MX_USB_HOST_Init+0x48>)
 800dd86:	480a      	ldr	r0, [pc, #40]	; (800ddb0 <MX_USB_HOST_Init+0x44>)
 800dd88:	f7f9 fed8 	bl	8007b3c <USBH_RegisterClass>
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d001      	beq.n	800dd96 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800dd92:	f7f3 fc17 	bl	80015c4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800dd96:	4806      	ldr	r0, [pc, #24]	; (800ddb0 <MX_USB_HOST_Init+0x44>)
 800dd98:	f7f9 ff5c 	bl	8007c54 <USBH_Start>
 800dd9c:	4603      	mov	r3, r0
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d001      	beq.n	800dda6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800dda2:	f7f3 fc0f 	bl	80015c4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800dda6:	bf00      	nop
 800dda8:	bd80      	pop	{r7, pc}
 800ddaa:	bf00      	nop
 800ddac:	0800ddcd 	.word	0x0800ddcd
 800ddb0:	20002c20 	.word	0x20002c20
 800ddb4:	2000000c 	.word	0x2000000c

0800ddb8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800ddbc:	4802      	ldr	r0, [pc, #8]	; (800ddc8 <MX_USB_HOST_Process+0x10>)
 800ddbe:	f7f9 ff59 	bl	8007c74 <USBH_Process>
}
 800ddc2:	bf00      	nop
 800ddc4:	bd80      	pop	{r7, pc}
 800ddc6:	bf00      	nop
 800ddc8:	20002c20 	.word	0x20002c20

0800ddcc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id){
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b082      	sub	sp, #8
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
 800ddd4:	460b      	mov	r3, r1
 800ddd6:	70fb      	strb	r3, [r7, #3]


  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id){
 800ddd8:	78fb      	ldrb	r3, [r7, #3]
 800ddda:	3b01      	subs	r3, #1
 800dddc:	2b04      	cmp	r3, #4
 800ddde:	d859      	bhi.n	800de94 <USBH_UserProcess+0xc8>
 800dde0:	a201      	add	r2, pc, #4	; (adr r2, 800dde8 <USBH_UserProcess+0x1c>)
 800dde2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dde6:	bf00      	nop
 800dde8:	0800de95 	.word	0x0800de95
 800ddec:	0800de1b 	.word	0x0800de1b
 800ddf0:	0800de95 	.word	0x0800de95
 800ddf4:	0800de6d 	.word	0x0800de6d
 800ddf8:	0800ddfd 	.word	0x0800ddfd
  	  case HOST_USER_SELECT_CONFIGURATION:
  		  break;

  	  case HOST_USER_DISCONNECTION:
			Appli_state = APPLICATION_DISCONNECT;
 800ddfc:	4b28      	ldr	r3, [pc, #160]	; (800dea0 <USBH_UserProcess+0xd4>)
 800ddfe:	2203      	movs	r2, #3
 800de00:	701a      	strb	r2, [r3, #0]
			Unmount_USB();
 800de02:	f7f2 ff09 	bl	8000c18 <Unmount_USB>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800de06:	2201      	movs	r2, #1
 800de08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800de0c:	4825      	ldr	r0, [pc, #148]	; (800dea4 <USBH_UserProcess+0xd8>)
 800de0e:	f7f4 fbe3 	bl	80025d8 <HAL_GPIO_WritePin>
			printf("There is no any FlashDisk\n");
 800de12:	4825      	ldr	r0, [pc, #148]	; (800dea8 <USBH_UserProcess+0xdc>)
 800de14:	f000 fcc6 	bl	800e7a4 <puts>

  		  break;
 800de18:	e03d      	b.n	800de96 <USBH_UserProcess+0xca>

  	  case HOST_USER_CLASS_ACTIVE:
  		  Appli_state = APPLICATION_READY;
 800de1a:	4b21      	ldr	r3, [pc, #132]	; (800dea0 <USBH_UserProcess+0xd4>)
 800de1c:	2202      	movs	r2, #2
 800de1e:	701a      	strb	r2, [r3, #0]
			 Mount_USB();
 800de20:	f7f2 fed6 	bl	8000bd0 <Mount_USB>
			 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800de24:	2200      	movs	r2, #0
 800de26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800de2a:	481e      	ldr	r0, [pc, #120]	; (800dea4 <USBH_UserProcess+0xd8>)
 800de2c:	f7f4 fbd4 	bl	80025d8 <HAL_GPIO_WritePin>
			 Check_USB_Details();   // check space details
 800de30:	f7f3 f918 	bl	8001064 <Check_USB_Details>

			 while(1){
				 Scan_USB("/");
 800de34:	481d      	ldr	r0, [pc, #116]	; (800deac <USBH_UserProcess+0xe0>)
 800de36:	f7f2 ff11 	bl	8000c5c <Scan_USB>
				 printf("-----------------------------\n");
 800de3a:	481d      	ldr	r0, [pc, #116]	; (800deb0 <USBH_UserProcess+0xe4>)
 800de3c:	f000 fcb2 	bl	800e7a4 <puts>
				 printf("Enter a any file name to read from exist files:");
 800de40:	481c      	ldr	r0, [pc, #112]	; (800deb4 <USBH_UserProcess+0xe8>)
 800de42:	f000 fc13 	bl	800e66c <iprintf>
				 scanf("%s", path);
 800de46:	491c      	ldr	r1, [pc, #112]	; (800deb8 <USBH_UserProcess+0xec>)
 800de48:	481c      	ldr	r0, [pc, #112]	; (800debc <USBH_UserProcess+0xf0>)
 800de4a:	f000 fcc3 	bl	800e7d4 <iscanf>
				 printf("Enterence is : %s\n", path);
 800de4e:	491a      	ldr	r1, [pc, #104]	; (800deb8 <USBH_UserProcess+0xec>)
 800de50:	481b      	ldr	r0, [pc, #108]	; (800dec0 <USBH_UserProcess+0xf4>)
 800de52:	f000 fc0b 	bl	800e66c <iprintf>
				 HAL_Delay(300);
 800de56:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800de5a:	f7f3 fe07 	bl	8001a6c <HAL_Delay>


				 Read_File(path);
 800de5e:	4816      	ldr	r0, [pc, #88]	; (800deb8 <USBH_UserProcess+0xec>)
 800de60:	f7f2 ffd2 	bl	8000e08 <Read_File>
				 printf("-----------------------------\n");
 800de64:	4812      	ldr	r0, [pc, #72]	; (800deb0 <USBH_UserProcess+0xe4>)
 800de66:	f000 fc9d 	bl	800e7a4 <puts>
				 Scan_USB("/");
 800de6a:	e7e3      	b.n	800de34 <USBH_UserProcess+0x68>
			 }

  		  break;

  	  case HOST_USER_CONNECTION:
  		  Appli_state = APPLICATION_START;
 800de6c:	4b0c      	ldr	r3, [pc, #48]	; (800dea0 <USBH_UserProcess+0xd4>)
 800de6e:	2201      	movs	r2, #1
 800de70:	701a      	strb	r2, [r3, #0]

  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET); // app ready
 800de72:	2201      	movs	r2, #1
 800de74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800de78:	480a      	ldr	r0, [pc, #40]	; (800dea4 <USBH_UserProcess+0xd8>)
 800de7a:	f7f4 fbad 	bl	80025d8 <HAL_GPIO_WritePin>
  		  HAL_Delay(500);
 800de7e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800de82:	f7f3 fdf3 	bl	8001a6c <HAL_Delay>
  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800de86:	2200      	movs	r2, #0
 800de88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800de8c:	4805      	ldr	r0, [pc, #20]	; (800dea4 <USBH_UserProcess+0xd8>)
 800de8e:	f7f4 fba3 	bl	80025d8 <HAL_GPIO_WritePin>

  		  break;
 800de92:	e000      	b.n	800de96 <USBH_UserProcess+0xca>

  	  default:
  		  break;
 800de94:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800de96:	bf00      	nop
 800de98:	3708      	adds	r7, #8
 800de9a:	46bd      	mov	sp, r7
 800de9c:	bd80      	pop	{r7, pc}
 800de9e:	bf00      	nop
 800dea0:	20000558 	.word	0x20000558
 800dea4:	40020c00 	.word	0x40020c00
 800dea8:	08010ba0 	.word	0x08010ba0
 800deac:	08010bbc 	.word	0x08010bbc
 800deb0:	08010bc0 	.word	0x08010bc0
 800deb4:	08010be0 	.word	0x08010be0
 800deb8:	20002b90 	.word	0x20002b90
 800debc:	08010c10 	.word	0x08010c10
 800dec0:	08010c14 	.word	0x08010c14

0800dec4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b08a      	sub	sp, #40	; 0x28
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800decc:	f107 0314 	add.w	r3, r7, #20
 800ded0:	2200      	movs	r2, #0
 800ded2:	601a      	str	r2, [r3, #0]
 800ded4:	605a      	str	r2, [r3, #4]
 800ded6:	609a      	str	r2, [r3, #8]
 800ded8:	60da      	str	r2, [r3, #12]
 800deda:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800dee4:	d147      	bne.n	800df76 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dee6:	2300      	movs	r3, #0
 800dee8:	613b      	str	r3, [r7, #16]
 800deea:	4b25      	ldr	r3, [pc, #148]	; (800df80 <HAL_HCD_MspInit+0xbc>)
 800deec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800deee:	4a24      	ldr	r2, [pc, #144]	; (800df80 <HAL_HCD_MspInit+0xbc>)
 800def0:	f043 0301 	orr.w	r3, r3, #1
 800def4:	6313      	str	r3, [r2, #48]	; 0x30
 800def6:	4b22      	ldr	r3, [pc, #136]	; (800df80 <HAL_HCD_MspInit+0xbc>)
 800def8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800defa:	f003 0301 	and.w	r3, r3, #1
 800defe:	613b      	str	r3, [r7, #16]
 800df00:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800df02:	f44f 7300 	mov.w	r3, #512	; 0x200
 800df06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800df08:	2300      	movs	r3, #0
 800df0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800df0c:	2300      	movs	r3, #0
 800df0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800df10:	f107 0314 	add.w	r3, r7, #20
 800df14:	4619      	mov	r1, r3
 800df16:	481b      	ldr	r0, [pc, #108]	; (800df84 <HAL_HCD_MspInit+0xc0>)
 800df18:	f7f4 f9c2 	bl	80022a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800df1c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800df20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df22:	2302      	movs	r3, #2
 800df24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800df26:	2300      	movs	r3, #0
 800df28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800df2a:	2303      	movs	r3, #3
 800df2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800df2e:	230a      	movs	r3, #10
 800df30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800df32:	f107 0314 	add.w	r3, r7, #20
 800df36:	4619      	mov	r1, r3
 800df38:	4812      	ldr	r0, [pc, #72]	; (800df84 <HAL_HCD_MspInit+0xc0>)
 800df3a:	f7f4 f9b1 	bl	80022a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800df3e:	4b10      	ldr	r3, [pc, #64]	; (800df80 <HAL_HCD_MspInit+0xbc>)
 800df40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df42:	4a0f      	ldr	r2, [pc, #60]	; (800df80 <HAL_HCD_MspInit+0xbc>)
 800df44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df48:	6353      	str	r3, [r2, #52]	; 0x34
 800df4a:	2300      	movs	r3, #0
 800df4c:	60fb      	str	r3, [r7, #12]
 800df4e:	4b0c      	ldr	r3, [pc, #48]	; (800df80 <HAL_HCD_MspInit+0xbc>)
 800df50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df52:	4a0b      	ldr	r2, [pc, #44]	; (800df80 <HAL_HCD_MspInit+0xbc>)
 800df54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800df58:	6453      	str	r3, [r2, #68]	; 0x44
 800df5a:	4b09      	ldr	r3, [pc, #36]	; (800df80 <HAL_HCD_MspInit+0xbc>)
 800df5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800df62:	60fb      	str	r3, [r7, #12]
 800df64:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800df66:	2200      	movs	r2, #0
 800df68:	2100      	movs	r1, #0
 800df6a:	2043      	movs	r0, #67	; 0x43
 800df6c:	f7f3 fe7d 	bl	8001c6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800df70:	2043      	movs	r0, #67	; 0x43
 800df72:	f7f3 fe96 	bl	8001ca2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800df76:	bf00      	nop
 800df78:	3728      	adds	r7, #40	; 0x28
 800df7a:	46bd      	mov	sp, r7
 800df7c:	bd80      	pop	{r7, pc}
 800df7e:	bf00      	nop
 800df80:	40023800 	.word	0x40023800
 800df84:	40020000 	.word	0x40020000

0800df88 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b082      	sub	sp, #8
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800df96:	4618      	mov	r0, r3
 800df98:	f7fa fa3f 	bl	800841a <USBH_LL_IncTimer>
}
 800df9c:	bf00      	nop
 800df9e:	3708      	adds	r7, #8
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	bd80      	pop	{r7, pc}

0800dfa4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b082      	sub	sp, #8
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	f7fa fa77 	bl	80084a6 <USBH_LL_Connect>
}
 800dfb8:	bf00      	nop
 800dfba:	3708      	adds	r7, #8
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	bd80      	pop	{r7, pc}

0800dfc0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b082      	sub	sp, #8
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dfce:	4618      	mov	r0, r3
 800dfd0:	f7fa fa80 	bl	80084d4 <USBH_LL_Disconnect>
}
 800dfd4:	bf00      	nop
 800dfd6:	3708      	adds	r7, #8
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd80      	pop	{r7, pc}

0800dfdc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800dfdc:	b480      	push	{r7}
 800dfde:	b083      	sub	sp, #12
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
 800dfe4:	460b      	mov	r3, r1
 800dfe6:	70fb      	strb	r3, [r7, #3]
 800dfe8:	4613      	mov	r3, r2
 800dfea:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800dfec:	bf00      	nop
 800dfee:	370c      	adds	r7, #12
 800dff0:	46bd      	mov	sp, r7
 800dff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff6:	4770      	bx	lr

0800dff8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b082      	sub	sp, #8
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e006:	4618      	mov	r0, r3
 800e008:	f7fa fa31 	bl	800846e <USBH_LL_PortEnabled>
}
 800e00c:	bf00      	nop
 800e00e:	3708      	adds	r7, #8
 800e010:	46bd      	mov	sp, r7
 800e012:	bd80      	pop	{r7, pc}

0800e014 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b082      	sub	sp, #8
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e022:	4618      	mov	r0, r3
 800e024:	f7fa fa31 	bl	800848a <USBH_LL_PortDisabled>
}
 800e028:	bf00      	nop
 800e02a:	3708      	adds	r7, #8
 800e02c:	46bd      	mov	sp, r7
 800e02e:	bd80      	pop	{r7, pc}

0800e030 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b082      	sub	sp, #8
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e03e:	2b01      	cmp	r3, #1
 800e040:	d12a      	bne.n	800e098 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800e042:	4a18      	ldr	r2, [pc, #96]	; (800e0a4 <USBH_LL_Init+0x74>)
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	4a15      	ldr	r2, [pc, #84]	; (800e0a4 <USBH_LL_Init+0x74>)
 800e04e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e052:	4b14      	ldr	r3, [pc, #80]	; (800e0a4 <USBH_LL_Init+0x74>)
 800e054:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e058:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800e05a:	4b12      	ldr	r3, [pc, #72]	; (800e0a4 <USBH_LL_Init+0x74>)
 800e05c:	2208      	movs	r2, #8
 800e05e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800e060:	4b10      	ldr	r3, [pc, #64]	; (800e0a4 <USBH_LL_Init+0x74>)
 800e062:	2201      	movs	r2, #1
 800e064:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e066:	4b0f      	ldr	r3, [pc, #60]	; (800e0a4 <USBH_LL_Init+0x74>)
 800e068:	2200      	movs	r2, #0
 800e06a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800e06c:	4b0d      	ldr	r3, [pc, #52]	; (800e0a4 <USBH_LL_Init+0x74>)
 800e06e:	2202      	movs	r2, #2
 800e070:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e072:	4b0c      	ldr	r3, [pc, #48]	; (800e0a4 <USBH_LL_Init+0x74>)
 800e074:	2200      	movs	r2, #0
 800e076:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800e078:	480a      	ldr	r0, [pc, #40]	; (800e0a4 <USBH_LL_Init+0x74>)
 800e07a:	f7f4 fac6 	bl	800260a <HAL_HCD_Init>
 800e07e:	4603      	mov	r3, r0
 800e080:	2b00      	cmp	r3, #0
 800e082:	d001      	beq.n	800e088 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800e084:	f7f3 fa9e 	bl	80015c4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800e088:	4806      	ldr	r0, [pc, #24]	; (800e0a4 <USBH_LL_Init+0x74>)
 800e08a:	f7f4 feaa 	bl	8002de2 <HAL_HCD_GetCurrentFrame>
 800e08e:	4603      	mov	r3, r0
 800e090:	4619      	mov	r1, r3
 800e092:	6878      	ldr	r0, [r7, #4]
 800e094:	f7fa f9b2 	bl	80083fc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800e098:	2300      	movs	r3, #0
}
 800e09a:	4618      	mov	r0, r3
 800e09c:	3708      	adds	r7, #8
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	bd80      	pop	{r7, pc}
 800e0a2:	bf00      	nop
 800e0a4:	20004430 	.word	0x20004430

0800e0a8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b084      	sub	sp, #16
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e0be:	4618      	mov	r0, r3
 800e0c0:	f7f4 fe19 	bl	8002cf6 <HAL_HCD_Start>
 800e0c4:	4603      	mov	r3, r0
 800e0c6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e0c8:	7bfb      	ldrb	r3, [r7, #15]
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	f000 f98c 	bl	800e3e8 <USBH_Get_USB_Status>
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e0d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	3710      	adds	r7, #16
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	bd80      	pop	{r7, pc}

0800e0de <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800e0de:	b580      	push	{r7, lr}
 800e0e0:	b084      	sub	sp, #16
 800e0e2:	af00      	add	r7, sp, #0
 800e0e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	f7f4 fe21 	bl	8002d3c <HAL_HCD_Stop>
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e0fe:	7bfb      	ldrb	r3, [r7, #15]
 800e100:	4618      	mov	r0, r3
 800e102:	f000 f971 	bl	800e3e8 <USBH_Get_USB_Status>
 800e106:	4603      	mov	r3, r0
 800e108:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e10a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e10c:	4618      	mov	r0, r3
 800e10e:	3710      	adds	r7, #16
 800e110:	46bd      	mov	sp, r7
 800e112:	bd80      	pop	{r7, pc}

0800e114 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b084      	sub	sp, #16
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800e11c:	2301      	movs	r3, #1
 800e11e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e126:	4618      	mov	r0, r3
 800e128:	f7f4 fe69 	bl	8002dfe <HAL_HCD_GetCurrentSpeed>
 800e12c:	4603      	mov	r3, r0
 800e12e:	2b02      	cmp	r3, #2
 800e130:	d00c      	beq.n	800e14c <USBH_LL_GetSpeed+0x38>
 800e132:	2b02      	cmp	r3, #2
 800e134:	d80d      	bhi.n	800e152 <USBH_LL_GetSpeed+0x3e>
 800e136:	2b00      	cmp	r3, #0
 800e138:	d002      	beq.n	800e140 <USBH_LL_GetSpeed+0x2c>
 800e13a:	2b01      	cmp	r3, #1
 800e13c:	d003      	beq.n	800e146 <USBH_LL_GetSpeed+0x32>
 800e13e:	e008      	b.n	800e152 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800e140:	2300      	movs	r3, #0
 800e142:	73fb      	strb	r3, [r7, #15]
    break;
 800e144:	e008      	b.n	800e158 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800e146:	2301      	movs	r3, #1
 800e148:	73fb      	strb	r3, [r7, #15]
    break;
 800e14a:	e005      	b.n	800e158 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800e14c:	2302      	movs	r3, #2
 800e14e:	73fb      	strb	r3, [r7, #15]
    break;
 800e150:	e002      	b.n	800e158 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800e152:	2301      	movs	r3, #1
 800e154:	73fb      	strb	r3, [r7, #15]
    break;
 800e156:	bf00      	nop
  }
  return  speed;
 800e158:	7bfb      	ldrb	r3, [r7, #15]
}
 800e15a:	4618      	mov	r0, r3
 800e15c:	3710      	adds	r7, #16
 800e15e:	46bd      	mov	sp, r7
 800e160:	bd80      	pop	{r7, pc}

0800e162 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800e162:	b580      	push	{r7, lr}
 800e164:	b084      	sub	sp, #16
 800e166:	af00      	add	r7, sp, #0
 800e168:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e16a:	2300      	movs	r3, #0
 800e16c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e16e:	2300      	movs	r3, #0
 800e170:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e178:	4618      	mov	r0, r3
 800e17a:	f7f4 fdfc 	bl	8002d76 <HAL_HCD_ResetPort>
 800e17e:	4603      	mov	r3, r0
 800e180:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e182:	7bfb      	ldrb	r3, [r7, #15]
 800e184:	4618      	mov	r0, r3
 800e186:	f000 f92f 	bl	800e3e8 <USBH_Get_USB_Status>
 800e18a:	4603      	mov	r3, r0
 800e18c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e18e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e190:	4618      	mov	r0, r3
 800e192:	3710      	adds	r7, #16
 800e194:	46bd      	mov	sp, r7
 800e196:	bd80      	pop	{r7, pc}

0800e198 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b082      	sub	sp, #8
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
 800e1a0:	460b      	mov	r3, r1
 800e1a2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e1aa:	78fa      	ldrb	r2, [r7, #3]
 800e1ac:	4611      	mov	r1, r2
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	f7f4 fe03 	bl	8002dba <HAL_HCD_HC_GetXferCount>
 800e1b4:	4603      	mov	r3, r0
}
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	3708      	adds	r7, #8
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	bd80      	pop	{r7, pc}

0800e1be <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e1be:	b590      	push	{r4, r7, lr}
 800e1c0:	b089      	sub	sp, #36	; 0x24
 800e1c2:	af04      	add	r7, sp, #16
 800e1c4:	6078      	str	r0, [r7, #4]
 800e1c6:	4608      	mov	r0, r1
 800e1c8:	4611      	mov	r1, r2
 800e1ca:	461a      	mov	r2, r3
 800e1cc:	4603      	mov	r3, r0
 800e1ce:	70fb      	strb	r3, [r7, #3]
 800e1d0:	460b      	mov	r3, r1
 800e1d2:	70bb      	strb	r3, [r7, #2]
 800e1d4:	4613      	mov	r3, r2
 800e1d6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1d8:	2300      	movs	r3, #0
 800e1da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e1dc:	2300      	movs	r3, #0
 800e1de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e1e6:	787c      	ldrb	r4, [r7, #1]
 800e1e8:	78ba      	ldrb	r2, [r7, #2]
 800e1ea:	78f9      	ldrb	r1, [r7, #3]
 800e1ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e1ee:	9302      	str	r3, [sp, #8]
 800e1f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e1f4:	9301      	str	r3, [sp, #4]
 800e1f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e1fa:	9300      	str	r3, [sp, #0]
 800e1fc:	4623      	mov	r3, r4
 800e1fe:	f7f4 fa66 	bl	80026ce <HAL_HCD_HC_Init>
 800e202:	4603      	mov	r3, r0
 800e204:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800e206:	7bfb      	ldrb	r3, [r7, #15]
 800e208:	4618      	mov	r0, r3
 800e20a:	f000 f8ed 	bl	800e3e8 <USBH_Get_USB_Status>
 800e20e:	4603      	mov	r3, r0
 800e210:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e212:	7bbb      	ldrb	r3, [r7, #14]
}
 800e214:	4618      	mov	r0, r3
 800e216:	3714      	adds	r7, #20
 800e218:	46bd      	mov	sp, r7
 800e21a:	bd90      	pop	{r4, r7, pc}

0800e21c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b084      	sub	sp, #16
 800e220:	af00      	add	r7, sp, #0
 800e222:	6078      	str	r0, [r7, #4]
 800e224:	460b      	mov	r3, r1
 800e226:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e228:	2300      	movs	r3, #0
 800e22a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e22c:	2300      	movs	r3, #0
 800e22e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e236:	78fa      	ldrb	r2, [r7, #3]
 800e238:	4611      	mov	r1, r2
 800e23a:	4618      	mov	r0, r3
 800e23c:	f7f4 fad6 	bl	80027ec <HAL_HCD_HC_Halt>
 800e240:	4603      	mov	r3, r0
 800e242:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e244:	7bfb      	ldrb	r3, [r7, #15]
 800e246:	4618      	mov	r0, r3
 800e248:	f000 f8ce 	bl	800e3e8 <USBH_Get_USB_Status>
 800e24c:	4603      	mov	r3, r0
 800e24e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e250:	7bbb      	ldrb	r3, [r7, #14]
}
 800e252:	4618      	mov	r0, r3
 800e254:	3710      	adds	r7, #16
 800e256:	46bd      	mov	sp, r7
 800e258:	bd80      	pop	{r7, pc}

0800e25a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800e25a:	b590      	push	{r4, r7, lr}
 800e25c:	b089      	sub	sp, #36	; 0x24
 800e25e:	af04      	add	r7, sp, #16
 800e260:	6078      	str	r0, [r7, #4]
 800e262:	4608      	mov	r0, r1
 800e264:	4611      	mov	r1, r2
 800e266:	461a      	mov	r2, r3
 800e268:	4603      	mov	r3, r0
 800e26a:	70fb      	strb	r3, [r7, #3]
 800e26c:	460b      	mov	r3, r1
 800e26e:	70bb      	strb	r3, [r7, #2]
 800e270:	4613      	mov	r3, r2
 800e272:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e274:	2300      	movs	r3, #0
 800e276:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e278:	2300      	movs	r3, #0
 800e27a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e282:	787c      	ldrb	r4, [r7, #1]
 800e284:	78ba      	ldrb	r2, [r7, #2]
 800e286:	78f9      	ldrb	r1, [r7, #3]
 800e288:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e28c:	9303      	str	r3, [sp, #12]
 800e28e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e290:	9302      	str	r3, [sp, #8]
 800e292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e294:	9301      	str	r3, [sp, #4]
 800e296:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e29a:	9300      	str	r3, [sp, #0]
 800e29c:	4623      	mov	r3, r4
 800e29e:	f7f4 fac9 	bl	8002834 <HAL_HCD_HC_SubmitRequest>
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800e2a6:	7bfb      	ldrb	r3, [r7, #15]
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	f000 f89d 	bl	800e3e8 <USBH_Get_USB_Status>
 800e2ae:	4603      	mov	r3, r0
 800e2b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e2b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	3714      	adds	r7, #20
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	bd90      	pop	{r4, r7, pc}

0800e2bc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b082      	sub	sp, #8
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
 800e2c4:	460b      	mov	r3, r1
 800e2c6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e2ce:	78fa      	ldrb	r2, [r7, #3]
 800e2d0:	4611      	mov	r1, r2
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	f7f4 fd5d 	bl	8002d92 <HAL_HCD_HC_GetURBState>
 800e2d8:	4603      	mov	r3, r0
}
 800e2da:	4618      	mov	r0, r3
 800e2dc:	3708      	adds	r7, #8
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	bd80      	pop	{r7, pc}

0800e2e2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800e2e2:	b580      	push	{r7, lr}
 800e2e4:	b082      	sub	sp, #8
 800e2e6:	af00      	add	r7, sp, #0
 800e2e8:	6078      	str	r0, [r7, #4]
 800e2ea:	460b      	mov	r3, r1
 800e2ec:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e2f4:	2b01      	cmp	r3, #1
 800e2f6:	d103      	bne.n	800e300 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800e2f8:	78fb      	ldrb	r3, [r7, #3]
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	f000 f8a0 	bl	800e440 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800e300:	20c8      	movs	r0, #200	; 0xc8
 800e302:	f7f3 fbb3 	bl	8001a6c <HAL_Delay>
  return USBH_OK;
 800e306:	2300      	movs	r3, #0
}
 800e308:	4618      	mov	r0, r3
 800e30a:	3708      	adds	r7, #8
 800e30c:	46bd      	mov	sp, r7
 800e30e:	bd80      	pop	{r7, pc}

0800e310 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800e310:	b480      	push	{r7}
 800e312:	b085      	sub	sp, #20
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
 800e318:	460b      	mov	r3, r1
 800e31a:	70fb      	strb	r3, [r7, #3]
 800e31c:	4613      	mov	r3, r2
 800e31e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e326:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800e328:	78fb      	ldrb	r3, [r7, #3]
 800e32a:	68fa      	ldr	r2, [r7, #12]
 800e32c:	212c      	movs	r1, #44	; 0x2c
 800e32e:	fb01 f303 	mul.w	r3, r1, r3
 800e332:	4413      	add	r3, r2
 800e334:	333b      	adds	r3, #59	; 0x3b
 800e336:	781b      	ldrb	r3, [r3, #0]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d009      	beq.n	800e350 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800e33c:	78fb      	ldrb	r3, [r7, #3]
 800e33e:	68fa      	ldr	r2, [r7, #12]
 800e340:	212c      	movs	r1, #44	; 0x2c
 800e342:	fb01 f303 	mul.w	r3, r1, r3
 800e346:	4413      	add	r3, r2
 800e348:	3354      	adds	r3, #84	; 0x54
 800e34a:	78ba      	ldrb	r2, [r7, #2]
 800e34c:	701a      	strb	r2, [r3, #0]
 800e34e:	e008      	b.n	800e362 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800e350:	78fb      	ldrb	r3, [r7, #3]
 800e352:	68fa      	ldr	r2, [r7, #12]
 800e354:	212c      	movs	r1, #44	; 0x2c
 800e356:	fb01 f303 	mul.w	r3, r1, r3
 800e35a:	4413      	add	r3, r2
 800e35c:	3355      	adds	r3, #85	; 0x55
 800e35e:	78ba      	ldrb	r2, [r7, #2]
 800e360:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800e362:	2300      	movs	r3, #0
}
 800e364:	4618      	mov	r0, r3
 800e366:	3714      	adds	r7, #20
 800e368:	46bd      	mov	sp, r7
 800e36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36e:	4770      	bx	lr

0800e370 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e370:	b480      	push	{r7}
 800e372:	b085      	sub	sp, #20
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
 800e378:	460b      	mov	r3, r1
 800e37a:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800e37c:	2300      	movs	r3, #0
 800e37e:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e386:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800e388:	78fb      	ldrb	r3, [r7, #3]
 800e38a:	68ba      	ldr	r2, [r7, #8]
 800e38c:	212c      	movs	r1, #44	; 0x2c
 800e38e:	fb01 f303 	mul.w	r3, r1, r3
 800e392:	4413      	add	r3, r2
 800e394:	333b      	adds	r3, #59	; 0x3b
 800e396:	781b      	ldrb	r3, [r3, #0]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d009      	beq.n	800e3b0 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800e39c:	78fb      	ldrb	r3, [r7, #3]
 800e39e:	68ba      	ldr	r2, [r7, #8]
 800e3a0:	212c      	movs	r1, #44	; 0x2c
 800e3a2:	fb01 f303 	mul.w	r3, r1, r3
 800e3a6:	4413      	add	r3, r2
 800e3a8:	3354      	adds	r3, #84	; 0x54
 800e3aa:	781b      	ldrb	r3, [r3, #0]
 800e3ac:	73fb      	strb	r3, [r7, #15]
 800e3ae:	e008      	b.n	800e3c2 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800e3b0:	78fb      	ldrb	r3, [r7, #3]
 800e3b2:	68ba      	ldr	r2, [r7, #8]
 800e3b4:	212c      	movs	r1, #44	; 0x2c
 800e3b6:	fb01 f303 	mul.w	r3, r1, r3
 800e3ba:	4413      	add	r3, r2
 800e3bc:	3355      	adds	r3, #85	; 0x55
 800e3be:	781b      	ldrb	r3, [r3, #0]
 800e3c0:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800e3c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	3714      	adds	r7, #20
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ce:	4770      	bx	lr

0800e3d0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b082      	sub	sp, #8
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800e3d8:	6878      	ldr	r0, [r7, #4]
 800e3da:	f7f3 fb47 	bl	8001a6c <HAL_Delay>
}
 800e3de:	bf00      	nop
 800e3e0:	3708      	adds	r7, #8
 800e3e2:	46bd      	mov	sp, r7
 800e3e4:	bd80      	pop	{r7, pc}
	...

0800e3e8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e3e8:	b480      	push	{r7}
 800e3ea:	b085      	sub	sp, #20
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e3f6:	79fb      	ldrb	r3, [r7, #7]
 800e3f8:	2b03      	cmp	r3, #3
 800e3fa:	d817      	bhi.n	800e42c <USBH_Get_USB_Status+0x44>
 800e3fc:	a201      	add	r2, pc, #4	; (adr r2, 800e404 <USBH_Get_USB_Status+0x1c>)
 800e3fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e402:	bf00      	nop
 800e404:	0800e415 	.word	0x0800e415
 800e408:	0800e41b 	.word	0x0800e41b
 800e40c:	0800e421 	.word	0x0800e421
 800e410:	0800e427 	.word	0x0800e427
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800e414:	2300      	movs	r3, #0
 800e416:	73fb      	strb	r3, [r7, #15]
    break;
 800e418:	e00b      	b.n	800e432 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800e41a:	2302      	movs	r3, #2
 800e41c:	73fb      	strb	r3, [r7, #15]
    break;
 800e41e:	e008      	b.n	800e432 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800e420:	2301      	movs	r3, #1
 800e422:	73fb      	strb	r3, [r7, #15]
    break;
 800e424:	e005      	b.n	800e432 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800e426:	2302      	movs	r3, #2
 800e428:	73fb      	strb	r3, [r7, #15]
    break;
 800e42a:	e002      	b.n	800e432 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800e42c:	2302      	movs	r3, #2
 800e42e:	73fb      	strb	r3, [r7, #15]
    break;
 800e430:	bf00      	nop
  }
  return usb_status;
 800e432:	7bfb      	ldrb	r3, [r7, #15]
}
 800e434:	4618      	mov	r0, r3
 800e436:	3714      	adds	r7, #20
 800e438:	46bd      	mov	sp, r7
 800e43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43e:	4770      	bx	lr

0800e440 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800e440:	b580      	push	{r7, lr}
 800e442:	b084      	sub	sp, #16
 800e444:	af00      	add	r7, sp, #0
 800e446:	4603      	mov	r3, r0
 800e448:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800e44a:	79fb      	ldrb	r3, [r7, #7]
 800e44c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800e44e:	79fb      	ldrb	r3, [r7, #7]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d102      	bne.n	800e45a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800e454:	2301      	movs	r3, #1
 800e456:	73fb      	strb	r3, [r7, #15]
 800e458:	e001      	b.n	800e45e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800e45a:	2300      	movs	r3, #0
 800e45c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800e45e:	7bfb      	ldrb	r3, [r7, #15]
 800e460:	461a      	mov	r2, r3
 800e462:	2101      	movs	r1, #1
 800e464:	4803      	ldr	r0, [pc, #12]	; (800e474 <MX_DriverVbusFS+0x34>)
 800e466:	f7f4 f8b7 	bl	80025d8 <HAL_GPIO_WritePin>
}
 800e46a:	bf00      	nop
 800e46c:	3710      	adds	r7, #16
 800e46e:	46bd      	mov	sp, r7
 800e470:	bd80      	pop	{r7, pc}
 800e472:	bf00      	nop
 800e474:	40020800 	.word	0x40020800

0800e478 <__errno>:
 800e478:	4b01      	ldr	r3, [pc, #4]	; (800e480 <__errno+0x8>)
 800e47a:	6818      	ldr	r0, [r3, #0]
 800e47c:	4770      	bx	lr
 800e47e:	bf00      	nop
 800e480:	2000002c 	.word	0x2000002c

0800e484 <__libc_init_array>:
 800e484:	b570      	push	{r4, r5, r6, lr}
 800e486:	4d0d      	ldr	r5, [pc, #52]	; (800e4bc <__libc_init_array+0x38>)
 800e488:	4c0d      	ldr	r4, [pc, #52]	; (800e4c0 <__libc_init_array+0x3c>)
 800e48a:	1b64      	subs	r4, r4, r5
 800e48c:	10a4      	asrs	r4, r4, #2
 800e48e:	2600      	movs	r6, #0
 800e490:	42a6      	cmp	r6, r4
 800e492:	d109      	bne.n	800e4a8 <__libc_init_array+0x24>
 800e494:	4d0b      	ldr	r5, [pc, #44]	; (800e4c4 <__libc_init_array+0x40>)
 800e496:	4c0c      	ldr	r4, [pc, #48]	; (800e4c8 <__libc_init_array+0x44>)
 800e498:	f002 f8f6 	bl	8010688 <_init>
 800e49c:	1b64      	subs	r4, r4, r5
 800e49e:	10a4      	asrs	r4, r4, #2
 800e4a0:	2600      	movs	r6, #0
 800e4a2:	42a6      	cmp	r6, r4
 800e4a4:	d105      	bne.n	800e4b2 <__libc_init_array+0x2e>
 800e4a6:	bd70      	pop	{r4, r5, r6, pc}
 800e4a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800e4ac:	4798      	blx	r3
 800e4ae:	3601      	adds	r6, #1
 800e4b0:	e7ee      	b.n	800e490 <__libc_init_array+0xc>
 800e4b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800e4b6:	4798      	blx	r3
 800e4b8:	3601      	adds	r6, #1
 800e4ba:	e7f2      	b.n	800e4a2 <__libc_init_array+0x1e>
 800e4bc:	0801125c 	.word	0x0801125c
 800e4c0:	0801125c 	.word	0x0801125c
 800e4c4:	0801125c 	.word	0x0801125c
 800e4c8:	08011260 	.word	0x08011260

0800e4cc <malloc>:
 800e4cc:	4b02      	ldr	r3, [pc, #8]	; (800e4d8 <malloc+0xc>)
 800e4ce:	4601      	mov	r1, r0
 800e4d0:	6818      	ldr	r0, [r3, #0]
 800e4d2:	f000 b871 	b.w	800e5b8 <_malloc_r>
 800e4d6:	bf00      	nop
 800e4d8:	2000002c 	.word	0x2000002c

0800e4dc <free>:
 800e4dc:	4b02      	ldr	r3, [pc, #8]	; (800e4e8 <free+0xc>)
 800e4de:	4601      	mov	r1, r0
 800e4e0:	6818      	ldr	r0, [r3, #0]
 800e4e2:	f000 b819 	b.w	800e518 <_free_r>
 800e4e6:	bf00      	nop
 800e4e8:	2000002c 	.word	0x2000002c

0800e4ec <memcpy>:
 800e4ec:	440a      	add	r2, r1
 800e4ee:	4291      	cmp	r1, r2
 800e4f0:	f100 33ff 	add.w	r3, r0, #4294967295
 800e4f4:	d100      	bne.n	800e4f8 <memcpy+0xc>
 800e4f6:	4770      	bx	lr
 800e4f8:	b510      	push	{r4, lr}
 800e4fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e4fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e502:	4291      	cmp	r1, r2
 800e504:	d1f9      	bne.n	800e4fa <memcpy+0xe>
 800e506:	bd10      	pop	{r4, pc}

0800e508 <memset>:
 800e508:	4402      	add	r2, r0
 800e50a:	4603      	mov	r3, r0
 800e50c:	4293      	cmp	r3, r2
 800e50e:	d100      	bne.n	800e512 <memset+0xa>
 800e510:	4770      	bx	lr
 800e512:	f803 1b01 	strb.w	r1, [r3], #1
 800e516:	e7f9      	b.n	800e50c <memset+0x4>

0800e518 <_free_r>:
 800e518:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e51a:	2900      	cmp	r1, #0
 800e51c:	d048      	beq.n	800e5b0 <_free_r+0x98>
 800e51e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e522:	9001      	str	r0, [sp, #4]
 800e524:	2b00      	cmp	r3, #0
 800e526:	f1a1 0404 	sub.w	r4, r1, #4
 800e52a:	bfb8      	it	lt
 800e52c:	18e4      	addlt	r4, r4, r3
 800e52e:	f000 fd5d 	bl	800efec <__malloc_lock>
 800e532:	4a20      	ldr	r2, [pc, #128]	; (800e5b4 <_free_r+0x9c>)
 800e534:	9801      	ldr	r0, [sp, #4]
 800e536:	6813      	ldr	r3, [r2, #0]
 800e538:	4615      	mov	r5, r2
 800e53a:	b933      	cbnz	r3, 800e54a <_free_r+0x32>
 800e53c:	6063      	str	r3, [r4, #4]
 800e53e:	6014      	str	r4, [r2, #0]
 800e540:	b003      	add	sp, #12
 800e542:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e546:	f000 bd57 	b.w	800eff8 <__malloc_unlock>
 800e54a:	42a3      	cmp	r3, r4
 800e54c:	d90b      	bls.n	800e566 <_free_r+0x4e>
 800e54e:	6821      	ldr	r1, [r4, #0]
 800e550:	1862      	adds	r2, r4, r1
 800e552:	4293      	cmp	r3, r2
 800e554:	bf04      	itt	eq
 800e556:	681a      	ldreq	r2, [r3, #0]
 800e558:	685b      	ldreq	r3, [r3, #4]
 800e55a:	6063      	str	r3, [r4, #4]
 800e55c:	bf04      	itt	eq
 800e55e:	1852      	addeq	r2, r2, r1
 800e560:	6022      	streq	r2, [r4, #0]
 800e562:	602c      	str	r4, [r5, #0]
 800e564:	e7ec      	b.n	800e540 <_free_r+0x28>
 800e566:	461a      	mov	r2, r3
 800e568:	685b      	ldr	r3, [r3, #4]
 800e56a:	b10b      	cbz	r3, 800e570 <_free_r+0x58>
 800e56c:	42a3      	cmp	r3, r4
 800e56e:	d9fa      	bls.n	800e566 <_free_r+0x4e>
 800e570:	6811      	ldr	r1, [r2, #0]
 800e572:	1855      	adds	r5, r2, r1
 800e574:	42a5      	cmp	r5, r4
 800e576:	d10b      	bne.n	800e590 <_free_r+0x78>
 800e578:	6824      	ldr	r4, [r4, #0]
 800e57a:	4421      	add	r1, r4
 800e57c:	1854      	adds	r4, r2, r1
 800e57e:	42a3      	cmp	r3, r4
 800e580:	6011      	str	r1, [r2, #0]
 800e582:	d1dd      	bne.n	800e540 <_free_r+0x28>
 800e584:	681c      	ldr	r4, [r3, #0]
 800e586:	685b      	ldr	r3, [r3, #4]
 800e588:	6053      	str	r3, [r2, #4]
 800e58a:	4421      	add	r1, r4
 800e58c:	6011      	str	r1, [r2, #0]
 800e58e:	e7d7      	b.n	800e540 <_free_r+0x28>
 800e590:	d902      	bls.n	800e598 <_free_r+0x80>
 800e592:	230c      	movs	r3, #12
 800e594:	6003      	str	r3, [r0, #0]
 800e596:	e7d3      	b.n	800e540 <_free_r+0x28>
 800e598:	6825      	ldr	r5, [r4, #0]
 800e59a:	1961      	adds	r1, r4, r5
 800e59c:	428b      	cmp	r3, r1
 800e59e:	bf04      	itt	eq
 800e5a0:	6819      	ldreq	r1, [r3, #0]
 800e5a2:	685b      	ldreq	r3, [r3, #4]
 800e5a4:	6063      	str	r3, [r4, #4]
 800e5a6:	bf04      	itt	eq
 800e5a8:	1949      	addeq	r1, r1, r5
 800e5aa:	6021      	streq	r1, [r4, #0]
 800e5ac:	6054      	str	r4, [r2, #4]
 800e5ae:	e7c7      	b.n	800e540 <_free_r+0x28>
 800e5b0:	b003      	add	sp, #12
 800e5b2:	bd30      	pop	{r4, r5, pc}
 800e5b4:	2000055c 	.word	0x2000055c

0800e5b8 <_malloc_r>:
 800e5b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5ba:	1ccd      	adds	r5, r1, #3
 800e5bc:	f025 0503 	bic.w	r5, r5, #3
 800e5c0:	3508      	adds	r5, #8
 800e5c2:	2d0c      	cmp	r5, #12
 800e5c4:	bf38      	it	cc
 800e5c6:	250c      	movcc	r5, #12
 800e5c8:	2d00      	cmp	r5, #0
 800e5ca:	4606      	mov	r6, r0
 800e5cc:	db01      	blt.n	800e5d2 <_malloc_r+0x1a>
 800e5ce:	42a9      	cmp	r1, r5
 800e5d0:	d903      	bls.n	800e5da <_malloc_r+0x22>
 800e5d2:	230c      	movs	r3, #12
 800e5d4:	6033      	str	r3, [r6, #0]
 800e5d6:	2000      	movs	r0, #0
 800e5d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5da:	f000 fd07 	bl	800efec <__malloc_lock>
 800e5de:	4921      	ldr	r1, [pc, #132]	; (800e664 <_malloc_r+0xac>)
 800e5e0:	680a      	ldr	r2, [r1, #0]
 800e5e2:	4614      	mov	r4, r2
 800e5e4:	b99c      	cbnz	r4, 800e60e <_malloc_r+0x56>
 800e5e6:	4f20      	ldr	r7, [pc, #128]	; (800e668 <_malloc_r+0xb0>)
 800e5e8:	683b      	ldr	r3, [r7, #0]
 800e5ea:	b923      	cbnz	r3, 800e5f6 <_malloc_r+0x3e>
 800e5ec:	4621      	mov	r1, r4
 800e5ee:	4630      	mov	r0, r6
 800e5f0:	f000 f8e0 	bl	800e7b4 <_sbrk_r>
 800e5f4:	6038      	str	r0, [r7, #0]
 800e5f6:	4629      	mov	r1, r5
 800e5f8:	4630      	mov	r0, r6
 800e5fa:	f000 f8db 	bl	800e7b4 <_sbrk_r>
 800e5fe:	1c43      	adds	r3, r0, #1
 800e600:	d123      	bne.n	800e64a <_malloc_r+0x92>
 800e602:	230c      	movs	r3, #12
 800e604:	6033      	str	r3, [r6, #0]
 800e606:	4630      	mov	r0, r6
 800e608:	f000 fcf6 	bl	800eff8 <__malloc_unlock>
 800e60c:	e7e3      	b.n	800e5d6 <_malloc_r+0x1e>
 800e60e:	6823      	ldr	r3, [r4, #0]
 800e610:	1b5b      	subs	r3, r3, r5
 800e612:	d417      	bmi.n	800e644 <_malloc_r+0x8c>
 800e614:	2b0b      	cmp	r3, #11
 800e616:	d903      	bls.n	800e620 <_malloc_r+0x68>
 800e618:	6023      	str	r3, [r4, #0]
 800e61a:	441c      	add	r4, r3
 800e61c:	6025      	str	r5, [r4, #0]
 800e61e:	e004      	b.n	800e62a <_malloc_r+0x72>
 800e620:	6863      	ldr	r3, [r4, #4]
 800e622:	42a2      	cmp	r2, r4
 800e624:	bf0c      	ite	eq
 800e626:	600b      	streq	r3, [r1, #0]
 800e628:	6053      	strne	r3, [r2, #4]
 800e62a:	4630      	mov	r0, r6
 800e62c:	f000 fce4 	bl	800eff8 <__malloc_unlock>
 800e630:	f104 000b 	add.w	r0, r4, #11
 800e634:	1d23      	adds	r3, r4, #4
 800e636:	f020 0007 	bic.w	r0, r0, #7
 800e63a:	1ac2      	subs	r2, r0, r3
 800e63c:	d0cc      	beq.n	800e5d8 <_malloc_r+0x20>
 800e63e:	1a1b      	subs	r3, r3, r0
 800e640:	50a3      	str	r3, [r4, r2]
 800e642:	e7c9      	b.n	800e5d8 <_malloc_r+0x20>
 800e644:	4622      	mov	r2, r4
 800e646:	6864      	ldr	r4, [r4, #4]
 800e648:	e7cc      	b.n	800e5e4 <_malloc_r+0x2c>
 800e64a:	1cc4      	adds	r4, r0, #3
 800e64c:	f024 0403 	bic.w	r4, r4, #3
 800e650:	42a0      	cmp	r0, r4
 800e652:	d0e3      	beq.n	800e61c <_malloc_r+0x64>
 800e654:	1a21      	subs	r1, r4, r0
 800e656:	4630      	mov	r0, r6
 800e658:	f000 f8ac 	bl	800e7b4 <_sbrk_r>
 800e65c:	3001      	adds	r0, #1
 800e65e:	d1dd      	bne.n	800e61c <_malloc_r+0x64>
 800e660:	e7cf      	b.n	800e602 <_malloc_r+0x4a>
 800e662:	bf00      	nop
 800e664:	2000055c 	.word	0x2000055c
 800e668:	20000560 	.word	0x20000560

0800e66c <iprintf>:
 800e66c:	b40f      	push	{r0, r1, r2, r3}
 800e66e:	4b0a      	ldr	r3, [pc, #40]	; (800e698 <iprintf+0x2c>)
 800e670:	b513      	push	{r0, r1, r4, lr}
 800e672:	681c      	ldr	r4, [r3, #0]
 800e674:	b124      	cbz	r4, 800e680 <iprintf+0x14>
 800e676:	69a3      	ldr	r3, [r4, #24]
 800e678:	b913      	cbnz	r3, 800e680 <iprintf+0x14>
 800e67a:	4620      	mov	r0, r4
 800e67c:	f000 fb94 	bl	800eda8 <__sinit>
 800e680:	ab05      	add	r3, sp, #20
 800e682:	9a04      	ldr	r2, [sp, #16]
 800e684:	68a1      	ldr	r1, [r4, #8]
 800e686:	9301      	str	r3, [sp, #4]
 800e688:	4620      	mov	r0, r4
 800e68a:	f000 fe41 	bl	800f310 <_vfiprintf_r>
 800e68e:	b002      	add	sp, #8
 800e690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e694:	b004      	add	sp, #16
 800e696:	4770      	bx	lr
 800e698:	2000002c 	.word	0x2000002c

0800e69c <putchar>:
 800e69c:	4b09      	ldr	r3, [pc, #36]	; (800e6c4 <putchar+0x28>)
 800e69e:	b513      	push	{r0, r1, r4, lr}
 800e6a0:	681c      	ldr	r4, [r3, #0]
 800e6a2:	4601      	mov	r1, r0
 800e6a4:	b134      	cbz	r4, 800e6b4 <putchar+0x18>
 800e6a6:	69a3      	ldr	r3, [r4, #24]
 800e6a8:	b923      	cbnz	r3, 800e6b4 <putchar+0x18>
 800e6aa:	9001      	str	r0, [sp, #4]
 800e6ac:	4620      	mov	r0, r4
 800e6ae:	f000 fb7b 	bl	800eda8 <__sinit>
 800e6b2:	9901      	ldr	r1, [sp, #4]
 800e6b4:	68a2      	ldr	r2, [r4, #8]
 800e6b6:	4620      	mov	r0, r4
 800e6b8:	b002      	add	sp, #8
 800e6ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e6be:	f001 bc03 	b.w	800fec8 <_putc_r>
 800e6c2:	bf00      	nop
 800e6c4:	2000002c 	.word	0x2000002c

0800e6c8 <_puts_r>:
 800e6c8:	b570      	push	{r4, r5, r6, lr}
 800e6ca:	460e      	mov	r6, r1
 800e6cc:	4605      	mov	r5, r0
 800e6ce:	b118      	cbz	r0, 800e6d8 <_puts_r+0x10>
 800e6d0:	6983      	ldr	r3, [r0, #24]
 800e6d2:	b90b      	cbnz	r3, 800e6d8 <_puts_r+0x10>
 800e6d4:	f000 fb68 	bl	800eda8 <__sinit>
 800e6d8:	69ab      	ldr	r3, [r5, #24]
 800e6da:	68ac      	ldr	r4, [r5, #8]
 800e6dc:	b913      	cbnz	r3, 800e6e4 <_puts_r+0x1c>
 800e6de:	4628      	mov	r0, r5
 800e6e0:	f000 fb62 	bl	800eda8 <__sinit>
 800e6e4:	4b2c      	ldr	r3, [pc, #176]	; (800e798 <_puts_r+0xd0>)
 800e6e6:	429c      	cmp	r4, r3
 800e6e8:	d120      	bne.n	800e72c <_puts_r+0x64>
 800e6ea:	686c      	ldr	r4, [r5, #4]
 800e6ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e6ee:	07db      	lsls	r3, r3, #31
 800e6f0:	d405      	bmi.n	800e6fe <_puts_r+0x36>
 800e6f2:	89a3      	ldrh	r3, [r4, #12]
 800e6f4:	0598      	lsls	r0, r3, #22
 800e6f6:	d402      	bmi.n	800e6fe <_puts_r+0x36>
 800e6f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e6fa:	f000 fc10 	bl	800ef1e <__retarget_lock_acquire_recursive>
 800e6fe:	89a3      	ldrh	r3, [r4, #12]
 800e700:	0719      	lsls	r1, r3, #28
 800e702:	d51d      	bpl.n	800e740 <_puts_r+0x78>
 800e704:	6923      	ldr	r3, [r4, #16]
 800e706:	b1db      	cbz	r3, 800e740 <_puts_r+0x78>
 800e708:	3e01      	subs	r6, #1
 800e70a:	68a3      	ldr	r3, [r4, #8]
 800e70c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e710:	3b01      	subs	r3, #1
 800e712:	60a3      	str	r3, [r4, #8]
 800e714:	bb39      	cbnz	r1, 800e766 <_puts_r+0x9e>
 800e716:	2b00      	cmp	r3, #0
 800e718:	da38      	bge.n	800e78c <_puts_r+0xc4>
 800e71a:	4622      	mov	r2, r4
 800e71c:	210a      	movs	r1, #10
 800e71e:	4628      	mov	r0, r5
 800e720:	f000 f956 	bl	800e9d0 <__swbuf_r>
 800e724:	3001      	adds	r0, #1
 800e726:	d011      	beq.n	800e74c <_puts_r+0x84>
 800e728:	250a      	movs	r5, #10
 800e72a:	e011      	b.n	800e750 <_puts_r+0x88>
 800e72c:	4b1b      	ldr	r3, [pc, #108]	; (800e79c <_puts_r+0xd4>)
 800e72e:	429c      	cmp	r4, r3
 800e730:	d101      	bne.n	800e736 <_puts_r+0x6e>
 800e732:	68ac      	ldr	r4, [r5, #8]
 800e734:	e7da      	b.n	800e6ec <_puts_r+0x24>
 800e736:	4b1a      	ldr	r3, [pc, #104]	; (800e7a0 <_puts_r+0xd8>)
 800e738:	429c      	cmp	r4, r3
 800e73a:	bf08      	it	eq
 800e73c:	68ec      	ldreq	r4, [r5, #12]
 800e73e:	e7d5      	b.n	800e6ec <_puts_r+0x24>
 800e740:	4621      	mov	r1, r4
 800e742:	4628      	mov	r0, r5
 800e744:	f000 f996 	bl	800ea74 <__swsetup_r>
 800e748:	2800      	cmp	r0, #0
 800e74a:	d0dd      	beq.n	800e708 <_puts_r+0x40>
 800e74c:	f04f 35ff 	mov.w	r5, #4294967295
 800e750:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e752:	07da      	lsls	r2, r3, #31
 800e754:	d405      	bmi.n	800e762 <_puts_r+0x9a>
 800e756:	89a3      	ldrh	r3, [r4, #12]
 800e758:	059b      	lsls	r3, r3, #22
 800e75a:	d402      	bmi.n	800e762 <_puts_r+0x9a>
 800e75c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e75e:	f000 fbdf 	bl	800ef20 <__retarget_lock_release_recursive>
 800e762:	4628      	mov	r0, r5
 800e764:	bd70      	pop	{r4, r5, r6, pc}
 800e766:	2b00      	cmp	r3, #0
 800e768:	da04      	bge.n	800e774 <_puts_r+0xac>
 800e76a:	69a2      	ldr	r2, [r4, #24]
 800e76c:	429a      	cmp	r2, r3
 800e76e:	dc06      	bgt.n	800e77e <_puts_r+0xb6>
 800e770:	290a      	cmp	r1, #10
 800e772:	d004      	beq.n	800e77e <_puts_r+0xb6>
 800e774:	6823      	ldr	r3, [r4, #0]
 800e776:	1c5a      	adds	r2, r3, #1
 800e778:	6022      	str	r2, [r4, #0]
 800e77a:	7019      	strb	r1, [r3, #0]
 800e77c:	e7c5      	b.n	800e70a <_puts_r+0x42>
 800e77e:	4622      	mov	r2, r4
 800e780:	4628      	mov	r0, r5
 800e782:	f000 f925 	bl	800e9d0 <__swbuf_r>
 800e786:	3001      	adds	r0, #1
 800e788:	d1bf      	bne.n	800e70a <_puts_r+0x42>
 800e78a:	e7df      	b.n	800e74c <_puts_r+0x84>
 800e78c:	6823      	ldr	r3, [r4, #0]
 800e78e:	250a      	movs	r5, #10
 800e790:	1c5a      	adds	r2, r3, #1
 800e792:	6022      	str	r2, [r4, #0]
 800e794:	701d      	strb	r5, [r3, #0]
 800e796:	e7db      	b.n	800e750 <_puts_r+0x88>
 800e798:	080110c4 	.word	0x080110c4
 800e79c:	080110e4 	.word	0x080110e4
 800e7a0:	080110a4 	.word	0x080110a4

0800e7a4 <puts>:
 800e7a4:	4b02      	ldr	r3, [pc, #8]	; (800e7b0 <puts+0xc>)
 800e7a6:	4601      	mov	r1, r0
 800e7a8:	6818      	ldr	r0, [r3, #0]
 800e7aa:	f7ff bf8d 	b.w	800e6c8 <_puts_r>
 800e7ae:	bf00      	nop
 800e7b0:	2000002c 	.word	0x2000002c

0800e7b4 <_sbrk_r>:
 800e7b4:	b538      	push	{r3, r4, r5, lr}
 800e7b6:	4d06      	ldr	r5, [pc, #24]	; (800e7d0 <_sbrk_r+0x1c>)
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	4604      	mov	r4, r0
 800e7bc:	4608      	mov	r0, r1
 800e7be:	602b      	str	r3, [r5, #0]
 800e7c0:	f7f3 f870 	bl	80018a4 <_sbrk>
 800e7c4:	1c43      	adds	r3, r0, #1
 800e7c6:	d102      	bne.n	800e7ce <_sbrk_r+0x1a>
 800e7c8:	682b      	ldr	r3, [r5, #0]
 800e7ca:	b103      	cbz	r3, 800e7ce <_sbrk_r+0x1a>
 800e7cc:	6023      	str	r3, [r4, #0]
 800e7ce:	bd38      	pop	{r3, r4, r5, pc}
 800e7d0:	20004740 	.word	0x20004740

0800e7d4 <iscanf>:
 800e7d4:	b40f      	push	{r0, r1, r2, r3}
 800e7d6:	4b0a      	ldr	r3, [pc, #40]	; (800e800 <iscanf+0x2c>)
 800e7d8:	b513      	push	{r0, r1, r4, lr}
 800e7da:	681c      	ldr	r4, [r3, #0]
 800e7dc:	b124      	cbz	r4, 800e7e8 <iscanf+0x14>
 800e7de:	69a3      	ldr	r3, [r4, #24]
 800e7e0:	b913      	cbnz	r3, 800e7e8 <iscanf+0x14>
 800e7e2:	4620      	mov	r0, r4
 800e7e4:	f000 fae0 	bl	800eda8 <__sinit>
 800e7e8:	ab05      	add	r3, sp, #20
 800e7ea:	9a04      	ldr	r2, [sp, #16]
 800e7ec:	6861      	ldr	r1, [r4, #4]
 800e7ee:	9301      	str	r3, [sp, #4]
 800e7f0:	4620      	mov	r0, r4
 800e7f2:	f001 f9f5 	bl	800fbe0 <_vfiscanf_r>
 800e7f6:	b002      	add	sp, #8
 800e7f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e7fc:	b004      	add	sp, #16
 800e7fe:	4770      	bx	lr
 800e800:	2000002c 	.word	0x2000002c

0800e804 <setvbuf>:
 800e804:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e808:	461d      	mov	r5, r3
 800e80a:	4b5d      	ldr	r3, [pc, #372]	; (800e980 <setvbuf+0x17c>)
 800e80c:	681f      	ldr	r7, [r3, #0]
 800e80e:	4604      	mov	r4, r0
 800e810:	460e      	mov	r6, r1
 800e812:	4690      	mov	r8, r2
 800e814:	b127      	cbz	r7, 800e820 <setvbuf+0x1c>
 800e816:	69bb      	ldr	r3, [r7, #24]
 800e818:	b913      	cbnz	r3, 800e820 <setvbuf+0x1c>
 800e81a:	4638      	mov	r0, r7
 800e81c:	f000 fac4 	bl	800eda8 <__sinit>
 800e820:	4b58      	ldr	r3, [pc, #352]	; (800e984 <setvbuf+0x180>)
 800e822:	429c      	cmp	r4, r3
 800e824:	d167      	bne.n	800e8f6 <setvbuf+0xf2>
 800e826:	687c      	ldr	r4, [r7, #4]
 800e828:	f1b8 0f02 	cmp.w	r8, #2
 800e82c:	d006      	beq.n	800e83c <setvbuf+0x38>
 800e82e:	f1b8 0f01 	cmp.w	r8, #1
 800e832:	f200 809f 	bhi.w	800e974 <setvbuf+0x170>
 800e836:	2d00      	cmp	r5, #0
 800e838:	f2c0 809c 	blt.w	800e974 <setvbuf+0x170>
 800e83c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e83e:	07db      	lsls	r3, r3, #31
 800e840:	d405      	bmi.n	800e84e <setvbuf+0x4a>
 800e842:	89a3      	ldrh	r3, [r4, #12]
 800e844:	0598      	lsls	r0, r3, #22
 800e846:	d402      	bmi.n	800e84e <setvbuf+0x4a>
 800e848:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e84a:	f000 fb68 	bl	800ef1e <__retarget_lock_acquire_recursive>
 800e84e:	4621      	mov	r1, r4
 800e850:	4638      	mov	r0, r7
 800e852:	f000 fa03 	bl	800ec5c <_fflush_r>
 800e856:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e858:	b141      	cbz	r1, 800e86c <setvbuf+0x68>
 800e85a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e85e:	4299      	cmp	r1, r3
 800e860:	d002      	beq.n	800e868 <setvbuf+0x64>
 800e862:	4638      	mov	r0, r7
 800e864:	f7ff fe58 	bl	800e518 <_free_r>
 800e868:	2300      	movs	r3, #0
 800e86a:	6363      	str	r3, [r4, #52]	; 0x34
 800e86c:	2300      	movs	r3, #0
 800e86e:	61a3      	str	r3, [r4, #24]
 800e870:	6063      	str	r3, [r4, #4]
 800e872:	89a3      	ldrh	r3, [r4, #12]
 800e874:	0619      	lsls	r1, r3, #24
 800e876:	d503      	bpl.n	800e880 <setvbuf+0x7c>
 800e878:	6921      	ldr	r1, [r4, #16]
 800e87a:	4638      	mov	r0, r7
 800e87c:	f7ff fe4c 	bl	800e518 <_free_r>
 800e880:	89a3      	ldrh	r3, [r4, #12]
 800e882:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800e886:	f023 0303 	bic.w	r3, r3, #3
 800e88a:	f1b8 0f02 	cmp.w	r8, #2
 800e88e:	81a3      	strh	r3, [r4, #12]
 800e890:	d06c      	beq.n	800e96c <setvbuf+0x168>
 800e892:	ab01      	add	r3, sp, #4
 800e894:	466a      	mov	r2, sp
 800e896:	4621      	mov	r1, r4
 800e898:	4638      	mov	r0, r7
 800e89a:	f000 fb42 	bl	800ef22 <__swhatbuf_r>
 800e89e:	89a3      	ldrh	r3, [r4, #12]
 800e8a0:	4318      	orrs	r0, r3
 800e8a2:	81a0      	strh	r0, [r4, #12]
 800e8a4:	2d00      	cmp	r5, #0
 800e8a6:	d130      	bne.n	800e90a <setvbuf+0x106>
 800e8a8:	9d00      	ldr	r5, [sp, #0]
 800e8aa:	4628      	mov	r0, r5
 800e8ac:	f7ff fe0e 	bl	800e4cc <malloc>
 800e8b0:	4606      	mov	r6, r0
 800e8b2:	2800      	cmp	r0, #0
 800e8b4:	d155      	bne.n	800e962 <setvbuf+0x15e>
 800e8b6:	f8dd 9000 	ldr.w	r9, [sp]
 800e8ba:	45a9      	cmp	r9, r5
 800e8bc:	d14a      	bne.n	800e954 <setvbuf+0x150>
 800e8be:	f04f 35ff 	mov.w	r5, #4294967295
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	60a2      	str	r2, [r4, #8]
 800e8c6:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800e8ca:	6022      	str	r2, [r4, #0]
 800e8cc:	6122      	str	r2, [r4, #16]
 800e8ce:	2201      	movs	r2, #1
 800e8d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e8d4:	6162      	str	r2, [r4, #20]
 800e8d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e8d8:	f043 0302 	orr.w	r3, r3, #2
 800e8dc:	07d2      	lsls	r2, r2, #31
 800e8de:	81a3      	strh	r3, [r4, #12]
 800e8e0:	d405      	bmi.n	800e8ee <setvbuf+0xea>
 800e8e2:	f413 7f00 	tst.w	r3, #512	; 0x200
 800e8e6:	d102      	bne.n	800e8ee <setvbuf+0xea>
 800e8e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e8ea:	f000 fb19 	bl	800ef20 <__retarget_lock_release_recursive>
 800e8ee:	4628      	mov	r0, r5
 800e8f0:	b003      	add	sp, #12
 800e8f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e8f6:	4b24      	ldr	r3, [pc, #144]	; (800e988 <setvbuf+0x184>)
 800e8f8:	429c      	cmp	r4, r3
 800e8fa:	d101      	bne.n	800e900 <setvbuf+0xfc>
 800e8fc:	68bc      	ldr	r4, [r7, #8]
 800e8fe:	e793      	b.n	800e828 <setvbuf+0x24>
 800e900:	4b22      	ldr	r3, [pc, #136]	; (800e98c <setvbuf+0x188>)
 800e902:	429c      	cmp	r4, r3
 800e904:	bf08      	it	eq
 800e906:	68fc      	ldreq	r4, [r7, #12]
 800e908:	e78e      	b.n	800e828 <setvbuf+0x24>
 800e90a:	2e00      	cmp	r6, #0
 800e90c:	d0cd      	beq.n	800e8aa <setvbuf+0xa6>
 800e90e:	69bb      	ldr	r3, [r7, #24]
 800e910:	b913      	cbnz	r3, 800e918 <setvbuf+0x114>
 800e912:	4638      	mov	r0, r7
 800e914:	f000 fa48 	bl	800eda8 <__sinit>
 800e918:	f1b8 0f01 	cmp.w	r8, #1
 800e91c:	bf08      	it	eq
 800e91e:	89a3      	ldrheq	r3, [r4, #12]
 800e920:	6026      	str	r6, [r4, #0]
 800e922:	bf04      	itt	eq
 800e924:	f043 0301 	orreq.w	r3, r3, #1
 800e928:	81a3      	strheq	r3, [r4, #12]
 800e92a:	89a2      	ldrh	r2, [r4, #12]
 800e92c:	f012 0308 	ands.w	r3, r2, #8
 800e930:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800e934:	d01c      	beq.n	800e970 <setvbuf+0x16c>
 800e936:	07d3      	lsls	r3, r2, #31
 800e938:	bf41      	itttt	mi
 800e93a:	2300      	movmi	r3, #0
 800e93c:	426d      	negmi	r5, r5
 800e93e:	60a3      	strmi	r3, [r4, #8]
 800e940:	61a5      	strmi	r5, [r4, #24]
 800e942:	bf58      	it	pl
 800e944:	60a5      	strpl	r5, [r4, #8]
 800e946:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800e948:	f015 0501 	ands.w	r5, r5, #1
 800e94c:	d115      	bne.n	800e97a <setvbuf+0x176>
 800e94e:	f412 7f00 	tst.w	r2, #512	; 0x200
 800e952:	e7c8      	b.n	800e8e6 <setvbuf+0xe2>
 800e954:	4648      	mov	r0, r9
 800e956:	f7ff fdb9 	bl	800e4cc <malloc>
 800e95a:	4606      	mov	r6, r0
 800e95c:	2800      	cmp	r0, #0
 800e95e:	d0ae      	beq.n	800e8be <setvbuf+0xba>
 800e960:	464d      	mov	r5, r9
 800e962:	89a3      	ldrh	r3, [r4, #12]
 800e964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e968:	81a3      	strh	r3, [r4, #12]
 800e96a:	e7d0      	b.n	800e90e <setvbuf+0x10a>
 800e96c:	2500      	movs	r5, #0
 800e96e:	e7a8      	b.n	800e8c2 <setvbuf+0xbe>
 800e970:	60a3      	str	r3, [r4, #8]
 800e972:	e7e8      	b.n	800e946 <setvbuf+0x142>
 800e974:	f04f 35ff 	mov.w	r5, #4294967295
 800e978:	e7b9      	b.n	800e8ee <setvbuf+0xea>
 800e97a:	2500      	movs	r5, #0
 800e97c:	e7b7      	b.n	800e8ee <setvbuf+0xea>
 800e97e:	bf00      	nop
 800e980:	2000002c 	.word	0x2000002c
 800e984:	080110c4 	.word	0x080110c4
 800e988:	080110e4 	.word	0x080110e4
 800e98c:	080110a4 	.word	0x080110a4

0800e990 <siprintf>:
 800e990:	b40e      	push	{r1, r2, r3}
 800e992:	b500      	push	{lr}
 800e994:	b09c      	sub	sp, #112	; 0x70
 800e996:	ab1d      	add	r3, sp, #116	; 0x74
 800e998:	9002      	str	r0, [sp, #8]
 800e99a:	9006      	str	r0, [sp, #24]
 800e99c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e9a0:	4809      	ldr	r0, [pc, #36]	; (800e9c8 <siprintf+0x38>)
 800e9a2:	9107      	str	r1, [sp, #28]
 800e9a4:	9104      	str	r1, [sp, #16]
 800e9a6:	4909      	ldr	r1, [pc, #36]	; (800e9cc <siprintf+0x3c>)
 800e9a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9ac:	9105      	str	r1, [sp, #20]
 800e9ae:	6800      	ldr	r0, [r0, #0]
 800e9b0:	9301      	str	r3, [sp, #4]
 800e9b2:	a902      	add	r1, sp, #8
 800e9b4:	f000 fb82 	bl	800f0bc <_svfiprintf_r>
 800e9b8:	9b02      	ldr	r3, [sp, #8]
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	701a      	strb	r2, [r3, #0]
 800e9be:	b01c      	add	sp, #112	; 0x70
 800e9c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e9c4:	b003      	add	sp, #12
 800e9c6:	4770      	bx	lr
 800e9c8:	2000002c 	.word	0x2000002c
 800e9cc:	ffff0208 	.word	0xffff0208

0800e9d0 <__swbuf_r>:
 800e9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9d2:	460e      	mov	r6, r1
 800e9d4:	4614      	mov	r4, r2
 800e9d6:	4605      	mov	r5, r0
 800e9d8:	b118      	cbz	r0, 800e9e2 <__swbuf_r+0x12>
 800e9da:	6983      	ldr	r3, [r0, #24]
 800e9dc:	b90b      	cbnz	r3, 800e9e2 <__swbuf_r+0x12>
 800e9de:	f000 f9e3 	bl	800eda8 <__sinit>
 800e9e2:	4b21      	ldr	r3, [pc, #132]	; (800ea68 <__swbuf_r+0x98>)
 800e9e4:	429c      	cmp	r4, r3
 800e9e6:	d12b      	bne.n	800ea40 <__swbuf_r+0x70>
 800e9e8:	686c      	ldr	r4, [r5, #4]
 800e9ea:	69a3      	ldr	r3, [r4, #24]
 800e9ec:	60a3      	str	r3, [r4, #8]
 800e9ee:	89a3      	ldrh	r3, [r4, #12]
 800e9f0:	071a      	lsls	r2, r3, #28
 800e9f2:	d52f      	bpl.n	800ea54 <__swbuf_r+0x84>
 800e9f4:	6923      	ldr	r3, [r4, #16]
 800e9f6:	b36b      	cbz	r3, 800ea54 <__swbuf_r+0x84>
 800e9f8:	6923      	ldr	r3, [r4, #16]
 800e9fa:	6820      	ldr	r0, [r4, #0]
 800e9fc:	1ac0      	subs	r0, r0, r3
 800e9fe:	6963      	ldr	r3, [r4, #20]
 800ea00:	b2f6      	uxtb	r6, r6
 800ea02:	4283      	cmp	r3, r0
 800ea04:	4637      	mov	r7, r6
 800ea06:	dc04      	bgt.n	800ea12 <__swbuf_r+0x42>
 800ea08:	4621      	mov	r1, r4
 800ea0a:	4628      	mov	r0, r5
 800ea0c:	f000 f926 	bl	800ec5c <_fflush_r>
 800ea10:	bb30      	cbnz	r0, 800ea60 <__swbuf_r+0x90>
 800ea12:	68a3      	ldr	r3, [r4, #8]
 800ea14:	3b01      	subs	r3, #1
 800ea16:	60a3      	str	r3, [r4, #8]
 800ea18:	6823      	ldr	r3, [r4, #0]
 800ea1a:	1c5a      	adds	r2, r3, #1
 800ea1c:	6022      	str	r2, [r4, #0]
 800ea1e:	701e      	strb	r6, [r3, #0]
 800ea20:	6963      	ldr	r3, [r4, #20]
 800ea22:	3001      	adds	r0, #1
 800ea24:	4283      	cmp	r3, r0
 800ea26:	d004      	beq.n	800ea32 <__swbuf_r+0x62>
 800ea28:	89a3      	ldrh	r3, [r4, #12]
 800ea2a:	07db      	lsls	r3, r3, #31
 800ea2c:	d506      	bpl.n	800ea3c <__swbuf_r+0x6c>
 800ea2e:	2e0a      	cmp	r6, #10
 800ea30:	d104      	bne.n	800ea3c <__swbuf_r+0x6c>
 800ea32:	4621      	mov	r1, r4
 800ea34:	4628      	mov	r0, r5
 800ea36:	f000 f911 	bl	800ec5c <_fflush_r>
 800ea3a:	b988      	cbnz	r0, 800ea60 <__swbuf_r+0x90>
 800ea3c:	4638      	mov	r0, r7
 800ea3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea40:	4b0a      	ldr	r3, [pc, #40]	; (800ea6c <__swbuf_r+0x9c>)
 800ea42:	429c      	cmp	r4, r3
 800ea44:	d101      	bne.n	800ea4a <__swbuf_r+0x7a>
 800ea46:	68ac      	ldr	r4, [r5, #8]
 800ea48:	e7cf      	b.n	800e9ea <__swbuf_r+0x1a>
 800ea4a:	4b09      	ldr	r3, [pc, #36]	; (800ea70 <__swbuf_r+0xa0>)
 800ea4c:	429c      	cmp	r4, r3
 800ea4e:	bf08      	it	eq
 800ea50:	68ec      	ldreq	r4, [r5, #12]
 800ea52:	e7ca      	b.n	800e9ea <__swbuf_r+0x1a>
 800ea54:	4621      	mov	r1, r4
 800ea56:	4628      	mov	r0, r5
 800ea58:	f000 f80c 	bl	800ea74 <__swsetup_r>
 800ea5c:	2800      	cmp	r0, #0
 800ea5e:	d0cb      	beq.n	800e9f8 <__swbuf_r+0x28>
 800ea60:	f04f 37ff 	mov.w	r7, #4294967295
 800ea64:	e7ea      	b.n	800ea3c <__swbuf_r+0x6c>
 800ea66:	bf00      	nop
 800ea68:	080110c4 	.word	0x080110c4
 800ea6c:	080110e4 	.word	0x080110e4
 800ea70:	080110a4 	.word	0x080110a4

0800ea74 <__swsetup_r>:
 800ea74:	4b32      	ldr	r3, [pc, #200]	; (800eb40 <__swsetup_r+0xcc>)
 800ea76:	b570      	push	{r4, r5, r6, lr}
 800ea78:	681d      	ldr	r5, [r3, #0]
 800ea7a:	4606      	mov	r6, r0
 800ea7c:	460c      	mov	r4, r1
 800ea7e:	b125      	cbz	r5, 800ea8a <__swsetup_r+0x16>
 800ea80:	69ab      	ldr	r3, [r5, #24]
 800ea82:	b913      	cbnz	r3, 800ea8a <__swsetup_r+0x16>
 800ea84:	4628      	mov	r0, r5
 800ea86:	f000 f98f 	bl	800eda8 <__sinit>
 800ea8a:	4b2e      	ldr	r3, [pc, #184]	; (800eb44 <__swsetup_r+0xd0>)
 800ea8c:	429c      	cmp	r4, r3
 800ea8e:	d10f      	bne.n	800eab0 <__swsetup_r+0x3c>
 800ea90:	686c      	ldr	r4, [r5, #4]
 800ea92:	89a3      	ldrh	r3, [r4, #12]
 800ea94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ea98:	0719      	lsls	r1, r3, #28
 800ea9a:	d42c      	bmi.n	800eaf6 <__swsetup_r+0x82>
 800ea9c:	06dd      	lsls	r5, r3, #27
 800ea9e:	d411      	bmi.n	800eac4 <__swsetup_r+0x50>
 800eaa0:	2309      	movs	r3, #9
 800eaa2:	6033      	str	r3, [r6, #0]
 800eaa4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800eaa8:	81a3      	strh	r3, [r4, #12]
 800eaaa:	f04f 30ff 	mov.w	r0, #4294967295
 800eaae:	e03e      	b.n	800eb2e <__swsetup_r+0xba>
 800eab0:	4b25      	ldr	r3, [pc, #148]	; (800eb48 <__swsetup_r+0xd4>)
 800eab2:	429c      	cmp	r4, r3
 800eab4:	d101      	bne.n	800eaba <__swsetup_r+0x46>
 800eab6:	68ac      	ldr	r4, [r5, #8]
 800eab8:	e7eb      	b.n	800ea92 <__swsetup_r+0x1e>
 800eaba:	4b24      	ldr	r3, [pc, #144]	; (800eb4c <__swsetup_r+0xd8>)
 800eabc:	429c      	cmp	r4, r3
 800eabe:	bf08      	it	eq
 800eac0:	68ec      	ldreq	r4, [r5, #12]
 800eac2:	e7e6      	b.n	800ea92 <__swsetup_r+0x1e>
 800eac4:	0758      	lsls	r0, r3, #29
 800eac6:	d512      	bpl.n	800eaee <__swsetup_r+0x7a>
 800eac8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eaca:	b141      	cbz	r1, 800eade <__swsetup_r+0x6a>
 800eacc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ead0:	4299      	cmp	r1, r3
 800ead2:	d002      	beq.n	800eada <__swsetup_r+0x66>
 800ead4:	4630      	mov	r0, r6
 800ead6:	f7ff fd1f 	bl	800e518 <_free_r>
 800eada:	2300      	movs	r3, #0
 800eadc:	6363      	str	r3, [r4, #52]	; 0x34
 800eade:	89a3      	ldrh	r3, [r4, #12]
 800eae0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800eae4:	81a3      	strh	r3, [r4, #12]
 800eae6:	2300      	movs	r3, #0
 800eae8:	6063      	str	r3, [r4, #4]
 800eaea:	6923      	ldr	r3, [r4, #16]
 800eaec:	6023      	str	r3, [r4, #0]
 800eaee:	89a3      	ldrh	r3, [r4, #12]
 800eaf0:	f043 0308 	orr.w	r3, r3, #8
 800eaf4:	81a3      	strh	r3, [r4, #12]
 800eaf6:	6923      	ldr	r3, [r4, #16]
 800eaf8:	b94b      	cbnz	r3, 800eb0e <__swsetup_r+0x9a>
 800eafa:	89a3      	ldrh	r3, [r4, #12]
 800eafc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800eb00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eb04:	d003      	beq.n	800eb0e <__swsetup_r+0x9a>
 800eb06:	4621      	mov	r1, r4
 800eb08:	4630      	mov	r0, r6
 800eb0a:	f000 fa2f 	bl	800ef6c <__smakebuf_r>
 800eb0e:	89a0      	ldrh	r0, [r4, #12]
 800eb10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eb14:	f010 0301 	ands.w	r3, r0, #1
 800eb18:	d00a      	beq.n	800eb30 <__swsetup_r+0xbc>
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	60a3      	str	r3, [r4, #8]
 800eb1e:	6963      	ldr	r3, [r4, #20]
 800eb20:	425b      	negs	r3, r3
 800eb22:	61a3      	str	r3, [r4, #24]
 800eb24:	6923      	ldr	r3, [r4, #16]
 800eb26:	b943      	cbnz	r3, 800eb3a <__swsetup_r+0xc6>
 800eb28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800eb2c:	d1ba      	bne.n	800eaa4 <__swsetup_r+0x30>
 800eb2e:	bd70      	pop	{r4, r5, r6, pc}
 800eb30:	0781      	lsls	r1, r0, #30
 800eb32:	bf58      	it	pl
 800eb34:	6963      	ldrpl	r3, [r4, #20]
 800eb36:	60a3      	str	r3, [r4, #8]
 800eb38:	e7f4      	b.n	800eb24 <__swsetup_r+0xb0>
 800eb3a:	2000      	movs	r0, #0
 800eb3c:	e7f7      	b.n	800eb2e <__swsetup_r+0xba>
 800eb3e:	bf00      	nop
 800eb40:	2000002c 	.word	0x2000002c
 800eb44:	080110c4 	.word	0x080110c4
 800eb48:	080110e4 	.word	0x080110e4
 800eb4c:	080110a4 	.word	0x080110a4

0800eb50 <__sflush_r>:
 800eb50:	898a      	ldrh	r2, [r1, #12]
 800eb52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb56:	4605      	mov	r5, r0
 800eb58:	0710      	lsls	r0, r2, #28
 800eb5a:	460c      	mov	r4, r1
 800eb5c:	d458      	bmi.n	800ec10 <__sflush_r+0xc0>
 800eb5e:	684b      	ldr	r3, [r1, #4]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	dc05      	bgt.n	800eb70 <__sflush_r+0x20>
 800eb64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	dc02      	bgt.n	800eb70 <__sflush_r+0x20>
 800eb6a:	2000      	movs	r0, #0
 800eb6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eb72:	2e00      	cmp	r6, #0
 800eb74:	d0f9      	beq.n	800eb6a <__sflush_r+0x1a>
 800eb76:	2300      	movs	r3, #0
 800eb78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eb7c:	682f      	ldr	r7, [r5, #0]
 800eb7e:	602b      	str	r3, [r5, #0]
 800eb80:	d032      	beq.n	800ebe8 <__sflush_r+0x98>
 800eb82:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eb84:	89a3      	ldrh	r3, [r4, #12]
 800eb86:	075a      	lsls	r2, r3, #29
 800eb88:	d505      	bpl.n	800eb96 <__sflush_r+0x46>
 800eb8a:	6863      	ldr	r3, [r4, #4]
 800eb8c:	1ac0      	subs	r0, r0, r3
 800eb8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eb90:	b10b      	cbz	r3, 800eb96 <__sflush_r+0x46>
 800eb92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eb94:	1ac0      	subs	r0, r0, r3
 800eb96:	2300      	movs	r3, #0
 800eb98:	4602      	mov	r2, r0
 800eb9a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eb9c:	6a21      	ldr	r1, [r4, #32]
 800eb9e:	4628      	mov	r0, r5
 800eba0:	47b0      	blx	r6
 800eba2:	1c43      	adds	r3, r0, #1
 800eba4:	89a3      	ldrh	r3, [r4, #12]
 800eba6:	d106      	bne.n	800ebb6 <__sflush_r+0x66>
 800eba8:	6829      	ldr	r1, [r5, #0]
 800ebaa:	291d      	cmp	r1, #29
 800ebac:	d82c      	bhi.n	800ec08 <__sflush_r+0xb8>
 800ebae:	4a2a      	ldr	r2, [pc, #168]	; (800ec58 <__sflush_r+0x108>)
 800ebb0:	40ca      	lsrs	r2, r1
 800ebb2:	07d6      	lsls	r6, r2, #31
 800ebb4:	d528      	bpl.n	800ec08 <__sflush_r+0xb8>
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	6062      	str	r2, [r4, #4]
 800ebba:	04d9      	lsls	r1, r3, #19
 800ebbc:	6922      	ldr	r2, [r4, #16]
 800ebbe:	6022      	str	r2, [r4, #0]
 800ebc0:	d504      	bpl.n	800ebcc <__sflush_r+0x7c>
 800ebc2:	1c42      	adds	r2, r0, #1
 800ebc4:	d101      	bne.n	800ebca <__sflush_r+0x7a>
 800ebc6:	682b      	ldr	r3, [r5, #0]
 800ebc8:	b903      	cbnz	r3, 800ebcc <__sflush_r+0x7c>
 800ebca:	6560      	str	r0, [r4, #84]	; 0x54
 800ebcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ebce:	602f      	str	r7, [r5, #0]
 800ebd0:	2900      	cmp	r1, #0
 800ebd2:	d0ca      	beq.n	800eb6a <__sflush_r+0x1a>
 800ebd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ebd8:	4299      	cmp	r1, r3
 800ebda:	d002      	beq.n	800ebe2 <__sflush_r+0x92>
 800ebdc:	4628      	mov	r0, r5
 800ebde:	f7ff fc9b 	bl	800e518 <_free_r>
 800ebe2:	2000      	movs	r0, #0
 800ebe4:	6360      	str	r0, [r4, #52]	; 0x34
 800ebe6:	e7c1      	b.n	800eb6c <__sflush_r+0x1c>
 800ebe8:	6a21      	ldr	r1, [r4, #32]
 800ebea:	2301      	movs	r3, #1
 800ebec:	4628      	mov	r0, r5
 800ebee:	47b0      	blx	r6
 800ebf0:	1c41      	adds	r1, r0, #1
 800ebf2:	d1c7      	bne.n	800eb84 <__sflush_r+0x34>
 800ebf4:	682b      	ldr	r3, [r5, #0]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d0c4      	beq.n	800eb84 <__sflush_r+0x34>
 800ebfa:	2b1d      	cmp	r3, #29
 800ebfc:	d001      	beq.n	800ec02 <__sflush_r+0xb2>
 800ebfe:	2b16      	cmp	r3, #22
 800ec00:	d101      	bne.n	800ec06 <__sflush_r+0xb6>
 800ec02:	602f      	str	r7, [r5, #0]
 800ec04:	e7b1      	b.n	800eb6a <__sflush_r+0x1a>
 800ec06:	89a3      	ldrh	r3, [r4, #12]
 800ec08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec0c:	81a3      	strh	r3, [r4, #12]
 800ec0e:	e7ad      	b.n	800eb6c <__sflush_r+0x1c>
 800ec10:	690f      	ldr	r7, [r1, #16]
 800ec12:	2f00      	cmp	r7, #0
 800ec14:	d0a9      	beq.n	800eb6a <__sflush_r+0x1a>
 800ec16:	0793      	lsls	r3, r2, #30
 800ec18:	680e      	ldr	r6, [r1, #0]
 800ec1a:	bf08      	it	eq
 800ec1c:	694b      	ldreq	r3, [r1, #20]
 800ec1e:	600f      	str	r7, [r1, #0]
 800ec20:	bf18      	it	ne
 800ec22:	2300      	movne	r3, #0
 800ec24:	eba6 0807 	sub.w	r8, r6, r7
 800ec28:	608b      	str	r3, [r1, #8]
 800ec2a:	f1b8 0f00 	cmp.w	r8, #0
 800ec2e:	dd9c      	ble.n	800eb6a <__sflush_r+0x1a>
 800ec30:	6a21      	ldr	r1, [r4, #32]
 800ec32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ec34:	4643      	mov	r3, r8
 800ec36:	463a      	mov	r2, r7
 800ec38:	4628      	mov	r0, r5
 800ec3a:	47b0      	blx	r6
 800ec3c:	2800      	cmp	r0, #0
 800ec3e:	dc06      	bgt.n	800ec4e <__sflush_r+0xfe>
 800ec40:	89a3      	ldrh	r3, [r4, #12]
 800ec42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec46:	81a3      	strh	r3, [r4, #12]
 800ec48:	f04f 30ff 	mov.w	r0, #4294967295
 800ec4c:	e78e      	b.n	800eb6c <__sflush_r+0x1c>
 800ec4e:	4407      	add	r7, r0
 800ec50:	eba8 0800 	sub.w	r8, r8, r0
 800ec54:	e7e9      	b.n	800ec2a <__sflush_r+0xda>
 800ec56:	bf00      	nop
 800ec58:	20400001 	.word	0x20400001

0800ec5c <_fflush_r>:
 800ec5c:	b538      	push	{r3, r4, r5, lr}
 800ec5e:	690b      	ldr	r3, [r1, #16]
 800ec60:	4605      	mov	r5, r0
 800ec62:	460c      	mov	r4, r1
 800ec64:	b913      	cbnz	r3, 800ec6c <_fflush_r+0x10>
 800ec66:	2500      	movs	r5, #0
 800ec68:	4628      	mov	r0, r5
 800ec6a:	bd38      	pop	{r3, r4, r5, pc}
 800ec6c:	b118      	cbz	r0, 800ec76 <_fflush_r+0x1a>
 800ec6e:	6983      	ldr	r3, [r0, #24]
 800ec70:	b90b      	cbnz	r3, 800ec76 <_fflush_r+0x1a>
 800ec72:	f000 f899 	bl	800eda8 <__sinit>
 800ec76:	4b14      	ldr	r3, [pc, #80]	; (800ecc8 <_fflush_r+0x6c>)
 800ec78:	429c      	cmp	r4, r3
 800ec7a:	d11b      	bne.n	800ecb4 <_fflush_r+0x58>
 800ec7c:	686c      	ldr	r4, [r5, #4]
 800ec7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d0ef      	beq.n	800ec66 <_fflush_r+0xa>
 800ec86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ec88:	07d0      	lsls	r0, r2, #31
 800ec8a:	d404      	bmi.n	800ec96 <_fflush_r+0x3a>
 800ec8c:	0599      	lsls	r1, r3, #22
 800ec8e:	d402      	bmi.n	800ec96 <_fflush_r+0x3a>
 800ec90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec92:	f000 f944 	bl	800ef1e <__retarget_lock_acquire_recursive>
 800ec96:	4628      	mov	r0, r5
 800ec98:	4621      	mov	r1, r4
 800ec9a:	f7ff ff59 	bl	800eb50 <__sflush_r>
 800ec9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eca0:	07da      	lsls	r2, r3, #31
 800eca2:	4605      	mov	r5, r0
 800eca4:	d4e0      	bmi.n	800ec68 <_fflush_r+0xc>
 800eca6:	89a3      	ldrh	r3, [r4, #12]
 800eca8:	059b      	lsls	r3, r3, #22
 800ecaa:	d4dd      	bmi.n	800ec68 <_fflush_r+0xc>
 800ecac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ecae:	f000 f937 	bl	800ef20 <__retarget_lock_release_recursive>
 800ecb2:	e7d9      	b.n	800ec68 <_fflush_r+0xc>
 800ecb4:	4b05      	ldr	r3, [pc, #20]	; (800eccc <_fflush_r+0x70>)
 800ecb6:	429c      	cmp	r4, r3
 800ecb8:	d101      	bne.n	800ecbe <_fflush_r+0x62>
 800ecba:	68ac      	ldr	r4, [r5, #8]
 800ecbc:	e7df      	b.n	800ec7e <_fflush_r+0x22>
 800ecbe:	4b04      	ldr	r3, [pc, #16]	; (800ecd0 <_fflush_r+0x74>)
 800ecc0:	429c      	cmp	r4, r3
 800ecc2:	bf08      	it	eq
 800ecc4:	68ec      	ldreq	r4, [r5, #12]
 800ecc6:	e7da      	b.n	800ec7e <_fflush_r+0x22>
 800ecc8:	080110c4 	.word	0x080110c4
 800eccc:	080110e4 	.word	0x080110e4
 800ecd0:	080110a4 	.word	0x080110a4

0800ecd4 <fflush>:
 800ecd4:	4601      	mov	r1, r0
 800ecd6:	b920      	cbnz	r0, 800ece2 <fflush+0xe>
 800ecd8:	4b04      	ldr	r3, [pc, #16]	; (800ecec <fflush+0x18>)
 800ecda:	4905      	ldr	r1, [pc, #20]	; (800ecf0 <fflush+0x1c>)
 800ecdc:	6818      	ldr	r0, [r3, #0]
 800ecde:	f000 b8fe 	b.w	800eede <_fwalk_reent>
 800ece2:	4b04      	ldr	r3, [pc, #16]	; (800ecf4 <fflush+0x20>)
 800ece4:	6818      	ldr	r0, [r3, #0]
 800ece6:	f7ff bfb9 	b.w	800ec5c <_fflush_r>
 800ecea:	bf00      	nop
 800ecec:	080110a0 	.word	0x080110a0
 800ecf0:	0800ec5d 	.word	0x0800ec5d
 800ecf4:	2000002c 	.word	0x2000002c

0800ecf8 <std>:
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	b510      	push	{r4, lr}
 800ecfc:	4604      	mov	r4, r0
 800ecfe:	e9c0 3300 	strd	r3, r3, [r0]
 800ed02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ed06:	6083      	str	r3, [r0, #8]
 800ed08:	8181      	strh	r1, [r0, #12]
 800ed0a:	6643      	str	r3, [r0, #100]	; 0x64
 800ed0c:	81c2      	strh	r2, [r0, #14]
 800ed0e:	6183      	str	r3, [r0, #24]
 800ed10:	4619      	mov	r1, r3
 800ed12:	2208      	movs	r2, #8
 800ed14:	305c      	adds	r0, #92	; 0x5c
 800ed16:	f7ff fbf7 	bl	800e508 <memset>
 800ed1a:	4b05      	ldr	r3, [pc, #20]	; (800ed30 <std+0x38>)
 800ed1c:	6263      	str	r3, [r4, #36]	; 0x24
 800ed1e:	4b05      	ldr	r3, [pc, #20]	; (800ed34 <std+0x3c>)
 800ed20:	62a3      	str	r3, [r4, #40]	; 0x28
 800ed22:	4b05      	ldr	r3, [pc, #20]	; (800ed38 <std+0x40>)
 800ed24:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ed26:	4b05      	ldr	r3, [pc, #20]	; (800ed3c <std+0x44>)
 800ed28:	6224      	str	r4, [r4, #32]
 800ed2a:	6323      	str	r3, [r4, #48]	; 0x30
 800ed2c:	bd10      	pop	{r4, pc}
 800ed2e:	bf00      	nop
 800ed30:	080100f5 	.word	0x080100f5
 800ed34:	08010117 	.word	0x08010117
 800ed38:	0801014f 	.word	0x0801014f
 800ed3c:	08010173 	.word	0x08010173

0800ed40 <_cleanup_r>:
 800ed40:	4901      	ldr	r1, [pc, #4]	; (800ed48 <_cleanup_r+0x8>)
 800ed42:	f000 b8cc 	b.w	800eede <_fwalk_reent>
 800ed46:	bf00      	nop
 800ed48:	0800ec5d 	.word	0x0800ec5d

0800ed4c <__sfmoreglue>:
 800ed4c:	b570      	push	{r4, r5, r6, lr}
 800ed4e:	1e4a      	subs	r2, r1, #1
 800ed50:	2568      	movs	r5, #104	; 0x68
 800ed52:	4355      	muls	r5, r2
 800ed54:	460e      	mov	r6, r1
 800ed56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ed5a:	f7ff fc2d 	bl	800e5b8 <_malloc_r>
 800ed5e:	4604      	mov	r4, r0
 800ed60:	b140      	cbz	r0, 800ed74 <__sfmoreglue+0x28>
 800ed62:	2100      	movs	r1, #0
 800ed64:	e9c0 1600 	strd	r1, r6, [r0]
 800ed68:	300c      	adds	r0, #12
 800ed6a:	60a0      	str	r0, [r4, #8]
 800ed6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ed70:	f7ff fbca 	bl	800e508 <memset>
 800ed74:	4620      	mov	r0, r4
 800ed76:	bd70      	pop	{r4, r5, r6, pc}

0800ed78 <__sfp_lock_acquire>:
 800ed78:	4801      	ldr	r0, [pc, #4]	; (800ed80 <__sfp_lock_acquire+0x8>)
 800ed7a:	f000 b8d0 	b.w	800ef1e <__retarget_lock_acquire_recursive>
 800ed7e:	bf00      	nop
 800ed80:	2000473c 	.word	0x2000473c

0800ed84 <__sfp_lock_release>:
 800ed84:	4801      	ldr	r0, [pc, #4]	; (800ed8c <__sfp_lock_release+0x8>)
 800ed86:	f000 b8cb 	b.w	800ef20 <__retarget_lock_release_recursive>
 800ed8a:	bf00      	nop
 800ed8c:	2000473c 	.word	0x2000473c

0800ed90 <__sinit_lock_acquire>:
 800ed90:	4801      	ldr	r0, [pc, #4]	; (800ed98 <__sinit_lock_acquire+0x8>)
 800ed92:	f000 b8c4 	b.w	800ef1e <__retarget_lock_acquire_recursive>
 800ed96:	bf00      	nop
 800ed98:	20004737 	.word	0x20004737

0800ed9c <__sinit_lock_release>:
 800ed9c:	4801      	ldr	r0, [pc, #4]	; (800eda4 <__sinit_lock_release+0x8>)
 800ed9e:	f000 b8bf 	b.w	800ef20 <__retarget_lock_release_recursive>
 800eda2:	bf00      	nop
 800eda4:	20004737 	.word	0x20004737

0800eda8 <__sinit>:
 800eda8:	b510      	push	{r4, lr}
 800edaa:	4604      	mov	r4, r0
 800edac:	f7ff fff0 	bl	800ed90 <__sinit_lock_acquire>
 800edb0:	69a3      	ldr	r3, [r4, #24]
 800edb2:	b11b      	cbz	r3, 800edbc <__sinit+0x14>
 800edb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800edb8:	f7ff bff0 	b.w	800ed9c <__sinit_lock_release>
 800edbc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800edc0:	6523      	str	r3, [r4, #80]	; 0x50
 800edc2:	4b13      	ldr	r3, [pc, #76]	; (800ee10 <__sinit+0x68>)
 800edc4:	4a13      	ldr	r2, [pc, #76]	; (800ee14 <__sinit+0x6c>)
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	62a2      	str	r2, [r4, #40]	; 0x28
 800edca:	42a3      	cmp	r3, r4
 800edcc:	bf04      	itt	eq
 800edce:	2301      	moveq	r3, #1
 800edd0:	61a3      	streq	r3, [r4, #24]
 800edd2:	4620      	mov	r0, r4
 800edd4:	f000 f820 	bl	800ee18 <__sfp>
 800edd8:	6060      	str	r0, [r4, #4]
 800edda:	4620      	mov	r0, r4
 800eddc:	f000 f81c 	bl	800ee18 <__sfp>
 800ede0:	60a0      	str	r0, [r4, #8]
 800ede2:	4620      	mov	r0, r4
 800ede4:	f000 f818 	bl	800ee18 <__sfp>
 800ede8:	2200      	movs	r2, #0
 800edea:	60e0      	str	r0, [r4, #12]
 800edec:	2104      	movs	r1, #4
 800edee:	6860      	ldr	r0, [r4, #4]
 800edf0:	f7ff ff82 	bl	800ecf8 <std>
 800edf4:	68a0      	ldr	r0, [r4, #8]
 800edf6:	2201      	movs	r2, #1
 800edf8:	2109      	movs	r1, #9
 800edfa:	f7ff ff7d 	bl	800ecf8 <std>
 800edfe:	68e0      	ldr	r0, [r4, #12]
 800ee00:	2202      	movs	r2, #2
 800ee02:	2112      	movs	r1, #18
 800ee04:	f7ff ff78 	bl	800ecf8 <std>
 800ee08:	2301      	movs	r3, #1
 800ee0a:	61a3      	str	r3, [r4, #24]
 800ee0c:	e7d2      	b.n	800edb4 <__sinit+0xc>
 800ee0e:	bf00      	nop
 800ee10:	080110a0 	.word	0x080110a0
 800ee14:	0800ed41 	.word	0x0800ed41

0800ee18 <__sfp>:
 800ee18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee1a:	4607      	mov	r7, r0
 800ee1c:	f7ff ffac 	bl	800ed78 <__sfp_lock_acquire>
 800ee20:	4b1e      	ldr	r3, [pc, #120]	; (800ee9c <__sfp+0x84>)
 800ee22:	681e      	ldr	r6, [r3, #0]
 800ee24:	69b3      	ldr	r3, [r6, #24]
 800ee26:	b913      	cbnz	r3, 800ee2e <__sfp+0x16>
 800ee28:	4630      	mov	r0, r6
 800ee2a:	f7ff ffbd 	bl	800eda8 <__sinit>
 800ee2e:	3648      	adds	r6, #72	; 0x48
 800ee30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ee34:	3b01      	subs	r3, #1
 800ee36:	d503      	bpl.n	800ee40 <__sfp+0x28>
 800ee38:	6833      	ldr	r3, [r6, #0]
 800ee3a:	b30b      	cbz	r3, 800ee80 <__sfp+0x68>
 800ee3c:	6836      	ldr	r6, [r6, #0]
 800ee3e:	e7f7      	b.n	800ee30 <__sfp+0x18>
 800ee40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ee44:	b9d5      	cbnz	r5, 800ee7c <__sfp+0x64>
 800ee46:	4b16      	ldr	r3, [pc, #88]	; (800eea0 <__sfp+0x88>)
 800ee48:	60e3      	str	r3, [r4, #12]
 800ee4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ee4e:	6665      	str	r5, [r4, #100]	; 0x64
 800ee50:	f000 f864 	bl	800ef1c <__retarget_lock_init_recursive>
 800ee54:	f7ff ff96 	bl	800ed84 <__sfp_lock_release>
 800ee58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ee5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ee60:	6025      	str	r5, [r4, #0]
 800ee62:	61a5      	str	r5, [r4, #24]
 800ee64:	2208      	movs	r2, #8
 800ee66:	4629      	mov	r1, r5
 800ee68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ee6c:	f7ff fb4c 	bl	800e508 <memset>
 800ee70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ee74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ee78:	4620      	mov	r0, r4
 800ee7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee7c:	3468      	adds	r4, #104	; 0x68
 800ee7e:	e7d9      	b.n	800ee34 <__sfp+0x1c>
 800ee80:	2104      	movs	r1, #4
 800ee82:	4638      	mov	r0, r7
 800ee84:	f7ff ff62 	bl	800ed4c <__sfmoreglue>
 800ee88:	4604      	mov	r4, r0
 800ee8a:	6030      	str	r0, [r6, #0]
 800ee8c:	2800      	cmp	r0, #0
 800ee8e:	d1d5      	bne.n	800ee3c <__sfp+0x24>
 800ee90:	f7ff ff78 	bl	800ed84 <__sfp_lock_release>
 800ee94:	230c      	movs	r3, #12
 800ee96:	603b      	str	r3, [r7, #0]
 800ee98:	e7ee      	b.n	800ee78 <__sfp+0x60>
 800ee9a:	bf00      	nop
 800ee9c:	080110a0 	.word	0x080110a0
 800eea0:	ffff0001 	.word	0xffff0001

0800eea4 <_fwalk>:
 800eea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eea8:	460f      	mov	r7, r1
 800eeaa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800eeae:	2600      	movs	r6, #0
 800eeb0:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 800eeb4:	f1b8 0801 	subs.w	r8, r8, #1
 800eeb8:	d505      	bpl.n	800eec6 <_fwalk+0x22>
 800eeba:	6824      	ldr	r4, [r4, #0]
 800eebc:	2c00      	cmp	r4, #0
 800eebe:	d1f7      	bne.n	800eeb0 <_fwalk+0xc>
 800eec0:	4630      	mov	r0, r6
 800eec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eec6:	89ab      	ldrh	r3, [r5, #12]
 800eec8:	2b01      	cmp	r3, #1
 800eeca:	d906      	bls.n	800eeda <_fwalk+0x36>
 800eecc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eed0:	3301      	adds	r3, #1
 800eed2:	d002      	beq.n	800eeda <_fwalk+0x36>
 800eed4:	4628      	mov	r0, r5
 800eed6:	47b8      	blx	r7
 800eed8:	4306      	orrs	r6, r0
 800eeda:	3568      	adds	r5, #104	; 0x68
 800eedc:	e7ea      	b.n	800eeb4 <_fwalk+0x10>

0800eede <_fwalk_reent>:
 800eede:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eee2:	4606      	mov	r6, r0
 800eee4:	4688      	mov	r8, r1
 800eee6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800eeea:	2700      	movs	r7, #0
 800eeec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eef0:	f1b9 0901 	subs.w	r9, r9, #1
 800eef4:	d505      	bpl.n	800ef02 <_fwalk_reent+0x24>
 800eef6:	6824      	ldr	r4, [r4, #0]
 800eef8:	2c00      	cmp	r4, #0
 800eefa:	d1f7      	bne.n	800eeec <_fwalk_reent+0xe>
 800eefc:	4638      	mov	r0, r7
 800eefe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef02:	89ab      	ldrh	r3, [r5, #12]
 800ef04:	2b01      	cmp	r3, #1
 800ef06:	d907      	bls.n	800ef18 <_fwalk_reent+0x3a>
 800ef08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ef0c:	3301      	adds	r3, #1
 800ef0e:	d003      	beq.n	800ef18 <_fwalk_reent+0x3a>
 800ef10:	4629      	mov	r1, r5
 800ef12:	4630      	mov	r0, r6
 800ef14:	47c0      	blx	r8
 800ef16:	4307      	orrs	r7, r0
 800ef18:	3568      	adds	r5, #104	; 0x68
 800ef1a:	e7e9      	b.n	800eef0 <_fwalk_reent+0x12>

0800ef1c <__retarget_lock_init_recursive>:
 800ef1c:	4770      	bx	lr

0800ef1e <__retarget_lock_acquire_recursive>:
 800ef1e:	4770      	bx	lr

0800ef20 <__retarget_lock_release_recursive>:
 800ef20:	4770      	bx	lr

0800ef22 <__swhatbuf_r>:
 800ef22:	b570      	push	{r4, r5, r6, lr}
 800ef24:	460e      	mov	r6, r1
 800ef26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef2a:	2900      	cmp	r1, #0
 800ef2c:	b096      	sub	sp, #88	; 0x58
 800ef2e:	4614      	mov	r4, r2
 800ef30:	461d      	mov	r5, r3
 800ef32:	da07      	bge.n	800ef44 <__swhatbuf_r+0x22>
 800ef34:	2300      	movs	r3, #0
 800ef36:	602b      	str	r3, [r5, #0]
 800ef38:	89b3      	ldrh	r3, [r6, #12]
 800ef3a:	061a      	lsls	r2, r3, #24
 800ef3c:	d410      	bmi.n	800ef60 <__swhatbuf_r+0x3e>
 800ef3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ef42:	e00e      	b.n	800ef62 <__swhatbuf_r+0x40>
 800ef44:	466a      	mov	r2, sp
 800ef46:	f001 fb11 	bl	801056c <_fstat_r>
 800ef4a:	2800      	cmp	r0, #0
 800ef4c:	dbf2      	blt.n	800ef34 <__swhatbuf_r+0x12>
 800ef4e:	9a01      	ldr	r2, [sp, #4]
 800ef50:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ef54:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ef58:	425a      	negs	r2, r3
 800ef5a:	415a      	adcs	r2, r3
 800ef5c:	602a      	str	r2, [r5, #0]
 800ef5e:	e7ee      	b.n	800ef3e <__swhatbuf_r+0x1c>
 800ef60:	2340      	movs	r3, #64	; 0x40
 800ef62:	2000      	movs	r0, #0
 800ef64:	6023      	str	r3, [r4, #0]
 800ef66:	b016      	add	sp, #88	; 0x58
 800ef68:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ef6c <__smakebuf_r>:
 800ef6c:	898b      	ldrh	r3, [r1, #12]
 800ef6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ef70:	079d      	lsls	r5, r3, #30
 800ef72:	4606      	mov	r6, r0
 800ef74:	460c      	mov	r4, r1
 800ef76:	d507      	bpl.n	800ef88 <__smakebuf_r+0x1c>
 800ef78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ef7c:	6023      	str	r3, [r4, #0]
 800ef7e:	6123      	str	r3, [r4, #16]
 800ef80:	2301      	movs	r3, #1
 800ef82:	6163      	str	r3, [r4, #20]
 800ef84:	b002      	add	sp, #8
 800ef86:	bd70      	pop	{r4, r5, r6, pc}
 800ef88:	ab01      	add	r3, sp, #4
 800ef8a:	466a      	mov	r2, sp
 800ef8c:	f7ff ffc9 	bl	800ef22 <__swhatbuf_r>
 800ef90:	9900      	ldr	r1, [sp, #0]
 800ef92:	4605      	mov	r5, r0
 800ef94:	4630      	mov	r0, r6
 800ef96:	f7ff fb0f 	bl	800e5b8 <_malloc_r>
 800ef9a:	b948      	cbnz	r0, 800efb0 <__smakebuf_r+0x44>
 800ef9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efa0:	059a      	lsls	r2, r3, #22
 800efa2:	d4ef      	bmi.n	800ef84 <__smakebuf_r+0x18>
 800efa4:	f023 0303 	bic.w	r3, r3, #3
 800efa8:	f043 0302 	orr.w	r3, r3, #2
 800efac:	81a3      	strh	r3, [r4, #12]
 800efae:	e7e3      	b.n	800ef78 <__smakebuf_r+0xc>
 800efb0:	4b0d      	ldr	r3, [pc, #52]	; (800efe8 <__smakebuf_r+0x7c>)
 800efb2:	62b3      	str	r3, [r6, #40]	; 0x28
 800efb4:	89a3      	ldrh	r3, [r4, #12]
 800efb6:	6020      	str	r0, [r4, #0]
 800efb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800efbc:	81a3      	strh	r3, [r4, #12]
 800efbe:	9b00      	ldr	r3, [sp, #0]
 800efc0:	6163      	str	r3, [r4, #20]
 800efc2:	9b01      	ldr	r3, [sp, #4]
 800efc4:	6120      	str	r0, [r4, #16]
 800efc6:	b15b      	cbz	r3, 800efe0 <__smakebuf_r+0x74>
 800efc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800efcc:	4630      	mov	r0, r6
 800efce:	f001 fadf 	bl	8010590 <_isatty_r>
 800efd2:	b128      	cbz	r0, 800efe0 <__smakebuf_r+0x74>
 800efd4:	89a3      	ldrh	r3, [r4, #12]
 800efd6:	f023 0303 	bic.w	r3, r3, #3
 800efda:	f043 0301 	orr.w	r3, r3, #1
 800efde:	81a3      	strh	r3, [r4, #12]
 800efe0:	89a0      	ldrh	r0, [r4, #12]
 800efe2:	4305      	orrs	r5, r0
 800efe4:	81a5      	strh	r5, [r4, #12]
 800efe6:	e7cd      	b.n	800ef84 <__smakebuf_r+0x18>
 800efe8:	0800ed41 	.word	0x0800ed41

0800efec <__malloc_lock>:
 800efec:	4801      	ldr	r0, [pc, #4]	; (800eff4 <__malloc_lock+0x8>)
 800efee:	f7ff bf96 	b.w	800ef1e <__retarget_lock_acquire_recursive>
 800eff2:	bf00      	nop
 800eff4:	20004738 	.word	0x20004738

0800eff8 <__malloc_unlock>:
 800eff8:	4801      	ldr	r0, [pc, #4]	; (800f000 <__malloc_unlock+0x8>)
 800effa:	f7ff bf91 	b.w	800ef20 <__retarget_lock_release_recursive>
 800effe:	bf00      	nop
 800f000:	20004738 	.word	0x20004738

0800f004 <__ssputs_r>:
 800f004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f008:	688e      	ldr	r6, [r1, #8]
 800f00a:	429e      	cmp	r6, r3
 800f00c:	4682      	mov	sl, r0
 800f00e:	460c      	mov	r4, r1
 800f010:	4690      	mov	r8, r2
 800f012:	461f      	mov	r7, r3
 800f014:	d838      	bhi.n	800f088 <__ssputs_r+0x84>
 800f016:	898a      	ldrh	r2, [r1, #12]
 800f018:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f01c:	d032      	beq.n	800f084 <__ssputs_r+0x80>
 800f01e:	6825      	ldr	r5, [r4, #0]
 800f020:	6909      	ldr	r1, [r1, #16]
 800f022:	eba5 0901 	sub.w	r9, r5, r1
 800f026:	6965      	ldr	r5, [r4, #20]
 800f028:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f02c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f030:	3301      	adds	r3, #1
 800f032:	444b      	add	r3, r9
 800f034:	106d      	asrs	r5, r5, #1
 800f036:	429d      	cmp	r5, r3
 800f038:	bf38      	it	cc
 800f03a:	461d      	movcc	r5, r3
 800f03c:	0553      	lsls	r3, r2, #21
 800f03e:	d531      	bpl.n	800f0a4 <__ssputs_r+0xa0>
 800f040:	4629      	mov	r1, r5
 800f042:	f7ff fab9 	bl	800e5b8 <_malloc_r>
 800f046:	4606      	mov	r6, r0
 800f048:	b950      	cbnz	r0, 800f060 <__ssputs_r+0x5c>
 800f04a:	230c      	movs	r3, #12
 800f04c:	f8ca 3000 	str.w	r3, [sl]
 800f050:	89a3      	ldrh	r3, [r4, #12]
 800f052:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f056:	81a3      	strh	r3, [r4, #12]
 800f058:	f04f 30ff 	mov.w	r0, #4294967295
 800f05c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f060:	6921      	ldr	r1, [r4, #16]
 800f062:	464a      	mov	r2, r9
 800f064:	f7ff fa42 	bl	800e4ec <memcpy>
 800f068:	89a3      	ldrh	r3, [r4, #12]
 800f06a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f06e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f072:	81a3      	strh	r3, [r4, #12]
 800f074:	6126      	str	r6, [r4, #16]
 800f076:	6165      	str	r5, [r4, #20]
 800f078:	444e      	add	r6, r9
 800f07a:	eba5 0509 	sub.w	r5, r5, r9
 800f07e:	6026      	str	r6, [r4, #0]
 800f080:	60a5      	str	r5, [r4, #8]
 800f082:	463e      	mov	r6, r7
 800f084:	42be      	cmp	r6, r7
 800f086:	d900      	bls.n	800f08a <__ssputs_r+0x86>
 800f088:	463e      	mov	r6, r7
 800f08a:	4632      	mov	r2, r6
 800f08c:	6820      	ldr	r0, [r4, #0]
 800f08e:	4641      	mov	r1, r8
 800f090:	f001 faa0 	bl	80105d4 <memmove>
 800f094:	68a3      	ldr	r3, [r4, #8]
 800f096:	6822      	ldr	r2, [r4, #0]
 800f098:	1b9b      	subs	r3, r3, r6
 800f09a:	4432      	add	r2, r6
 800f09c:	60a3      	str	r3, [r4, #8]
 800f09e:	6022      	str	r2, [r4, #0]
 800f0a0:	2000      	movs	r0, #0
 800f0a2:	e7db      	b.n	800f05c <__ssputs_r+0x58>
 800f0a4:	462a      	mov	r2, r5
 800f0a6:	f001 faaf 	bl	8010608 <_realloc_r>
 800f0aa:	4606      	mov	r6, r0
 800f0ac:	2800      	cmp	r0, #0
 800f0ae:	d1e1      	bne.n	800f074 <__ssputs_r+0x70>
 800f0b0:	6921      	ldr	r1, [r4, #16]
 800f0b2:	4650      	mov	r0, sl
 800f0b4:	f7ff fa30 	bl	800e518 <_free_r>
 800f0b8:	e7c7      	b.n	800f04a <__ssputs_r+0x46>
	...

0800f0bc <_svfiprintf_r>:
 800f0bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0c0:	4698      	mov	r8, r3
 800f0c2:	898b      	ldrh	r3, [r1, #12]
 800f0c4:	061b      	lsls	r3, r3, #24
 800f0c6:	b09d      	sub	sp, #116	; 0x74
 800f0c8:	4607      	mov	r7, r0
 800f0ca:	460d      	mov	r5, r1
 800f0cc:	4614      	mov	r4, r2
 800f0ce:	d50e      	bpl.n	800f0ee <_svfiprintf_r+0x32>
 800f0d0:	690b      	ldr	r3, [r1, #16]
 800f0d2:	b963      	cbnz	r3, 800f0ee <_svfiprintf_r+0x32>
 800f0d4:	2140      	movs	r1, #64	; 0x40
 800f0d6:	f7ff fa6f 	bl	800e5b8 <_malloc_r>
 800f0da:	6028      	str	r0, [r5, #0]
 800f0dc:	6128      	str	r0, [r5, #16]
 800f0de:	b920      	cbnz	r0, 800f0ea <_svfiprintf_r+0x2e>
 800f0e0:	230c      	movs	r3, #12
 800f0e2:	603b      	str	r3, [r7, #0]
 800f0e4:	f04f 30ff 	mov.w	r0, #4294967295
 800f0e8:	e0d1      	b.n	800f28e <_svfiprintf_r+0x1d2>
 800f0ea:	2340      	movs	r3, #64	; 0x40
 800f0ec:	616b      	str	r3, [r5, #20]
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	9309      	str	r3, [sp, #36]	; 0x24
 800f0f2:	2320      	movs	r3, #32
 800f0f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f0f8:	f8cd 800c 	str.w	r8, [sp, #12]
 800f0fc:	2330      	movs	r3, #48	; 0x30
 800f0fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f2a8 <_svfiprintf_r+0x1ec>
 800f102:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f106:	f04f 0901 	mov.w	r9, #1
 800f10a:	4623      	mov	r3, r4
 800f10c:	469a      	mov	sl, r3
 800f10e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f112:	b10a      	cbz	r2, 800f118 <_svfiprintf_r+0x5c>
 800f114:	2a25      	cmp	r2, #37	; 0x25
 800f116:	d1f9      	bne.n	800f10c <_svfiprintf_r+0x50>
 800f118:	ebba 0b04 	subs.w	fp, sl, r4
 800f11c:	d00b      	beq.n	800f136 <_svfiprintf_r+0x7a>
 800f11e:	465b      	mov	r3, fp
 800f120:	4622      	mov	r2, r4
 800f122:	4629      	mov	r1, r5
 800f124:	4638      	mov	r0, r7
 800f126:	f7ff ff6d 	bl	800f004 <__ssputs_r>
 800f12a:	3001      	adds	r0, #1
 800f12c:	f000 80aa 	beq.w	800f284 <_svfiprintf_r+0x1c8>
 800f130:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f132:	445a      	add	r2, fp
 800f134:	9209      	str	r2, [sp, #36]	; 0x24
 800f136:	f89a 3000 	ldrb.w	r3, [sl]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	f000 80a2 	beq.w	800f284 <_svfiprintf_r+0x1c8>
 800f140:	2300      	movs	r3, #0
 800f142:	f04f 32ff 	mov.w	r2, #4294967295
 800f146:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f14a:	f10a 0a01 	add.w	sl, sl, #1
 800f14e:	9304      	str	r3, [sp, #16]
 800f150:	9307      	str	r3, [sp, #28]
 800f152:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f156:	931a      	str	r3, [sp, #104]	; 0x68
 800f158:	4654      	mov	r4, sl
 800f15a:	2205      	movs	r2, #5
 800f15c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f160:	4851      	ldr	r0, [pc, #324]	; (800f2a8 <_svfiprintf_r+0x1ec>)
 800f162:	f7f1 f84d 	bl	8000200 <memchr>
 800f166:	9a04      	ldr	r2, [sp, #16]
 800f168:	b9d8      	cbnz	r0, 800f1a2 <_svfiprintf_r+0xe6>
 800f16a:	06d0      	lsls	r0, r2, #27
 800f16c:	bf44      	itt	mi
 800f16e:	2320      	movmi	r3, #32
 800f170:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f174:	0711      	lsls	r1, r2, #28
 800f176:	bf44      	itt	mi
 800f178:	232b      	movmi	r3, #43	; 0x2b
 800f17a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f17e:	f89a 3000 	ldrb.w	r3, [sl]
 800f182:	2b2a      	cmp	r3, #42	; 0x2a
 800f184:	d015      	beq.n	800f1b2 <_svfiprintf_r+0xf6>
 800f186:	9a07      	ldr	r2, [sp, #28]
 800f188:	4654      	mov	r4, sl
 800f18a:	2000      	movs	r0, #0
 800f18c:	f04f 0c0a 	mov.w	ip, #10
 800f190:	4621      	mov	r1, r4
 800f192:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f196:	3b30      	subs	r3, #48	; 0x30
 800f198:	2b09      	cmp	r3, #9
 800f19a:	d94e      	bls.n	800f23a <_svfiprintf_r+0x17e>
 800f19c:	b1b0      	cbz	r0, 800f1cc <_svfiprintf_r+0x110>
 800f19e:	9207      	str	r2, [sp, #28]
 800f1a0:	e014      	b.n	800f1cc <_svfiprintf_r+0x110>
 800f1a2:	eba0 0308 	sub.w	r3, r0, r8
 800f1a6:	fa09 f303 	lsl.w	r3, r9, r3
 800f1aa:	4313      	orrs	r3, r2
 800f1ac:	9304      	str	r3, [sp, #16]
 800f1ae:	46a2      	mov	sl, r4
 800f1b0:	e7d2      	b.n	800f158 <_svfiprintf_r+0x9c>
 800f1b2:	9b03      	ldr	r3, [sp, #12]
 800f1b4:	1d19      	adds	r1, r3, #4
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	9103      	str	r1, [sp, #12]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	bfbb      	ittet	lt
 800f1be:	425b      	neglt	r3, r3
 800f1c0:	f042 0202 	orrlt.w	r2, r2, #2
 800f1c4:	9307      	strge	r3, [sp, #28]
 800f1c6:	9307      	strlt	r3, [sp, #28]
 800f1c8:	bfb8      	it	lt
 800f1ca:	9204      	strlt	r2, [sp, #16]
 800f1cc:	7823      	ldrb	r3, [r4, #0]
 800f1ce:	2b2e      	cmp	r3, #46	; 0x2e
 800f1d0:	d10c      	bne.n	800f1ec <_svfiprintf_r+0x130>
 800f1d2:	7863      	ldrb	r3, [r4, #1]
 800f1d4:	2b2a      	cmp	r3, #42	; 0x2a
 800f1d6:	d135      	bne.n	800f244 <_svfiprintf_r+0x188>
 800f1d8:	9b03      	ldr	r3, [sp, #12]
 800f1da:	1d1a      	adds	r2, r3, #4
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	9203      	str	r2, [sp, #12]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	bfb8      	it	lt
 800f1e4:	f04f 33ff 	movlt.w	r3, #4294967295
 800f1e8:	3402      	adds	r4, #2
 800f1ea:	9305      	str	r3, [sp, #20]
 800f1ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f2b8 <_svfiprintf_r+0x1fc>
 800f1f0:	7821      	ldrb	r1, [r4, #0]
 800f1f2:	2203      	movs	r2, #3
 800f1f4:	4650      	mov	r0, sl
 800f1f6:	f7f1 f803 	bl	8000200 <memchr>
 800f1fa:	b140      	cbz	r0, 800f20e <_svfiprintf_r+0x152>
 800f1fc:	2340      	movs	r3, #64	; 0x40
 800f1fe:	eba0 000a 	sub.w	r0, r0, sl
 800f202:	fa03 f000 	lsl.w	r0, r3, r0
 800f206:	9b04      	ldr	r3, [sp, #16]
 800f208:	4303      	orrs	r3, r0
 800f20a:	3401      	adds	r4, #1
 800f20c:	9304      	str	r3, [sp, #16]
 800f20e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f212:	4826      	ldr	r0, [pc, #152]	; (800f2ac <_svfiprintf_r+0x1f0>)
 800f214:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f218:	2206      	movs	r2, #6
 800f21a:	f7f0 fff1 	bl	8000200 <memchr>
 800f21e:	2800      	cmp	r0, #0
 800f220:	d038      	beq.n	800f294 <_svfiprintf_r+0x1d8>
 800f222:	4b23      	ldr	r3, [pc, #140]	; (800f2b0 <_svfiprintf_r+0x1f4>)
 800f224:	bb1b      	cbnz	r3, 800f26e <_svfiprintf_r+0x1b2>
 800f226:	9b03      	ldr	r3, [sp, #12]
 800f228:	3307      	adds	r3, #7
 800f22a:	f023 0307 	bic.w	r3, r3, #7
 800f22e:	3308      	adds	r3, #8
 800f230:	9303      	str	r3, [sp, #12]
 800f232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f234:	4433      	add	r3, r6
 800f236:	9309      	str	r3, [sp, #36]	; 0x24
 800f238:	e767      	b.n	800f10a <_svfiprintf_r+0x4e>
 800f23a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f23e:	460c      	mov	r4, r1
 800f240:	2001      	movs	r0, #1
 800f242:	e7a5      	b.n	800f190 <_svfiprintf_r+0xd4>
 800f244:	2300      	movs	r3, #0
 800f246:	3401      	adds	r4, #1
 800f248:	9305      	str	r3, [sp, #20]
 800f24a:	4619      	mov	r1, r3
 800f24c:	f04f 0c0a 	mov.w	ip, #10
 800f250:	4620      	mov	r0, r4
 800f252:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f256:	3a30      	subs	r2, #48	; 0x30
 800f258:	2a09      	cmp	r2, #9
 800f25a:	d903      	bls.n	800f264 <_svfiprintf_r+0x1a8>
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d0c5      	beq.n	800f1ec <_svfiprintf_r+0x130>
 800f260:	9105      	str	r1, [sp, #20]
 800f262:	e7c3      	b.n	800f1ec <_svfiprintf_r+0x130>
 800f264:	fb0c 2101 	mla	r1, ip, r1, r2
 800f268:	4604      	mov	r4, r0
 800f26a:	2301      	movs	r3, #1
 800f26c:	e7f0      	b.n	800f250 <_svfiprintf_r+0x194>
 800f26e:	ab03      	add	r3, sp, #12
 800f270:	9300      	str	r3, [sp, #0]
 800f272:	462a      	mov	r2, r5
 800f274:	4b0f      	ldr	r3, [pc, #60]	; (800f2b4 <_svfiprintf_r+0x1f8>)
 800f276:	a904      	add	r1, sp, #16
 800f278:	4638      	mov	r0, r7
 800f27a:	f3af 8000 	nop.w
 800f27e:	1c42      	adds	r2, r0, #1
 800f280:	4606      	mov	r6, r0
 800f282:	d1d6      	bne.n	800f232 <_svfiprintf_r+0x176>
 800f284:	89ab      	ldrh	r3, [r5, #12]
 800f286:	065b      	lsls	r3, r3, #25
 800f288:	f53f af2c 	bmi.w	800f0e4 <_svfiprintf_r+0x28>
 800f28c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f28e:	b01d      	add	sp, #116	; 0x74
 800f290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f294:	ab03      	add	r3, sp, #12
 800f296:	9300      	str	r3, [sp, #0]
 800f298:	462a      	mov	r2, r5
 800f29a:	4b06      	ldr	r3, [pc, #24]	; (800f2b4 <_svfiprintf_r+0x1f8>)
 800f29c:	a904      	add	r1, sp, #16
 800f29e:	4638      	mov	r0, r7
 800f2a0:	f000 f9d4 	bl	800f64c <_printf_i>
 800f2a4:	e7eb      	b.n	800f27e <_svfiprintf_r+0x1c2>
 800f2a6:	bf00      	nop
 800f2a8:	08011104 	.word	0x08011104
 800f2ac:	0801110e 	.word	0x0801110e
 800f2b0:	00000000 	.word	0x00000000
 800f2b4:	0800f005 	.word	0x0800f005
 800f2b8:	0801110a 	.word	0x0801110a

0800f2bc <__sfputc_r>:
 800f2bc:	6893      	ldr	r3, [r2, #8]
 800f2be:	3b01      	subs	r3, #1
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	b410      	push	{r4}
 800f2c4:	6093      	str	r3, [r2, #8]
 800f2c6:	da08      	bge.n	800f2da <__sfputc_r+0x1e>
 800f2c8:	6994      	ldr	r4, [r2, #24]
 800f2ca:	42a3      	cmp	r3, r4
 800f2cc:	db01      	blt.n	800f2d2 <__sfputc_r+0x16>
 800f2ce:	290a      	cmp	r1, #10
 800f2d0:	d103      	bne.n	800f2da <__sfputc_r+0x1e>
 800f2d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f2d6:	f7ff bb7b 	b.w	800e9d0 <__swbuf_r>
 800f2da:	6813      	ldr	r3, [r2, #0]
 800f2dc:	1c58      	adds	r0, r3, #1
 800f2de:	6010      	str	r0, [r2, #0]
 800f2e0:	7019      	strb	r1, [r3, #0]
 800f2e2:	4608      	mov	r0, r1
 800f2e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f2e8:	4770      	bx	lr

0800f2ea <__sfputs_r>:
 800f2ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2ec:	4606      	mov	r6, r0
 800f2ee:	460f      	mov	r7, r1
 800f2f0:	4614      	mov	r4, r2
 800f2f2:	18d5      	adds	r5, r2, r3
 800f2f4:	42ac      	cmp	r4, r5
 800f2f6:	d101      	bne.n	800f2fc <__sfputs_r+0x12>
 800f2f8:	2000      	movs	r0, #0
 800f2fa:	e007      	b.n	800f30c <__sfputs_r+0x22>
 800f2fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f300:	463a      	mov	r2, r7
 800f302:	4630      	mov	r0, r6
 800f304:	f7ff ffda 	bl	800f2bc <__sfputc_r>
 800f308:	1c43      	adds	r3, r0, #1
 800f30a:	d1f3      	bne.n	800f2f4 <__sfputs_r+0xa>
 800f30c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f310 <_vfiprintf_r>:
 800f310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f314:	460d      	mov	r5, r1
 800f316:	b09d      	sub	sp, #116	; 0x74
 800f318:	4614      	mov	r4, r2
 800f31a:	4698      	mov	r8, r3
 800f31c:	4606      	mov	r6, r0
 800f31e:	b118      	cbz	r0, 800f328 <_vfiprintf_r+0x18>
 800f320:	6983      	ldr	r3, [r0, #24]
 800f322:	b90b      	cbnz	r3, 800f328 <_vfiprintf_r+0x18>
 800f324:	f7ff fd40 	bl	800eda8 <__sinit>
 800f328:	4b89      	ldr	r3, [pc, #548]	; (800f550 <_vfiprintf_r+0x240>)
 800f32a:	429d      	cmp	r5, r3
 800f32c:	d11b      	bne.n	800f366 <_vfiprintf_r+0x56>
 800f32e:	6875      	ldr	r5, [r6, #4]
 800f330:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f332:	07d9      	lsls	r1, r3, #31
 800f334:	d405      	bmi.n	800f342 <_vfiprintf_r+0x32>
 800f336:	89ab      	ldrh	r3, [r5, #12]
 800f338:	059a      	lsls	r2, r3, #22
 800f33a:	d402      	bmi.n	800f342 <_vfiprintf_r+0x32>
 800f33c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f33e:	f7ff fdee 	bl	800ef1e <__retarget_lock_acquire_recursive>
 800f342:	89ab      	ldrh	r3, [r5, #12]
 800f344:	071b      	lsls	r3, r3, #28
 800f346:	d501      	bpl.n	800f34c <_vfiprintf_r+0x3c>
 800f348:	692b      	ldr	r3, [r5, #16]
 800f34a:	b9eb      	cbnz	r3, 800f388 <_vfiprintf_r+0x78>
 800f34c:	4629      	mov	r1, r5
 800f34e:	4630      	mov	r0, r6
 800f350:	f7ff fb90 	bl	800ea74 <__swsetup_r>
 800f354:	b1c0      	cbz	r0, 800f388 <_vfiprintf_r+0x78>
 800f356:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f358:	07dc      	lsls	r4, r3, #31
 800f35a:	d50e      	bpl.n	800f37a <_vfiprintf_r+0x6a>
 800f35c:	f04f 30ff 	mov.w	r0, #4294967295
 800f360:	b01d      	add	sp, #116	; 0x74
 800f362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f366:	4b7b      	ldr	r3, [pc, #492]	; (800f554 <_vfiprintf_r+0x244>)
 800f368:	429d      	cmp	r5, r3
 800f36a:	d101      	bne.n	800f370 <_vfiprintf_r+0x60>
 800f36c:	68b5      	ldr	r5, [r6, #8]
 800f36e:	e7df      	b.n	800f330 <_vfiprintf_r+0x20>
 800f370:	4b79      	ldr	r3, [pc, #484]	; (800f558 <_vfiprintf_r+0x248>)
 800f372:	429d      	cmp	r5, r3
 800f374:	bf08      	it	eq
 800f376:	68f5      	ldreq	r5, [r6, #12]
 800f378:	e7da      	b.n	800f330 <_vfiprintf_r+0x20>
 800f37a:	89ab      	ldrh	r3, [r5, #12]
 800f37c:	0598      	lsls	r0, r3, #22
 800f37e:	d4ed      	bmi.n	800f35c <_vfiprintf_r+0x4c>
 800f380:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f382:	f7ff fdcd 	bl	800ef20 <__retarget_lock_release_recursive>
 800f386:	e7e9      	b.n	800f35c <_vfiprintf_r+0x4c>
 800f388:	2300      	movs	r3, #0
 800f38a:	9309      	str	r3, [sp, #36]	; 0x24
 800f38c:	2320      	movs	r3, #32
 800f38e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f392:	f8cd 800c 	str.w	r8, [sp, #12]
 800f396:	2330      	movs	r3, #48	; 0x30
 800f398:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f55c <_vfiprintf_r+0x24c>
 800f39c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f3a0:	f04f 0901 	mov.w	r9, #1
 800f3a4:	4623      	mov	r3, r4
 800f3a6:	469a      	mov	sl, r3
 800f3a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f3ac:	b10a      	cbz	r2, 800f3b2 <_vfiprintf_r+0xa2>
 800f3ae:	2a25      	cmp	r2, #37	; 0x25
 800f3b0:	d1f9      	bne.n	800f3a6 <_vfiprintf_r+0x96>
 800f3b2:	ebba 0b04 	subs.w	fp, sl, r4
 800f3b6:	d00b      	beq.n	800f3d0 <_vfiprintf_r+0xc0>
 800f3b8:	465b      	mov	r3, fp
 800f3ba:	4622      	mov	r2, r4
 800f3bc:	4629      	mov	r1, r5
 800f3be:	4630      	mov	r0, r6
 800f3c0:	f7ff ff93 	bl	800f2ea <__sfputs_r>
 800f3c4:	3001      	adds	r0, #1
 800f3c6:	f000 80aa 	beq.w	800f51e <_vfiprintf_r+0x20e>
 800f3ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f3cc:	445a      	add	r2, fp
 800f3ce:	9209      	str	r2, [sp, #36]	; 0x24
 800f3d0:	f89a 3000 	ldrb.w	r3, [sl]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	f000 80a2 	beq.w	800f51e <_vfiprintf_r+0x20e>
 800f3da:	2300      	movs	r3, #0
 800f3dc:	f04f 32ff 	mov.w	r2, #4294967295
 800f3e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f3e4:	f10a 0a01 	add.w	sl, sl, #1
 800f3e8:	9304      	str	r3, [sp, #16]
 800f3ea:	9307      	str	r3, [sp, #28]
 800f3ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f3f0:	931a      	str	r3, [sp, #104]	; 0x68
 800f3f2:	4654      	mov	r4, sl
 800f3f4:	2205      	movs	r2, #5
 800f3f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3fa:	4858      	ldr	r0, [pc, #352]	; (800f55c <_vfiprintf_r+0x24c>)
 800f3fc:	f7f0 ff00 	bl	8000200 <memchr>
 800f400:	9a04      	ldr	r2, [sp, #16]
 800f402:	b9d8      	cbnz	r0, 800f43c <_vfiprintf_r+0x12c>
 800f404:	06d1      	lsls	r1, r2, #27
 800f406:	bf44      	itt	mi
 800f408:	2320      	movmi	r3, #32
 800f40a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f40e:	0713      	lsls	r3, r2, #28
 800f410:	bf44      	itt	mi
 800f412:	232b      	movmi	r3, #43	; 0x2b
 800f414:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f418:	f89a 3000 	ldrb.w	r3, [sl]
 800f41c:	2b2a      	cmp	r3, #42	; 0x2a
 800f41e:	d015      	beq.n	800f44c <_vfiprintf_r+0x13c>
 800f420:	9a07      	ldr	r2, [sp, #28]
 800f422:	4654      	mov	r4, sl
 800f424:	2000      	movs	r0, #0
 800f426:	f04f 0c0a 	mov.w	ip, #10
 800f42a:	4621      	mov	r1, r4
 800f42c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f430:	3b30      	subs	r3, #48	; 0x30
 800f432:	2b09      	cmp	r3, #9
 800f434:	d94e      	bls.n	800f4d4 <_vfiprintf_r+0x1c4>
 800f436:	b1b0      	cbz	r0, 800f466 <_vfiprintf_r+0x156>
 800f438:	9207      	str	r2, [sp, #28]
 800f43a:	e014      	b.n	800f466 <_vfiprintf_r+0x156>
 800f43c:	eba0 0308 	sub.w	r3, r0, r8
 800f440:	fa09 f303 	lsl.w	r3, r9, r3
 800f444:	4313      	orrs	r3, r2
 800f446:	9304      	str	r3, [sp, #16]
 800f448:	46a2      	mov	sl, r4
 800f44a:	e7d2      	b.n	800f3f2 <_vfiprintf_r+0xe2>
 800f44c:	9b03      	ldr	r3, [sp, #12]
 800f44e:	1d19      	adds	r1, r3, #4
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	9103      	str	r1, [sp, #12]
 800f454:	2b00      	cmp	r3, #0
 800f456:	bfbb      	ittet	lt
 800f458:	425b      	neglt	r3, r3
 800f45a:	f042 0202 	orrlt.w	r2, r2, #2
 800f45e:	9307      	strge	r3, [sp, #28]
 800f460:	9307      	strlt	r3, [sp, #28]
 800f462:	bfb8      	it	lt
 800f464:	9204      	strlt	r2, [sp, #16]
 800f466:	7823      	ldrb	r3, [r4, #0]
 800f468:	2b2e      	cmp	r3, #46	; 0x2e
 800f46a:	d10c      	bne.n	800f486 <_vfiprintf_r+0x176>
 800f46c:	7863      	ldrb	r3, [r4, #1]
 800f46e:	2b2a      	cmp	r3, #42	; 0x2a
 800f470:	d135      	bne.n	800f4de <_vfiprintf_r+0x1ce>
 800f472:	9b03      	ldr	r3, [sp, #12]
 800f474:	1d1a      	adds	r2, r3, #4
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	9203      	str	r2, [sp, #12]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	bfb8      	it	lt
 800f47e:	f04f 33ff 	movlt.w	r3, #4294967295
 800f482:	3402      	adds	r4, #2
 800f484:	9305      	str	r3, [sp, #20]
 800f486:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f56c <_vfiprintf_r+0x25c>
 800f48a:	7821      	ldrb	r1, [r4, #0]
 800f48c:	2203      	movs	r2, #3
 800f48e:	4650      	mov	r0, sl
 800f490:	f7f0 feb6 	bl	8000200 <memchr>
 800f494:	b140      	cbz	r0, 800f4a8 <_vfiprintf_r+0x198>
 800f496:	2340      	movs	r3, #64	; 0x40
 800f498:	eba0 000a 	sub.w	r0, r0, sl
 800f49c:	fa03 f000 	lsl.w	r0, r3, r0
 800f4a0:	9b04      	ldr	r3, [sp, #16]
 800f4a2:	4303      	orrs	r3, r0
 800f4a4:	3401      	adds	r4, #1
 800f4a6:	9304      	str	r3, [sp, #16]
 800f4a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4ac:	482c      	ldr	r0, [pc, #176]	; (800f560 <_vfiprintf_r+0x250>)
 800f4ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f4b2:	2206      	movs	r2, #6
 800f4b4:	f7f0 fea4 	bl	8000200 <memchr>
 800f4b8:	2800      	cmp	r0, #0
 800f4ba:	d03f      	beq.n	800f53c <_vfiprintf_r+0x22c>
 800f4bc:	4b29      	ldr	r3, [pc, #164]	; (800f564 <_vfiprintf_r+0x254>)
 800f4be:	bb1b      	cbnz	r3, 800f508 <_vfiprintf_r+0x1f8>
 800f4c0:	9b03      	ldr	r3, [sp, #12]
 800f4c2:	3307      	adds	r3, #7
 800f4c4:	f023 0307 	bic.w	r3, r3, #7
 800f4c8:	3308      	adds	r3, #8
 800f4ca:	9303      	str	r3, [sp, #12]
 800f4cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4ce:	443b      	add	r3, r7
 800f4d0:	9309      	str	r3, [sp, #36]	; 0x24
 800f4d2:	e767      	b.n	800f3a4 <_vfiprintf_r+0x94>
 800f4d4:	fb0c 3202 	mla	r2, ip, r2, r3
 800f4d8:	460c      	mov	r4, r1
 800f4da:	2001      	movs	r0, #1
 800f4dc:	e7a5      	b.n	800f42a <_vfiprintf_r+0x11a>
 800f4de:	2300      	movs	r3, #0
 800f4e0:	3401      	adds	r4, #1
 800f4e2:	9305      	str	r3, [sp, #20]
 800f4e4:	4619      	mov	r1, r3
 800f4e6:	f04f 0c0a 	mov.w	ip, #10
 800f4ea:	4620      	mov	r0, r4
 800f4ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f4f0:	3a30      	subs	r2, #48	; 0x30
 800f4f2:	2a09      	cmp	r2, #9
 800f4f4:	d903      	bls.n	800f4fe <_vfiprintf_r+0x1ee>
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d0c5      	beq.n	800f486 <_vfiprintf_r+0x176>
 800f4fa:	9105      	str	r1, [sp, #20]
 800f4fc:	e7c3      	b.n	800f486 <_vfiprintf_r+0x176>
 800f4fe:	fb0c 2101 	mla	r1, ip, r1, r2
 800f502:	4604      	mov	r4, r0
 800f504:	2301      	movs	r3, #1
 800f506:	e7f0      	b.n	800f4ea <_vfiprintf_r+0x1da>
 800f508:	ab03      	add	r3, sp, #12
 800f50a:	9300      	str	r3, [sp, #0]
 800f50c:	462a      	mov	r2, r5
 800f50e:	4b16      	ldr	r3, [pc, #88]	; (800f568 <_vfiprintf_r+0x258>)
 800f510:	a904      	add	r1, sp, #16
 800f512:	4630      	mov	r0, r6
 800f514:	f3af 8000 	nop.w
 800f518:	4607      	mov	r7, r0
 800f51a:	1c78      	adds	r0, r7, #1
 800f51c:	d1d6      	bne.n	800f4cc <_vfiprintf_r+0x1bc>
 800f51e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f520:	07d9      	lsls	r1, r3, #31
 800f522:	d405      	bmi.n	800f530 <_vfiprintf_r+0x220>
 800f524:	89ab      	ldrh	r3, [r5, #12]
 800f526:	059a      	lsls	r2, r3, #22
 800f528:	d402      	bmi.n	800f530 <_vfiprintf_r+0x220>
 800f52a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f52c:	f7ff fcf8 	bl	800ef20 <__retarget_lock_release_recursive>
 800f530:	89ab      	ldrh	r3, [r5, #12]
 800f532:	065b      	lsls	r3, r3, #25
 800f534:	f53f af12 	bmi.w	800f35c <_vfiprintf_r+0x4c>
 800f538:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f53a:	e711      	b.n	800f360 <_vfiprintf_r+0x50>
 800f53c:	ab03      	add	r3, sp, #12
 800f53e:	9300      	str	r3, [sp, #0]
 800f540:	462a      	mov	r2, r5
 800f542:	4b09      	ldr	r3, [pc, #36]	; (800f568 <_vfiprintf_r+0x258>)
 800f544:	a904      	add	r1, sp, #16
 800f546:	4630      	mov	r0, r6
 800f548:	f000 f880 	bl	800f64c <_printf_i>
 800f54c:	e7e4      	b.n	800f518 <_vfiprintf_r+0x208>
 800f54e:	bf00      	nop
 800f550:	080110c4 	.word	0x080110c4
 800f554:	080110e4 	.word	0x080110e4
 800f558:	080110a4 	.word	0x080110a4
 800f55c:	08011104 	.word	0x08011104
 800f560:	0801110e 	.word	0x0801110e
 800f564:	00000000 	.word	0x00000000
 800f568:	0800f2eb 	.word	0x0800f2eb
 800f56c:	0801110a 	.word	0x0801110a

0800f570 <_printf_common>:
 800f570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f574:	4616      	mov	r6, r2
 800f576:	4699      	mov	r9, r3
 800f578:	688a      	ldr	r2, [r1, #8]
 800f57a:	690b      	ldr	r3, [r1, #16]
 800f57c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f580:	4293      	cmp	r3, r2
 800f582:	bfb8      	it	lt
 800f584:	4613      	movlt	r3, r2
 800f586:	6033      	str	r3, [r6, #0]
 800f588:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f58c:	4607      	mov	r7, r0
 800f58e:	460c      	mov	r4, r1
 800f590:	b10a      	cbz	r2, 800f596 <_printf_common+0x26>
 800f592:	3301      	adds	r3, #1
 800f594:	6033      	str	r3, [r6, #0]
 800f596:	6823      	ldr	r3, [r4, #0]
 800f598:	0699      	lsls	r1, r3, #26
 800f59a:	bf42      	ittt	mi
 800f59c:	6833      	ldrmi	r3, [r6, #0]
 800f59e:	3302      	addmi	r3, #2
 800f5a0:	6033      	strmi	r3, [r6, #0]
 800f5a2:	6825      	ldr	r5, [r4, #0]
 800f5a4:	f015 0506 	ands.w	r5, r5, #6
 800f5a8:	d106      	bne.n	800f5b8 <_printf_common+0x48>
 800f5aa:	f104 0a19 	add.w	sl, r4, #25
 800f5ae:	68e3      	ldr	r3, [r4, #12]
 800f5b0:	6832      	ldr	r2, [r6, #0]
 800f5b2:	1a9b      	subs	r3, r3, r2
 800f5b4:	42ab      	cmp	r3, r5
 800f5b6:	dc26      	bgt.n	800f606 <_printf_common+0x96>
 800f5b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f5bc:	1e13      	subs	r3, r2, #0
 800f5be:	6822      	ldr	r2, [r4, #0]
 800f5c0:	bf18      	it	ne
 800f5c2:	2301      	movne	r3, #1
 800f5c4:	0692      	lsls	r2, r2, #26
 800f5c6:	d42b      	bmi.n	800f620 <_printf_common+0xb0>
 800f5c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f5cc:	4649      	mov	r1, r9
 800f5ce:	4638      	mov	r0, r7
 800f5d0:	47c0      	blx	r8
 800f5d2:	3001      	adds	r0, #1
 800f5d4:	d01e      	beq.n	800f614 <_printf_common+0xa4>
 800f5d6:	6823      	ldr	r3, [r4, #0]
 800f5d8:	68e5      	ldr	r5, [r4, #12]
 800f5da:	6832      	ldr	r2, [r6, #0]
 800f5dc:	f003 0306 	and.w	r3, r3, #6
 800f5e0:	2b04      	cmp	r3, #4
 800f5e2:	bf08      	it	eq
 800f5e4:	1aad      	subeq	r5, r5, r2
 800f5e6:	68a3      	ldr	r3, [r4, #8]
 800f5e8:	6922      	ldr	r2, [r4, #16]
 800f5ea:	bf0c      	ite	eq
 800f5ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f5f0:	2500      	movne	r5, #0
 800f5f2:	4293      	cmp	r3, r2
 800f5f4:	bfc4      	itt	gt
 800f5f6:	1a9b      	subgt	r3, r3, r2
 800f5f8:	18ed      	addgt	r5, r5, r3
 800f5fa:	2600      	movs	r6, #0
 800f5fc:	341a      	adds	r4, #26
 800f5fe:	42b5      	cmp	r5, r6
 800f600:	d11a      	bne.n	800f638 <_printf_common+0xc8>
 800f602:	2000      	movs	r0, #0
 800f604:	e008      	b.n	800f618 <_printf_common+0xa8>
 800f606:	2301      	movs	r3, #1
 800f608:	4652      	mov	r2, sl
 800f60a:	4649      	mov	r1, r9
 800f60c:	4638      	mov	r0, r7
 800f60e:	47c0      	blx	r8
 800f610:	3001      	adds	r0, #1
 800f612:	d103      	bne.n	800f61c <_printf_common+0xac>
 800f614:	f04f 30ff 	mov.w	r0, #4294967295
 800f618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f61c:	3501      	adds	r5, #1
 800f61e:	e7c6      	b.n	800f5ae <_printf_common+0x3e>
 800f620:	18e1      	adds	r1, r4, r3
 800f622:	1c5a      	adds	r2, r3, #1
 800f624:	2030      	movs	r0, #48	; 0x30
 800f626:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f62a:	4422      	add	r2, r4
 800f62c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f630:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f634:	3302      	adds	r3, #2
 800f636:	e7c7      	b.n	800f5c8 <_printf_common+0x58>
 800f638:	2301      	movs	r3, #1
 800f63a:	4622      	mov	r2, r4
 800f63c:	4649      	mov	r1, r9
 800f63e:	4638      	mov	r0, r7
 800f640:	47c0      	blx	r8
 800f642:	3001      	adds	r0, #1
 800f644:	d0e6      	beq.n	800f614 <_printf_common+0xa4>
 800f646:	3601      	adds	r6, #1
 800f648:	e7d9      	b.n	800f5fe <_printf_common+0x8e>
	...

0800f64c <_printf_i>:
 800f64c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f650:	460c      	mov	r4, r1
 800f652:	4691      	mov	r9, r2
 800f654:	7e27      	ldrb	r7, [r4, #24]
 800f656:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f658:	2f78      	cmp	r7, #120	; 0x78
 800f65a:	4680      	mov	r8, r0
 800f65c:	469a      	mov	sl, r3
 800f65e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f662:	d807      	bhi.n	800f674 <_printf_i+0x28>
 800f664:	2f62      	cmp	r7, #98	; 0x62
 800f666:	d80a      	bhi.n	800f67e <_printf_i+0x32>
 800f668:	2f00      	cmp	r7, #0
 800f66a:	f000 80d8 	beq.w	800f81e <_printf_i+0x1d2>
 800f66e:	2f58      	cmp	r7, #88	; 0x58
 800f670:	f000 80a3 	beq.w	800f7ba <_printf_i+0x16e>
 800f674:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f678:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f67c:	e03a      	b.n	800f6f4 <_printf_i+0xa8>
 800f67e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f682:	2b15      	cmp	r3, #21
 800f684:	d8f6      	bhi.n	800f674 <_printf_i+0x28>
 800f686:	a001      	add	r0, pc, #4	; (adr r0, 800f68c <_printf_i+0x40>)
 800f688:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f68c:	0800f6e5 	.word	0x0800f6e5
 800f690:	0800f6f9 	.word	0x0800f6f9
 800f694:	0800f675 	.word	0x0800f675
 800f698:	0800f675 	.word	0x0800f675
 800f69c:	0800f675 	.word	0x0800f675
 800f6a0:	0800f675 	.word	0x0800f675
 800f6a4:	0800f6f9 	.word	0x0800f6f9
 800f6a8:	0800f675 	.word	0x0800f675
 800f6ac:	0800f675 	.word	0x0800f675
 800f6b0:	0800f675 	.word	0x0800f675
 800f6b4:	0800f675 	.word	0x0800f675
 800f6b8:	0800f805 	.word	0x0800f805
 800f6bc:	0800f729 	.word	0x0800f729
 800f6c0:	0800f7e7 	.word	0x0800f7e7
 800f6c4:	0800f675 	.word	0x0800f675
 800f6c8:	0800f675 	.word	0x0800f675
 800f6cc:	0800f827 	.word	0x0800f827
 800f6d0:	0800f675 	.word	0x0800f675
 800f6d4:	0800f729 	.word	0x0800f729
 800f6d8:	0800f675 	.word	0x0800f675
 800f6dc:	0800f675 	.word	0x0800f675
 800f6e0:	0800f7ef 	.word	0x0800f7ef
 800f6e4:	680b      	ldr	r3, [r1, #0]
 800f6e6:	1d1a      	adds	r2, r3, #4
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	600a      	str	r2, [r1, #0]
 800f6ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f6f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f6f4:	2301      	movs	r3, #1
 800f6f6:	e0a3      	b.n	800f840 <_printf_i+0x1f4>
 800f6f8:	6825      	ldr	r5, [r4, #0]
 800f6fa:	6808      	ldr	r0, [r1, #0]
 800f6fc:	062e      	lsls	r6, r5, #24
 800f6fe:	f100 0304 	add.w	r3, r0, #4
 800f702:	d50a      	bpl.n	800f71a <_printf_i+0xce>
 800f704:	6805      	ldr	r5, [r0, #0]
 800f706:	600b      	str	r3, [r1, #0]
 800f708:	2d00      	cmp	r5, #0
 800f70a:	da03      	bge.n	800f714 <_printf_i+0xc8>
 800f70c:	232d      	movs	r3, #45	; 0x2d
 800f70e:	426d      	negs	r5, r5
 800f710:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f714:	485e      	ldr	r0, [pc, #376]	; (800f890 <_printf_i+0x244>)
 800f716:	230a      	movs	r3, #10
 800f718:	e019      	b.n	800f74e <_printf_i+0x102>
 800f71a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f71e:	6805      	ldr	r5, [r0, #0]
 800f720:	600b      	str	r3, [r1, #0]
 800f722:	bf18      	it	ne
 800f724:	b22d      	sxthne	r5, r5
 800f726:	e7ef      	b.n	800f708 <_printf_i+0xbc>
 800f728:	680b      	ldr	r3, [r1, #0]
 800f72a:	6825      	ldr	r5, [r4, #0]
 800f72c:	1d18      	adds	r0, r3, #4
 800f72e:	6008      	str	r0, [r1, #0]
 800f730:	0628      	lsls	r0, r5, #24
 800f732:	d501      	bpl.n	800f738 <_printf_i+0xec>
 800f734:	681d      	ldr	r5, [r3, #0]
 800f736:	e002      	b.n	800f73e <_printf_i+0xf2>
 800f738:	0669      	lsls	r1, r5, #25
 800f73a:	d5fb      	bpl.n	800f734 <_printf_i+0xe8>
 800f73c:	881d      	ldrh	r5, [r3, #0]
 800f73e:	4854      	ldr	r0, [pc, #336]	; (800f890 <_printf_i+0x244>)
 800f740:	2f6f      	cmp	r7, #111	; 0x6f
 800f742:	bf0c      	ite	eq
 800f744:	2308      	moveq	r3, #8
 800f746:	230a      	movne	r3, #10
 800f748:	2100      	movs	r1, #0
 800f74a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f74e:	6866      	ldr	r6, [r4, #4]
 800f750:	60a6      	str	r6, [r4, #8]
 800f752:	2e00      	cmp	r6, #0
 800f754:	bfa2      	ittt	ge
 800f756:	6821      	ldrge	r1, [r4, #0]
 800f758:	f021 0104 	bicge.w	r1, r1, #4
 800f75c:	6021      	strge	r1, [r4, #0]
 800f75e:	b90d      	cbnz	r5, 800f764 <_printf_i+0x118>
 800f760:	2e00      	cmp	r6, #0
 800f762:	d04d      	beq.n	800f800 <_printf_i+0x1b4>
 800f764:	4616      	mov	r6, r2
 800f766:	fbb5 f1f3 	udiv	r1, r5, r3
 800f76a:	fb03 5711 	mls	r7, r3, r1, r5
 800f76e:	5dc7      	ldrb	r7, [r0, r7]
 800f770:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f774:	462f      	mov	r7, r5
 800f776:	42bb      	cmp	r3, r7
 800f778:	460d      	mov	r5, r1
 800f77a:	d9f4      	bls.n	800f766 <_printf_i+0x11a>
 800f77c:	2b08      	cmp	r3, #8
 800f77e:	d10b      	bne.n	800f798 <_printf_i+0x14c>
 800f780:	6823      	ldr	r3, [r4, #0]
 800f782:	07df      	lsls	r7, r3, #31
 800f784:	d508      	bpl.n	800f798 <_printf_i+0x14c>
 800f786:	6923      	ldr	r3, [r4, #16]
 800f788:	6861      	ldr	r1, [r4, #4]
 800f78a:	4299      	cmp	r1, r3
 800f78c:	bfde      	ittt	le
 800f78e:	2330      	movle	r3, #48	; 0x30
 800f790:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f794:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f798:	1b92      	subs	r2, r2, r6
 800f79a:	6122      	str	r2, [r4, #16]
 800f79c:	f8cd a000 	str.w	sl, [sp]
 800f7a0:	464b      	mov	r3, r9
 800f7a2:	aa03      	add	r2, sp, #12
 800f7a4:	4621      	mov	r1, r4
 800f7a6:	4640      	mov	r0, r8
 800f7a8:	f7ff fee2 	bl	800f570 <_printf_common>
 800f7ac:	3001      	adds	r0, #1
 800f7ae:	d14c      	bne.n	800f84a <_printf_i+0x1fe>
 800f7b0:	f04f 30ff 	mov.w	r0, #4294967295
 800f7b4:	b004      	add	sp, #16
 800f7b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7ba:	4835      	ldr	r0, [pc, #212]	; (800f890 <_printf_i+0x244>)
 800f7bc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f7c0:	6823      	ldr	r3, [r4, #0]
 800f7c2:	680e      	ldr	r6, [r1, #0]
 800f7c4:	061f      	lsls	r7, r3, #24
 800f7c6:	f856 5b04 	ldr.w	r5, [r6], #4
 800f7ca:	600e      	str	r6, [r1, #0]
 800f7cc:	d514      	bpl.n	800f7f8 <_printf_i+0x1ac>
 800f7ce:	07d9      	lsls	r1, r3, #31
 800f7d0:	bf44      	itt	mi
 800f7d2:	f043 0320 	orrmi.w	r3, r3, #32
 800f7d6:	6023      	strmi	r3, [r4, #0]
 800f7d8:	b91d      	cbnz	r5, 800f7e2 <_printf_i+0x196>
 800f7da:	6823      	ldr	r3, [r4, #0]
 800f7dc:	f023 0320 	bic.w	r3, r3, #32
 800f7e0:	6023      	str	r3, [r4, #0]
 800f7e2:	2310      	movs	r3, #16
 800f7e4:	e7b0      	b.n	800f748 <_printf_i+0xfc>
 800f7e6:	6823      	ldr	r3, [r4, #0]
 800f7e8:	f043 0320 	orr.w	r3, r3, #32
 800f7ec:	6023      	str	r3, [r4, #0]
 800f7ee:	2378      	movs	r3, #120	; 0x78
 800f7f0:	4828      	ldr	r0, [pc, #160]	; (800f894 <_printf_i+0x248>)
 800f7f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f7f6:	e7e3      	b.n	800f7c0 <_printf_i+0x174>
 800f7f8:	065e      	lsls	r6, r3, #25
 800f7fa:	bf48      	it	mi
 800f7fc:	b2ad      	uxthmi	r5, r5
 800f7fe:	e7e6      	b.n	800f7ce <_printf_i+0x182>
 800f800:	4616      	mov	r6, r2
 800f802:	e7bb      	b.n	800f77c <_printf_i+0x130>
 800f804:	680b      	ldr	r3, [r1, #0]
 800f806:	6826      	ldr	r6, [r4, #0]
 800f808:	6960      	ldr	r0, [r4, #20]
 800f80a:	1d1d      	adds	r5, r3, #4
 800f80c:	600d      	str	r5, [r1, #0]
 800f80e:	0635      	lsls	r5, r6, #24
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	d501      	bpl.n	800f818 <_printf_i+0x1cc>
 800f814:	6018      	str	r0, [r3, #0]
 800f816:	e002      	b.n	800f81e <_printf_i+0x1d2>
 800f818:	0671      	lsls	r1, r6, #25
 800f81a:	d5fb      	bpl.n	800f814 <_printf_i+0x1c8>
 800f81c:	8018      	strh	r0, [r3, #0]
 800f81e:	2300      	movs	r3, #0
 800f820:	6123      	str	r3, [r4, #16]
 800f822:	4616      	mov	r6, r2
 800f824:	e7ba      	b.n	800f79c <_printf_i+0x150>
 800f826:	680b      	ldr	r3, [r1, #0]
 800f828:	1d1a      	adds	r2, r3, #4
 800f82a:	600a      	str	r2, [r1, #0]
 800f82c:	681e      	ldr	r6, [r3, #0]
 800f82e:	6862      	ldr	r2, [r4, #4]
 800f830:	2100      	movs	r1, #0
 800f832:	4630      	mov	r0, r6
 800f834:	f7f0 fce4 	bl	8000200 <memchr>
 800f838:	b108      	cbz	r0, 800f83e <_printf_i+0x1f2>
 800f83a:	1b80      	subs	r0, r0, r6
 800f83c:	6060      	str	r0, [r4, #4]
 800f83e:	6863      	ldr	r3, [r4, #4]
 800f840:	6123      	str	r3, [r4, #16]
 800f842:	2300      	movs	r3, #0
 800f844:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f848:	e7a8      	b.n	800f79c <_printf_i+0x150>
 800f84a:	6923      	ldr	r3, [r4, #16]
 800f84c:	4632      	mov	r2, r6
 800f84e:	4649      	mov	r1, r9
 800f850:	4640      	mov	r0, r8
 800f852:	47d0      	blx	sl
 800f854:	3001      	adds	r0, #1
 800f856:	d0ab      	beq.n	800f7b0 <_printf_i+0x164>
 800f858:	6823      	ldr	r3, [r4, #0]
 800f85a:	079b      	lsls	r3, r3, #30
 800f85c:	d413      	bmi.n	800f886 <_printf_i+0x23a>
 800f85e:	68e0      	ldr	r0, [r4, #12]
 800f860:	9b03      	ldr	r3, [sp, #12]
 800f862:	4298      	cmp	r0, r3
 800f864:	bfb8      	it	lt
 800f866:	4618      	movlt	r0, r3
 800f868:	e7a4      	b.n	800f7b4 <_printf_i+0x168>
 800f86a:	2301      	movs	r3, #1
 800f86c:	4632      	mov	r2, r6
 800f86e:	4649      	mov	r1, r9
 800f870:	4640      	mov	r0, r8
 800f872:	47d0      	blx	sl
 800f874:	3001      	adds	r0, #1
 800f876:	d09b      	beq.n	800f7b0 <_printf_i+0x164>
 800f878:	3501      	adds	r5, #1
 800f87a:	68e3      	ldr	r3, [r4, #12]
 800f87c:	9903      	ldr	r1, [sp, #12]
 800f87e:	1a5b      	subs	r3, r3, r1
 800f880:	42ab      	cmp	r3, r5
 800f882:	dcf2      	bgt.n	800f86a <_printf_i+0x21e>
 800f884:	e7eb      	b.n	800f85e <_printf_i+0x212>
 800f886:	2500      	movs	r5, #0
 800f888:	f104 0619 	add.w	r6, r4, #25
 800f88c:	e7f5      	b.n	800f87a <_printf_i+0x22e>
 800f88e:	bf00      	nop
 800f890:	08011115 	.word	0x08011115
 800f894:	08011126 	.word	0x08011126

0800f898 <__svfiscanf_r>:
 800f898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f89c:	461d      	mov	r5, r3
 800f89e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800f8a0:	07df      	lsls	r7, r3, #31
 800f8a2:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800f8a6:	4606      	mov	r6, r0
 800f8a8:	460c      	mov	r4, r1
 800f8aa:	4692      	mov	sl, r2
 800f8ac:	d405      	bmi.n	800f8ba <__svfiscanf_r+0x22>
 800f8ae:	898b      	ldrh	r3, [r1, #12]
 800f8b0:	0598      	lsls	r0, r3, #22
 800f8b2:	d402      	bmi.n	800f8ba <__svfiscanf_r+0x22>
 800f8b4:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800f8b6:	f7ff fb32 	bl	800ef1e <__retarget_lock_acquire_recursive>
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 800f8c0:	4bae      	ldr	r3, [pc, #696]	; (800fb7c <__svfiscanf_r+0x2e4>)
 800f8c2:	93a0      	str	r3, [sp, #640]	; 0x280
 800f8c4:	f10d 0804 	add.w	r8, sp, #4
 800f8c8:	4bad      	ldr	r3, [pc, #692]	; (800fb80 <__svfiscanf_r+0x2e8>)
 800f8ca:	4fae      	ldr	r7, [pc, #696]	; (800fb84 <__svfiscanf_r+0x2ec>)
 800f8cc:	f8df 92b8 	ldr.w	r9, [pc, #696]	; 800fb88 <__svfiscanf_r+0x2f0>
 800f8d0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800f8d4:	93a1      	str	r3, [sp, #644]	; 0x284
 800f8d6:	9500      	str	r5, [sp, #0]
 800f8d8:	f89a b000 	ldrb.w	fp, [sl]
 800f8dc:	f1bb 0f00 	cmp.w	fp, #0
 800f8e0:	f000 8170 	beq.w	800fbc4 <__svfiscanf_r+0x32c>
 800f8e4:	f81b 3007 	ldrb.w	r3, [fp, r7]
 800f8e8:	f013 0308 	ands.w	r3, r3, #8
 800f8ec:	f10a 0501 	add.w	r5, sl, #1
 800f8f0:	d019      	beq.n	800f926 <__svfiscanf_r+0x8e>
 800f8f2:	6863      	ldr	r3, [r4, #4]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	dd0f      	ble.n	800f918 <__svfiscanf_r+0x80>
 800f8f8:	6823      	ldr	r3, [r4, #0]
 800f8fa:	781a      	ldrb	r2, [r3, #0]
 800f8fc:	5cba      	ldrb	r2, [r7, r2]
 800f8fe:	0711      	lsls	r1, r2, #28
 800f900:	d401      	bmi.n	800f906 <__svfiscanf_r+0x6e>
 800f902:	46aa      	mov	sl, r5
 800f904:	e7e8      	b.n	800f8d8 <__svfiscanf_r+0x40>
 800f906:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f908:	3201      	adds	r2, #1
 800f90a:	9245      	str	r2, [sp, #276]	; 0x114
 800f90c:	6862      	ldr	r2, [r4, #4]
 800f90e:	3301      	adds	r3, #1
 800f910:	3a01      	subs	r2, #1
 800f912:	6062      	str	r2, [r4, #4]
 800f914:	6023      	str	r3, [r4, #0]
 800f916:	e7ec      	b.n	800f8f2 <__svfiscanf_r+0x5a>
 800f918:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f91a:	4621      	mov	r1, r4
 800f91c:	4630      	mov	r0, r6
 800f91e:	4798      	blx	r3
 800f920:	2800      	cmp	r0, #0
 800f922:	d0e9      	beq.n	800f8f8 <__svfiscanf_r+0x60>
 800f924:	e7ed      	b.n	800f902 <__svfiscanf_r+0x6a>
 800f926:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800f92a:	f040 8086 	bne.w	800fa3a <__svfiscanf_r+0x1a2>
 800f92e:	9341      	str	r3, [sp, #260]	; 0x104
 800f930:	9343      	str	r3, [sp, #268]	; 0x10c
 800f932:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800f936:	2b2a      	cmp	r3, #42	; 0x2a
 800f938:	bf02      	ittt	eq
 800f93a:	2310      	moveq	r3, #16
 800f93c:	9341      	streq	r3, [sp, #260]	; 0x104
 800f93e:	f10a 0502 	addeq.w	r5, sl, #2
 800f942:	220a      	movs	r2, #10
 800f944:	46aa      	mov	sl, r5
 800f946:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800f94a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800f94e:	2b09      	cmp	r3, #9
 800f950:	d91e      	bls.n	800f990 <__svfiscanf_r+0xf8>
 800f952:	488d      	ldr	r0, [pc, #564]	; (800fb88 <__svfiscanf_r+0x2f0>)
 800f954:	2203      	movs	r2, #3
 800f956:	f7f0 fc53 	bl	8000200 <memchr>
 800f95a:	b140      	cbz	r0, 800f96e <__svfiscanf_r+0xd6>
 800f95c:	2301      	movs	r3, #1
 800f95e:	eba0 0009 	sub.w	r0, r0, r9
 800f962:	fa03 f000 	lsl.w	r0, r3, r0
 800f966:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f968:	4318      	orrs	r0, r3
 800f96a:	9041      	str	r0, [sp, #260]	; 0x104
 800f96c:	4655      	mov	r5, sl
 800f96e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f972:	2b78      	cmp	r3, #120	; 0x78
 800f974:	d807      	bhi.n	800f986 <__svfiscanf_r+0xee>
 800f976:	2b57      	cmp	r3, #87	; 0x57
 800f978:	d811      	bhi.n	800f99e <__svfiscanf_r+0x106>
 800f97a:	2b25      	cmp	r3, #37	; 0x25
 800f97c:	d05d      	beq.n	800fa3a <__svfiscanf_r+0x1a2>
 800f97e:	d857      	bhi.n	800fa30 <__svfiscanf_r+0x198>
 800f980:	2b00      	cmp	r3, #0
 800f982:	f000 80d6 	beq.w	800fb32 <__svfiscanf_r+0x29a>
 800f986:	2303      	movs	r3, #3
 800f988:	9347      	str	r3, [sp, #284]	; 0x11c
 800f98a:	230a      	movs	r3, #10
 800f98c:	9342      	str	r3, [sp, #264]	; 0x108
 800f98e:	e08b      	b.n	800faa8 <__svfiscanf_r+0x210>
 800f990:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800f992:	fb02 1303 	mla	r3, r2, r3, r1
 800f996:	3b30      	subs	r3, #48	; 0x30
 800f998:	9343      	str	r3, [sp, #268]	; 0x10c
 800f99a:	4655      	mov	r5, sl
 800f99c:	e7d2      	b.n	800f944 <__svfiscanf_r+0xac>
 800f99e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800f9a2:	2a20      	cmp	r2, #32
 800f9a4:	d8ef      	bhi.n	800f986 <__svfiscanf_r+0xee>
 800f9a6:	a101      	add	r1, pc, #4	; (adr r1, 800f9ac <__svfiscanf_r+0x114>)
 800f9a8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f9ac:	0800fa93 	.word	0x0800fa93
 800f9b0:	0800f987 	.word	0x0800f987
 800f9b4:	0800f987 	.word	0x0800f987
 800f9b8:	0800faf1 	.word	0x0800faf1
 800f9bc:	0800f987 	.word	0x0800f987
 800f9c0:	0800f987 	.word	0x0800f987
 800f9c4:	0800f987 	.word	0x0800f987
 800f9c8:	0800f987 	.word	0x0800f987
 800f9cc:	0800f987 	.word	0x0800f987
 800f9d0:	0800f987 	.word	0x0800f987
 800f9d4:	0800f987 	.word	0x0800f987
 800f9d8:	0800fb07 	.word	0x0800fb07
 800f9dc:	0800fadd 	.word	0x0800fadd
 800f9e0:	0800fa37 	.word	0x0800fa37
 800f9e4:	0800fa37 	.word	0x0800fa37
 800f9e8:	0800fa37 	.word	0x0800fa37
 800f9ec:	0800f987 	.word	0x0800f987
 800f9f0:	0800fae1 	.word	0x0800fae1
 800f9f4:	0800f987 	.word	0x0800f987
 800f9f8:	0800f987 	.word	0x0800f987
 800f9fc:	0800f987 	.word	0x0800f987
 800fa00:	0800f987 	.word	0x0800f987
 800fa04:	0800fb17 	.word	0x0800fb17
 800fa08:	0800fae9 	.word	0x0800fae9
 800fa0c:	0800fa8b 	.word	0x0800fa8b
 800fa10:	0800f987 	.word	0x0800f987
 800fa14:	0800f987 	.word	0x0800f987
 800fa18:	0800fb13 	.word	0x0800fb13
 800fa1c:	0800f987 	.word	0x0800f987
 800fa20:	0800fadd 	.word	0x0800fadd
 800fa24:	0800f987 	.word	0x0800f987
 800fa28:	0800f987 	.word	0x0800f987
 800fa2c:	0800fa93 	.word	0x0800fa93
 800fa30:	3b45      	subs	r3, #69	; 0x45
 800fa32:	2b02      	cmp	r3, #2
 800fa34:	d8a7      	bhi.n	800f986 <__svfiscanf_r+0xee>
 800fa36:	2305      	movs	r3, #5
 800fa38:	e035      	b.n	800faa6 <__svfiscanf_r+0x20e>
 800fa3a:	6863      	ldr	r3, [r4, #4]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	dd0d      	ble.n	800fa5c <__svfiscanf_r+0x1c4>
 800fa40:	6823      	ldr	r3, [r4, #0]
 800fa42:	781a      	ldrb	r2, [r3, #0]
 800fa44:	455a      	cmp	r2, fp
 800fa46:	f040 80bd 	bne.w	800fbc4 <__svfiscanf_r+0x32c>
 800fa4a:	3301      	adds	r3, #1
 800fa4c:	6862      	ldr	r2, [r4, #4]
 800fa4e:	6023      	str	r3, [r4, #0]
 800fa50:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800fa52:	3a01      	subs	r2, #1
 800fa54:	3301      	adds	r3, #1
 800fa56:	6062      	str	r2, [r4, #4]
 800fa58:	9345      	str	r3, [sp, #276]	; 0x114
 800fa5a:	e752      	b.n	800f902 <__svfiscanf_r+0x6a>
 800fa5c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800fa5e:	4621      	mov	r1, r4
 800fa60:	4630      	mov	r0, r6
 800fa62:	4798      	blx	r3
 800fa64:	2800      	cmp	r0, #0
 800fa66:	d0eb      	beq.n	800fa40 <__svfiscanf_r+0x1a8>
 800fa68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fa6a:	07da      	lsls	r2, r3, #31
 800fa6c:	f140 80a2 	bpl.w	800fbb4 <__svfiscanf_r+0x31c>
 800fa70:	9844      	ldr	r0, [sp, #272]	; 0x110
 800fa72:	2800      	cmp	r0, #0
 800fa74:	d066      	beq.n	800fb44 <__svfiscanf_r+0x2ac>
 800fa76:	89a3      	ldrh	r3, [r4, #12]
 800fa78:	f013 0f40 	tst.w	r3, #64	; 0x40
 800fa7c:	bf18      	it	ne
 800fa7e:	f04f 30ff 	movne.w	r0, #4294967295
 800fa82:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800fa86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa8a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800fa8c:	f042 0220 	orr.w	r2, r2, #32
 800fa90:	9241      	str	r2, [sp, #260]	; 0x104
 800fa92:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800fa94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fa98:	9241      	str	r2, [sp, #260]	; 0x104
 800fa9a:	2210      	movs	r2, #16
 800fa9c:	2b6f      	cmp	r3, #111	; 0x6f
 800fa9e:	9242      	str	r2, [sp, #264]	; 0x108
 800faa0:	bf34      	ite	cc
 800faa2:	2303      	movcc	r3, #3
 800faa4:	2304      	movcs	r3, #4
 800faa6:	9347      	str	r3, [sp, #284]	; 0x11c
 800faa8:	6863      	ldr	r3, [r4, #4]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	dd4d      	ble.n	800fb4a <__svfiscanf_r+0x2b2>
 800faae:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fab0:	065b      	lsls	r3, r3, #25
 800fab2:	d404      	bmi.n	800fabe <__svfiscanf_r+0x226>
 800fab4:	6823      	ldr	r3, [r4, #0]
 800fab6:	781a      	ldrb	r2, [r3, #0]
 800fab8:	5cba      	ldrb	r2, [r7, r2]
 800faba:	0710      	lsls	r0, r2, #28
 800fabc:	d44c      	bmi.n	800fb58 <__svfiscanf_r+0x2c0>
 800fabe:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800fac0:	2b02      	cmp	r3, #2
 800fac2:	dc63      	bgt.n	800fb8c <__svfiscanf_r+0x2f4>
 800fac4:	466b      	mov	r3, sp
 800fac6:	4622      	mov	r2, r4
 800fac8:	a941      	add	r1, sp, #260	; 0x104
 800faca:	4630      	mov	r0, r6
 800facc:	f000 f8b0 	bl	800fc30 <_scanf_chars>
 800fad0:	2801      	cmp	r0, #1
 800fad2:	d077      	beq.n	800fbc4 <__svfiscanf_r+0x32c>
 800fad4:	2802      	cmp	r0, #2
 800fad6:	f47f af14 	bne.w	800f902 <__svfiscanf_r+0x6a>
 800fada:	e7c5      	b.n	800fa68 <__svfiscanf_r+0x1d0>
 800fadc:	220a      	movs	r2, #10
 800fade:	e7dd      	b.n	800fa9c <__svfiscanf_r+0x204>
 800fae0:	2300      	movs	r3, #0
 800fae2:	9342      	str	r3, [sp, #264]	; 0x108
 800fae4:	2303      	movs	r3, #3
 800fae6:	e7de      	b.n	800faa6 <__svfiscanf_r+0x20e>
 800fae8:	2308      	movs	r3, #8
 800faea:	9342      	str	r3, [sp, #264]	; 0x108
 800faec:	2304      	movs	r3, #4
 800faee:	e7da      	b.n	800faa6 <__svfiscanf_r+0x20e>
 800faf0:	4629      	mov	r1, r5
 800faf2:	4640      	mov	r0, r8
 800faf4:	f000 fac4 	bl	8010080 <__sccl>
 800faf8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fafa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fafe:	9341      	str	r3, [sp, #260]	; 0x104
 800fb00:	4605      	mov	r5, r0
 800fb02:	2301      	movs	r3, #1
 800fb04:	e7cf      	b.n	800faa6 <__svfiscanf_r+0x20e>
 800fb06:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fb08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb0c:	9341      	str	r3, [sp, #260]	; 0x104
 800fb0e:	2300      	movs	r3, #0
 800fb10:	e7c9      	b.n	800faa6 <__svfiscanf_r+0x20e>
 800fb12:	2302      	movs	r3, #2
 800fb14:	e7c7      	b.n	800faa6 <__svfiscanf_r+0x20e>
 800fb16:	9841      	ldr	r0, [sp, #260]	; 0x104
 800fb18:	06c3      	lsls	r3, r0, #27
 800fb1a:	f53f aef2 	bmi.w	800f902 <__svfiscanf_r+0x6a>
 800fb1e:	9b00      	ldr	r3, [sp, #0]
 800fb20:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800fb22:	1d19      	adds	r1, r3, #4
 800fb24:	9100      	str	r1, [sp, #0]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	07c0      	lsls	r0, r0, #31
 800fb2a:	bf4c      	ite	mi
 800fb2c:	801a      	strhmi	r2, [r3, #0]
 800fb2e:	601a      	strpl	r2, [r3, #0]
 800fb30:	e6e7      	b.n	800f902 <__svfiscanf_r+0x6a>
 800fb32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fb34:	07d8      	lsls	r0, r3, #31
 800fb36:	d405      	bmi.n	800fb44 <__svfiscanf_r+0x2ac>
 800fb38:	89a3      	ldrh	r3, [r4, #12]
 800fb3a:	0599      	lsls	r1, r3, #22
 800fb3c:	d402      	bmi.n	800fb44 <__svfiscanf_r+0x2ac>
 800fb3e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fb40:	f7ff f9ee 	bl	800ef20 <__retarget_lock_release_recursive>
 800fb44:	f04f 30ff 	mov.w	r0, #4294967295
 800fb48:	e79b      	b.n	800fa82 <__svfiscanf_r+0x1ea>
 800fb4a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800fb4c:	4621      	mov	r1, r4
 800fb4e:	4630      	mov	r0, r6
 800fb50:	4798      	blx	r3
 800fb52:	2800      	cmp	r0, #0
 800fb54:	d0ab      	beq.n	800faae <__svfiscanf_r+0x216>
 800fb56:	e787      	b.n	800fa68 <__svfiscanf_r+0x1d0>
 800fb58:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800fb5a:	3201      	adds	r2, #1
 800fb5c:	9245      	str	r2, [sp, #276]	; 0x114
 800fb5e:	6862      	ldr	r2, [r4, #4]
 800fb60:	3a01      	subs	r2, #1
 800fb62:	2a00      	cmp	r2, #0
 800fb64:	6062      	str	r2, [r4, #4]
 800fb66:	dd02      	ble.n	800fb6e <__svfiscanf_r+0x2d6>
 800fb68:	3301      	adds	r3, #1
 800fb6a:	6023      	str	r3, [r4, #0]
 800fb6c:	e7a2      	b.n	800fab4 <__svfiscanf_r+0x21c>
 800fb6e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800fb70:	4621      	mov	r1, r4
 800fb72:	4630      	mov	r0, r6
 800fb74:	4798      	blx	r3
 800fb76:	2800      	cmp	r0, #0
 800fb78:	d09c      	beq.n	800fab4 <__svfiscanf_r+0x21c>
 800fb7a:	e775      	b.n	800fa68 <__svfiscanf_r+0x1d0>
 800fb7c:	080103f9 	.word	0x080103f9
 800fb80:	0800ff6d 	.word	0x0800ff6d
 800fb84:	08011153 	.word	0x08011153
 800fb88:	0801110a 	.word	0x0801110a
 800fb8c:	2b04      	cmp	r3, #4
 800fb8e:	dc06      	bgt.n	800fb9e <__svfiscanf_r+0x306>
 800fb90:	466b      	mov	r3, sp
 800fb92:	4622      	mov	r2, r4
 800fb94:	a941      	add	r1, sp, #260	; 0x104
 800fb96:	4630      	mov	r0, r6
 800fb98:	f000 f8a2 	bl	800fce0 <_scanf_i>
 800fb9c:	e798      	b.n	800fad0 <__svfiscanf_r+0x238>
 800fb9e:	4b0f      	ldr	r3, [pc, #60]	; (800fbdc <__svfiscanf_r+0x344>)
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	f43f aeae 	beq.w	800f902 <__svfiscanf_r+0x6a>
 800fba6:	466b      	mov	r3, sp
 800fba8:	4622      	mov	r2, r4
 800fbaa:	a941      	add	r1, sp, #260	; 0x104
 800fbac:	4630      	mov	r0, r6
 800fbae:	f3af 8000 	nop.w
 800fbb2:	e78d      	b.n	800fad0 <__svfiscanf_r+0x238>
 800fbb4:	89a3      	ldrh	r3, [r4, #12]
 800fbb6:	0599      	lsls	r1, r3, #22
 800fbb8:	f53f af5a 	bmi.w	800fa70 <__svfiscanf_r+0x1d8>
 800fbbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fbbe:	f7ff f9af 	bl	800ef20 <__retarget_lock_release_recursive>
 800fbc2:	e755      	b.n	800fa70 <__svfiscanf_r+0x1d8>
 800fbc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fbc6:	07da      	lsls	r2, r3, #31
 800fbc8:	d405      	bmi.n	800fbd6 <__svfiscanf_r+0x33e>
 800fbca:	89a3      	ldrh	r3, [r4, #12]
 800fbcc:	059b      	lsls	r3, r3, #22
 800fbce:	d402      	bmi.n	800fbd6 <__svfiscanf_r+0x33e>
 800fbd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fbd2:	f7ff f9a5 	bl	800ef20 <__retarget_lock_release_recursive>
 800fbd6:	9844      	ldr	r0, [sp, #272]	; 0x110
 800fbd8:	e753      	b.n	800fa82 <__svfiscanf_r+0x1ea>
 800fbda:	bf00      	nop
 800fbdc:	00000000 	.word	0x00000000

0800fbe0 <_vfiscanf_r>:
 800fbe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fbe2:	460c      	mov	r4, r1
 800fbe4:	4605      	mov	r5, r0
 800fbe6:	b138      	cbz	r0, 800fbf8 <_vfiscanf_r+0x18>
 800fbe8:	6981      	ldr	r1, [r0, #24]
 800fbea:	b929      	cbnz	r1, 800fbf8 <_vfiscanf_r+0x18>
 800fbec:	e9cd 2300 	strd	r2, r3, [sp]
 800fbf0:	f7ff f8da 	bl	800eda8 <__sinit>
 800fbf4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fbf8:	490a      	ldr	r1, [pc, #40]	; (800fc24 <_vfiscanf_r+0x44>)
 800fbfa:	428c      	cmp	r4, r1
 800fbfc:	d107      	bne.n	800fc0e <_vfiscanf_r+0x2e>
 800fbfe:	686c      	ldr	r4, [r5, #4]
 800fc00:	4621      	mov	r1, r4
 800fc02:	4628      	mov	r0, r5
 800fc04:	b003      	add	sp, #12
 800fc06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fc0a:	f7ff be45 	b.w	800f898 <__svfiscanf_r>
 800fc0e:	4906      	ldr	r1, [pc, #24]	; (800fc28 <_vfiscanf_r+0x48>)
 800fc10:	428c      	cmp	r4, r1
 800fc12:	d101      	bne.n	800fc18 <_vfiscanf_r+0x38>
 800fc14:	68ac      	ldr	r4, [r5, #8]
 800fc16:	e7f3      	b.n	800fc00 <_vfiscanf_r+0x20>
 800fc18:	4904      	ldr	r1, [pc, #16]	; (800fc2c <_vfiscanf_r+0x4c>)
 800fc1a:	428c      	cmp	r4, r1
 800fc1c:	bf08      	it	eq
 800fc1e:	68ec      	ldreq	r4, [r5, #12]
 800fc20:	e7ee      	b.n	800fc00 <_vfiscanf_r+0x20>
 800fc22:	bf00      	nop
 800fc24:	080110c4 	.word	0x080110c4
 800fc28:	080110e4 	.word	0x080110e4
 800fc2c:	080110a4 	.word	0x080110a4

0800fc30 <_scanf_chars>:
 800fc30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc34:	4615      	mov	r5, r2
 800fc36:	688a      	ldr	r2, [r1, #8]
 800fc38:	4680      	mov	r8, r0
 800fc3a:	460c      	mov	r4, r1
 800fc3c:	b932      	cbnz	r2, 800fc4c <_scanf_chars+0x1c>
 800fc3e:	698a      	ldr	r2, [r1, #24]
 800fc40:	2a00      	cmp	r2, #0
 800fc42:	bf0c      	ite	eq
 800fc44:	2201      	moveq	r2, #1
 800fc46:	f04f 32ff 	movne.w	r2, #4294967295
 800fc4a:	608a      	str	r2, [r1, #8]
 800fc4c:	6822      	ldr	r2, [r4, #0]
 800fc4e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800fcdc <_scanf_chars+0xac>
 800fc52:	06d1      	lsls	r1, r2, #27
 800fc54:	bf5f      	itttt	pl
 800fc56:	681a      	ldrpl	r2, [r3, #0]
 800fc58:	1d11      	addpl	r1, r2, #4
 800fc5a:	6019      	strpl	r1, [r3, #0]
 800fc5c:	6816      	ldrpl	r6, [r2, #0]
 800fc5e:	2700      	movs	r7, #0
 800fc60:	69a0      	ldr	r0, [r4, #24]
 800fc62:	b188      	cbz	r0, 800fc88 <_scanf_chars+0x58>
 800fc64:	2801      	cmp	r0, #1
 800fc66:	d107      	bne.n	800fc78 <_scanf_chars+0x48>
 800fc68:	682b      	ldr	r3, [r5, #0]
 800fc6a:	781a      	ldrb	r2, [r3, #0]
 800fc6c:	6963      	ldr	r3, [r4, #20]
 800fc6e:	5c9b      	ldrb	r3, [r3, r2]
 800fc70:	b953      	cbnz	r3, 800fc88 <_scanf_chars+0x58>
 800fc72:	bb27      	cbnz	r7, 800fcbe <_scanf_chars+0x8e>
 800fc74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc78:	2802      	cmp	r0, #2
 800fc7a:	d120      	bne.n	800fcbe <_scanf_chars+0x8e>
 800fc7c:	682b      	ldr	r3, [r5, #0]
 800fc7e:	781b      	ldrb	r3, [r3, #0]
 800fc80:	f813 3009 	ldrb.w	r3, [r3, r9]
 800fc84:	071b      	lsls	r3, r3, #28
 800fc86:	d41a      	bmi.n	800fcbe <_scanf_chars+0x8e>
 800fc88:	6823      	ldr	r3, [r4, #0]
 800fc8a:	06da      	lsls	r2, r3, #27
 800fc8c:	bf5e      	ittt	pl
 800fc8e:	682b      	ldrpl	r3, [r5, #0]
 800fc90:	781b      	ldrbpl	r3, [r3, #0]
 800fc92:	f806 3b01 	strbpl.w	r3, [r6], #1
 800fc96:	682a      	ldr	r2, [r5, #0]
 800fc98:	686b      	ldr	r3, [r5, #4]
 800fc9a:	3201      	adds	r2, #1
 800fc9c:	602a      	str	r2, [r5, #0]
 800fc9e:	68a2      	ldr	r2, [r4, #8]
 800fca0:	3b01      	subs	r3, #1
 800fca2:	3a01      	subs	r2, #1
 800fca4:	606b      	str	r3, [r5, #4]
 800fca6:	3701      	adds	r7, #1
 800fca8:	60a2      	str	r2, [r4, #8]
 800fcaa:	b142      	cbz	r2, 800fcbe <_scanf_chars+0x8e>
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	dcd7      	bgt.n	800fc60 <_scanf_chars+0x30>
 800fcb0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800fcb4:	4629      	mov	r1, r5
 800fcb6:	4640      	mov	r0, r8
 800fcb8:	4798      	blx	r3
 800fcba:	2800      	cmp	r0, #0
 800fcbc:	d0d0      	beq.n	800fc60 <_scanf_chars+0x30>
 800fcbe:	6823      	ldr	r3, [r4, #0]
 800fcc0:	f013 0310 	ands.w	r3, r3, #16
 800fcc4:	d105      	bne.n	800fcd2 <_scanf_chars+0xa2>
 800fcc6:	68e2      	ldr	r2, [r4, #12]
 800fcc8:	3201      	adds	r2, #1
 800fcca:	60e2      	str	r2, [r4, #12]
 800fccc:	69a2      	ldr	r2, [r4, #24]
 800fcce:	b102      	cbz	r2, 800fcd2 <_scanf_chars+0xa2>
 800fcd0:	7033      	strb	r3, [r6, #0]
 800fcd2:	6923      	ldr	r3, [r4, #16]
 800fcd4:	441f      	add	r7, r3
 800fcd6:	6127      	str	r7, [r4, #16]
 800fcd8:	2000      	movs	r0, #0
 800fcda:	e7cb      	b.n	800fc74 <_scanf_chars+0x44>
 800fcdc:	08011153 	.word	0x08011153

0800fce0 <_scanf_i>:
 800fce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fce4:	4698      	mov	r8, r3
 800fce6:	4b74      	ldr	r3, [pc, #464]	; (800feb8 <_scanf_i+0x1d8>)
 800fce8:	460c      	mov	r4, r1
 800fcea:	4682      	mov	sl, r0
 800fcec:	4616      	mov	r6, r2
 800fcee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fcf2:	b087      	sub	sp, #28
 800fcf4:	ab03      	add	r3, sp, #12
 800fcf6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fcfa:	4b70      	ldr	r3, [pc, #448]	; (800febc <_scanf_i+0x1dc>)
 800fcfc:	69a1      	ldr	r1, [r4, #24]
 800fcfe:	4a70      	ldr	r2, [pc, #448]	; (800fec0 <_scanf_i+0x1e0>)
 800fd00:	2903      	cmp	r1, #3
 800fd02:	bf18      	it	ne
 800fd04:	461a      	movne	r2, r3
 800fd06:	68a3      	ldr	r3, [r4, #8]
 800fd08:	9201      	str	r2, [sp, #4]
 800fd0a:	1e5a      	subs	r2, r3, #1
 800fd0c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800fd10:	bf88      	it	hi
 800fd12:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800fd16:	4627      	mov	r7, r4
 800fd18:	bf82      	ittt	hi
 800fd1a:	eb03 0905 	addhi.w	r9, r3, r5
 800fd1e:	f240 135d 	movwhi	r3, #349	; 0x15d
 800fd22:	60a3      	strhi	r3, [r4, #8]
 800fd24:	f857 3b1c 	ldr.w	r3, [r7], #28
 800fd28:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800fd2c:	bf98      	it	ls
 800fd2e:	f04f 0900 	movls.w	r9, #0
 800fd32:	6023      	str	r3, [r4, #0]
 800fd34:	463d      	mov	r5, r7
 800fd36:	f04f 0b00 	mov.w	fp, #0
 800fd3a:	6831      	ldr	r1, [r6, #0]
 800fd3c:	ab03      	add	r3, sp, #12
 800fd3e:	7809      	ldrb	r1, [r1, #0]
 800fd40:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800fd44:	2202      	movs	r2, #2
 800fd46:	f7f0 fa5b 	bl	8000200 <memchr>
 800fd4a:	b328      	cbz	r0, 800fd98 <_scanf_i+0xb8>
 800fd4c:	f1bb 0f01 	cmp.w	fp, #1
 800fd50:	d159      	bne.n	800fe06 <_scanf_i+0x126>
 800fd52:	6862      	ldr	r2, [r4, #4]
 800fd54:	b92a      	cbnz	r2, 800fd62 <_scanf_i+0x82>
 800fd56:	6822      	ldr	r2, [r4, #0]
 800fd58:	2308      	movs	r3, #8
 800fd5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fd5e:	6063      	str	r3, [r4, #4]
 800fd60:	6022      	str	r2, [r4, #0]
 800fd62:	6822      	ldr	r2, [r4, #0]
 800fd64:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800fd68:	6022      	str	r2, [r4, #0]
 800fd6a:	68a2      	ldr	r2, [r4, #8]
 800fd6c:	1e51      	subs	r1, r2, #1
 800fd6e:	60a1      	str	r1, [r4, #8]
 800fd70:	b192      	cbz	r2, 800fd98 <_scanf_i+0xb8>
 800fd72:	6832      	ldr	r2, [r6, #0]
 800fd74:	1c51      	adds	r1, r2, #1
 800fd76:	6031      	str	r1, [r6, #0]
 800fd78:	7812      	ldrb	r2, [r2, #0]
 800fd7a:	f805 2b01 	strb.w	r2, [r5], #1
 800fd7e:	6872      	ldr	r2, [r6, #4]
 800fd80:	3a01      	subs	r2, #1
 800fd82:	2a00      	cmp	r2, #0
 800fd84:	6072      	str	r2, [r6, #4]
 800fd86:	dc07      	bgt.n	800fd98 <_scanf_i+0xb8>
 800fd88:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800fd8c:	4631      	mov	r1, r6
 800fd8e:	4650      	mov	r0, sl
 800fd90:	4790      	blx	r2
 800fd92:	2800      	cmp	r0, #0
 800fd94:	f040 8085 	bne.w	800fea2 <_scanf_i+0x1c2>
 800fd98:	f10b 0b01 	add.w	fp, fp, #1
 800fd9c:	f1bb 0f03 	cmp.w	fp, #3
 800fda0:	d1cb      	bne.n	800fd3a <_scanf_i+0x5a>
 800fda2:	6863      	ldr	r3, [r4, #4]
 800fda4:	b90b      	cbnz	r3, 800fdaa <_scanf_i+0xca>
 800fda6:	230a      	movs	r3, #10
 800fda8:	6063      	str	r3, [r4, #4]
 800fdaa:	6863      	ldr	r3, [r4, #4]
 800fdac:	4945      	ldr	r1, [pc, #276]	; (800fec4 <_scanf_i+0x1e4>)
 800fdae:	6960      	ldr	r0, [r4, #20]
 800fdb0:	1ac9      	subs	r1, r1, r3
 800fdb2:	f000 f965 	bl	8010080 <__sccl>
 800fdb6:	f04f 0b00 	mov.w	fp, #0
 800fdba:	68a3      	ldr	r3, [r4, #8]
 800fdbc:	6822      	ldr	r2, [r4, #0]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d03d      	beq.n	800fe3e <_scanf_i+0x15e>
 800fdc2:	6831      	ldr	r1, [r6, #0]
 800fdc4:	6960      	ldr	r0, [r4, #20]
 800fdc6:	f891 c000 	ldrb.w	ip, [r1]
 800fdca:	f810 000c 	ldrb.w	r0, [r0, ip]
 800fdce:	2800      	cmp	r0, #0
 800fdd0:	d035      	beq.n	800fe3e <_scanf_i+0x15e>
 800fdd2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800fdd6:	d124      	bne.n	800fe22 <_scanf_i+0x142>
 800fdd8:	0510      	lsls	r0, r2, #20
 800fdda:	d522      	bpl.n	800fe22 <_scanf_i+0x142>
 800fddc:	f10b 0b01 	add.w	fp, fp, #1
 800fde0:	f1b9 0f00 	cmp.w	r9, #0
 800fde4:	d003      	beq.n	800fdee <_scanf_i+0x10e>
 800fde6:	3301      	adds	r3, #1
 800fde8:	f109 39ff 	add.w	r9, r9, #4294967295
 800fdec:	60a3      	str	r3, [r4, #8]
 800fdee:	6873      	ldr	r3, [r6, #4]
 800fdf0:	3b01      	subs	r3, #1
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	6073      	str	r3, [r6, #4]
 800fdf6:	dd1b      	ble.n	800fe30 <_scanf_i+0x150>
 800fdf8:	6833      	ldr	r3, [r6, #0]
 800fdfa:	3301      	adds	r3, #1
 800fdfc:	6033      	str	r3, [r6, #0]
 800fdfe:	68a3      	ldr	r3, [r4, #8]
 800fe00:	3b01      	subs	r3, #1
 800fe02:	60a3      	str	r3, [r4, #8]
 800fe04:	e7d9      	b.n	800fdba <_scanf_i+0xda>
 800fe06:	f1bb 0f02 	cmp.w	fp, #2
 800fe0a:	d1ae      	bne.n	800fd6a <_scanf_i+0x8a>
 800fe0c:	6822      	ldr	r2, [r4, #0]
 800fe0e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800fe12:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800fe16:	d1bf      	bne.n	800fd98 <_scanf_i+0xb8>
 800fe18:	2310      	movs	r3, #16
 800fe1a:	6063      	str	r3, [r4, #4]
 800fe1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fe20:	e7a2      	b.n	800fd68 <_scanf_i+0x88>
 800fe22:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800fe26:	6022      	str	r2, [r4, #0]
 800fe28:	780b      	ldrb	r3, [r1, #0]
 800fe2a:	f805 3b01 	strb.w	r3, [r5], #1
 800fe2e:	e7de      	b.n	800fdee <_scanf_i+0x10e>
 800fe30:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800fe34:	4631      	mov	r1, r6
 800fe36:	4650      	mov	r0, sl
 800fe38:	4798      	blx	r3
 800fe3a:	2800      	cmp	r0, #0
 800fe3c:	d0df      	beq.n	800fdfe <_scanf_i+0x11e>
 800fe3e:	6823      	ldr	r3, [r4, #0]
 800fe40:	05d9      	lsls	r1, r3, #23
 800fe42:	d50d      	bpl.n	800fe60 <_scanf_i+0x180>
 800fe44:	42bd      	cmp	r5, r7
 800fe46:	d909      	bls.n	800fe5c <_scanf_i+0x17c>
 800fe48:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800fe4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fe50:	4632      	mov	r2, r6
 800fe52:	4650      	mov	r0, sl
 800fe54:	4798      	blx	r3
 800fe56:	f105 39ff 	add.w	r9, r5, #4294967295
 800fe5a:	464d      	mov	r5, r9
 800fe5c:	42bd      	cmp	r5, r7
 800fe5e:	d028      	beq.n	800feb2 <_scanf_i+0x1d2>
 800fe60:	6822      	ldr	r2, [r4, #0]
 800fe62:	f012 0210 	ands.w	r2, r2, #16
 800fe66:	d113      	bne.n	800fe90 <_scanf_i+0x1b0>
 800fe68:	702a      	strb	r2, [r5, #0]
 800fe6a:	6863      	ldr	r3, [r4, #4]
 800fe6c:	9e01      	ldr	r6, [sp, #4]
 800fe6e:	4639      	mov	r1, r7
 800fe70:	4650      	mov	r0, sl
 800fe72:	47b0      	blx	r6
 800fe74:	f8d8 3000 	ldr.w	r3, [r8]
 800fe78:	6821      	ldr	r1, [r4, #0]
 800fe7a:	1d1a      	adds	r2, r3, #4
 800fe7c:	f8c8 2000 	str.w	r2, [r8]
 800fe80:	f011 0f20 	tst.w	r1, #32
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	d00f      	beq.n	800fea8 <_scanf_i+0x1c8>
 800fe88:	6018      	str	r0, [r3, #0]
 800fe8a:	68e3      	ldr	r3, [r4, #12]
 800fe8c:	3301      	adds	r3, #1
 800fe8e:	60e3      	str	r3, [r4, #12]
 800fe90:	1bed      	subs	r5, r5, r7
 800fe92:	44ab      	add	fp, r5
 800fe94:	6925      	ldr	r5, [r4, #16]
 800fe96:	445d      	add	r5, fp
 800fe98:	6125      	str	r5, [r4, #16]
 800fe9a:	2000      	movs	r0, #0
 800fe9c:	b007      	add	sp, #28
 800fe9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fea2:	f04f 0b00 	mov.w	fp, #0
 800fea6:	e7ca      	b.n	800fe3e <_scanf_i+0x15e>
 800fea8:	07ca      	lsls	r2, r1, #31
 800feaa:	bf4c      	ite	mi
 800feac:	8018      	strhmi	r0, [r3, #0]
 800feae:	6018      	strpl	r0, [r3, #0]
 800feb0:	e7eb      	b.n	800fe8a <_scanf_i+0x1aa>
 800feb2:	2001      	movs	r0, #1
 800feb4:	e7f2      	b.n	800fe9c <_scanf_i+0x1bc>
 800feb6:	bf00      	nop
 800feb8:	08010c28 	.word	0x08010c28
 800febc:	08010381 	.word	0x08010381
 800fec0:	08010285 	.word	0x08010285
 800fec4:	08011150 	.word	0x08011150

0800fec8 <_putc_r>:
 800fec8:	b570      	push	{r4, r5, r6, lr}
 800feca:	460d      	mov	r5, r1
 800fecc:	4614      	mov	r4, r2
 800fece:	4606      	mov	r6, r0
 800fed0:	b118      	cbz	r0, 800feda <_putc_r+0x12>
 800fed2:	6983      	ldr	r3, [r0, #24]
 800fed4:	b90b      	cbnz	r3, 800feda <_putc_r+0x12>
 800fed6:	f7fe ff67 	bl	800eda8 <__sinit>
 800feda:	4b1c      	ldr	r3, [pc, #112]	; (800ff4c <_putc_r+0x84>)
 800fedc:	429c      	cmp	r4, r3
 800fede:	d124      	bne.n	800ff2a <_putc_r+0x62>
 800fee0:	6874      	ldr	r4, [r6, #4]
 800fee2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fee4:	07d8      	lsls	r0, r3, #31
 800fee6:	d405      	bmi.n	800fef4 <_putc_r+0x2c>
 800fee8:	89a3      	ldrh	r3, [r4, #12]
 800feea:	0599      	lsls	r1, r3, #22
 800feec:	d402      	bmi.n	800fef4 <_putc_r+0x2c>
 800feee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fef0:	f7ff f815 	bl	800ef1e <__retarget_lock_acquire_recursive>
 800fef4:	68a3      	ldr	r3, [r4, #8]
 800fef6:	3b01      	subs	r3, #1
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	60a3      	str	r3, [r4, #8]
 800fefc:	da05      	bge.n	800ff0a <_putc_r+0x42>
 800fefe:	69a2      	ldr	r2, [r4, #24]
 800ff00:	4293      	cmp	r3, r2
 800ff02:	db1c      	blt.n	800ff3e <_putc_r+0x76>
 800ff04:	b2eb      	uxtb	r3, r5
 800ff06:	2b0a      	cmp	r3, #10
 800ff08:	d019      	beq.n	800ff3e <_putc_r+0x76>
 800ff0a:	6823      	ldr	r3, [r4, #0]
 800ff0c:	1c5a      	adds	r2, r3, #1
 800ff0e:	6022      	str	r2, [r4, #0]
 800ff10:	701d      	strb	r5, [r3, #0]
 800ff12:	b2ed      	uxtb	r5, r5
 800ff14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ff16:	07da      	lsls	r2, r3, #31
 800ff18:	d405      	bmi.n	800ff26 <_putc_r+0x5e>
 800ff1a:	89a3      	ldrh	r3, [r4, #12]
 800ff1c:	059b      	lsls	r3, r3, #22
 800ff1e:	d402      	bmi.n	800ff26 <_putc_r+0x5e>
 800ff20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff22:	f7fe fffd 	bl	800ef20 <__retarget_lock_release_recursive>
 800ff26:	4628      	mov	r0, r5
 800ff28:	bd70      	pop	{r4, r5, r6, pc}
 800ff2a:	4b09      	ldr	r3, [pc, #36]	; (800ff50 <_putc_r+0x88>)
 800ff2c:	429c      	cmp	r4, r3
 800ff2e:	d101      	bne.n	800ff34 <_putc_r+0x6c>
 800ff30:	68b4      	ldr	r4, [r6, #8]
 800ff32:	e7d6      	b.n	800fee2 <_putc_r+0x1a>
 800ff34:	4b07      	ldr	r3, [pc, #28]	; (800ff54 <_putc_r+0x8c>)
 800ff36:	429c      	cmp	r4, r3
 800ff38:	bf08      	it	eq
 800ff3a:	68f4      	ldreq	r4, [r6, #12]
 800ff3c:	e7d1      	b.n	800fee2 <_putc_r+0x1a>
 800ff3e:	4629      	mov	r1, r5
 800ff40:	4622      	mov	r2, r4
 800ff42:	4630      	mov	r0, r6
 800ff44:	f7fe fd44 	bl	800e9d0 <__swbuf_r>
 800ff48:	4605      	mov	r5, r0
 800ff4a:	e7e3      	b.n	800ff14 <_putc_r+0x4c>
 800ff4c:	080110c4 	.word	0x080110c4
 800ff50:	080110e4 	.word	0x080110e4
 800ff54:	080110a4 	.word	0x080110a4

0800ff58 <lflush>:
 800ff58:	8983      	ldrh	r3, [r0, #12]
 800ff5a:	f003 0309 	and.w	r3, r3, #9
 800ff5e:	2b09      	cmp	r3, #9
 800ff60:	d101      	bne.n	800ff66 <lflush+0xe>
 800ff62:	f7fe beb7 	b.w	800ecd4 <fflush>
 800ff66:	2000      	movs	r0, #0
 800ff68:	4770      	bx	lr
	...

0800ff6c <__srefill_r>:
 800ff6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff6e:	460c      	mov	r4, r1
 800ff70:	4605      	mov	r5, r0
 800ff72:	b118      	cbz	r0, 800ff7c <__srefill_r+0x10>
 800ff74:	6983      	ldr	r3, [r0, #24]
 800ff76:	b90b      	cbnz	r3, 800ff7c <__srefill_r+0x10>
 800ff78:	f7fe ff16 	bl	800eda8 <__sinit>
 800ff7c:	4b3b      	ldr	r3, [pc, #236]	; (801006c <__srefill_r+0x100>)
 800ff7e:	429c      	cmp	r4, r3
 800ff80:	d10a      	bne.n	800ff98 <__srefill_r+0x2c>
 800ff82:	686c      	ldr	r4, [r5, #4]
 800ff84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ff88:	2300      	movs	r3, #0
 800ff8a:	6063      	str	r3, [r4, #4]
 800ff8c:	89a3      	ldrh	r3, [r4, #12]
 800ff8e:	069e      	lsls	r6, r3, #26
 800ff90:	d50c      	bpl.n	800ffac <__srefill_r+0x40>
 800ff92:	f04f 30ff 	mov.w	r0, #4294967295
 800ff96:	e066      	b.n	8010066 <__srefill_r+0xfa>
 800ff98:	4b35      	ldr	r3, [pc, #212]	; (8010070 <__srefill_r+0x104>)
 800ff9a:	429c      	cmp	r4, r3
 800ff9c:	d101      	bne.n	800ffa2 <__srefill_r+0x36>
 800ff9e:	68ac      	ldr	r4, [r5, #8]
 800ffa0:	e7f0      	b.n	800ff84 <__srefill_r+0x18>
 800ffa2:	4b34      	ldr	r3, [pc, #208]	; (8010074 <__srefill_r+0x108>)
 800ffa4:	429c      	cmp	r4, r3
 800ffa6:	bf08      	it	eq
 800ffa8:	68ec      	ldreq	r4, [r5, #12]
 800ffaa:	e7eb      	b.n	800ff84 <__srefill_r+0x18>
 800ffac:	0758      	lsls	r0, r3, #29
 800ffae:	d448      	bmi.n	8010042 <__srefill_r+0xd6>
 800ffb0:	06d9      	lsls	r1, r3, #27
 800ffb2:	d405      	bmi.n	800ffc0 <__srefill_r+0x54>
 800ffb4:	2309      	movs	r3, #9
 800ffb6:	602b      	str	r3, [r5, #0]
 800ffb8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ffbc:	81a3      	strh	r3, [r4, #12]
 800ffbe:	e7e8      	b.n	800ff92 <__srefill_r+0x26>
 800ffc0:	071a      	lsls	r2, r3, #28
 800ffc2:	d50b      	bpl.n	800ffdc <__srefill_r+0x70>
 800ffc4:	4621      	mov	r1, r4
 800ffc6:	4628      	mov	r0, r5
 800ffc8:	f7fe fe48 	bl	800ec5c <_fflush_r>
 800ffcc:	2800      	cmp	r0, #0
 800ffce:	d1e0      	bne.n	800ff92 <__srefill_r+0x26>
 800ffd0:	89a3      	ldrh	r3, [r4, #12]
 800ffd2:	60a0      	str	r0, [r4, #8]
 800ffd4:	f023 0308 	bic.w	r3, r3, #8
 800ffd8:	81a3      	strh	r3, [r4, #12]
 800ffda:	61a0      	str	r0, [r4, #24]
 800ffdc:	89a3      	ldrh	r3, [r4, #12]
 800ffde:	f043 0304 	orr.w	r3, r3, #4
 800ffe2:	81a3      	strh	r3, [r4, #12]
 800ffe4:	6923      	ldr	r3, [r4, #16]
 800ffe6:	b91b      	cbnz	r3, 800fff0 <__srefill_r+0x84>
 800ffe8:	4621      	mov	r1, r4
 800ffea:	4628      	mov	r0, r5
 800ffec:	f7fe ffbe 	bl	800ef6c <__smakebuf_r>
 800fff0:	89a6      	ldrh	r6, [r4, #12]
 800fff2:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800fff6:	07b3      	lsls	r3, r6, #30
 800fff8:	d00f      	beq.n	801001a <__srefill_r+0xae>
 800fffa:	2301      	movs	r3, #1
 800fffc:	81a3      	strh	r3, [r4, #12]
 800fffe:	4b1e      	ldr	r3, [pc, #120]	; (8010078 <__srefill_r+0x10c>)
 8010000:	491e      	ldr	r1, [pc, #120]	; (801007c <__srefill_r+0x110>)
 8010002:	6818      	ldr	r0, [r3, #0]
 8010004:	f006 0609 	and.w	r6, r6, #9
 8010008:	f7fe ff4c 	bl	800eea4 <_fwalk>
 801000c:	2e09      	cmp	r6, #9
 801000e:	81a7      	strh	r7, [r4, #12]
 8010010:	d103      	bne.n	801001a <__srefill_r+0xae>
 8010012:	4621      	mov	r1, r4
 8010014:	4628      	mov	r0, r5
 8010016:	f7fe fd9b 	bl	800eb50 <__sflush_r>
 801001a:	6922      	ldr	r2, [r4, #16]
 801001c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801001e:	6963      	ldr	r3, [r4, #20]
 8010020:	6a21      	ldr	r1, [r4, #32]
 8010022:	6022      	str	r2, [r4, #0]
 8010024:	4628      	mov	r0, r5
 8010026:	47b0      	blx	r6
 8010028:	2800      	cmp	r0, #0
 801002a:	6060      	str	r0, [r4, #4]
 801002c:	dc1c      	bgt.n	8010068 <__srefill_r+0xfc>
 801002e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010032:	bf17      	itett	ne
 8010034:	2200      	movne	r2, #0
 8010036:	f043 0320 	orreq.w	r3, r3, #32
 801003a:	6062      	strne	r2, [r4, #4]
 801003c:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8010040:	e7bc      	b.n	800ffbc <__srefill_r+0x50>
 8010042:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010044:	2900      	cmp	r1, #0
 8010046:	d0cd      	beq.n	800ffe4 <__srefill_r+0x78>
 8010048:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801004c:	4299      	cmp	r1, r3
 801004e:	d002      	beq.n	8010056 <__srefill_r+0xea>
 8010050:	4628      	mov	r0, r5
 8010052:	f7fe fa61 	bl	800e518 <_free_r>
 8010056:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010058:	6063      	str	r3, [r4, #4]
 801005a:	2000      	movs	r0, #0
 801005c:	6360      	str	r0, [r4, #52]	; 0x34
 801005e:	2b00      	cmp	r3, #0
 8010060:	d0c0      	beq.n	800ffe4 <__srefill_r+0x78>
 8010062:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010064:	6023      	str	r3, [r4, #0]
 8010066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010068:	2000      	movs	r0, #0
 801006a:	e7fc      	b.n	8010066 <__srefill_r+0xfa>
 801006c:	080110c4 	.word	0x080110c4
 8010070:	080110e4 	.word	0x080110e4
 8010074:	080110a4 	.word	0x080110a4
 8010078:	080110a0 	.word	0x080110a0
 801007c:	0800ff59 	.word	0x0800ff59

08010080 <__sccl>:
 8010080:	b570      	push	{r4, r5, r6, lr}
 8010082:	780b      	ldrb	r3, [r1, #0]
 8010084:	4604      	mov	r4, r0
 8010086:	2b5e      	cmp	r3, #94	; 0x5e
 8010088:	bf0b      	itete	eq
 801008a:	784b      	ldrbeq	r3, [r1, #1]
 801008c:	1c48      	addne	r0, r1, #1
 801008e:	1c88      	addeq	r0, r1, #2
 8010090:	2200      	movne	r2, #0
 8010092:	bf08      	it	eq
 8010094:	2201      	moveq	r2, #1
 8010096:	1e61      	subs	r1, r4, #1
 8010098:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801009c:	f801 2f01 	strb.w	r2, [r1, #1]!
 80100a0:	42a9      	cmp	r1, r5
 80100a2:	d1fb      	bne.n	801009c <__sccl+0x1c>
 80100a4:	b90b      	cbnz	r3, 80100aa <__sccl+0x2a>
 80100a6:	3801      	subs	r0, #1
 80100a8:	bd70      	pop	{r4, r5, r6, pc}
 80100aa:	f082 0101 	eor.w	r1, r2, #1
 80100ae:	54e1      	strb	r1, [r4, r3]
 80100b0:	1c42      	adds	r2, r0, #1
 80100b2:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 80100b6:	2d2d      	cmp	r5, #45	; 0x2d
 80100b8:	f102 36ff 	add.w	r6, r2, #4294967295
 80100bc:	4610      	mov	r0, r2
 80100be:	d006      	beq.n	80100ce <__sccl+0x4e>
 80100c0:	2d5d      	cmp	r5, #93	; 0x5d
 80100c2:	d0f1      	beq.n	80100a8 <__sccl+0x28>
 80100c4:	b90d      	cbnz	r5, 80100ca <__sccl+0x4a>
 80100c6:	4630      	mov	r0, r6
 80100c8:	e7ee      	b.n	80100a8 <__sccl+0x28>
 80100ca:	462b      	mov	r3, r5
 80100cc:	e7ef      	b.n	80100ae <__sccl+0x2e>
 80100ce:	7816      	ldrb	r6, [r2, #0]
 80100d0:	2e5d      	cmp	r6, #93	; 0x5d
 80100d2:	d0fa      	beq.n	80100ca <__sccl+0x4a>
 80100d4:	42b3      	cmp	r3, r6
 80100d6:	dcf8      	bgt.n	80100ca <__sccl+0x4a>
 80100d8:	4618      	mov	r0, r3
 80100da:	3001      	adds	r0, #1
 80100dc:	4286      	cmp	r6, r0
 80100de:	5421      	strb	r1, [r4, r0]
 80100e0:	dcfb      	bgt.n	80100da <__sccl+0x5a>
 80100e2:	43d8      	mvns	r0, r3
 80100e4:	4430      	add	r0, r6
 80100e6:	1c5d      	adds	r5, r3, #1
 80100e8:	42b3      	cmp	r3, r6
 80100ea:	bfa8      	it	ge
 80100ec:	2000      	movge	r0, #0
 80100ee:	182b      	adds	r3, r5, r0
 80100f0:	3202      	adds	r2, #2
 80100f2:	e7de      	b.n	80100b2 <__sccl+0x32>

080100f4 <__sread>:
 80100f4:	b510      	push	{r4, lr}
 80100f6:	460c      	mov	r4, r1
 80100f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100fc:	f000 faaa 	bl	8010654 <_read_r>
 8010100:	2800      	cmp	r0, #0
 8010102:	bfab      	itete	ge
 8010104:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010106:	89a3      	ldrhlt	r3, [r4, #12]
 8010108:	181b      	addge	r3, r3, r0
 801010a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801010e:	bfac      	ite	ge
 8010110:	6563      	strge	r3, [r4, #84]	; 0x54
 8010112:	81a3      	strhlt	r3, [r4, #12]
 8010114:	bd10      	pop	{r4, pc}

08010116 <__swrite>:
 8010116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801011a:	461f      	mov	r7, r3
 801011c:	898b      	ldrh	r3, [r1, #12]
 801011e:	05db      	lsls	r3, r3, #23
 8010120:	4605      	mov	r5, r0
 8010122:	460c      	mov	r4, r1
 8010124:	4616      	mov	r6, r2
 8010126:	d505      	bpl.n	8010134 <__swrite+0x1e>
 8010128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801012c:	2302      	movs	r3, #2
 801012e:	2200      	movs	r2, #0
 8010130:	f000 fa3e 	bl	80105b0 <_lseek_r>
 8010134:	89a3      	ldrh	r3, [r4, #12]
 8010136:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801013a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801013e:	81a3      	strh	r3, [r4, #12]
 8010140:	4632      	mov	r2, r6
 8010142:	463b      	mov	r3, r7
 8010144:	4628      	mov	r0, r5
 8010146:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801014a:	f000 b9ed 	b.w	8010528 <_write_r>

0801014e <__sseek>:
 801014e:	b510      	push	{r4, lr}
 8010150:	460c      	mov	r4, r1
 8010152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010156:	f000 fa2b 	bl	80105b0 <_lseek_r>
 801015a:	1c43      	adds	r3, r0, #1
 801015c:	89a3      	ldrh	r3, [r4, #12]
 801015e:	bf15      	itete	ne
 8010160:	6560      	strne	r0, [r4, #84]	; 0x54
 8010162:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010166:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801016a:	81a3      	strheq	r3, [r4, #12]
 801016c:	bf18      	it	ne
 801016e:	81a3      	strhne	r3, [r4, #12]
 8010170:	bd10      	pop	{r4, pc}

08010172 <__sclose>:
 8010172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010176:	f000 b9e9 	b.w	801054c <_close_r>
	...

0801017c <_strtol_l.isra.0>:
 801017c:	2b01      	cmp	r3, #1
 801017e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010182:	d001      	beq.n	8010188 <_strtol_l.isra.0+0xc>
 8010184:	2b24      	cmp	r3, #36	; 0x24
 8010186:	d906      	bls.n	8010196 <_strtol_l.isra.0+0x1a>
 8010188:	f7fe f976 	bl	800e478 <__errno>
 801018c:	2316      	movs	r3, #22
 801018e:	6003      	str	r3, [r0, #0]
 8010190:	2000      	movs	r0, #0
 8010192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010196:	4f3a      	ldr	r7, [pc, #232]	; (8010280 <_strtol_l.isra.0+0x104>)
 8010198:	468e      	mov	lr, r1
 801019a:	4676      	mov	r6, lr
 801019c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80101a0:	5de5      	ldrb	r5, [r4, r7]
 80101a2:	f015 0508 	ands.w	r5, r5, #8
 80101a6:	d1f8      	bne.n	801019a <_strtol_l.isra.0+0x1e>
 80101a8:	2c2d      	cmp	r4, #45	; 0x2d
 80101aa:	d134      	bne.n	8010216 <_strtol_l.isra.0+0x9a>
 80101ac:	f89e 4000 	ldrb.w	r4, [lr]
 80101b0:	f04f 0801 	mov.w	r8, #1
 80101b4:	f106 0e02 	add.w	lr, r6, #2
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d05c      	beq.n	8010276 <_strtol_l.isra.0+0xfa>
 80101bc:	2b10      	cmp	r3, #16
 80101be:	d10c      	bne.n	80101da <_strtol_l.isra.0+0x5e>
 80101c0:	2c30      	cmp	r4, #48	; 0x30
 80101c2:	d10a      	bne.n	80101da <_strtol_l.isra.0+0x5e>
 80101c4:	f89e 4000 	ldrb.w	r4, [lr]
 80101c8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80101cc:	2c58      	cmp	r4, #88	; 0x58
 80101ce:	d14d      	bne.n	801026c <_strtol_l.isra.0+0xf0>
 80101d0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80101d4:	2310      	movs	r3, #16
 80101d6:	f10e 0e02 	add.w	lr, lr, #2
 80101da:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80101de:	f10c 3cff 	add.w	ip, ip, #4294967295
 80101e2:	2600      	movs	r6, #0
 80101e4:	fbbc f9f3 	udiv	r9, ip, r3
 80101e8:	4635      	mov	r5, r6
 80101ea:	fb03 ca19 	mls	sl, r3, r9, ip
 80101ee:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80101f2:	2f09      	cmp	r7, #9
 80101f4:	d818      	bhi.n	8010228 <_strtol_l.isra.0+0xac>
 80101f6:	463c      	mov	r4, r7
 80101f8:	42a3      	cmp	r3, r4
 80101fa:	dd24      	ble.n	8010246 <_strtol_l.isra.0+0xca>
 80101fc:	2e00      	cmp	r6, #0
 80101fe:	db1f      	blt.n	8010240 <_strtol_l.isra.0+0xc4>
 8010200:	45a9      	cmp	r9, r5
 8010202:	d31d      	bcc.n	8010240 <_strtol_l.isra.0+0xc4>
 8010204:	d101      	bne.n	801020a <_strtol_l.isra.0+0x8e>
 8010206:	45a2      	cmp	sl, r4
 8010208:	db1a      	blt.n	8010240 <_strtol_l.isra.0+0xc4>
 801020a:	fb05 4503 	mla	r5, r5, r3, r4
 801020e:	2601      	movs	r6, #1
 8010210:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8010214:	e7eb      	b.n	80101ee <_strtol_l.isra.0+0x72>
 8010216:	2c2b      	cmp	r4, #43	; 0x2b
 8010218:	bf08      	it	eq
 801021a:	f89e 4000 	ldrbeq.w	r4, [lr]
 801021e:	46a8      	mov	r8, r5
 8010220:	bf08      	it	eq
 8010222:	f106 0e02 	addeq.w	lr, r6, #2
 8010226:	e7c7      	b.n	80101b8 <_strtol_l.isra.0+0x3c>
 8010228:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801022c:	2f19      	cmp	r7, #25
 801022e:	d801      	bhi.n	8010234 <_strtol_l.isra.0+0xb8>
 8010230:	3c37      	subs	r4, #55	; 0x37
 8010232:	e7e1      	b.n	80101f8 <_strtol_l.isra.0+0x7c>
 8010234:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8010238:	2f19      	cmp	r7, #25
 801023a:	d804      	bhi.n	8010246 <_strtol_l.isra.0+0xca>
 801023c:	3c57      	subs	r4, #87	; 0x57
 801023e:	e7db      	b.n	80101f8 <_strtol_l.isra.0+0x7c>
 8010240:	f04f 36ff 	mov.w	r6, #4294967295
 8010244:	e7e4      	b.n	8010210 <_strtol_l.isra.0+0x94>
 8010246:	2e00      	cmp	r6, #0
 8010248:	da05      	bge.n	8010256 <_strtol_l.isra.0+0xda>
 801024a:	2322      	movs	r3, #34	; 0x22
 801024c:	6003      	str	r3, [r0, #0]
 801024e:	4665      	mov	r5, ip
 8010250:	b942      	cbnz	r2, 8010264 <_strtol_l.isra.0+0xe8>
 8010252:	4628      	mov	r0, r5
 8010254:	e79d      	b.n	8010192 <_strtol_l.isra.0+0x16>
 8010256:	f1b8 0f00 	cmp.w	r8, #0
 801025a:	d000      	beq.n	801025e <_strtol_l.isra.0+0xe2>
 801025c:	426d      	negs	r5, r5
 801025e:	2a00      	cmp	r2, #0
 8010260:	d0f7      	beq.n	8010252 <_strtol_l.isra.0+0xd6>
 8010262:	b10e      	cbz	r6, 8010268 <_strtol_l.isra.0+0xec>
 8010264:	f10e 31ff 	add.w	r1, lr, #4294967295
 8010268:	6011      	str	r1, [r2, #0]
 801026a:	e7f2      	b.n	8010252 <_strtol_l.isra.0+0xd6>
 801026c:	2430      	movs	r4, #48	; 0x30
 801026e:	2b00      	cmp	r3, #0
 8010270:	d1b3      	bne.n	80101da <_strtol_l.isra.0+0x5e>
 8010272:	2308      	movs	r3, #8
 8010274:	e7b1      	b.n	80101da <_strtol_l.isra.0+0x5e>
 8010276:	2c30      	cmp	r4, #48	; 0x30
 8010278:	d0a4      	beq.n	80101c4 <_strtol_l.isra.0+0x48>
 801027a:	230a      	movs	r3, #10
 801027c:	e7ad      	b.n	80101da <_strtol_l.isra.0+0x5e>
 801027e:	bf00      	nop
 8010280:	08011153 	.word	0x08011153

08010284 <_strtol_r>:
 8010284:	f7ff bf7a 	b.w	801017c <_strtol_l.isra.0>

08010288 <_strtoul_l.isra.0>:
 8010288:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801028c:	4e3b      	ldr	r6, [pc, #236]	; (801037c <_strtoul_l.isra.0+0xf4>)
 801028e:	4686      	mov	lr, r0
 8010290:	468c      	mov	ip, r1
 8010292:	4660      	mov	r0, ip
 8010294:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8010298:	5da5      	ldrb	r5, [r4, r6]
 801029a:	f015 0508 	ands.w	r5, r5, #8
 801029e:	d1f8      	bne.n	8010292 <_strtoul_l.isra.0+0xa>
 80102a0:	2c2d      	cmp	r4, #45	; 0x2d
 80102a2:	d134      	bne.n	801030e <_strtoul_l.isra.0+0x86>
 80102a4:	f89c 4000 	ldrb.w	r4, [ip]
 80102a8:	f04f 0801 	mov.w	r8, #1
 80102ac:	f100 0c02 	add.w	ip, r0, #2
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d05e      	beq.n	8010372 <_strtoul_l.isra.0+0xea>
 80102b4:	2b10      	cmp	r3, #16
 80102b6:	d10c      	bne.n	80102d2 <_strtoul_l.isra.0+0x4a>
 80102b8:	2c30      	cmp	r4, #48	; 0x30
 80102ba:	d10a      	bne.n	80102d2 <_strtoul_l.isra.0+0x4a>
 80102bc:	f89c 0000 	ldrb.w	r0, [ip]
 80102c0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80102c4:	2858      	cmp	r0, #88	; 0x58
 80102c6:	d14f      	bne.n	8010368 <_strtoul_l.isra.0+0xe0>
 80102c8:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80102cc:	2310      	movs	r3, #16
 80102ce:	f10c 0c02 	add.w	ip, ip, #2
 80102d2:	f04f 37ff 	mov.w	r7, #4294967295
 80102d6:	2500      	movs	r5, #0
 80102d8:	fbb7 f7f3 	udiv	r7, r7, r3
 80102dc:	fb03 f907 	mul.w	r9, r3, r7
 80102e0:	ea6f 0909 	mvn.w	r9, r9
 80102e4:	4628      	mov	r0, r5
 80102e6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80102ea:	2e09      	cmp	r6, #9
 80102ec:	d818      	bhi.n	8010320 <_strtoul_l.isra.0+0x98>
 80102ee:	4634      	mov	r4, r6
 80102f0:	42a3      	cmp	r3, r4
 80102f2:	dd24      	ble.n	801033e <_strtoul_l.isra.0+0xb6>
 80102f4:	2d00      	cmp	r5, #0
 80102f6:	db1f      	blt.n	8010338 <_strtoul_l.isra.0+0xb0>
 80102f8:	4287      	cmp	r7, r0
 80102fa:	d31d      	bcc.n	8010338 <_strtoul_l.isra.0+0xb0>
 80102fc:	d101      	bne.n	8010302 <_strtoul_l.isra.0+0x7a>
 80102fe:	45a1      	cmp	r9, r4
 8010300:	db1a      	blt.n	8010338 <_strtoul_l.isra.0+0xb0>
 8010302:	fb00 4003 	mla	r0, r0, r3, r4
 8010306:	2501      	movs	r5, #1
 8010308:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801030c:	e7eb      	b.n	80102e6 <_strtoul_l.isra.0+0x5e>
 801030e:	2c2b      	cmp	r4, #43	; 0x2b
 8010310:	bf08      	it	eq
 8010312:	f89c 4000 	ldrbeq.w	r4, [ip]
 8010316:	46a8      	mov	r8, r5
 8010318:	bf08      	it	eq
 801031a:	f100 0c02 	addeq.w	ip, r0, #2
 801031e:	e7c7      	b.n	80102b0 <_strtoul_l.isra.0+0x28>
 8010320:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8010324:	2e19      	cmp	r6, #25
 8010326:	d801      	bhi.n	801032c <_strtoul_l.isra.0+0xa4>
 8010328:	3c37      	subs	r4, #55	; 0x37
 801032a:	e7e1      	b.n	80102f0 <_strtoul_l.isra.0+0x68>
 801032c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8010330:	2e19      	cmp	r6, #25
 8010332:	d804      	bhi.n	801033e <_strtoul_l.isra.0+0xb6>
 8010334:	3c57      	subs	r4, #87	; 0x57
 8010336:	e7db      	b.n	80102f0 <_strtoul_l.isra.0+0x68>
 8010338:	f04f 35ff 	mov.w	r5, #4294967295
 801033c:	e7e4      	b.n	8010308 <_strtoul_l.isra.0+0x80>
 801033e:	2d00      	cmp	r5, #0
 8010340:	da07      	bge.n	8010352 <_strtoul_l.isra.0+0xca>
 8010342:	2322      	movs	r3, #34	; 0x22
 8010344:	f8ce 3000 	str.w	r3, [lr]
 8010348:	f04f 30ff 	mov.w	r0, #4294967295
 801034c:	b942      	cbnz	r2, 8010360 <_strtoul_l.isra.0+0xd8>
 801034e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010352:	f1b8 0f00 	cmp.w	r8, #0
 8010356:	d000      	beq.n	801035a <_strtoul_l.isra.0+0xd2>
 8010358:	4240      	negs	r0, r0
 801035a:	2a00      	cmp	r2, #0
 801035c:	d0f7      	beq.n	801034e <_strtoul_l.isra.0+0xc6>
 801035e:	b10d      	cbz	r5, 8010364 <_strtoul_l.isra.0+0xdc>
 8010360:	f10c 31ff 	add.w	r1, ip, #4294967295
 8010364:	6011      	str	r1, [r2, #0]
 8010366:	e7f2      	b.n	801034e <_strtoul_l.isra.0+0xc6>
 8010368:	2430      	movs	r4, #48	; 0x30
 801036a:	2b00      	cmp	r3, #0
 801036c:	d1b1      	bne.n	80102d2 <_strtoul_l.isra.0+0x4a>
 801036e:	2308      	movs	r3, #8
 8010370:	e7af      	b.n	80102d2 <_strtoul_l.isra.0+0x4a>
 8010372:	2c30      	cmp	r4, #48	; 0x30
 8010374:	d0a2      	beq.n	80102bc <_strtoul_l.isra.0+0x34>
 8010376:	230a      	movs	r3, #10
 8010378:	e7ab      	b.n	80102d2 <_strtoul_l.isra.0+0x4a>
 801037a:	bf00      	nop
 801037c:	08011153 	.word	0x08011153

08010380 <_strtoul_r>:
 8010380:	f7ff bf82 	b.w	8010288 <_strtoul_l.isra.0>

08010384 <__submore>:
 8010384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010388:	460c      	mov	r4, r1
 801038a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801038c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010390:	4299      	cmp	r1, r3
 8010392:	d11d      	bne.n	80103d0 <__submore+0x4c>
 8010394:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010398:	f7fe f90e 	bl	800e5b8 <_malloc_r>
 801039c:	b918      	cbnz	r0, 80103a6 <__submore+0x22>
 801039e:	f04f 30ff 	mov.w	r0, #4294967295
 80103a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80103aa:	63a3      	str	r3, [r4, #56]	; 0x38
 80103ac:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80103b0:	6360      	str	r0, [r4, #52]	; 0x34
 80103b2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80103b6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80103ba:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80103be:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80103c2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80103c6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80103ca:	6020      	str	r0, [r4, #0]
 80103cc:	2000      	movs	r0, #0
 80103ce:	e7e8      	b.n	80103a2 <__submore+0x1e>
 80103d0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80103d2:	0077      	lsls	r7, r6, #1
 80103d4:	463a      	mov	r2, r7
 80103d6:	f000 f917 	bl	8010608 <_realloc_r>
 80103da:	4605      	mov	r5, r0
 80103dc:	2800      	cmp	r0, #0
 80103de:	d0de      	beq.n	801039e <__submore+0x1a>
 80103e0:	eb00 0806 	add.w	r8, r0, r6
 80103e4:	4601      	mov	r1, r0
 80103e6:	4632      	mov	r2, r6
 80103e8:	4640      	mov	r0, r8
 80103ea:	f7fe f87f 	bl	800e4ec <memcpy>
 80103ee:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80103f2:	f8c4 8000 	str.w	r8, [r4]
 80103f6:	e7e9      	b.n	80103cc <__submore+0x48>

080103f8 <_ungetc_r>:
 80103f8:	b570      	push	{r4, r5, r6, lr}
 80103fa:	4614      	mov	r4, r2
 80103fc:	1c4a      	adds	r2, r1, #1
 80103fe:	4606      	mov	r6, r0
 8010400:	460d      	mov	r5, r1
 8010402:	d103      	bne.n	801040c <_ungetc_r+0x14>
 8010404:	f04f 35ff 	mov.w	r5, #4294967295
 8010408:	4628      	mov	r0, r5
 801040a:	bd70      	pop	{r4, r5, r6, pc}
 801040c:	b118      	cbz	r0, 8010416 <_ungetc_r+0x1e>
 801040e:	6983      	ldr	r3, [r0, #24]
 8010410:	b90b      	cbnz	r3, 8010416 <_ungetc_r+0x1e>
 8010412:	f7fe fcc9 	bl	800eda8 <__sinit>
 8010416:	4b41      	ldr	r3, [pc, #260]	; (801051c <_ungetc_r+0x124>)
 8010418:	429c      	cmp	r4, r3
 801041a:	d11d      	bne.n	8010458 <_ungetc_r+0x60>
 801041c:	6874      	ldr	r4, [r6, #4]
 801041e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010420:	07db      	lsls	r3, r3, #31
 8010422:	d405      	bmi.n	8010430 <_ungetc_r+0x38>
 8010424:	89a3      	ldrh	r3, [r4, #12]
 8010426:	0598      	lsls	r0, r3, #22
 8010428:	d402      	bmi.n	8010430 <_ungetc_r+0x38>
 801042a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801042c:	f7fe fd77 	bl	800ef1e <__retarget_lock_acquire_recursive>
 8010430:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010434:	f023 0320 	bic.w	r3, r3, #32
 8010438:	0759      	lsls	r1, r3, #29
 801043a:	81a3      	strh	r3, [r4, #12]
 801043c:	b29a      	uxth	r2, r3
 801043e:	d42d      	bmi.n	801049c <_ungetc_r+0xa4>
 8010440:	06d3      	lsls	r3, r2, #27
 8010442:	d413      	bmi.n	801046c <_ungetc_r+0x74>
 8010444:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010446:	07dd      	lsls	r5, r3, #31
 8010448:	d4dc      	bmi.n	8010404 <_ungetc_r+0xc>
 801044a:	f412 7f00 	tst.w	r2, #512	; 0x200
 801044e:	d1d9      	bne.n	8010404 <_ungetc_r+0xc>
 8010450:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010452:	f7fe fd65 	bl	800ef20 <__retarget_lock_release_recursive>
 8010456:	e7d5      	b.n	8010404 <_ungetc_r+0xc>
 8010458:	4b31      	ldr	r3, [pc, #196]	; (8010520 <_ungetc_r+0x128>)
 801045a:	429c      	cmp	r4, r3
 801045c:	d101      	bne.n	8010462 <_ungetc_r+0x6a>
 801045e:	68b4      	ldr	r4, [r6, #8]
 8010460:	e7dd      	b.n	801041e <_ungetc_r+0x26>
 8010462:	4b30      	ldr	r3, [pc, #192]	; (8010524 <_ungetc_r+0x12c>)
 8010464:	429c      	cmp	r4, r3
 8010466:	bf08      	it	eq
 8010468:	68f4      	ldreq	r4, [r6, #12]
 801046a:	e7d8      	b.n	801041e <_ungetc_r+0x26>
 801046c:	0710      	lsls	r0, r2, #28
 801046e:	d511      	bpl.n	8010494 <_ungetc_r+0x9c>
 8010470:	4621      	mov	r1, r4
 8010472:	4630      	mov	r0, r6
 8010474:	f7fe fbf2 	bl	800ec5c <_fflush_r>
 8010478:	b130      	cbz	r0, 8010488 <_ungetc_r+0x90>
 801047a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801047c:	07d9      	lsls	r1, r3, #31
 801047e:	d4c1      	bmi.n	8010404 <_ungetc_r+0xc>
 8010480:	89a3      	ldrh	r3, [r4, #12]
 8010482:	f413 7f00 	tst.w	r3, #512	; 0x200
 8010486:	e7e2      	b.n	801044e <_ungetc_r+0x56>
 8010488:	89a3      	ldrh	r3, [r4, #12]
 801048a:	60a0      	str	r0, [r4, #8]
 801048c:	f023 0308 	bic.w	r3, r3, #8
 8010490:	81a3      	strh	r3, [r4, #12]
 8010492:	61a0      	str	r0, [r4, #24]
 8010494:	89a3      	ldrh	r3, [r4, #12]
 8010496:	f043 0304 	orr.w	r3, r3, #4
 801049a:	81a3      	strh	r3, [r4, #12]
 801049c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801049e:	6862      	ldr	r2, [r4, #4]
 80104a0:	b2ed      	uxtb	r5, r5
 80104a2:	b1d3      	cbz	r3, 80104da <_ungetc_r+0xe2>
 80104a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80104a6:	4293      	cmp	r3, r2
 80104a8:	dc05      	bgt.n	80104b6 <_ungetc_r+0xbe>
 80104aa:	4621      	mov	r1, r4
 80104ac:	4630      	mov	r0, r6
 80104ae:	f7ff ff69 	bl	8010384 <__submore>
 80104b2:	2800      	cmp	r0, #0
 80104b4:	d1e1      	bne.n	801047a <_ungetc_r+0x82>
 80104b6:	6823      	ldr	r3, [r4, #0]
 80104b8:	1e5a      	subs	r2, r3, #1
 80104ba:	6022      	str	r2, [r4, #0]
 80104bc:	f803 5c01 	strb.w	r5, [r3, #-1]
 80104c0:	6863      	ldr	r3, [r4, #4]
 80104c2:	3301      	adds	r3, #1
 80104c4:	6063      	str	r3, [r4, #4]
 80104c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80104c8:	07da      	lsls	r2, r3, #31
 80104ca:	d49d      	bmi.n	8010408 <_ungetc_r+0x10>
 80104cc:	89a3      	ldrh	r3, [r4, #12]
 80104ce:	059b      	lsls	r3, r3, #22
 80104d0:	d49a      	bmi.n	8010408 <_ungetc_r+0x10>
 80104d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80104d4:	f7fe fd24 	bl	800ef20 <__retarget_lock_release_recursive>
 80104d8:	e796      	b.n	8010408 <_ungetc_r+0x10>
 80104da:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80104dc:	6920      	ldr	r0, [r4, #16]
 80104de:	6823      	ldr	r3, [r4, #0]
 80104e0:	f001 0101 	and.w	r1, r1, #1
 80104e4:	b160      	cbz	r0, 8010500 <_ungetc_r+0x108>
 80104e6:	4298      	cmp	r0, r3
 80104e8:	d20a      	bcs.n	8010500 <_ungetc_r+0x108>
 80104ea:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 80104ee:	42a8      	cmp	r0, r5
 80104f0:	d106      	bne.n	8010500 <_ungetc_r+0x108>
 80104f2:	3b01      	subs	r3, #1
 80104f4:	3201      	adds	r2, #1
 80104f6:	6023      	str	r3, [r4, #0]
 80104f8:	6062      	str	r2, [r4, #4]
 80104fa:	2900      	cmp	r1, #0
 80104fc:	d184      	bne.n	8010408 <_ungetc_r+0x10>
 80104fe:	e7e5      	b.n	80104cc <_ungetc_r+0xd4>
 8010500:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8010504:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010508:	6363      	str	r3, [r4, #52]	; 0x34
 801050a:	2303      	movs	r3, #3
 801050c:	63a3      	str	r3, [r4, #56]	; 0x38
 801050e:	4623      	mov	r3, r4
 8010510:	f803 5f46 	strb.w	r5, [r3, #70]!
 8010514:	6023      	str	r3, [r4, #0]
 8010516:	2301      	movs	r3, #1
 8010518:	6063      	str	r3, [r4, #4]
 801051a:	e7ee      	b.n	80104fa <_ungetc_r+0x102>
 801051c:	080110c4 	.word	0x080110c4
 8010520:	080110e4 	.word	0x080110e4
 8010524:	080110a4 	.word	0x080110a4

08010528 <_write_r>:
 8010528:	b538      	push	{r3, r4, r5, lr}
 801052a:	4d07      	ldr	r5, [pc, #28]	; (8010548 <_write_r+0x20>)
 801052c:	4604      	mov	r4, r0
 801052e:	4608      	mov	r0, r1
 8010530:	4611      	mov	r1, r2
 8010532:	2200      	movs	r2, #0
 8010534:	602a      	str	r2, [r5, #0]
 8010536:	461a      	mov	r2, r3
 8010538:	f7f1 f878 	bl	800162c <_write>
 801053c:	1c43      	adds	r3, r0, #1
 801053e:	d102      	bne.n	8010546 <_write_r+0x1e>
 8010540:	682b      	ldr	r3, [r5, #0]
 8010542:	b103      	cbz	r3, 8010546 <_write_r+0x1e>
 8010544:	6023      	str	r3, [r4, #0]
 8010546:	bd38      	pop	{r3, r4, r5, pc}
 8010548:	20004740 	.word	0x20004740

0801054c <_close_r>:
 801054c:	b538      	push	{r3, r4, r5, lr}
 801054e:	4d06      	ldr	r5, [pc, #24]	; (8010568 <_close_r+0x1c>)
 8010550:	2300      	movs	r3, #0
 8010552:	4604      	mov	r4, r0
 8010554:	4608      	mov	r0, r1
 8010556:	602b      	str	r3, [r5, #0]
 8010558:	f7f1 f894 	bl	8001684 <_close>
 801055c:	1c43      	adds	r3, r0, #1
 801055e:	d102      	bne.n	8010566 <_close_r+0x1a>
 8010560:	682b      	ldr	r3, [r5, #0]
 8010562:	b103      	cbz	r3, 8010566 <_close_r+0x1a>
 8010564:	6023      	str	r3, [r4, #0]
 8010566:	bd38      	pop	{r3, r4, r5, pc}
 8010568:	20004740 	.word	0x20004740

0801056c <_fstat_r>:
 801056c:	b538      	push	{r3, r4, r5, lr}
 801056e:	4d07      	ldr	r5, [pc, #28]	; (801058c <_fstat_r+0x20>)
 8010570:	2300      	movs	r3, #0
 8010572:	4604      	mov	r4, r0
 8010574:	4608      	mov	r0, r1
 8010576:	4611      	mov	r1, r2
 8010578:	602b      	str	r3, [r5, #0]
 801057a:	f7f1 f8d3 	bl	8001724 <_fstat>
 801057e:	1c43      	adds	r3, r0, #1
 8010580:	d102      	bne.n	8010588 <_fstat_r+0x1c>
 8010582:	682b      	ldr	r3, [r5, #0]
 8010584:	b103      	cbz	r3, 8010588 <_fstat_r+0x1c>
 8010586:	6023      	str	r3, [r4, #0]
 8010588:	bd38      	pop	{r3, r4, r5, pc}
 801058a:	bf00      	nop
 801058c:	20004740 	.word	0x20004740

08010590 <_isatty_r>:
 8010590:	b538      	push	{r3, r4, r5, lr}
 8010592:	4d06      	ldr	r5, [pc, #24]	; (80105ac <_isatty_r+0x1c>)
 8010594:	2300      	movs	r3, #0
 8010596:	4604      	mov	r4, r0
 8010598:	4608      	mov	r0, r1
 801059a:	602b      	str	r3, [r5, #0]
 801059c:	f7f1 f830 	bl	8001600 <_isatty>
 80105a0:	1c43      	adds	r3, r0, #1
 80105a2:	d102      	bne.n	80105aa <_isatty_r+0x1a>
 80105a4:	682b      	ldr	r3, [r5, #0]
 80105a6:	b103      	cbz	r3, 80105aa <_isatty_r+0x1a>
 80105a8:	6023      	str	r3, [r4, #0]
 80105aa:	bd38      	pop	{r3, r4, r5, pc}
 80105ac:	20004740 	.word	0x20004740

080105b0 <_lseek_r>:
 80105b0:	b538      	push	{r3, r4, r5, lr}
 80105b2:	4d07      	ldr	r5, [pc, #28]	; (80105d0 <_lseek_r+0x20>)
 80105b4:	4604      	mov	r4, r0
 80105b6:	4608      	mov	r0, r1
 80105b8:	4611      	mov	r1, r2
 80105ba:	2200      	movs	r2, #0
 80105bc:	602a      	str	r2, [r5, #0]
 80105be:	461a      	mov	r2, r3
 80105c0:	f7f1 f877 	bl	80016b2 <_lseek>
 80105c4:	1c43      	adds	r3, r0, #1
 80105c6:	d102      	bne.n	80105ce <_lseek_r+0x1e>
 80105c8:	682b      	ldr	r3, [r5, #0]
 80105ca:	b103      	cbz	r3, 80105ce <_lseek_r+0x1e>
 80105cc:	6023      	str	r3, [r4, #0]
 80105ce:	bd38      	pop	{r3, r4, r5, pc}
 80105d0:	20004740 	.word	0x20004740

080105d4 <memmove>:
 80105d4:	4288      	cmp	r0, r1
 80105d6:	b510      	push	{r4, lr}
 80105d8:	eb01 0402 	add.w	r4, r1, r2
 80105dc:	d902      	bls.n	80105e4 <memmove+0x10>
 80105de:	4284      	cmp	r4, r0
 80105e0:	4623      	mov	r3, r4
 80105e2:	d807      	bhi.n	80105f4 <memmove+0x20>
 80105e4:	1e43      	subs	r3, r0, #1
 80105e6:	42a1      	cmp	r1, r4
 80105e8:	d008      	beq.n	80105fc <memmove+0x28>
 80105ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80105ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80105f2:	e7f8      	b.n	80105e6 <memmove+0x12>
 80105f4:	4402      	add	r2, r0
 80105f6:	4601      	mov	r1, r0
 80105f8:	428a      	cmp	r2, r1
 80105fa:	d100      	bne.n	80105fe <memmove+0x2a>
 80105fc:	bd10      	pop	{r4, pc}
 80105fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010602:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010606:	e7f7      	b.n	80105f8 <memmove+0x24>

08010608 <_realloc_r>:
 8010608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801060a:	4607      	mov	r7, r0
 801060c:	4614      	mov	r4, r2
 801060e:	460e      	mov	r6, r1
 8010610:	b921      	cbnz	r1, 801061c <_realloc_r+0x14>
 8010612:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010616:	4611      	mov	r1, r2
 8010618:	f7fd bfce 	b.w	800e5b8 <_malloc_r>
 801061c:	b922      	cbnz	r2, 8010628 <_realloc_r+0x20>
 801061e:	f7fd ff7b 	bl	800e518 <_free_r>
 8010622:	4625      	mov	r5, r4
 8010624:	4628      	mov	r0, r5
 8010626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010628:	f000 f826 	bl	8010678 <_malloc_usable_size_r>
 801062c:	42a0      	cmp	r0, r4
 801062e:	d20f      	bcs.n	8010650 <_realloc_r+0x48>
 8010630:	4621      	mov	r1, r4
 8010632:	4638      	mov	r0, r7
 8010634:	f7fd ffc0 	bl	800e5b8 <_malloc_r>
 8010638:	4605      	mov	r5, r0
 801063a:	2800      	cmp	r0, #0
 801063c:	d0f2      	beq.n	8010624 <_realloc_r+0x1c>
 801063e:	4631      	mov	r1, r6
 8010640:	4622      	mov	r2, r4
 8010642:	f7fd ff53 	bl	800e4ec <memcpy>
 8010646:	4631      	mov	r1, r6
 8010648:	4638      	mov	r0, r7
 801064a:	f7fd ff65 	bl	800e518 <_free_r>
 801064e:	e7e9      	b.n	8010624 <_realloc_r+0x1c>
 8010650:	4635      	mov	r5, r6
 8010652:	e7e7      	b.n	8010624 <_realloc_r+0x1c>

08010654 <_read_r>:
 8010654:	b538      	push	{r3, r4, r5, lr}
 8010656:	4d07      	ldr	r5, [pc, #28]	; (8010674 <_read_r+0x20>)
 8010658:	4604      	mov	r4, r0
 801065a:	4608      	mov	r0, r1
 801065c:	4611      	mov	r1, r2
 801065e:	2200      	movs	r2, #0
 8010660:	602a      	str	r2, [r5, #0]
 8010662:	461a      	mov	r2, r3
 8010664:	f7f1 f836 	bl	80016d4 <_read>
 8010668:	1c43      	adds	r3, r0, #1
 801066a:	d102      	bne.n	8010672 <_read_r+0x1e>
 801066c:	682b      	ldr	r3, [r5, #0]
 801066e:	b103      	cbz	r3, 8010672 <_read_r+0x1e>
 8010670:	6023      	str	r3, [r4, #0]
 8010672:	bd38      	pop	{r3, r4, r5, pc}
 8010674:	20004740 	.word	0x20004740

08010678 <_malloc_usable_size_r>:
 8010678:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801067c:	1f18      	subs	r0, r3, #4
 801067e:	2b00      	cmp	r3, #0
 8010680:	bfbc      	itt	lt
 8010682:	580b      	ldrlt	r3, [r1, r0]
 8010684:	18c0      	addlt	r0, r0, r3
 8010686:	4770      	bx	lr

08010688 <_init>:
 8010688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801068a:	bf00      	nop
 801068c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801068e:	bc08      	pop	{r3}
 8010690:	469e      	mov	lr, r3
 8010692:	4770      	bx	lr

08010694 <_fini>:
 8010694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010696:	bf00      	nop
 8010698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801069a:	bc08      	pop	{r3}
 801069c:	469e      	mov	lr, r3
 801069e:	4770      	bx	lr
